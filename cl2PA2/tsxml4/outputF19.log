scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ghamqdud/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            45 (27% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  24 (53%)
  Because of loop head:            7 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         14 (31%)
  Times precision was empty:       5 (11%)
  Times precision was {false}:     13 (29%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      27 (60%)
  Times result was 'false':        10 (22%)
Number of strengthen sat checks:   0
Number of coverage checks:         8
  BDD entailment checks:           6
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       14
Number of predicates discovered:          7
Number of abstraction locations:          5
Max number of predicates per location:    5
Avg number of predicates per location:    3
Total predicates per abstraction:         87
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 2.18
Number of irrelevant predicates:          13 (15%)
Number of preds handled by boolean abs:   74 (85%)
  Total number of models for allsat:      43
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.59

Time for post operator:                  0.064s
  Time for path formula creation:        0.063s
Time for strengthen operator:            0.001s
Time for prec operator:                  0.207s
  Time for abstraction:                  0.197s (Max:     0.022s, Count: 45)
    Boolean abstraction:                 0.052s
    Solving time:                        0.019s (Max:     0.008s)
    Model enumeration time:              0.005s
    Time for BDD construction:           0.011s (Max:     0.005s)
Time for merge operator:                 0.003s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.024s

Number of path formula cache hits:   120 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.062s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               261
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 297, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                          168 (count: 168, min: 1, max: 1, avg: 1.00) [1 x 168]

CPA algorithm statistics
------------------------
Number of iterations:            136
Max size of waitlist:            2
Average size of waitlist:        1
Number of computed successors:   151
Max successors for one state:    2
Number of times merged:          1
Number of times stopped:         2
Number of times breaked:         4

Total time for CPA algorithm:         0.432s (Max:     0.121s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.241s
  Time for transfer relation:         0.166s
  Time for merge operator:            0.004s
  Time for stop operator:             0.002s
  Time for adding to reached set:     0.006s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  26 (count: 4, min: 3, max: 10, avg: 6.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.056s
  Counterexample analysis:                             0.032s (Max:     0.011s, Calls: 4)
    Refinement sat check:                              0.015s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.011s
  Precision update:                                    0.005s
  ARG update:                                          0.002s

Length of refined path (in blocks):                      26 (count: 4, min: 3, max: 10, avg: 6.50)
Number of affected states:                               21 (count: 4, min: 2, max: 9, avg: 5.25)
Length (states) of path with itp 'true':                  1 (count: 4, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp non-trivial itp:        21 (count: 4, min: 2, max: 9, avg: 5.25)
Length (states) of path with itp 'false':                 0 (count: 4, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           7 (count: 4, min: 1, max: 3, avg: 1.75)
Equal non-trivial interpolants along paths:              10 (count: 4, min: 0, max: 6, avg: 2.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 47
Max. size of reached set after ref.:  14
Avg. size of reached set before ref.: 33.50
Avg. size of reached set after ref.:  10.25

Total time for CEGAR algorithm:       0.501s
Time for refinements:                 0.069s
Average time for refinement:          0.017s
Max time for refinement:              0.036s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          19
  Total lines:            19
  Line coverage:          1.000
  Visited conditions:     8
  Total conditions:       8
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     39
Number of CFA edges:             43
Number of relevant variables:    8
Number of functions:             2
Number of loops:                 1
Size of reached set:             47
  Number of reached locations:   21 (54%)
    Avg states per location:     2
    Max states per location:     4 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          45
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N28 (before lines 24-25), Function main called from node N9, stack depth 1 [2d710f1a], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.357s
  Time for loading CPAs:          0.792s
  Time for loading parser:        0.649s
  Time for CFA construction:      0.788s
    Time for parsing file(s):     0.307s
    Time for AST to CFA:          0.170s
    Time for CFA sanity check:    0.019s
    Time for post-processing:     0.136s
      Time for var class.:        0.050s
Time for Analysis:                0.502s
CPU time for analysis:            0.500s
Time for analyzing result:        0.000s
Total time for CPAchecker:        2.865s
Total CPU time for CPAchecker:    2.860s
Time for statistics:              0.071s

Time for Garbage Collector:       0.090s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 42MB (    40 MiB) max;     24MB (    23 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     21MB (    20 MiB) avg;     30MB (    28 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        31MB (    29 MiB) max;     23MB (    21 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   7992MB (  7622 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
