scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/nest-if3_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_rmmi2nhn/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            102 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  34 (33%)
  Because of loop head:            50 (49%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18 (18%)
  Times precision was empty:       7 (7%)
  Times precision was {false}:     15 (15%)
  Times result was cached:         3 (3%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      77 (75%)
  Times result was 'false':        16 (16%)
Number of strengthen sat checks:   0
Number of coverage checks:         153
  BDD entailment checks:           107
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       10
Number of predicates discovered:          16
Number of abstraction locations:          5
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         389
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 4.23
Number of irrelevant predicates:          35 (9%)
Number of preds handled by boolean abs:   351 (90%)
  Total number of models for allsat:      376
  Max number of models for allsat:        27
  Avg number of models for allsat:        4.88

Time for post operator:                  0.144s
  Time for path formula creation:        0.138s
Time for strengthen operator:            0.008s
Time for prec operator:                  0.680s
  Time for abstraction:                  0.667s (Max:     0.027s, Count: 102)
    Boolean abstraction:                 0.307s
    Solving time:                        0.145s (Max:     0.013s)
    Model enumeration time:              0.049s
    Time for BDD construction:           0.052s (Max:     0.009s)
Time for merge operator:                 0.032s
Time for coverage check:                 0.012s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.194s

Number of path formula cache hits:   369 (68%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.110s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1358
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 908, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.022s
Automaton transfers with branching:                0
Automaton transfer successors:                          470 (count: 470, min: 1, max: 1, avg: 1.00) [1 x 470]

CPA algorithm statistics
------------------------
Number of iterations:            376
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   438
Max successors for one state:    2
Number of times merged:          23
Number of times stopped:         42
Number of times breaked:         5

Total time for CPA algorithm:         1.126s (Max:     0.360s)
  Time for choose from waitlist:      0.010s
  Time for precision adjustment:      0.762s
  Time for transfer relation:         0.237s
  Time for merge operator:            0.047s
  Time for stop operator:             0.017s
  Time for adding to reached set:     0.028s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  38 (count: 5, min: 4, max: 12, avg: 7.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.153s
  Counterexample analysis:                             0.053s (Max:     0.020s, Calls: 5)
    Refinement sat check:                              0.023s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.077s
  Precision update:                                    0.003s
  ARG update:                                          0.008s

Length of refined path (in blocks):                      37 (count: 5, min: 4, max: 12, avg: 7.40)
Number of affected states:                               31 (count: 5, min: 3, max: 11, avg: 6.20)
Length (states) of path with itp 'true':                  1 (count: 5, min: 0, max: 1, avg: 0.20)
Length (states) of path with itp non-trivial itp:        31 (count: 5, min: 3, max: 11, avg: 6.20)
Length (states) of path with itp 'false':                 1 (count: 5, min: 0, max: 1, avg: 0.20)
Different non-trivial interpolants along paths:          15 (count: 5, min: 2, max: 5, avg: 3.00)
Equal non-trivial interpolants along paths:              11 (count: 5, min: 0, max: 7, avg: 2.20)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 126
Max. size of reached set after ref.:  16
Avg. size of reached set before ref.: 64.60
Avg. size of reached set after ref.:  12.00

Total time for CEGAR algorithm:       1.291s
Time for refinements:                 0.164s
Average time for refinement:          0.032s
Max time for refinement:              0.102s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          14
  Total lines:            14
  Line coverage:          1.000
  Visited conditions:     14
  Total conditions:       14
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     44
Number of CFA edges:             50
Number of relevant variables:    7
Number of functions:             2
Number of loops:                 2
Size of reached set:             118
  Number of reached locations:   31 (70%)
    Avg states per location:     3
    Max states per location:     6 (at node N8)
  Number of reached functions:   2 (100%)
  Number of partitions:          108
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N32 (before line 18), Function main called from node N9, stack depth 1 [59505b48], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.391s
  Time for loading CPAs:          0.698s
  Time for loading parser:        0.735s
  Time for CFA construction:      0.816s
    Time for parsing file(s):     0.348s
    Time for AST to CFA:          0.175s
    Time for CFA sanity check:    0.023s
    Time for post-processing:     0.118s
      Time for var class.:        0.038s
Time for Analysis:                1.292s
CPU time for analysis:            1.290s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.687s
Total CPU time for CPAchecker:    3.680s
Time for statistics:              0.071s

Time for Garbage Collector:       0.084s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 42MB (    40 MiB) max;     27MB (    26 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             29MB (    27 MiB) max;     23MB (    21 MiB) avg;     31MB (    29 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        32MB (    30 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8004MB (  7633 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
