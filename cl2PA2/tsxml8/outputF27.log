scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/nested9_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_6h62jv0t/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            258 (31% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  61 (24%)
  Because of loop head:            166 (64%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         31 (12%)
  Times precision was empty:       11 (4%)
  Times precision was {false}:     29 (11%)
  Times result was cached:         14 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      204 (79%)
  Times result was 'false':        72 (28%)
Number of strengthen sat checks:   0
Number of coverage checks:         321
  BDD entailment checks:           309
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       17
Number of predicates discovered:          24
Number of abstraction locations:          6
Max number of predicates per location:    14
Avg number of predicates per location:    9
Total predicates per abstraction:         1645
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 7.06
Number of irrelevant predicates:          184 (11%)
Number of preds handled by boolean abs:   1369 (83%)
  Total number of models for allsat:      636
  Max number of models for allsat:        28
  Avg number of models for allsat:        3.12

Time for post operator:                  0.151s
  Time for path formula creation:        0.147s
Time for strengthen operator:            0.017s
Time for prec operator:                  1.492s
  Time for abstraction:                  1.444s (Max:     0.026s, Count: 258)
    Boolean abstraction:                 0.679s
    Solving time:                        0.273s (Max:     0.013s)
    Model enumeration time:              0.133s
    Time for BDD construction:           0.091s (Max:     0.012s)
Time for merge operator:                 0.058s
Time for coverage check:                 0.019s
  Time for BDD entailment checks:        0.019s
Total time for SMT solver (w/o itp):     0.406s

Number of path formula cache hits:   693 (72%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.143s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               4683
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2728 (count: 3010, min: 0, max: 2728, avg: 0.91)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.067s
Automaton transfers with branching:                0
Automaton transfer successors:                          844 (count: 844, min: 1, max: 1, avg: 1.00) [1 x 844]

CPA algorithm statistics
------------------------
Number of iterations:            716
Max size of waitlist:            4
Average size of waitlist:        1
Number of computed successors:   828
Max successors for one state:    2
Number of times merged:          6
Number of times stopped:         30
Number of times breaked:         9

Total time for CPA algorithm:         2.126s (Max:     0.350s)
  Time for choose from waitlist:      0.007s
  Time for precision adjustment:      1.570s
  Time for transfer relation:         0.341s
  Time for merge operator:            0.071s
  Time for stop operator:             0.042s
  Time for adding to reached set:     0.025s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                 130 (count: 9, min: 5, max: 28, avg: 14.44)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.198s
  Counterexample analysis:                             0.114s (Max:     0.029s, Calls: 9)
    Refinement sat check:                              0.041s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.040s
  Precision update:                                    0.007s
  ARG update:                                          0.022s

Length of refined path (in blocks):                     121 (count: 9, min: 3, max: 28, avg: 13.44)
Number of affected states:                              102 (count: 9, min: 2, max: 21, avg: 11.33)
Length (states) of path with itp 'true':                 10 (count: 9, min: 0, max: 10, avg: 1.11)
Length (states) of path with itp non-trivial itp:       102 (count: 9, min: 2, max: 21, avg: 11.33)
Length (states) of path with itp 'false':                 5 (count: 9, min: 0, max: 1, avg: 0.56)
Different non-trivial interpolants along paths:          34 (count: 9, min: 1, max: 6, avg: 3.78)
Equal non-trivial interpolants along paths:              59 (count: 9, min: 0, max: 15, avg: 6.56)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 138
Max. size of reached set after ref.:  66
Avg. size of reached set before ref.: 85.33
Avg. size of reached set after ref.:  22.44

Total time for CEGAR algorithm:       2.349s
Time for refinements:                 0.222s
Average time for refinement:          0.024s
Max time for refinement:              0.049s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          18
  Total lines:            18
  Line coverage:          1.000
  Visited conditions:     22
  Total conditions:       22
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     55
Number of CFA edges:             65
Number of relevant variables:    8
Number of functions:             2
Number of loops:                 3
Size of reached set:             161
  Number of reached locations:   38 (69%)
    Avg states per location:     4
    Max states per location:     9 (at node N43)
  Number of reached functions:   2 (100%)
  Number of partitions:          140
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N47 (before line 22), Function main called from node N9, stack depth 1 [70e9c95d], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.494s
  Time for loading CPAs:          0.789s
  Time for loading parser:        0.650s
  Time for CFA construction:      0.936s
    Time for parsing file(s):     0.385s
    Time for AST to CFA:          0.163s
    Time for CFA sanity check:    0.029s
    Time for post-processing:     0.201s
      Time for var class.:        0.067s
Time for Analysis:                2.349s
CPU time for analysis:            2.340s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.849s
Total CPU time for CPAchecker:    4.850s
Time for statistics:              0.072s

Time for Garbage Collector:       0.099s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     30MB (    28 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             31MB (    29 MiB) max;     24MB (    23 MiB) avg;     32MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        33MB (    32 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8028MB (  7656 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
