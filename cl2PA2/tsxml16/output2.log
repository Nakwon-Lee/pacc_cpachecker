scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/large_const_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3jea41b9/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            48 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  13 (27%)
  Because of loop head:            29 (60%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (13%)
  Times precision was empty:       7 (15%)
  Times precision was {false}:     6 (13%)
  Times result was cached:         2 (4%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      33 (69%)
  Times result was 'false':        8 (17%)
Number of strengthen sat checks:   0
Number of coverage checks:         104
  BDD entailment checks:           36
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       14
Number of predicates discovered:          15
Number of abstraction locations:          5
Max number of predicates per location:    12
Avg number of predicates per location:    4
Total predicates per abstraction:         171
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 4.38
Number of irrelevant predicates:          19 (11%)
Number of preds handled by boolean abs:   150 (88%)
  Total number of models for allsat:      322
  Max number of models for allsat:        64
  Avg number of models for allsat:        9.76

Time for post operator:                  0.118s
  Time for path formula creation:        0.113s
Time for strengthen operator:            0.013s
Time for prec operator:                  0.366s
  Time for abstraction:                  0.353s (Max:     0.039s, Count: 48)
    Boolean abstraction:                 0.174s
    Solving time:                        0.061s (Max:     0.016s)
    Model enumeration time:              0.030s
    Time for BDD construction:           0.048s (Max:     0.013s)
Time for merge operator:                 0.009s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.091s

Number of path formula cache hits:   232 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.104s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1009
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 402, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                          384 (count: 384, min: 1, max: 1, avg: 1.00) [1 x 384]

CPA algorithm statistics
------------------------
Number of iterations:            275
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   326
Max successors for one state:    2
Number of times merged:          34
Number of times stopped:         39
Number of times breaked:         4

Total time for CPA algorithm:         0.699s (Max:     0.281s)
  Time for choose from waitlist:      0.005s
  Time for precision adjustment:      0.422s
  Time for transfer relation:         0.208s
  Time for merge operator:            0.012s
  Time for stop operator:             0.015s
  Time for adding to reached set:     0.019s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  24 (count: 4, min: 4, max: 8, avg: 6.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.086s
  Counterexample analysis:                             0.037s (Max:     0.013s, Calls: 4)
    Refinement sat check:                              0.013s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.029s
  Precision update:                                    0.003s
  ARG update:                                          0.009s

Length of refined path (in blocks):                      18 (count: 4, min: 3, max: 7, avg: 4.50)
Number of affected states:                               13 (count: 4, min: 2, max: 5, avg: 3.25)
Length (states) of path with itp 'true':                  1 (count: 4, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp non-trivial itp:        13 (count: 4, min: 2, max: 5, avg: 3.25)
Length (states) of path with itp 'false':                 3 (count: 4, min: 0, max: 1, avg: 0.75)
Different non-trivial interpolants along paths:           6 (count: 4, min: 1, max: 2, avg: 1.50)
Equal non-trivial interpolants along paths:               3 (count: 4, min: 0, max: 2, avg: 0.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 112
Max. size of reached set after ref.:  29
Avg. size of reached set before ref.: 67.75
Avg. size of reached set after ref.:  13.25

Total time for CEGAR algorithm:       0.850s
Time for refinements:                 0.145s
Average time for refinement:          0.036s
Max time for refinement:              0.104s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          27
  Total lines:            27
  Line coverage:          1.000
  Visited conditions:     18
  Total conditions:       18
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     59
Number of CFA edges:             67
Number of relevant variables:    10
Number of functions:             2
Number of loops:                 2
Size of reached set:             62
  Number of reached locations:   35 (59%)
    Avg states per location:     1
    Max states per location:     6 (at node N8)
  Number of reached functions:   2 (100%)
  Number of partitions:          59
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N47 (before line 32), Function main called from node N9, stack depth 1 [4d5650ae], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.311s
  Time for loading CPAs:          0.693s
  Time for loading parser:        0.738s
  Time for CFA construction:      0.732s
    Time for parsing file(s):     0.312s
    Time for AST to CFA:          0.137s
    Time for CFA sanity check:    0.026s
    Time for post-processing:     0.127s
      Time for var class.:        0.041s
Time for Analysis:                0.850s
CPU time for analysis:            0.850s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.165s
Total CPU time for CPAchecker:    3.160s
Time for statistics:              0.077s

Time for Garbage Collector:       0.086s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 44MB (    42 MiB) max;     26MB (    25 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     22MB (    21 MiB) avg;     30MB (    29 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        31MB (    30 MiB) max;     23MB (    22 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   7989MB (  7619 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
