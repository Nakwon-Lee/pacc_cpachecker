scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--isdn--mISDN--mISDN_dsp.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_rizejic8/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 14198: Function pointer *(elem->new) with type void *(*)(const char *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14304: Function pointer *(entry->elem->process_rx) with type void (*)(void *, unsigned char *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14267: Function pointer *(entry->elem->process_tx) with type void (*)(void *, unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7611: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7705: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mISDN_unregister_Bprotocol to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11065: Ignoring function call through function pointer *(dsp->ch.recv): tmp = (*(dsp->ch.recv))(dsp->ch.peer, nskb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function try_module_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            4981 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4321 (87%)
  Because of loop head:            639 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         21 (0%)
  Times precision was empty:       2437 (49%)
  Times precision was {false}:     78 (2%)
  Times result was cached:         2251 (45%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      215 (4%)
  Times result was 'false':        138 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         4196
  BDD entailment checks:           932
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       102
Number of predicates discovered:          3
Number of abstraction locations:          36
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         4434
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 15.13
Number of irrelevant predicates:          1155 (26%)
Number of preds handled by boolean abs:   285 (6%)
  Total number of models for allsat:      221
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  4.196s
  Time for path formula creation:        4.132s
Time for strengthen operator:            0.101s
Time for prec operator:                  6.090s
  Time for abstraction:                  5.803s (Max:     0.716s, Count: 4981)
    Boolean abstraction:                 2.481s
    Solving time:                        3.196s (Max:     0.533s)
    Model enumeration time:              0.071s
    Time for BDD construction:           0.030s (Max:     0.008s)
Time for merge operator:                 0.328s
Time for coverage check:                 0.032s
  Time for BDD entailment checks:        0.028s
Total time for SMT solver (w/o itp):     3.267s

Number of path formula cache hits:   26627 (80%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.813s

Total number of created targets for pointer analysis: 20046
   Number of created targets for uf: *signed_int is 62
   Number of created targets for uf: *unsigned_char is 641
   Number of created targets for uf: *(struct_mISDNchannel)* is 2
   Number of created targets for uf: *(struct_list_head)* is 23
   Number of created targets for uf: *(unsigned_char)* is 3601
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[unsigned_long_int],_VarArgs:_false)* is 2
   Number of created targets for uf: *unsigned_int is 249
   Number of created targets for uf: *signed_short_int is 8
   Number of created targets for uf: *unsigned_long_int is 37


Number of BDD nodes:                               207
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         447 (count: 5067, min: 0, max: 73, avg: 0.09)
Time for BDD node cleanup:                             0.010s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.206s
Automaton transfers with branching:                0
Automaton transfer successors:                        28208 (count: 28208, min: 1, max: 1, avg: 1.00) [1 x 28208]

CPA algorithm statistics
------------------------
Number of iterations:            18141
Max size of waitlist:            31
Average size of waitlist:        13
Number of computed successors:   20969
Max successors for one state:    2
Number of times merged:          1632
Number of times stopped:         2329
Number of times breaked:         21

Total time for CPA algorithm:        13.199s (Max:     2.178s)
  Time for choose from waitlist:      0.071s
  Time for precision adjustment:      6.510s
  Time for transfer relation:         5.412s
  Time for merge operator:            0.514s
  Time for stop operator:             0.154s
  Time for adding to reached set:     0.181s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   21
Avg. length of target path (in blocks):                 400 (count: 21, min: 8, max: 35, avg: 19.05)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   9.513s
  Counterexample analysis:                             9.327s (Max:     0.996s, Calls: 21)
    Refinement sat check:                              8.876s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.008s
  ARG update:                                          0.144s

Length of refined path (in blocks):                     334 (count: 20, min: 4, max: 34, avg: 16.70)
Number of affected states:                              298 (count: 20, min: 1, max: 33, avg: 14.90)
Length (states) of path with itp 'true':                 16 (count: 20, min: 0, max: 2, avg: 0.80)
Length (states) of path with itp non-trivial itp:       298 (count: 20, min: 1, max: 33, avg: 14.90)
Length (states) of path with itp 'false':                20 (count: 20, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 20, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             278 (count: 20, min: 0, max: 32, avg: 13.90)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     20
Number of failed refinements:         0
Max. size of reached set before ref.: 1565
Max. size of reached set after ref.:  13
Avg. size of reached set before ref.: 887.76
Avg. size of reached set after ref.:  7.00

Total time for CEGAR algorithm:      22.835s
Time for refinements:                 9.619s
Average time for refinement:          0.458s
Max time for refinement:              1.001s

Code Coverage
-----------------------------
  Function coverage:      0.236
  Visited lines:          1651
  Total lines:            5562
  Line coverage:          0.297
  Visited conditions:     188
  Total conditions:       1694
  Condition coverage:     0.111

CPAchecker general statistics
-----------------------------
Number of program locations:     7576
Number of CFA edges:             8592
Number of relevant variables:    921
Number of functions:             212
Number of loops:                 102
Size of reached set:             1565
  Number of reached locations:   598 (8%)
    Avg states per location:     2
    Max states per location:     16 (at node N3966)
  Number of reached functions:   50 (24%)
  Number of partitions:          1558
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1585 (before line 7731), Function main called from node N1568, stack depth 1 [3f06ebe0], stack [main]])
  Number of target states:       1
  Size of final wait list        28

Time for analysis setup:          7.670s
  Time for loading CPAs:          1.104s
  Time for loading parser:        0.713s
  Time for CFA construction:      5.701s
    Time for parsing file(s):     1.321s
    Time for AST to CFA:          2.097s
    Time for CFA sanity check:    0.541s
    Time for post-processing:     1.536s
      Time for var class.:        0.736s
Time for Analysis:               22.835s
CPU time for analysis:           22.840s
Total time for CPAchecker:       30.510s
Total CPU time for CPAchecker:   30.490s
Time for statistics:              0.133s

Time for Garbage Collector:       0.430s (in 35 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 73MB (    70 MiB) max;     51MB (    48 MiB) avg;     77MB (    74 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8070MB (  7696 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
