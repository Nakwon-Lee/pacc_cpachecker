scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--scsi--megaraid--megaraid_sas.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u_hqy3oq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 12241: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12244: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12247: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx");
      goto ldv_39964;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx");
      goto ldv_39964;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx");
      goto ldv_39964;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx");
      goto ldv_39964;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (sense_ioc_ptr): "ebx");
      goto ldv_39964;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 12280-12281: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 12284-12285: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 12288-12289: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx");
    goto ldv_39976;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx");
    goto ldv_39976;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx");
    goto ldv_39976;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx");
    goto ldv_39976;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (& ioc->sgl[i].iov_base): "ebx");
    goto ldv_39976;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16112-16127: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16114: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16117: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16119: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16123: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16132-16147: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16134: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16137: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16139: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16143: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 16154: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16157: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16163: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16172-16187: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16174: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16177: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16179: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16183: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_38963;
    default:
    __bad_percpu_size();
    }
    ldv_38963:
    pscr_ret__ = pfo_ret__;
    goto ldv_38969;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_38973;
    default:
    __bad_percpu_size();
    }
    ldv_38973:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_38969;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_38982;
    default:
    __bad_percpu_size();
    }
    ldv_38982:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_38969;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_38991;
    default:
    __bad_percpu_size();
    }
    ldv_38991:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_38969;
    default:
    __bad_size_call_parameter();
    goto ldv_38969;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16314-16329: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16316: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16319: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16321: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16325: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16334-16349: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16336: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16339: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16341: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16345: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 16356: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16359: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16365: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 16374-16389: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 16376: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16379: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16381: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 16385: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
      goto ldv_39025;
      default:
      __bad_percpu_size();
      }
      ldv_39025:
      pscr_ret__ = pfo_ret__;
      goto ldv_39031;
      case 2UL: ;
      switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
      goto ldv_39035;
      default:
      __bad_percpu_size();
      }
      ldv_39035:
      pscr_ret__ = pfo_ret_____0;
      goto ldv_39031;
      case 4UL: ;
      switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
      goto ldv_39044;
      default:
      __bad_percpu_size();
      }
      ldv_39044:
      pscr_ret__ = pfo_ret_____1;
      goto ldv_39031;
      case 8UL: ;
      switch (4UL) {
      case 1UL:
      __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 2UL:
      __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 4UL:
      __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      case 8UL:
      __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
      goto ldv_39053;
      default:
      __bad_percpu_size();
      }
      ldv_39053:
      pscr_ret__ = pfo_ret_____2;
      goto ldv_39031;
      default:
      __bad_size_call_parameter();
      goto ldv_39031;
      } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 16667: Function pointer *(cmd_fusion->scmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6557: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6589: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9192: Function pointer *(cmd->scmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9154: Function pointer *(cmd->scmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8191: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8154: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8145: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17167: Function pointer *(cmd_fusion->scmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8765: Function pointer *(reset_cmd->scmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6843: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13253: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13255: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13263: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(80UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13273: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13275: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13277: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13301: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(80UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13317: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___31 = ldv_zalloc(80UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13321: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___33 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13323: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___34 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13325: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___35 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13329: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___37 = ldv_zalloc(80UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13343: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___44 = ldv_zalloc(496UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13345: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___45 = ldv_zalloc(3584UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13349: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___47 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13351: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___48 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_14 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_14 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_9 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_11 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_11 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_cmd_get_serial to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fasync_helper to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6843: Ignoring function call through function pointer *(p->_qproc): (*(p->_qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function scsi_adjust_queue_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6983: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, cmd->frame_phys_addr, 0U, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13122: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function blk_queue_rq_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11695: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_affinity_hint to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12991: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6682: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10739: Ignoring function call through function pointer *(instance->instancet->issue_dcmd): (*(instance->instancet->issue_dcmd))(instance, cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 16894-16895: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, (dma_addr_t )(req_desc->ldv_37409.u.low), req_desc->ldv_37409.u.high, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8154: Ignoring call via function pointer megasas_queue_command_lck::done for which no suitable target was found in line: (*done)(scmd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8154: Ignoring function call through function pointer *done: (*done)(scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8145: Ignoring call via function pointer megasas_queue_command_lck::done for which no suitable target was found in line: (*done)(scmd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8145: Ignoring function call through function pointer *done: (*done)(scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8182: Ignoring function call through function pointer *(instance->instancet->build_and_issue_cmd): tmp___0 = (*(instance->instancet->build_and_issue_cmd))(instance, scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8191: Ignoring call via function pointer megasas_queue_command_lck::done for which no suitable target was found in line: (*done)(scmd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8191: Ignoring function call through function pointer *done: (*done)(scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function cancel_delayed_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11330: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_dma_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 8114-8115: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, cmd->frame_phys_addr, (cmd->ldv_38649.frame_count) - 1U, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7510: Ignoring function call through function pointer *(instance->instancet->issue_dcmd): (*(instance->instancet->issue_dcmd))(instance, cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function compat_alloc_user_space to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clear_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function copy_in_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7613: Ignoring function call through function pointer *(instance->instancet->issue_dcmd): (*(instance->instancet->issue_dcmd))(instance, cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function scsi_dma_unmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16667: Ignoring function call through function pointer *(cmd_fusion->scmd->scsi_done): (*(cmd_fusion->scmd->scsi_done))(cmd_fusion->scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 16591-16592: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, (dma_addr_t )(req_desc->ldv_37409.u.low), req_desc->ldv_37409.u.high, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10252: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): tmp = (*(instance->instancet->read_fw_status_reg))(reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10256: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): tmp___0 = (*(instance->instancet->read_fw_status_reg))(reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9154: Ignoring function call through function pointer *(cmd->scmd->scsi_done): (*(cmd->scmd->scsi_done))(cmd->scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9192: Ignoring function call through function pointer *(cmd->scmd->scsi_done): (*(cmd->scmd->scsi_done))(cmd->scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kill_fasync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15553: Ignoring function call through function pointer *(instance->instancet->issue_dcmd): (*(instance->instancet->issue_dcmd))(instance, cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function scsi_remove_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11604: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6589: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_selected_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_host_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9448: Ignoring function call through function pointer *(instance->instancet->check_reset): tmp = (*(instance->instancet->check_reset))(instance, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9455: Ignoring function call through function pointer *(instance->instancet->clear_intr): tmp___0 = (*(instance->instancet->clear_intr))(instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9468: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): tmp___1 = (*(instance->instancet->read_fw_status_reg))(instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9482: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13924: Destroying the void* pointer ldv_main_exported_2::tmp___2 produces garbage or the memory pointed by it is unused: ldv_main_exported_2(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15633: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): tmp = (*(instance->instancet->read_fw_status_reg))(reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 8771-8772: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, reset_cmd->frame_phys_addr, 0U, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8765: Ignoring function call through function pointer *(reset_cmd->scmd->scsi_done): (*(reset_cmd->scmd->scsi_done))(reset_cmd->scmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8817: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): tmp___1 = (*(instance->instancet->read_fw_status_reg))(instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8400: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9393: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9396: Ignoring function call through function pointer *(instance->instancet->adp_reset): (*(instance->instancet->adp_reset))(instance, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9536: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): abs_state = (*(instance->instancet->read_fw_status_reg))(instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9574: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9636: Ignoring function call through function pointer *(instance->instancet->read_fw_status_reg): curr_abs_state = (*(instance->instancet->read_fw_status_reg))(instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_enable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10223: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7481: Ignoring function call through function pointer *(instance->instancet->issue_dcmd): (*(instance->instancet->issue_dcmd))(instance, cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6557: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15352: Ignoring function call through function pointer *(instance->instancet->disable_intr): (*(instance->instancet->disable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 15370-15371: Ignoring function call through function pointer *(instance->instancet->fire_cmd): (*(instance->instancet->fire_cmd))(instance, (dma_addr_t )(req_desc.ldv_37409.u.low), req_desc.ldv_37409.u.high, instance->reg_set); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11521: Ignoring function call through function pointer *(instance->instancet->enable_intr): (*(instance->instancet->enable_intr))(instance); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_find_capability to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_host_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13006: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(3484UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13111: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(3484UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17453: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(3484UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13039: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(3484UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13076: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12980: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(3484UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3803715 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3671996 (97%)
  Because of loop head:            130966 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         753 (0%)
  Times precision was empty:       3274482 (86%)
  Times precision was {false}:     2071 (0%)
  Times result was cached:         526907 (14%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      255 (0%)
  Times result was 'false':        2316 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1840167
  BDD entailment checks:           621671
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       132
Number of predicates discovered:          13
Number of abstraction locations:          157
Max number of predicates per location:    11
Avg number of predicates per location:    1
Total predicates per abstraction:         575285
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 247.33
Number of irrelevant predicates:          557292 (97%)
Number of preds handled by boolean abs:   419 (0%)
  Total number of models for allsat:      8172
  Max number of models for allsat:        2048
  Avg number of models for allsat:        32.05

Time for post operator:                249.825s
  Time for path formula creation:      237.271s
Time for strengthen operator:           12.426s
Time for prec operator:                117.810s
  Time for abstraction:                 56.211s (Max:     2.128s, Count: 3803715)
    Boolean abstraction:                 8.071s
    Solving time:                        7.804s (Max:     0.369s)
    Model enumeration time:              6.544s
    Time for BDD construction:           0.435s (Max:     0.141s)
Time for merge operator:                14.675s
Time for coverage check:                 0.685s
  Time for BDD entailment checks:        0.450s
Total time for SMT solver (w/o itp):    14.348s

Number of path formula cache hits:   19335100 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    89.858s

Total number of created targets for pointer analysis: 157317
   Number of created targets for uf: *unsigned_short_int is 7
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(struct_megasas_instance)* is 21
   Number of created targets for uf: *signed_int is 6791
   Number of created targets for uf: *unsigned_char is 9
   Number of created targets for uf: *(struct_list_head)* is 17
   Number of created targets for uf: *(unsigned_char)* is 21
   Number of created targets for uf: *(struct_scsi_cmnd)* is 3
   Number of created targets for uf: *unsigned_long_long_int is 7
   Number of created targets for uf: *unsigned_int is 5
   Number of created targets for uf: *char is 2
   Number of created targets for uf: *unsigned_long_int is 406


Number of BDD nodes:                               9665
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         832 (count: 3908622, min: 0, max: 57, avg: 0.00)
Time for BDD node cleanup:                             0.534s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 29.901s
  Time for transition matches:                        11.538s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                     16103895 (count: 16103895, min: 1, max: 1, avg: 1.00) [1 x 16103895]

CPA algorithm statistics
------------------------
Number of iterations:            11076692
Max size of waitlist:            187
Average size of waitlist:        91
Number of computed successors:   12294700
Max successors for one state:    2
Number of times merged:          609248
Number of times stopped:         1210401
Number of times breaked:         753

Total time for CPA algorithm:       786.105s (Max:    24.037s)
  Time for choose from waitlist:      5.370s
  Time for precision adjustment:    222.702s
  Time for transfer relation:       458.672s
  Time for merge operator:           23.614s
  Time for stop operator:            17.793s
  Time for adding to reached set:    22.952s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   753
Avg. length of target path (in blocks):               78144 (count: 753, min: 61, max: 175, avg: 103.78)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  66.899s
  Counterexample analysis:                            35.015s (Max:     0.125s, Calls: 753)
    Refinement sat check:                             22.281s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.031s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.131s
  Precision update:                                    0.189s
  ARG update:                                         31.100s

Length of refined path (in blocks):                   77044 (count: 753, min: 56, max: 174, avg: 102.32)
Number of affected states:                             6629 (count: 753, min: 1, max: 88, avg: 8.80)
Length (states) of path with itp 'true':              69662 (count: 753, min: 54, max: 166, avg: 92.51)
Length (states) of path with itp non-trivial itp:      6629 (count: 753, min: 1, max: 88, avg: 8.80)
Length (states) of path with itp 'false':               753 (count: 753, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 753, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5876 (count: 753, min: 0, max: 87, avg: 7.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                753
Number of successful refinements:     753
Number of failed refinements:         0
Max. size of reached set before ref.: 275041
Max. size of reached set after ref.:  30345
Avg. size of reached set before ref.: 38243.63
Avg. size of reached set after ref.:  23526.88

Total time for CEGAR algorithm:     891.099s
Time for refinements:                89.999s
Average time for refinement:          0.119s
Max time for refinement:              2.576s

Code Coverage
-----------------------------
  Function coverage:      0.007
  Visited lines:          1264
  Total lines:            8684
  Line coverage:          0.146
  Visited conditions:     4
  Total conditions:       3628
  Condition coverage:     0.001

CPAchecker general statistics
-----------------------------
Number of program locations:     13515
Number of CFA edges:             16352
Number of relevant variables:    2138
Number of functions:             297
Number of loops:                 114
Size of reached set:             273
  Number of reached locations:   65 (0%)
    Avg states per location:     4
    Max states per location:     27 (at node N243)
  Number of reached functions:   2 (1%)
  Number of partitions:          273
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        1

Time for analysis setup:          9.206s
  Time for loading CPAs:          1.226s
  Time for loading parser:        0.686s
  Time for CFA construction:      7.125s
    Time for parsing file(s):     1.401s
    Time for AST to CFA:          2.592s
    Time for CFA sanity check:    0.657s
    Time for post-processing:     2.268s
      Time for var class.:        1.179s
Time for Analysis:              891.099s
CPU time for analysis:          891.070s
Total time for CPAchecker:      900.318s
Total CPU time for CPAchecker:  900.270s
Time for statistics:              0.108s

Time for Garbage Collector:     114.330s (in 727 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1177MB (  1123 MiB) max;    568MB (   542 MiB) avg;   1256MB (  1198 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1345MB (  1283 MiB) max;    848MB (   809 MiB) avg
Allocated non-heap memory:        44MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8083MB (  7708 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
