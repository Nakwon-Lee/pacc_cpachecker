scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--usb--misc--usbtest.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5hfpp6hg/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_interruptible_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function do_gettimeofday to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_sg_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_sg_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_init_table to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __virt_addr_valid to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3752: Destroying the void* pointer kmalloc_array::tmp produces garbage or the memory pointed by it is unused: tmp = kmalloc_array(n, size, flags | 32768U); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function completion_done to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_clear_halt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            162854 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  134515 (83%)
  Because of loop head:            28024 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         315 (0%)
  Times precision was empty:       16283 (10%)
  Times precision was {false}:     1688 (1%)
  Times result was cached:         142844 (88%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2039 (1%)
  Times result was 'false':        6971 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         209613
  BDD entailment checks:           51489
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          26
Number of abstraction locations:          270
Max number of predicates per location:    13
Avg number of predicates per location:    1
Total predicates per abstraction:         242396
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 65.04
Number of irrelevant predicates:          102721 (42%)
Number of preds handled by boolean abs:   4362 (2%)
  Total number of models for allsat:      3418
  Max number of models for allsat:        10
  Avg number of models for allsat:        1.68

Time for post operator:                 30.680s
  Time for path formula creation:       30.030s
Time for strengthen operator:            1.207s
Time for prec operator:                 29.893s
  Time for abstraction:                 27.119s (Max:     0.303s, Count: 162854)
    Boolean abstraction:                 2.813s
    Solving time:                        3.326s (Max:     0.046s)
    Model enumeration time:              0.358s
    Time for BDD construction:           0.211s (Max:     0.012s)
Time for merge operator:                 2.213s
Time for coverage check:                 0.153s
  Time for BDD entailment checks:        0.095s
Total time for SMT solver (w/o itp):     3.684s

Number of path formula cache hits:   908416 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    26.058s

Total number of created targets for pointer analysis: 10674
   Number of created targets for uf: *(void)* is 10
   Number of created targets for uf: *unsigned_short_int is 216
   Number of created targets for uf: *signed_int is 75
   Number of created targets for uf: *(struct_urb)* is 61
   Number of created targets for uf: *signed_long_int is 655
   Number of created targets for uf: *unsigned_int is 127
   Number of created targets for uf: *unsigned_long_int is 433


Number of BDD nodes:                               1394
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5065 (count: 89460, min: 0, max: 366, avg: 0.06)
Time for BDD node cleanup:                             0.026s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.022s
  Time for transition matches:                         1.080s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                      1032754 (count: 1032754, min: 1, max: 1, avg: 1.00) [1 x 1032754]

CPA algorithm statistics
------------------------
Number of iterations:            730177
Max size of waitlist:            92
Average size of waitlist:        42
Number of computed successors:   863214
Max successors for one state:    2
Number of times merged:          79062
Number of times stopped:         113906
Number of times breaked:         315

Total time for CPA algorithm:        93.702s (Max:     1.699s)
  Time for choose from waitlist:      0.526s
  Time for precision adjustment:     38.059s
  Time for transfer relation:        44.619s
  Time for merge operator:            3.847s
  Time for stop operator:             1.579s
  Time for adding to reached set:     1.744s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   315
Avg. length of target path (in blocks):               23575 (count: 315, min: 16, max: 125, avg: 74.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  12.103s
  Counterexample analysis:                             9.522s (Max:     0.073s, Calls: 315)
    Refinement sat check:                              6.154s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.020s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.197s
  Precision update:                                    0.247s
  ARG update:                                          1.827s

Length of refined path (in blocks):                   21961 (count: 315, min: 6, max: 124, avg: 69.72)
Number of affected states:                            11752 (count: 315, min: 1, max: 98, avg: 37.31)
Length (states) of path with itp 'true':               9894 (count: 315, min: 0, max: 78, avg: 31.41)
Length (states) of path with itp non-trivial itp:     11752 (count: 315, min: 1, max: 98, avg: 37.31)
Length (states) of path with itp 'false':               315 (count: 315, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          25 (count: 315, min: 0, max: 4, avg: 0.08)
Equal non-trivial interpolants along paths:           11412 (count: 315, min: 0, max: 97, avg: 36.23)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                315
Number of successful refinements:     315
Number of failed refinements:         0
Max. size of reached set before ref.: 11914
Max. size of reached set after ref.:  10916
Avg. size of reached set before ref.: 6084.98
Avg. size of reached set after ref.:  3729.92

Total time for CEGAR algorithm:     108.838s
Time for refinements:                14.277s
Average time for refinement:          0.045s
Max time for refinement:              0.130s

Code Coverage
-----------------------------
  Function coverage:      0.105
  Visited lines:          824
  Total lines:            2819
  Line coverage:          0.292
  Visited conditions:     80
  Total conditions:       936
  Condition coverage:     0.085

CPAchecker general statistics
-----------------------------
Number of program locations:     3934
Number of CFA edges:             4519
Number of relevant variables:    657
Number of functions:             114
Number of loops:                 44
Size of reached set:             495
  Number of reached locations:   170 (4%)
    Avg states per location:     2
    Max states per location:     9 (at node N129)
  Number of reached functions:   12 (11%)
  Number of partitions:          491
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N3223 (before line 7230), Function main called from node N3200, stack depth 1 [10ef5fa0], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.004s
  Time for loading CPAs:          0.960s
  Time for loading parser:        0.723s
  Time for CFA construction:      4.147s
    Time for parsing file(s):     1.056s
    Time for AST to CFA:          1.414s
    Time for CFA sanity check:    0.344s
    Time for post-processing:     1.128s
      Time for var class.:        0.525s
Time for Analysis:              108.838s
CPU time for analysis:          108.830s
Time for analyzing result:        0.000s
Total time for CPAchecker:      114.846s
Total CPU time for CPAchecker:  114.830s
Time for statistics:              0.098s

Time for Garbage Collector:       6.839s (in 302 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                218MB (   208 MiB) max;     97MB (    92 MiB) avg;    233MB (   223 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           307MB (   293 MiB) max;    160MB (   153 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8081MB (  7707 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
