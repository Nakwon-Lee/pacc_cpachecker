scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--usb--misc--usbtest.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_vhh276_e/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_interruptible_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function do_gettimeofday to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_init_table to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_sg_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_sg_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __virt_addr_valid to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            43204 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  39381 (91%)
  Because of loop head:            3792 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         31 (0%)
  Times precision was empty:       20890 (48%)
  Times precision was {false}:     219 (1%)
  Times result was cached:         21884 (51%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      211 (0%)
  Times result was 'false':        1497 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         47623
  BDD entailment checks:           8121
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          4
Number of abstraction locations:          62
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         24722
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 57.49
Number of irrelevant predicates:          11329 (46%)
Number of preds handled by boolean abs:   250 (1%)
  Total number of models for allsat:      230
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.09

Time for post operator:                  5.147s
  Time for path formula creation:        4.913s
Time for strengthen operator:            0.415s
Time for prec operator:                  6.115s
  Time for abstraction:                  5.126s (Max:     0.038s, Count: 43204)
    Boolean abstraction:                 0.635s
    Solving time:                        0.628s (Max:     0.022s)
    Model enumeration time:              0.091s
    Time for BDD construction:           0.042s (Max:     0.012s)
Time for merge operator:                 0.558s
Time for coverage check:                 0.080s
  Time for BDD entailment checks:        0.059s
Total time for SMT solver (w/o itp):     0.719s

Number of path formula cache hits:   321764 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.920s

Total number of created targets for pointer analysis: 668
   Number of created targets for uf: *(void)* is 9
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *signed_long_int is 105
   Number of created targets for uf: *unsigned_int is 41
   Number of created targets for uf: *unsigned_long_int is 71


Number of BDD nodes:                               215
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         446 (count: 31510, min: 0, max: 66, avg: 0.01)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.694s
  Time for transition matches:                         0.326s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       281813 (count: 281813, min: 1, max: 1, avg: 1.00) [1 x 281813]

CPA algorithm statistics
------------------------
Number of iterations:            168561
Max size of waitlist:            325
Average size of waitlist:        160
Number of computed successors:   201633
Max successors for one state:    2
Number of times merged:          19751
Number of times stopped:         25853
Number of times breaked:         31

Total time for CPA algorithm:        22.405s (Max:     1.897s)
  Time for choose from waitlist:      0.270s
  Time for precision adjustment:      8.515s
  Time for transfer relation:        10.135s
  Time for merge operator:            1.091s
  Time for stop operator:             0.485s
  Time for adding to reached set:     0.544s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   31
Avg. length of target path (in blocks):                 877 (count: 31, min: 12, max: 34, avg: 28.29)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.490s
  Counterexample analysis:                             0.627s (Max:     0.034s, Calls: 31)
    Refinement sat check:                              0.429s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.062s
  Precision update:                                    0.026s
  ARG update:                                          0.730s

Length of refined path (in blocks):                     765 (count: 31, min: 6, max: 33, avg: 24.68)
Number of affected states:                              714 (count: 31, min: 1, max: 32, avg: 23.03)
Length (states) of path with itp 'true':                 20 (count: 31, min: 0, max: 4, avg: 0.65)
Length (states) of path with itp non-trivial itp:       714 (count: 31, min: 1, max: 32, avg: 23.03)
Length (states) of path with itp 'false':                31 (count: 31, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 31, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             683 (count: 31, min: 0, max: 31, avg: 22.03)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     31
Number of failed refinements:         0
Max. size of reached set before ref.: 9798
Max. size of reached set after ref.:  23
Avg. size of reached set before ref.: 5406.87
Avg. size of reached set after ref.:  6.23

Total time for CEGAR algorithm:      24.189s
Time for refinements:                 1.780s
Average time for refinement:          0.057s
Max time for refinement:              0.137s

Code Coverage
-----------------------------
  Function coverage:      0.439
  Visited lines:          1582
  Total lines:            2819
  Line coverage:          0.561
  Visited conditions:     440
  Total conditions:       936
  Condition coverage:     0.470

CPAchecker general statistics
-----------------------------
Number of program locations:     3934
Number of CFA edges:             4519
Number of relevant variables:    657
Number of functions:             114
Number of loops:                 44
Size of reached set:             6864
  Number of reached locations:   937 (24%)
    Avg states per location:     7
    Max states per location:     92 (at node N295)
  Number of reached functions:   50 (44%)
  Number of partitions:          6847
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N3223 (before line 7230), Function main called from node N3200, stack depth 1 [10ef5fa0], stack [main]])
  Number of target states:       0
  Size of final wait list        241

Time for analysis setup:          6.055s
  Time for loading CPAs:          1.040s
  Time for loading parser:        0.776s
  Time for CFA construction:      4.078s
    Time for parsing file(s):     1.156s
    Time for AST to CFA:          1.326s
    Time for CFA sanity check:    0.341s
    Time for post-processing:     1.057s
      Time for var class.:        0.519s
Time for Analysis:               24.189s
CPU time for analysis:           24.190s
Total time for CPAchecker:       30.250s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.235s

Time for Garbage Collector:       1.168s (in 76 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                105MB (   100 MiB) max;     53MB (    51 MiB) avg;    110MB (   105 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
