scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--sis--sis900.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_o22hqgaz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6002: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6034: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5871-5872: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5925: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5905: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 9328: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9332: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9338: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6002: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6034: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function yield to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5871-5872: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5925: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5905: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9082: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9267: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1490089 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  966473 (65%)
  Because of loop head:            523216 (35%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         400 (0%)
  Times precision was empty:       218093 (15%)
  Times precision was {false}:     3557 (0%)
  Times result was cached:         1228847 (82%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      39592 (3%)
  Times result was 'false':        29859 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1101916
  BDD entailment checks:           486576
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       61
Number of predicates discovered:          72
Number of abstraction locations:          331
Max number of predicates per location:    30
Avg number of predicates per location:    5
Total predicates per abstraction:         11846470
Max number of predicates per abstraction: 30
Avg number of predicates per abstraction: 274.55
Number of irrelevant predicates:          4753288 (40%)
Number of preds handled by boolean abs:   290541 (2%)
  Total number of models for allsat:      115546
  Max number of models for allsat:        25
  Avg number of models for allsat:        2.92

Time for post operator:                153.946s
  Time for path formula creation:      149.708s
Time for strengthen operator:            7.595s
Time for prec operator:                521.040s
  Time for abstraction:                502.634s (Max:     3.142s, Count: 1490089)
    Boolean abstraction:                60.177s
    Solving time:                       43.619s (Max:     0.015s)
    Model enumeration time:             10.101s
    Time for BDD construction:           2.934s (Max:     0.018s)
Time for merge operator:                 7.897s
Time for coverage check:                 0.821s
  Time for BDD entailment checks:        0.641s
Total time for SMT solver (w/o itp):    53.720s

Number of path formula cache hits:   7518772 (72%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   119.052s

Total number of created targets for pointer analysis: 51544
   Number of created targets for uf: *unsigned_short_int is 85
   Number of created targets for uf: *(void)* is 354
   Number of created targets for uf: *signed_int is 13
   Number of created targets for uf: *unsigned_char is 559
   Number of created targets for uf: *unsigned_long_long_int is 193
   Number of created targets for uf: *unsigned_int is 782


Number of BDD nodes:                               61878
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      103786 (count: 971593, min: 0, max: 2473, avg: 0.11)
Time for BDD node cleanup:                             0.188s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.316s
  Time for transition matches:                         8.245s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                      9285249 (count: 9285249, min: 1, max: 1, avg: 1.00) [1 x 9285249]

CPA algorithm statistics
------------------------
Number of iterations:            5076596
Max size of waitlist:            89
Average size of waitlist:        48
Number of computed successors:   5773071
Max successors for one state:    2
Number of times merged:          307670
Number of times stopped:         638344
Number of times breaked:         400

Total time for CPA algorithm:       851.892s (Max:     6.238s)
  Time for choose from waitlist:      2.720s
  Time for precision adjustment:    560.351s
  Time for transfer relation:       243.673s
  Time for merge operator:           13.012s
  Time for stop operator:             7.554s
  Time for adding to reached set:    10.107s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   400
Avg. length of target path (in blocks):               57931 (count: 400, min: 44, max: 262, avg: 144.83)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  36.918s
  Counterexample analysis:                            26.033s (Max:     0.193s, Calls: 400)
    Refinement sat check:                             11.792s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.028s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.268s
  Precision update:                                    0.442s
  ARG update:                                          9.689s

Length of refined path (in blocks):                   43464 (count: 400, min: 14, max: 252, avg: 108.66)
Number of affected states:                            35511 (count: 400, min: 0, max: 251, avg: 88.78)
Length (states) of path with itp 'true':               7553 (count: 400, min: 0, max: 95, avg: 18.88)
Length (states) of path with itp non-trivial itp:     35511 (count: 400, min: 0, max: 251, avg: 88.78)
Length (states) of path with itp 'false':               400 (count: 400, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         887 (count: 400, min: 0, max: 23, avg: 2.22)
Equal non-trivial interpolants along paths:           34225 (count: 400, min: 0, max: 250, avg: 85.56)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                400
Number of successful refinements:     400
Number of failed refinements:         0
Max. size of reached set before ref.: 33357
Max. size of reached set after ref.:  14004
Avg. size of reached set before ref.: 15284.41
Avg. size of reached set after ref.:  2592.43

Total time for CEGAR algorithm:     893.667s
Time for refinements:                41.075s
Average time for refinement:          0.102s
Max time for refinement:              0.294s

Code Coverage
-----------------------------
  Function coverage:      0.813
  Visited lines:          3021
  Total lines:            3475
  Line coverage:          0.869
  Visited conditions:     673
  Total conditions:       806
  Condition coverage:     0.835

CPAchecker general statistics
-----------------------------
Number of program locations:     4802
Number of CFA edges:             5381
Number of relevant variables:    742
Number of functions:             166
Number of loops:                 47
Size of reached set:             28077
  Number of reached locations:   2032 (42%)
    Avg states per location:     13
    Max states per location:     486 (at node N1367)
  Number of reached functions:   135 (81%)
  Number of partitions:          27453
    Avg size of partitions:      1
    Max size of partitions:      25 (with key [N1084 (before line 6954), Function sis900_mii_probe called from node N919, stack depth 3 [25883c71], stack [main, sis900_probe, sis900_mii_probe]])
  Number of target states:       0
  Size of final wait list        76

Time for analysis setup:          6.589s
  Time for loading CPAs:          1.032s
  Time for loading parser:        0.767s
  Time for CFA construction:      4.620s
    Time for parsing file(s):     1.166s
    Time for AST to CFA:          1.731s
    Time for CFA sanity check:    0.372s
    Time for post-processing:     1.150s
      Time for var class.:        0.569s
Time for Analysis:              893.667s
CPU time for analysis:          893.580s
Total time for CPAchecker:      900.261s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.587s

Time for Garbage Collector:      54.467s (in 1072 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1327MB (  1265 MiB) max;    580MB (   553 MiB) avg;   1346MB (  1283 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1498MB (  1428 MiB) max;    835MB (   796 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   9030MB (  8612 MiB) max;   8477MB (  8084 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
