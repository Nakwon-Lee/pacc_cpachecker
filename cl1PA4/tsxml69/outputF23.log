scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--xen-netfront.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jadfu86k/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11087: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11089: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11091: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xen_has_pv_nic_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10983: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_scanf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __skb_get_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_frontend_closed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notify_peers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_switch_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_dev_fatal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_skb_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_claim_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_phys_to_machine to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_grant_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function notify_remote_via_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_query_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_release_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_free_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_pages_current to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_add_rx_frag to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unbind_from_irqhandler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_page_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            391131 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  339474 (87%)
  Because of loop head:            51578 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         79 (0%)
  Times precision was empty:       295588 (76%)
  Times precision was {false}:     4890 (1%)
  Times result was cached:         87676 (22%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2977 (1%)
  Times result was 'false':        5793 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         266984
  BDD entailment checks:           82456
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          14
Number of abstraction locations:          121
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         128926
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 16.39
Number of irrelevant predicates:          97205 (75%)
Number of preds handled by boolean abs:   4591 (4%)
  Total number of models for allsat:      5131
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.72

Time for post operator:                 70.569s
  Time for path formula creation:       69.302s
Time for strengthen operator:            2.214s
Time for prec operator:                 26.472s
  Time for abstraction:                 20.973s (Max:     0.310s, Count: 391131)
    Boolean abstraction:                 3.510s
    Solving time:                        3.608s (Max:     0.017s)
    Model enumeration time:              0.845s
    Time for BDD construction:           0.174s (Max:     0.012s)
Time for merge operator:                 3.424s
Time for coverage check:                 0.212s
  Time for BDD entailment checks:        0.153s
Total time for SMT solver (w/o itp):     4.453s

Number of path formula cache hits:   1279807 (56%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    62.896s

Total number of created targets for pointer analysis: 129104
   Number of created targets for uf: *(void)* is 1379
   Number of created targets for uf: *unsigned_short_int is 494
   Number of created targets for uf: *unsigned_char is 4841
   Number of created targets for uf: *(unsigned_char)* is 1274
   Number of created targets for uf: *unsigned_long_long_int is 2910
   Number of created targets for uf: *unsigned_int is 4501
   Number of created targets for uf: *unsigned_long_int is 599


Number of BDD nodes:                               732
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        6203 (count: 421497, min: 0, max: 307, avg: 0.01)
Time for BDD node cleanup:                             0.111s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.529s
  Time for transition matches:                         1.964s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      2043273 (count: 2043273, min: 1, max: 1, avg: 1.00) [1 x 2043273]

CPA algorithm statistics
------------------------
Number of iterations:            1317324
Max size of waitlist:            338
Average size of waitlist:        155
Number of computed successors:   1478328
Max successors for one state:    2
Number of times merged:          92264
Number of times stopped:         148770
Number of times breaked:         79

Total time for CPA algorithm:       158.778s (Max:     5.779s)
  Time for choose from waitlist:      0.881s
  Time for precision adjustment:     40.874s
  Time for transfer relation:        98.860s
  Time for merge operator:            5.239s
  Time for stop operator:             2.519s
  Time for adding to reached set:     3.093s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   79
Avg. length of target path (in blocks):                6315 (count: 79, min: 55, max: 118, avg: 79.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.990s
  Counterexample analysis:                             2.693s (Max:     0.241s, Calls: 79)
    Refinement sat check:                              1.699s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          1.417s
  Predicate creation:                                  0.049s
  Precision update:                                    0.050s
  ARG update:                                          2.656s

Length of refined path (in blocks):                    3229 (count: 78, min: 20, max: 83, avg: 41.40)
Number of affected states:                              707 (count: 78, min: 1, max: 64, avg: 9.06)
Length (states) of path with itp 'true':               2444 (count: 78, min: 18, max: 72, avg: 31.33)
Length (states) of path with itp non-trivial itp:       707 (count: 78, min: 1, max: 64, avg: 9.06)
Length (states) of path with itp 'false':                78 (count: 78, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           9 (count: 78, min: 0, max: 2, avg: 0.12)
Equal non-trivial interpolants along paths:             620 (count: 78, min: 0, max: 63, avg: 7.95)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                79
Number of successful refinements:     78
Number of failed refinements:         0
Max. size of reached set before ref.: 37850
Max. size of reached set after ref.:  18724
Avg. size of reached set before ref.: 20090.99
Avg. size of reached set after ref.:  3377.21

Total time for CEGAR algorithm:     167.173s
Time for refinements:                 8.211s
Average time for refinement:          0.103s
Max time for refinement:              1.708s

Code Coverage
-----------------------------
  Function coverage:      0.681
  Visited lines:          2904
  Total lines:            4193
  Line coverage:          0.693
  Visited conditions:     500
  Total conditions:       830
  Condition coverage:     0.602

CPAchecker general statistics
-----------------------------
Number of program locations:     5632
Number of CFA edges:             6266
Number of relevant variables:    958
Number of functions:             207
Number of loops:                 63
Size of reached set:             37801
  Number of reached locations:   1731 (31%)
    Avg states per location:     21
    Max states per location:     652 (at node N305)
  Number of reached functions:   141 (68%)
  Number of partitions:          37666
    Avg size of partitions:      1
    Max size of partitions:      15 (with key [N4113 (before line 11104), Function main called from node N4045, stack depth 1 [4b0b64cc], stack [main]])
  Number of target states:       1
  Size of final wait list        206

Time for analysis setup:          6.858s
  Time for loading CPAs:          1.026s
  Time for loading parser:        0.727s
  Time for CFA construction:      4.966s
    Time for parsing file(s):     1.293s
    Time for AST to CFA:          1.808s
    Time for CFA sanity check:    0.379s
    Time for post-processing:     1.203s
      Time for var class.:        0.573s
Time for Analysis:              167.173s
CPU time for analysis:          167.160s
Time for analyzing result:        0.047s
Total time for CPAchecker:      174.045s
Total CPU time for CPAchecker:  174.020s
Time for statistics:              0.621s

Time for Garbage Collector:      16.911s (in 246 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                752MB (   717 MiB) max;    285MB (   272 MiB) avg;    818MB (   780 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     38MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1033MB (   986 MiB) max;    435MB (   415 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8153MB (  7775 MiB) max;   8090MB (  7715 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 6577) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
