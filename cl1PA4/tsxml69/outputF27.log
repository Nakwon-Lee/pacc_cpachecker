scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--xen-netfront.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_olyoukjy/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11087: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11089: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11091: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xen_has_pv_nic_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10983: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_scanf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_page_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_free_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function notify_remote_via_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_pages_current to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_add_rx_frag to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __skb_get_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_query_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_release_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_frontend_closed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notify_peers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unbind_from_irqhandler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_switch_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_dev_fatal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            72803 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  61048 (84%)
  Because of loop head:            11661 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         94 (0%)
  Times precision was empty:       42298 (58%)
  Times precision was {false}:     3480 (5%)
  Times result was cached:         25342 (35%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1683 (2%)
  Times result was 'false':        4806 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         82514
  BDD entailment checks:           24616
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          14
Number of abstraction locations:          114
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         51403
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 9.96
Number of irrelevant predicates:          36041 (70%)
Number of preds handled by boolean abs:   2665 (5%)
  Total number of models for allsat:      2911
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.73

Time for post operator:                 18.633s
  Time for path formula creation:       18.248s
Time for strengthen operator:            0.626s
Time for prec operator:                 14.709s
  Time for abstraction:                 13.196s (Max:     0.033s, Count: 72803)
    Boolean abstraction:                 2.567s
    Solving time:                        2.793s (Max:     0.017s)
    Model enumeration time:              0.651s
    Time for BDD construction:           0.138s (Max:     0.010s)
Time for merge operator:                 1.532s
Time for coverage check:                 0.126s
  Time for BDD entailment checks:        0.105s
Total time for SMT solver (w/o itp):     3.444s

Number of path formula cache hits:   331669 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    15.975s

Total number of created targets for pointer analysis: 9100
   Number of created targets for uf: *(void)* is 22
   Number of created targets for uf: *(unsigned_char)* is 329
   Number of created targets for uf: *unsigned_long_long_int is 67
   Number of created targets for uf: *unsigned_int is 715
   Number of created targets for uf: *unsigned_long_int is 83


Number of BDD nodes:                               702
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3658 (count: 95365, min: 0, max: 156, avg: 0.04)
Time for BDD node cleanup:                             0.051s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.077s
  Time for transition matches:                         0.567s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                       464328 (count: 464328, min: 1, max: 1, avg: 1.00) [1 x 464328]

CPA algorithm statistics
------------------------
Number of iterations:            287244
Max size of waitlist:            269
Average size of waitlist:        103
Number of computed successors:   341121
Max successors for one state:    2
Number of times merged:          28949
Number of times stopped:         39369
Number of times breaked:         94

Total time for CPA algorithm:        51.098s (Max:     2.409s)
  Time for choose from waitlist:      0.310s
  Time for precision adjustment:     18.377s
  Time for transfer relation:        26.558s
  Time for merge operator:            2.335s
  Time for stop operator:             0.785s
  Time for adding to reached set:     0.803s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   94
Avg. length of target path (in blocks):                7831 (count: 94, min: 55, max: 118, avg: 83.31)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.296s
  Counterexample analysis:                             3.765s (Max:     0.249s, Calls: 94)
    Refinement sat check:                              2.363s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.005s
  Error path post-processing:                          1.508s
  Predicate creation:                                  0.051s
  Precision update:                                    0.073s
  ARG update:                                          0.780s

Length of refined path (in blocks):                    4162 (count: 93, min: 20, max: 83, avg: 44.75)
Number of affected states:                              730 (count: 93, min: 1, max: 64, avg: 7.85)
Length (states) of path with itp 'true':               3339 (count: 93, min: 18, max: 67, avg: 35.90)
Length (states) of path with itp non-trivial itp:       730 (count: 93, min: 1, max: 64, avg: 7.85)
Length (states) of path with itp 'false':                93 (count: 93, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           9 (count: 93, min: 0, max: 2, avg: 0.10)
Equal non-trivial interpolants along paths:             628 (count: 93, min: 0, max: 63, avg: 6.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                94
Number of successful refinements:     93
Number of failed refinements:         0
Max. size of reached set before ref.: 8293
Max. size of reached set after ref.:  5896
Avg. size of reached set before ref.: 4751.18
Avg. size of reached set after ref.:  1609.29

Total time for CEGAR algorithm:      58.206s
Time for refinements:                 6.973s
Average time for refinement:          0.074s
Max time for refinement:              1.765s

Code Coverage
-----------------------------
  Function coverage:      0.570
  Visited lines:          2416
  Total lines:            4193
  Line coverage:          0.576
  Visited conditions:     398
  Total conditions:       830
  Condition coverage:     0.480

CPAchecker general statistics
-----------------------------
Number of program locations:     5632
Number of CFA edges:             6266
Number of relevant variables:    958
Number of functions:             207
Number of loops:                 63
Size of reached set:             8286
  Number of reached locations:   1299 (23%)
    Avg states per location:     6
    Max states per location:     107 (at node N653)
  Number of reached functions:   118 (57%)
  Number of partitions:          8239
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N4113 (before line 11104), Function main called from node N4045, stack depth 1 [7c2dfa2], stack [main]])
  Number of target states:       1
  Size of final wait list        208

Time for analysis setup:          7.211s
  Time for loading CPAs:          1.094s
  Time for loading parser:        0.740s
  Time for CFA construction:      5.196s
    Time for parsing file(s):     1.171s
    Time for AST to CFA:          1.837s
    Time for CFA sanity check:    0.424s
    Time for post-processing:     1.548s
      Time for var class.:        0.588s
Time for Analysis:               58.207s
CPU time for analysis:           58.200s
Time for analyzing result:        0.011s
Total time for CPAchecker:       65.423s
Total CPU time for CPAchecker:   65.400s
Time for statistics:              0.257s

Time for Garbage Collector:       2.602s (in 137 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                158MB (   151 MiB) max;     79MB (    75 MiB) avg;    166MB (   159 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     37MB (    35 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           178MB (   170 MiB) max;    141MB (   134 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     39MB (    38 MiB) avg
Total process virtual memory:   8085MB (  7710 MiB) max;   8077MB (  7703 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 6577) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
