scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--xen-netfront.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_q3_1fbpg/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11087: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11089: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11091: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xen_has_pv_nic_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10983: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __skb_get_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_scanf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_frontend_closed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notify_peers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_switch_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_dev_fatal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_page_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_update_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_query_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_release_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_free_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_skb_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            32123 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  27129 (84%)
  Because of loop head:            4981 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         13 (0%)
  Times precision was empty:       30813 (96%)
  Times precision was {false}:     305 (1%)
  Times result was cached:         939 (3%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      66 (0%)
  Times result was 'false':        297 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         21432
  BDD entailment checks:           5918
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          13
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         2149
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 5.79
Number of irrelevant predicates:          1620 (75%)
Number of preds handled by boolean abs:   115 (5%)
  Total number of models for allsat:      138
  Max number of models for allsat:        8
  Avg number of models for allsat:        2.09

Time for post operator:                  8.341s
  Time for path formula creation:        8.049s
Time for strengthen operator:            0.348s
Time for prec operator:                  2.871s
  Time for abstraction:                  2.029s (Max:     0.026s, Count: 32123)
    Boolean abstraction:                 0.303s
    Solving time:                        0.329s (Max:     0.017s)
    Model enumeration time:              0.050s
    Time for BDD construction:           0.029s (Max:     0.006s)
Time for merge operator:                 0.531s
Time for coverage check:                 0.091s
  Time for BDD entailment checks:        0.080s
Total time for SMT solver (w/o itp):     0.379s

Number of path formula cache hits:   150957 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.116s

Total number of created targets for pointer analysis: 1306
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *unsigned_char is 441
   Number of created targets for uf: *unsigned_long_long_int is 133
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               232
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         165 (count: 38731, min: 0, max: 36, avg: 0.00)
Time for BDD node cleanup:                             0.031s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.680s
  Time for transition matches:                         0.388s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       172034 (count: 172034, min: 1, max: 1, avg: 1.00) [1 x 172034]

CPA algorithm statistics
------------------------
Number of iterations:            110674
Max size of waitlist:            175
Average size of waitlist:        103
Number of computed successors:   124835
Max successors for one state:    2
Number of times merged:          7757
Number of times stopped:         12643
Number of times breaked:         13

Total time for CPA algorithm:        21.812s (Max:     3.185s)
  Time for choose from waitlist:      0.227s
  Time for precision adjustment:      5.058s
  Time for transfer relation:        13.292s
  Time for merge operator:            0.870s
  Time for stop operator:             0.532s
  Time for adding to reached set:     0.466s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   13
Avg. length of target path (in blocks):                 562 (count: 13, min: 39, max: 45, avg: 43.23)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.152s
  Counterexample analysis:                             0.549s (Max:     0.057s, Calls: 13)
    Refinement sat check:                              0.382s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.023s
  Precision update:                                    0.013s
  ARG update:                                          0.535s

Length of refined path (in blocks):                     269 (count: 13, min: 20, max: 23, avg: 20.69)
Number of affected states:                               22 (count: 13, min: 1, max: 4, avg: 1.69)
Length (states) of path with itp 'true':                234 (count: 13, min: 18, max: 18, avg: 18.00)
Length (states) of path with itp non-trivial itp:        22 (count: 13, min: 1, max: 4, avg: 1.69)
Length (states) of path with itp 'false':                13 (count: 13, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 13, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               9 (count: 13, min: 0, max: 3, avg: 0.69)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13
Number of successful refinements:     13
Number of failed refinements:         0
Max. size of reached set before ref.: 11573
Max. size of reached set after ref.:  93
Avg. size of reached set before ref.: 8654.77
Avg. size of reached set after ref.:  93.00

Total time for CEGAR algorithm:      23.244s
Time for refinements:                 1.430s
Average time for refinement:          0.110s
Max time for refinement:              0.170s

Code Coverage
-----------------------------
  Function coverage:      0.174
  Visited lines:          1535
  Total lines:            4193
  Line coverage:          0.366
  Visited conditions:     186
  Total conditions:       830
  Condition coverage:     0.224

CPAchecker general statistics
-----------------------------
Number of program locations:     5632
Number of CFA edges:             6266
Number of relevant variables:    958
Number of functions:             207
Number of loops:                 63
Size of reached set:             592
  Number of reached locations:   428 (8%)
    Avg states per location:     1
    Max states per location:     10 (at node N261)
  Number of reached functions:   36 (17%)
  Number of partitions:          592
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        19

Time for analysis setup:          6.554s
  Time for loading CPAs:          1.018s
  Time for loading parser:        0.626s
  Time for CFA construction:      4.759s
    Time for parsing file(s):     1.106s
    Time for AST to CFA:          1.717s
    Time for CFA sanity check:    0.394s
    Time for post-processing:     1.325s
      Time for var class.:        0.619s
Time for Analysis:               23.244s
CPU time for analysis:           23.240s
Total time for CPAchecker:       29.808s
Total CPU time for CPAchecker:   29.800s
Time for statistics:              0.135s

Time for Garbage Collector:       1.248s (in 53 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                117MB (   112 MiB) max;     63MB (    60 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8071MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
