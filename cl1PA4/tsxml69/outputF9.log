scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--xen-netfront.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hihgpmhp/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11087: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11089: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11091: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_skb_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_claim_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_phys_to_machine to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_grant_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_scanf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function notify_remote_via_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_frontend_closed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notify_peers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_dev_fatal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_query_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_release_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unbind_from_irqhandler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xen_has_pv_nic_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __skb_get_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_page_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10983: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_free_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_alloc_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_transaction_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_transaction_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_zeroed_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_grant_ring to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_alloc_evtchn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bind_evtchn_to_irqhandler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_free_evtchn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_update_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_pages_current to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_add_rx_frag to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_switch_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            270713 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  237579 (88%)
  Because of loop head:            32823 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         311 (0%)
  Times precision was empty:       160037 (59%)
  Times precision was {false}:     1337 (0%)
  Times result was cached:         107513 (40%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1826 (1%)
  Times result was 'false':        2912 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         165383
  BDD entailment checks:           42321
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          16
Number of abstraction locations:          244
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         160666
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 50.80
Number of irrelevant predicates:          109966 (68%)
Number of preds handled by boolean abs:   2896 (2%)
  Total number of models for allsat:      2260
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.24

Time for post operator:                 26.004s
  Time for path formula creation:       25.060s
Time for strengthen operator:            2.269s
Time for prec operator:                 22.455s
  Time for abstraction:                 18.630s (Max:     0.446s, Count: 270713)
    Boolean abstraction:                 2.050s
    Solving time:                        2.099s (Max:     0.029s)
    Model enumeration time:              0.326s
    Time for BDD construction:           0.146s (Max:     0.014s)
Time for merge operator:                 1.459s
Time for coverage check:                 0.141s
  Time for BDD entailment checks:        0.114s
Total time for SMT solver (w/o itp):     2.425s

Number of path formula cache hits:   1441043 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    19.665s

Total number of created targets for pointer analysis: 28109
   Number of created targets for uf: *(void)* is 147
   Number of created targets for uf: *unsigned_short_int is 95
   Number of created targets for uf: *(char)* is 3
   Number of created targets for uf: *unsigned_char is 941
   Number of created targets for uf: *(unsigned_char)* is 41
   Number of created targets for uf: *unsigned_long_long_int is 476
   Number of created targets for uf: *unsigned_int is 181
   Number of created targets for uf: *unsigned_long_int is 16


Number of BDD nodes:                               641
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3936 (count: 220671, min: 0, max: 141, avg: 0.02)
Time for BDD node cleanup:                             0.047s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.420s
  Time for transition matches:                         1.191s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.006s
Automaton transfers with branching:                0
Automaton transfer successors:                      1366898 (count: 1366898, min: 1, max: 1, avg: 1.00) [1 x 1366898]

CPA algorithm statistics
------------------------
Number of iterations:            912004
Max size of waitlist:            85
Average size of waitlist:        59
Number of computed successors:   1020619
Max successors for one state:    2
Number of times merged:          61531
Number of times stopped:         98740
Number of times breaked:         311

Total time for CPA algorithm:        87.886s (Max:     2.210s)
  Time for choose from waitlist:      0.584s
  Time for precision adjustment:     31.328s
  Time for transfer relation:        45.293s
  Time for merge operator:            2.819s
  Time for stop operator:             1.807s
  Time for adding to reached set:     2.309s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   311
Avg. length of target path (in blocks):               31361 (count: 311, min: 40, max: 162, avg: 100.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  18.078s
  Counterexample analysis:                            13.579s (Max:     0.286s, Calls: 311)
    Refinement sat check:                              8.398s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          1.986s
  Predicate creation:                                  0.121s
  Precision update:                                    0.202s
  ARG update:                                          1.919s

Length of refined path (in blocks):                   25216 (count: 310, min: 20, max: 156, avg: 81.34)
Number of affected states:                             7554 (count: 310, min: 1, max: 103, avg: 24.37)
Length (states) of path with itp 'true':              17352 (count: 310, min: 0, max: 118, avg: 55.97)
Length (states) of path with itp non-trivial itp:      7554 (count: 310, min: 1, max: 103, avg: 24.37)
Length (states) of path with itp 'false':               310 (count: 310, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          12 (count: 310, min: 0, max: 2, avg: 0.04)
Equal non-trivial interpolants along paths:            7232 (count: 310, min: 0, max: 102, avg: 23.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                311
Number of successful refinements:     310
Number of failed refinements:         0
Max. size of reached set before ref.: 18289
Max. size of reached set after ref.:  11172
Avg. size of reached set before ref.: 8929.52
Avg. size of reached set after ref.:  5993.91

Total time for CEGAR algorithm:     110.417s
Time for refinements:                21.145s
Average time for refinement:          0.067s
Max time for refinement:              2.299s

Code Coverage
-----------------------------
  Function coverage:      0.657
  Visited lines:          2884
  Total lines:            4193
  Line coverage:          0.688
  Visited conditions:     516
  Total conditions:       830
  Condition coverage:     0.622

CPAchecker general statistics
-----------------------------
Number of program locations:     5632
Number of CFA edges:             6266
Number of relevant variables:    958
Number of functions:             207
Number of loops:                 63
Size of reached set:             18262
  Number of reached locations:   1741 (31%)
    Avg states per location:     10
    Max states per location:     384 (at node N304)
  Number of reached functions:   136 (66%)
  Number of partitions:          18231
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N4113 (before line 11104), Function main called from node N4045, stack depth 1 [7c2dfa2], stack [main]])
  Number of target states:       1
  Size of final wait list        74

Time for analysis setup:          7.016s
  Time for loading CPAs:          1.103s
  Time for loading parser:        0.764s
  Time for CFA construction:      4.995s
    Time for parsing file(s):     1.228s
    Time for AST to CFA:          1.727s
    Time for CFA sanity check:    0.420s
    Time for post-processing:     1.450s
      Time for var class.:        0.604s
Time for Analysis:              110.417s
CPU time for analysis:          110.420s
Time for analyzing result:        0.015s
Total time for CPAchecker:      117.437s
Total CPU time for CPAchecker:  117.420s
Time for statistics:              0.456s

Time for Garbage Collector:       7.431s (in 304 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                229MB (   219 MiB) max;    104MB (    99 MiB) avg;    239MB (   228 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     39MB (    37 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           271MB (   258 MiB) max;    165MB (   157 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     41MB (    40 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8080MB (  7706 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 6577) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
