scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_bitvector_linux-3.16-rc1.tar.xz-43_2a-drivers--net--xen-netfront.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_itylfuee/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11087: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11089: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11091: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10983: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __skb_get_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xen_has_pv_nic_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_page_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_free_grant_references to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unbind_from_irqhandler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_frontend_closed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notify_peers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_dev_fatal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_percpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_query_foreign_access to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_end_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_release_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_scanf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_switch_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function notify_remote_via_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_skb_features to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_claim_grant_reference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_phys_to_machine to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gnttab_grant_foreign_access_ref to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            31566 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  27396 (87%)
  Because of loop head:            4152 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18 (0%)
  Times precision was empty:       29844 (95%)
  Times precision was {false}:     329 (1%)
  Times result was cached:         1267 (4%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      126 (0%)
  Times result was 'false':        528 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         18442
  BDD entailment checks:           5130
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          60
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         2571
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 5.65
Number of irrelevant predicates:          1799 (70%)
Number of preds handled by boolean abs:   171 (7%)
  Total number of models for allsat:      137
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.09

Time for post operator:                  8.164s
  Time for path formula creation:        7.941s
Time for strengthen operator:            0.334s
Time for prec operator:                  3.044s
  Time for abstraction:                  2.035s (Max:     0.019s, Count: 31566)
    Boolean abstraction:                 0.189s
    Solving time:                        0.227s (Max:     0.013s)
    Model enumeration time:              0.027s
    Time for BDD construction:           0.034s (Max:     0.008s)
Time for merge operator:                 0.359s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     0.254s

Number of path formula cache hits:   138671 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.062s

Total number of created targets for pointer analysis: 2335
   Number of created targets for uf: *(void)* is 18
   Number of created targets for uf: *unsigned_short_int is 5
   Number of created targets for uf: *unsigned_char is 41
   Number of created targets for uf: *unsigned_long_long_int is 83
   Number of created targets for uf: *unsigned_int is 181
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               218
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         282 (count: 37526, min: 0, max: 69, avg: 0.01)
Time for BDD node cleanup:                             0.056s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.646s
  Time for transition matches:                         0.326s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       153296 (count: 153296, min: 1, max: 1, avg: 1.00) [1 x 153296]

CPA algorithm statistics
------------------------
Number of iterations:            104319
Max size of waitlist:            45
Average size of waitlist:        19
Number of computed successors:   116217
Max successors for one state:    2
Number of times merged:          6656
Number of times stopped:         11166
Number of times breaked:         18

Total time for CPA algorithm:        21.364s (Max:     3.484s)
  Time for choose from waitlist:      0.257s
  Time for precision adjustment:      5.121s
  Time for transfer relation:        12.816s
  Time for merge operator:            0.735s
  Time for stop operator:             0.386s
  Time for adding to reached set:     0.608s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   18
Avg. length of target path (in blocks):                1039 (count: 18, min: 39, max: 70, avg: 57.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.296s
  Counterexample analysis:                             0.690s (Max:     0.071s, Calls: 18)
    Refinement sat check:                              0.443s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.034s
  Precision update:                                    0.011s
  ARG update:                                          0.517s

Length of refined path (in blocks):                     462 (count: 18, min: 20, max: 49, avg: 25.67)
Number of affected states:                              138 (count: 18, min: 1, max: 48, avg: 7.67)
Length (states) of path with itp 'true':                306 (count: 18, min: 0, max: 18, avg: 17.00)
Length (states) of path with itp non-trivial itp:       138 (count: 18, min: 1, max: 48, avg: 7.67)
Length (states) of path with itp 'false':                18 (count: 18, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 18, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             120 (count: 18, min: 0, max: 47, avg: 6.67)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                18
Number of successful refinements:     18
Number of failed refinements:         0
Max. size of reached set before ref.: 8381
Max. size of reached set after ref.:  93
Avg. size of reached set before ref.: 5648.67
Avg. size of reached set after ref.:  88.00

Total time for CEGAR algorithm:      22.903s
Time for refinements:                 1.534s
Average time for refinement:          0.085s
Max time for refinement:              0.175s

Code Coverage
-----------------------------
  Function coverage:      0.469
  Visited lines:          2267
  Total lines:            4193
  Line coverage:          0.541
  Visited conditions:     362
  Total conditions:       830
  Condition coverage:     0.436

CPAchecker general statistics
-----------------------------
Number of program locations:     5632
Number of CFA edges:             6266
Number of relevant variables:    958
Number of functions:             207
Number of loops:                 63
Size of reached set:             4431
  Number of reached locations:   1197 (21%)
    Avg states per location:     3
    Max states per location:     72 (at node N304)
  Number of reached functions:   97 (47%)
  Number of partitions:          4425
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N4113 (before line 11104), Function main called from node N4045, stack depth 1 [7c2dfa2], stack [main]])
  Number of target states:       0
  Size of final wait list        3

Time for analysis setup:          6.856s
  Time for loading CPAs:          1.102s
  Time for loading parser:        0.722s
  Time for CFA construction:      4.873s
    Time for parsing file(s):     1.194s
    Time for AST to CFA:          1.830s
    Time for CFA sanity check:    0.380s
    Time for post-processing:     1.230s
      Time for var class.:        0.554s
Time for Analysis:               22.912s
CPU time for analysis:           22.910s
Total time for CPAchecker:       29.773s
Total CPU time for CPAchecker:   29.760s
Time for statistics:              0.197s

Time for Garbage Collector:       0.932s (in 49 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                101MB (    96 MiB) max;     60MB (    57 MiB) avg;    104MB (    99 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
