scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--cdc_eem.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xjbeooix/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_resume to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_get_endpoints to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_copy_expand to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_le to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_driver_release_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_clone to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_device_suggests_idle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_skb_return to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            29266 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  25112 (86%)
  Because of loop head:            4113 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         41 (0%)
  Times precision was empty:       19041 (65%)
  Times precision was {false}:     482 (2%)
  Times result was cached:         9282 (32%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      461 (2%)
  Times result was 'false':        578 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         24755
  BDD entailment checks:           11105
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       30
Number of predicates discovered:          10
Number of abstraction locations:          72
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         21442
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 22.74
Number of irrelevant predicates:          12345 (58%)
Number of preds handled by boolean abs:   735 (3%)
  Total number of models for allsat:      539
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.17

Time for post operator:                  6.037s
  Time for path formula creation:        5.720s
Time for strengthen operator:            0.428s
Time for prec operator:                  6.698s
  Time for abstraction:                  5.693s (Max:     0.030s, Count: 29266)
    Boolean abstraction:                 0.858s
    Solving time:                        0.884s (Max:     0.014s)
    Model enumeration time:              0.079s
    Time for BDD construction:           0.123s (Max:     0.012s)
Time for merge operator:                 0.289s
Time for coverage check:                 0.096s
  Time for BDD entailment checks:        0.089s
Total time for SMT solver (w/o itp):     0.963s

Number of path formula cache hits:   150794 (84%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.029s

Total number of created targets for pointer analysis: 2008
   Number of created targets for uf: *(void)* is 406
   Number of created targets for uf: *(unsigned_char)* is 49
   Number of created targets for uf: *unsigned_int is 150


Number of BDD nodes:                               351
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1080 (count: 35517, min: 0, max: 77, avg: 0.03)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.823s
  Time for transition matches:                         0.316s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       151256 (count: 151256, min: 1, max: 1, avg: 1.00) [1 x 151256]

CPA algorithm statistics
------------------------
Number of iterations:            106438
Max size of waitlist:            30
Average size of waitlist:        12
Number of computed successors:   121532
Max successors for one state:    2
Number of times merged:          6825
Number of times stopped:         14431
Number of times breaked:         41

Total time for CPA algorithm:        23.053s (Max:     2.139s)
  Time for choose from waitlist:      0.175s
  Time for precision adjustment:      8.656s
  Time for transfer relation:        10.978s
  Time for merge operator:            0.812s
  Time for stop operator:             0.488s
  Time for adding to reached set:     0.597s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   41
Avg. length of target path (in blocks):                1653 (count: 41, min: 18, max: 57, avg: 40.32)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.747s
  Counterexample analysis:                             1.065s (Max:     0.037s, Calls: 41)
    Refinement sat check:                              0.603s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.094s
  Precision update:                                    0.067s
  ARG update:                                          0.461s

Length of refined path (in blocks):                    1299 (count: 41, min: 10, max: 50, avg: 31.68)
Number of affected states:                              688 (count: 41, min: 1, max: 43, avg: 16.78)
Length (states) of path with itp 'true':                570 (count: 41, min: 6, max: 30, avg: 13.90)
Length (states) of path with itp non-trivial itp:       688 (count: 41, min: 1, max: 43, avg: 16.78)
Length (states) of path with itp 'false':                41 (count: 41, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          13 (count: 41, min: 0, max: 1, avg: 0.32)
Equal non-trivial interpolants along paths:             634 (count: 41, min: 0, max: 41, avg: 15.46)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                41
Number of successful refinements:     41
Number of failed refinements:         0
Max. size of reached set before ref.: 4711
Max. size of reached set after ref.:  2937
Avg. size of reached set before ref.: 3082.24
Avg. size of reached set after ref.:  560.29

Total time for CEGAR algorithm:      25.072s
Time for refinements:                 1.987s
Average time for refinement:          0.048s
Max time for refinement:              0.133s

Code Coverage
-----------------------------
  Function coverage:      0.672
  Visited lines:          1351
  Total lines:            1443
  Line coverage:          0.936
  Visited conditions:     164
  Total conditions:       186
  Condition coverage:     0.882

CPAchecker general statistics
-----------------------------
Number of program locations:     1837
Number of CFA edges:             1923
Number of relevant variables:    200
Number of functions:             67
Number of loops:                 7
Size of reached set:             3124
  Number of reached locations:   494 (27%)
    Avg states per location:     6
    Max states per location:     61 (at node N343)
  Number of reached functions:   45 (67%)
  Number of partitions:          3086
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N535 (before line 6233), Function main called from node N512, stack depth 1 [47da3952], stack [main]])
  Number of target states:       0
  Size of final wait list        6

Time for analysis setup:          4.711s
  Time for loading CPAs:          0.974s
  Time for loading parser:        0.671s
  Time for CFA construction:      2.905s
    Time for parsing file(s):     0.914s
    Time for AST to CFA:          0.967s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.676s
      Time for var class.:        0.265s
Time for Analysis:               25.072s
CPU time for analysis:           25.070s
Total time for CPAchecker:       29.797s
Total CPU time for CPAchecker:   29.780s
Time for statistics:              0.163s

Time for Garbage Collector:       0.600s (in 47 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 76MB (    73 MiB) max;     48MB (    46 MiB) avg;     79MB (    75 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8074MB (  7700 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
