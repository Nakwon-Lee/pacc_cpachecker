scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--cdc_eem.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_56hss_ax/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_resume to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_get_endpoints to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_copy_expand to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_le to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_clone to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_device_suggests_idle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_skb_return to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_driver_release_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            19294 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  15422 (80%)
  Because of loop head:            3783 (20%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         89 (0%)
  Times precision was empty:       7899 (41%)
  Times precision was {false}:     331 (2%)
  Times result was cached:         10287 (53%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      777 (4%)
  Times result was 'false':        1119 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         24372
  BDD entailment checks:           6748
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       30
Number of predicates discovered:          26
Number of abstraction locations:          86
Max number of predicates per location:    8
Avg number of predicates per location:    2
Total predicates per abstraction:         21520
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 19.42
Number of irrelevant predicates:          9833 (46%)
Number of preds handled by boolean abs:   1825 (8%)
  Total number of models for allsat:      971
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.25

Time for post operator:                  5.281s
  Time for path formula creation:        5.096s
Time for strengthen operator:            0.222s
Time for prec operator:                  7.365s
  Time for abstraction:                  6.673s (Max:     0.036s, Count: 19294)
    Boolean abstraction:                 1.650s
    Solving time:                        1.376s (Max:     0.064s)
    Model enumeration time:              0.194s
    Time for BDD construction:           0.168s (Max:     0.013s)
Time for merge operator:                 0.529s
Time for coverage check:                 0.053s
  Time for BDD entailment checks:        0.032s
Total time for SMT solver (w/o itp):     1.571s

Number of path formula cache hits:   112753 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.536s

Total number of created targets for pointer analysis: 818
   Number of created targets for uf: *(void)* is 61
   Number of created targets for uf: *(unsigned_char)* is 21
   Number of created targets for uf: *unsigned_int is 349


Number of BDD nodes:                               869
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2352 (count: 21516, min: 0, max: 605, avg: 0.11)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.680s
  Time for transition matches:                         0.242s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.006s
Automaton transfers with branching:                0
Automaton transfer successors:                       125821 (count: 125821, min: 1, max: 1, avg: 1.00) [1 x 125821]

CPA algorithm statistics
------------------------
Number of iterations:            81415
Max size of waitlist:            105
Average size of waitlist:        30
Number of computed successors:   96789
Max successors for one state:    2
Number of times merged:          8812
Number of times stopped:         12294
Number of times breaked:         89

Total time for CPA algorithm:        20.628s (Max:     1.924s)
  Time for choose from waitlist:      0.180s
  Time for precision adjustment:      8.928s
  Time for transfer relation:         8.688s
  Time for merge operator:            0.909s
  Time for stop operator:             0.384s
  Time for adding to reached set:     0.405s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   89
Avg. length of target path (in blocks):                4016 (count: 89, min: 18, max: 72, avg: 45.12)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.627s
  Counterexample analysis:                             2.789s (Max:     0.089s, Calls: 89)
    Refinement sat check:                              1.624s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.028s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.086s
  Precision update:                                    0.176s
  ARG update:                                          0.432s

Length of refined path (in blocks):                    3003 (count: 89, min: 10, max: 62, avg: 33.74)
Number of affected states:                              970 (count: 89, min: 1, max: 52, avg: 10.90)
Length (states) of path with itp 'true':               1944 (count: 89, min: 6, max: 30, avg: 21.84)
Length (states) of path with itp non-trivial itp:       970 (count: 89, min: 1, max: 52, avg: 10.90)
Length (states) of path with itp 'false':                89 (count: 89, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          32 (count: 89, min: 0, max: 8, avg: 0.36)
Equal non-trivial interpolants along paths:             849 (count: 89, min: 0, max: 50, avg: 9.54)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                89
Number of successful refinements:     89
Number of failed refinements:         0
Max. size of reached set before ref.: 5469
Max. size of reached set after ref.:  4620
Avg. size of reached set before ref.: 1387.76
Avg. size of reached set after ref.:  521.44

Total time for CEGAR algorithm:      24.670s
Time for refinements:                 3.998s
Average time for refinement:          0.044s
Max time for refinement:              0.104s

Code Coverage
-----------------------------
  Function coverage:      0.627
  Visited lines:          1339
  Total lines:            1443
  Line coverage:          0.928
  Visited conditions:     164
  Total conditions:       186
  Condition coverage:     0.882

CPAchecker general statistics
-----------------------------
Number of program locations:     1837
Number of CFA edges:             1923
Number of relevant variables:    200
Number of functions:             67
Number of loops:                 7
Size of reached set:             6273
  Number of reached locations:   476 (26%)
    Avg states per location:     13
    Max states per location:     128 (at node N343)
  Number of reached functions:   42 (63%)
  Number of partitions:          6204
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N535 (before line 6233), Function main called from node N512, stack depth 1 [2b62442c], stack [main]])
  Number of target states:       0
  Size of final wait list        97

Time for analysis setup:          5.073s
  Time for loading CPAs:          1.079s
  Time for loading parser:        0.718s
  Time for CFA construction:      3.169s
    Time for parsing file(s):     0.998s
    Time for AST to CFA:          1.080s
    Time for CFA sanity check:    0.154s
    Time for post-processing:     0.710s
      Time for var class.:        0.274s
Time for Analysis:               24.670s
CPU time for analysis:           24.670s
Total time for CPAchecker:       29.748s
Total CPU time for CPAchecker:   29.730s
Time for statistics:              0.256s

Time for Garbage Collector:       0.587s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 79MB (    75 MiB) max;     47MB (    45 MiB) avg;     82MB (    78 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
