scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--cdc_eem.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_smi1sutt/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_resume to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_clone to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_device_suggests_idle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_le to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_skb_return to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_copy_expand to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_get_endpoints to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_driver_release_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            39347 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  33729 (86%)
  Because of loop head:            5570 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         48 (0%)
  Times precision was empty:       22494 (57%)
  Times precision was {false}:     613 (2%)
  Times result was cached:         15945 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      295 (1%)
  Times result was 'false':        752 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         30661
  BDD entailment checks:           13779
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       30
Number of predicates discovered:          10
Number of abstraction locations:          55
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         23512
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 25.89
Number of irrelevant predicates:          15296 (65%)
Number of preds handled by boolean abs:   428 (2%)
  Total number of models for allsat:      410
  Max number of models for allsat:        9
  Avg number of models for allsat:        1.39

Time for post operator:                  7.483s
  Time for path formula creation:        7.213s
Time for strengthen operator:            0.327s
Time for prec operator:                  5.973s
  Time for abstraction:                  4.981s (Max:     0.034s, Count: 39347)
    Boolean abstraction:                 0.682s
    Solving time:                        0.743s (Max:     0.017s)
    Model enumeration time:              0.108s
    Time for BDD construction:           0.068s (Max:     0.012s)
Time for merge operator:                 0.353s
Time for coverage check:                 0.129s
  Time for BDD entailment checks:        0.120s
Total time for SMT solver (w/o itp):     0.851s

Number of path formula cache hits:   180583 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.576s

Total number of created targets for pointer analysis: 4383
   Number of created targets for uf: *(void)* is 1831
   Number of created targets for uf: *(unsigned_char)* is 103
   Number of created targets for uf: *unsigned_int is 913


Number of BDD nodes:                               339
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         714 (count: 41341, min: 0, max: 70, avg: 0.02)
Time for BDD node cleanup:                             0.027s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.661s
  Time for transition matches:                         0.310s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       202443 (count: 202443, min: 1, max: 1, avg: 1.00) [1 x 202443]

CPA algorithm statistics
------------------------
Number of iterations:            142127
Max size of waitlist:            37
Average size of waitlist:        19
Number of computed successors:   161787
Max successors for one state:    2
Number of times merged:          8441
Number of times stopped:         18887
Number of times breaked:         48

Total time for CPA algorithm:        23.493s (Max:     2.138s)
  Time for choose from waitlist:      0.227s
  Time for precision adjustment:      8.212s
  Time for transfer relation:        11.846s
  Time for merge operator:            0.705s
  Time for stop operator:             0.658s
  Time for adding to reached set:     0.529s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   48
Avg. length of target path (in blocks):                2157 (count: 48, min: 18, max: 61, avg: 44.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.751s
  Counterexample analysis:                             1.089s (Max:     0.042s, Calls: 48)
    Refinement sat check:                              0.658s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.077s
  Precision update:                                    0.039s
  ARG update:                                          0.470s

Length of refined path (in blocks):                    1562 (count: 48, min: 10, max: 49, avg: 32.54)
Number of affected states:                              672 (count: 48, min: 1, max: 31, avg: 14.00)
Length (states) of path with itp 'true':                842 (count: 48, min: 6, max: 30, avg: 17.54)
Length (states) of path with itp non-trivial itp:       672 (count: 48, min: 1, max: 31, avg: 14.00)
Length (states) of path with itp 'false':                48 (count: 48, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 48, min: 0, max: 1, avg: 0.02)
Equal non-trivial interpolants along paths:             623 (count: 48, min: 0, max: 30, avg: 12.98)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                48
Number of successful refinements:     48
Number of failed refinements:         0
Max. size of reached set before ref.: 5173
Max. size of reached set after ref.:  2270
Avg. size of reached set before ref.: 3334.13
Avg. size of reached set after ref.:  468.17

Total time for CEGAR algorithm:      25.595s
Time for refinements:                 2.067s
Average time for refinement:          0.043s
Max time for refinement:              0.126s

Code Coverage
-----------------------------
  Function coverage:      0.657
  Visited lines:          1347
  Total lines:            1443
  Line coverage:          0.933
  Visited conditions:     164
  Total conditions:       186
  Condition coverage:     0.882

CPAchecker general statistics
-----------------------------
Number of program locations:     1837
Number of CFA edges:             1923
Number of relevant variables:    200
Number of functions:             67
Number of loops:                 7
Size of reached set:             4583
  Number of reached locations:   490 (27%)
    Avg states per location:     9
    Max states per location:     80 (at node N343)
  Number of reached functions:   44 (66%)
  Number of partitions:          4567
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N535 (before line 6233), Function main called from node N512, stack depth 1 [2b62442c], stack [main]])
  Number of target states:       0
  Size of final wait list        20

Time for analysis setup:          4.662s
  Time for loading CPAs:          0.900s
  Time for loading parser:        0.731s
  Time for CFA construction:      2.892s
    Time for parsing file(s):     0.896s
    Time for AST to CFA:          0.989s
    Time for CFA sanity check:    0.151s
    Time for post-processing:     0.679s
      Time for var class.:        0.267s
Time for Analysis:               25.595s
CPU time for analysis:           25.590s
Total time for CPAchecker:       30.261s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.158s

Time for Garbage Collector:       0.784s (in 62 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 85MB (    81 MiB) max;     52MB (    49 MiB) avg;     90MB (    86 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
