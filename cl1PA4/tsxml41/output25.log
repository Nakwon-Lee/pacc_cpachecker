scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-kernel--locking--locktorture.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xq79t1mu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 1848: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 1851: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 1854: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_random to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_init_begin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_cleanup to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _torture_stop_kthread to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2548: Ignoring function call through function pointer *(cur_ops->init): (*(cur_ops->init))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function torture_init_end to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_onoff_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_shuffle_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_shutdown_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_stutter_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _torture_create_kthread to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function torture_onoff_failures to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            28598 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  22972 (80%)
  Because of loop head:            5529 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         97 (0%)
  Times precision was empty:       7651 (27%)
  Times precision was {false}:     511 (2%)
  Times result was cached:         20019 (70%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      417 (1%)
  Times result was 'false':        1124 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         31977
  BDD entailment checks:           10479
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          9
Number of abstraction locations:          62
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         26627
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 28.69
Number of irrelevant predicates:          12953 (49%)
Number of preds handled by boolean abs:   658 (2%)
  Total number of models for allsat:      639
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.53

Time for post operator:                  5.962s
  Time for path formula creation:        5.726s
Time for strengthen operator:            0.324s
Time for prec operator:                  6.873s
  Time for abstraction:                  5.970s (Max:     0.035s, Count: 28598)
    Boolean abstraction:                 0.863s
    Solving time:                        0.826s (Max:     0.017s)
    Model enumeration time:              0.146s
    Time for BDD construction:           0.099s (Max:     0.010s)
Time for merge operator:                 0.533s
Time for coverage check:                 0.065s
  Time for BDD entailment checks:        0.058s
Total time for SMT solver (w/o itp):     0.972s

Number of path formula cache hits:   161947 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.918s

Total number of created targets for pointer analysis: 426
   Number of created targets for uf: *(struct_lock_torture_ops)* is 143


Number of BDD nodes:                               718
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1101 (count: 23434, min: 0, max: 158, avg: 0.05)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.810s
  Time for transition matches:                         0.289s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                       178424 (count: 178424, min: 1, max: 1, avg: 1.00) [1 x 178424]

CPA algorithm statistics
------------------------
Number of iterations:            122122
Max size of waitlist:            304
Average size of waitlist:        131
Number of computed successors:   143810
Max successors for one state:    2
Number of times merged:          10749
Number of times stopped:         17362
Number of times breaked:         97

Total time for CPA algorithm:        22.146s (Max:     1.503s)
  Time for choose from waitlist:      0.203s
  Time for precision adjustment:      8.703s
  Time for transfer relation:        10.153s
  Time for merge operator:            0.882s
  Time for stop operator:             0.458s
  Time for adding to reached set:     0.479s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   97
Avg. length of target path (in blocks):                4005 (count: 97, min: 29, max: 52, avg: 41.29)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.113s
  Counterexample analysis:                             2.238s (Max:     0.037s, Calls: 97)
    Refinement sat check:                              1.610s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.006s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.111s
  Precision update:                                    0.083s
  ARG update:                                          0.561s

Length of refined path (in blocks):                    3733 (count: 97, min: 8, max: 51, avg: 38.48)
Number of affected states:                             2444 (count: 97, min: 1, max: 48, avg: 25.20)
Length (states) of path with itp 'true':               1192 (count: 97, min: 0, max: 22, avg: 12.29)
Length (states) of path with itp non-trivial itp:      2444 (count: 97, min: 1, max: 48, avg: 25.20)
Length (states) of path with itp 'false':                97 (count: 97, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 97, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2347 (count: 97, min: 0, max: 47, avg: 24.20)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                97
Number of successful refinements:     97
Number of failed refinements:         0
Max. size of reached set before ref.: 15276
Max. size of reached set after ref.:  13975
Avg. size of reached set before ref.: 4981.82
Avg. size of reached set after ref.:  3787.06

Total time for CEGAR algorithm:      26.262s
Time for refinements:                 3.790s
Average time for refinement:          0.039s
Max time for refinement:              0.076s

Code Coverage
-----------------------------
  Function coverage:      0.674
  Visited lines:          841
  Total lines:            973
  Line coverage:          0.864
  Visited conditions:     204
  Total conditions:       256
  Condition coverage:     0.797

CPAchecker general statistics
-----------------------------
Number of program locations:     1370
Number of CFA edges:             1513
Number of relevant variables:    144
Number of functions:             46
Number of loops:                 12
Size of reached set:             9433
  Number of reached locations:   507 (37%)
    Avg states per location:     18
    Max states per location:     96 (at node N295)
  Number of reached functions:   31 (67%)
  Number of partitions:          9383
    Avg size of partitions:      1
    Max size of partitions:      15 (with key [N637 (before line 2717), Function main called from node N612, stack depth 1 [1021f6c9], stack [main]])
  Number of target states:       0
  Size of final wait list        245

Time for analysis setup:          4.012s
  Time for loading CPAs:          0.932s
  Time for loading parser:        0.658s
  Time for CFA construction:      2.257s
    Time for parsing file(s):     0.731s
    Time for AST to CFA:          0.686s
    Time for CFA sanity check:    0.156s
    Time for post-processing:     0.514s
      Time for var class.:        0.202s
Time for Analysis:               26.262s
CPU time for analysis:           26.260s
Total time for CPAchecker:       30.287s
Total CPU time for CPAchecker:   30.270s
Time for statistics:              0.276s

Time for Garbage Collector:       0.785s (in 58 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 94MB (    90 MiB) max;     50MB (    47 MiB) avg;    101MB (    97 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
