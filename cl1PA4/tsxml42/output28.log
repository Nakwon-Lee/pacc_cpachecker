scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3z2lxpvr/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            28129 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  23672 (84%)
  Because of loop head:            4423 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         34 (0%)
  Times precision was empty:       22178 (79%)
  Times precision was {false}:     569 (2%)
  Times result was cached:         5350 (19%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      32 (0%)
  Times result was 'false':        1541 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         25342
  BDD entailment checks:           9162
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          8
Number of abstraction locations:          35
Max number of predicates per location:    7
Avg number of predicates per location:    1
Total predicates per abstraction:         10775
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 17.93
Number of irrelevant predicates:          8329 (77%)
Number of preds handled by boolean abs:   97 (1%)
  Total number of models for allsat:      218
  Max number of models for allsat:        64
  Avg number of models for allsat:        6.81

Time for post operator:                  7.011s
  Time for path formula creation:        6.668s
Time for strengthen operator:            0.368s
Time for prec operator:                  4.364s
  Time for abstraction:                  3.489s (Max:     0.082s, Count: 28129)
    Boolean abstraction:                 0.339s
    Solving time:                        0.404s (Max:     0.018s)
    Model enumeration time:              0.145s
    Time for BDD construction:           0.046s (Max:     0.025s)
Time for merge operator:                 0.500s
Time for coverage check:                 0.086s
  Time for BDD entailment checks:        0.081s
Total time for SMT solver (w/o itp):     0.549s

Number of path formula cache hits:   159841 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.686s

Total number of created targets for pointer analysis: 1500
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_char is 21
   Number of created targets for uf: *unsigned_long_long_int is 57
   Number of created targets for uf: *unsigned_int is 211


Number of BDD nodes:                               767
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         202 (count: 34780, min: 0, max: 44, avg: 0.01)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.769s
  Time for transition matches:                         0.408s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       182951 (count: 182951, min: 1, max: 1, avg: 1.00) [1 x 182951]

CPA algorithm statistics
------------------------
Number of iterations:            105737
Max size of waitlist:            230
Average size of waitlist:        111
Number of computed successors:   125067
Max successors for one state:    2
Number of times merged:          8090
Number of times stopped:         14578
Number of times breaked:         34

Total time for CPA algorithm:        20.919s (Max:     2.299s)
  Time for choose from waitlist:      0.200s
  Time for precision adjustment:      6.349s
  Time for transfer relation:        11.139s
  Time for merge operator:            0.905s
  Time for stop operator:             0.489s
  Time for adding to reached set:     0.564s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   34
Avg. length of target path (in blocks):                1889 (count: 34, min: 50, max: 56, avg: 55.56)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.947s
  Counterexample analysis:                             1.386s (Max:     0.065s, Calls: 34)
    Refinement sat check:                              0.949s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.029s
  Precision update:                                    0.050s
  ARG update:                                          0.430s

Length of refined path (in blocks):                    1564 (count: 34, min: 46, max: 46, avg: 46.00)
Number of affected states:                               34 (count: 34, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':               1496 (count: 34, min: 44, max: 44, avg: 44.00)
Length (states) of path with itp non-trivial itp:        34 (count: 34, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                34 (count: 34, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 34, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 34, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                34
Number of successful refinements:     34
Number of failed refinements:         0
Max. size of reached set before ref.: 3854
Max. size of reached set after ref.:  223
Avg. size of reached set before ref.: 3362.18
Avg. size of reached set after ref.:  223.00

Total time for CEGAR algorithm:      23.201s
Time for refinements:                 2.270s
Average time for refinement:          0.066s
Max time for refinement:              0.165s

Code Coverage
-----------------------------
  Function coverage:      0.409
  Visited lines:          2134
  Total lines:            4144
  Line coverage:          0.515
  Visited conditions:     376
  Total conditions:       838
  Condition coverage:     0.449

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             2216
  Number of reached locations:   866 (16%)
    Avg states per location:     2
    Max states per location:     23 (at node N279)
  Number of reached functions:   72 (41%)
  Number of partitions:          2210
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       0
  Size of final wait list        196

Time for analysis setup:          7.018s
  Time for loading CPAs:          1.144s
  Time for loading parser:        0.761s
  Time for CFA construction:      4.941s
    Time for parsing file(s):     1.184s
    Time for AST to CFA:          1.811s
    Time for CFA sanity check:    0.395s
    Time for post-processing:     1.307s
      Time for var class.:        0.561s
Time for Analysis:               23.201s
CPU time for analysis:           23.190s
Total time for CPAchecker:       30.223s
Total CPU time for CPAchecker:   30.200s
Time for statistics:              0.178s

Time for Garbage Collector:       0.828s (in 57 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 90MB (    86 MiB) max;     60MB (    57 MiB) avg;     94MB (    89 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     40MB (    38 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        49MB (    46 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
