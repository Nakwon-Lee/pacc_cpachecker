scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_oiy4za_d/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10526: Ignoring function call through function pointer *(dev->transport->get_device_type): tmp___6 = (*(dev->transport->get_device_type))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function fw_core_add_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_run_transaction to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7612: Function pointer kref_sub::release points to fw_card_release, but no corresponding call edge was created during preprocessing. Ignoring function pointer call: (*release)(kref); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7612: Ignoring function call through function pointer *release: (*release)(kref); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_execute_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11318: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(112UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11324: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(696UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11328: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1536UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11330: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1000UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1964014 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1810337 (92%)
  Because of loop head:            150608 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3069 (0%)
  Times precision was empty:       720257 (37%)
  Times precision was {false}:     5962 (0%)
  Times result was cached:         1235666 (63%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2129 (0%)
  Times result was 'false':        76615 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         1826594
  BDD entailment checks:           811056
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          11
Number of abstraction locations:          199
Max number of predicates per location:    8
Avg number of predicates per location:    1
Total predicates per abstraction:         2126758
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 262.85
Number of irrelevant predicates:          1431177 (67%)
Number of preds handled by boolean abs:   3143 (0%)
  Total number of models for allsat:      5092
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.39

Time for post operator:                104.735s
  Time for path formula creation:      100.964s
Time for strengthen operator:            7.946s
Time for prec operator:                142.627s
  Time for abstraction:                117.800s (Max:     0.294s, Count: 1964014)
    Boolean abstraction:                 3.545s
    Solving time:                        3.959s (Max:     0.018s)
    Model enumeration time:              1.739s
    Time for BDD construction:           0.221s (Max:     0.011s)
Time for merge operator:                 8.337s
Time for coverage check:                 0.754s
  Time for BDD entailment checks:        0.521s
Total time for SMT solver (w/o itp):     5.698s

Number of path formula cache hits:   10614463 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    53.102s

Total number of created targets for pointer analysis: 222165
   Number of created targets for uf: *signed_int is 412
   Number of created targets for uf: *unsigned_char is 9409
   Number of created targets for uf: *unsigned_long_long_int is 3
   Number of created targets for uf: *unsigned_int is 1144
   Number of created targets for uf: *unsigned_long_int is 296


Number of BDD nodes:                               1630
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4439 (count: 1576163, min: 0, max: 155, avg: 0.00)
Time for BDD node cleanup:                             0.239s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.693s
  Time for transition matches:                         6.276s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.025s
Automaton transfers with branching:                0
Automaton transfer successors:                      9599147 (count: 9599147, min: 1, max: 1, avg: 1.00) [1 x 9599147]

CPA algorithm statistics
------------------------
Number of iterations:            6596666
Max size of waitlist:            1032
Average size of waitlist:        873
Number of computed successors:   7528186
Max successors for one state:    2
Number of times merged:          507769
Number of times stopped:         691153
Number of times breaked:         3069

Total time for CPA algorithm:       436.978s (Max:     2.062s)
  Time for choose from waitlist:      3.198s
  Time for precision adjustment:    189.775s
  Time for transfer relation:       191.197s
  Time for merge operator:           14.955s
  Time for stop operator:             8.504s
  Time for adding to reached set:    12.197s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3069
Avg. length of target path (in blocks):              730111 (count: 3069, min: 68, max: 294, avg: 237.90)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 398.044s
  Counterexample analysis:                           381.416s (Max:     0.307s, Calls: 3069)
    Refinement sat check:                            179.793s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.382s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.433s
  Precision update:                                    1.132s
  ARG update:                                         11.195s

Length of refined path (in blocks):                  721929 (count: 3068, min: 46, max: 293, avg: 235.31)
Number of affected states:                            49996 (count: 3068, min: 1, max: 132, avg: 16.30)
Length (states) of path with itp 'true':             668865 (count: 3068, min: 0, max: 285, avg: 218.01)
Length (states) of path with itp non-trivial itp:     49996 (count: 3068, min: 1, max: 132, avg: 16.30)
Length (states) of path with itp 'false':              3068 (count: 3068, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 3068, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           46928 (count: 3068, min: 0, max: 131, avg: 15.30)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3069
Number of successful refinements:     3068
Number of failed refinements:         0
Max. size of reached set before ref.: 16266
Max. size of reached set after ref.:  15903
Avg. size of reached set before ref.: 11873.67
Avg. size of reached set after ref.:  9674.01

Total time for CEGAR algorithm:     893.264s
Time for refinements:               436.209s
Average time for refinement:          0.142s
Max time for refinement:              0.343s

Code Coverage
-----------------------------
  Function coverage:      0.551
  Visited lines:          2315
  Total lines:            4144
  Line coverage:          0.559
  Visited conditions:     446
  Total conditions:       838
  Condition coverage:     0.532

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             9920
  Number of reached locations:   1086 (20%)
    Avg states per location:     9
    Max states per location:     117 (at node N279)
  Number of reached functions:   97 (55%)
  Number of partitions:          9900
    Avg size of partitions:      1
    Max size of partitions:      13 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       1
  Size of final wait list        1022

Time for analysis setup:          6.996s
  Time for loading CPAs:          1.082s
  Time for loading parser:        0.664s
  Time for CFA construction:      5.067s
    Time for parsing file(s):     1.204s
    Time for AST to CFA:          1.917s
    Time for CFA sanity check:    0.374s
    Time for post-processing:     1.343s
      Time for var class.:        0.576s
Time for Analysis:              893.265s
CPU time for analysis:          893.180s
Total time for CPAchecker:      900.265s
Total CPU time for CPAchecker:  900.170s
Time for statistics:              0.269s

Time for Garbage Collector:      24.206s (in 919 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                648MB (   618 MiB) max;    372MB (   355 MiB) avg;    703MB (   671 MiB) peak
Used non-heap memory:             41MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           924MB (   881 MiB) max;    549MB (   524 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8137MB (  7760 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
