scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_m4c0fkyw/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11318: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(112UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11324: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(696UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11328: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1536UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11330: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1000UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_add_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_run_transaction to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7612: Function pointer kref_sub::release points to fw_card_release, but no corresponding call edge was created during preprocessing. Ignoring function pointer call: (*release)(kref); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7612: Ignoring function call through function pointer *release: (*release)(kref); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function sg_miter_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_execute_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10526: Ignoring function call through function pointer *(dev->transport->get_device_type): tmp___6 = (*(dev->transport->get_device_type))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2165702 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2032039 (94%)
  Because of loop head:            132696 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         967 (0%)
  Times precision was empty:       593845 (27%)
  Times precision was {false}:     16745 (1%)
  Times result was cached:         1552493 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2619 (0%)
  Times result was 'false':        78957 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2842433
  BDD entailment checks:           958069
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          11
Number of abstraction locations:          260
Max number of predicates per location:    9
Avg number of predicates per location:    1
Total predicates per abstraction:         2525440
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 130.42
Number of irrelevant predicates:          2176791 (86%)
Number of preds handled by boolean abs:   6418 (0%)
  Total number of models for allsat:      52098
  Max number of models for allsat:        128
  Avg number of models for allsat:        19.89

Time for post operator:                183.942s
  Time for path formula creation:      177.328s
Time for strengthen operator:           14.505s
Time for prec operator:                299.485s
  Time for abstraction:                271.050s (Max:     4.015s, Count: 2165702)
    Boolean abstraction:                30.003s
    Solving time:                       12.056s (Max:     0.019s)
    Model enumeration time:             23.993s
    Time for BDD construction:           1.156s (Max:     0.047s)
Time for merge operator:                15.436s
Time for coverage check:                 1.185s
  Time for BDD entailment checks:        0.812s
Total time for SMT solver (w/o itp):    36.049s

Number of path formula cache hits:   15711229 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   122.930s

Total number of created targets for pointer analysis: 133303
   Number of created targets for uf: *signed_int is 1953
   Number of created targets for uf: *unsigned_char is 763
   Number of created targets for uf: *(struct_list_head)* is 85
   Number of created targets for uf: *unsigned_long_long_int is 3975
   Number of created targets for uf: *unsigned_int is 72


Number of BDD nodes:                               5025
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5690 (count: 1663186, min: 0, max: 246, avg: 0.00)
Time for BDD node cleanup:                             0.293s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 23.746s
  Time for transition matches:                        14.128s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                     16401972 (count: 16401972, min: 1, max: 1, avg: 1.00) [1 x 16401972]

CPA algorithm statistics
------------------------
Number of iterations:            8721699
Max size of waitlist:            1793
Average size of waitlist:        853
Number of computed successors:   10683422
Max successors for one state:    2
Number of times merged:          942182
Number of times stopped:         1269333
Number of times breaked:         967

Total time for CPA algorithm:       786.776s (Max:     5.463s)
  Time for choose from waitlist:      4.542s
  Time for precision adjustment:    366.893s
  Time for transfer relation:       328.914s
  Time for merge operator:           28.022s
  Time for stop operator:            12.498s
  Time for adding to reached set:    19.217s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   967
Avg. length of target path (in blocks):              117953 (count: 967, min: 50, max: 162, avg: 121.98)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  71.987s
  Counterexample analysis:                            53.032s (Max:     0.140s, Calls: 967)
    Refinement sat check:                             32.358s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.059s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.252s
  Precision update:                                    0.496s
  ARG update:                                         17.397s

Length of refined path (in blocks):                  115909 (count: 967, min: 46, max: 161, avg: 119.86)
Number of affected states:                            22012 (count: 967, min: 1, max: 127, avg: 22.76)
Length (states) of path with itp 'true':              92930 (count: 967, min: 0, max: 147, avg: 96.10)
Length (states) of path with itp non-trivial itp:     22012 (count: 967, min: 1, max: 127, avg: 22.76)
Length (states) of path with itp 'false':               967 (count: 967, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 967, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           21045 (count: 967, min: 0, max: 126, avg: 21.76)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                967
Number of successful refinements:     967
Number of failed refinements:         0
Max. size of reached set before ref.: 66338
Max. size of reached set after ref.:  45222
Avg. size of reached set before ref.: 28383.31
Avg. size of reached set after ref.:  18756.05

Total time for CEGAR algorithm:     893.269s
Time for refinements:                93.457s
Average time for refinement:          0.096s
Max time for refinement:              0.380s

Code Coverage
-----------------------------
  Function coverage:      0.563
  Visited lines:          2569
  Total lines:            4144
  Line coverage:          0.620
  Visited conditions:     458
  Total conditions:       838
  Condition coverage:     0.547

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             25573
  Number of reached locations:   1298 (24%)
    Avg states per location:     19
    Max states per location:     191 (at node N44)
  Number of reached functions:   99 (56%)
  Number of partitions:          25525
    Avg size of partitions:      1
    Max size of partitions:      17 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       0
  Size of final wait list        899

Time for analysis setup:          6.996s
  Time for loading CPAs:          1.117s
  Time for loading parser:        0.733s
  Time for CFA construction:      4.965s
    Time for parsing file(s):     1.103s
    Time for AST to CFA:          1.813s
    Time for CFA sanity check:    0.370s
    Time for post-processing:     1.464s
      Time for var class.:        0.596s
Time for Analysis:              893.269s
CPU time for analysis:          893.190s
Total time for CPAchecker:      900.270s
Total CPU time for CPAchecker:  900.180s
Time for statistics:              0.477s

Time for Garbage Collector:      57.359s (in 688 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1835MB (  1750 MiB) max;    839MB (   800 MiB) avg;   1856MB (  1770 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1990MB (  1898 MiB) max;   1221MB (  1164 MiB) avg
Allocated non-heap memory:        44MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8220MB (  7839 MiB) max;   8144MB (  7767 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
