scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_stju2icu/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7612: Function pointer kref_sub::release points to fw_card_release, but no corresponding call edge was created during preprocessing. Ignoring function pointer call: (*release)(kref); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7612: Ignoring function call through function pointer *release: (*release)(kref); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function fw_run_transaction to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_execute_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11318: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(112UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11324: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(696UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11328: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1536UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11330: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1000UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function fw_core_add_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10526: Ignoring function call through function pointer *(dev->transport->get_device_type): tmp___6 = (*(dev->transport->get_device_type))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_add_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            768927 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  704915 (92%)
  Because of loop head:            62252 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1760 (0%)
  Times precision was empty:       342212 (45%)
  Times precision was {false}:     3852 (1%)
  Times result was cached:         420851 (55%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2012 (0%)
  Times result was 'false':        32863 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         530327
  BDD entailment checks:           160005
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          12
Number of abstraction locations:          343
Max number of predicates per location:    9
Avg number of predicates per location:    1
Total predicates per abstraction:         685583
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 116.91
Number of irrelevant predicates:          426452 (62%)
Number of preds handled by boolean abs:   2637 (0%)
  Total number of models for allsat:      6380
  Max number of models for allsat:        128
  Avg number of models for allsat:        3.17

Time for post operator:                 34.064s
  Time for path formula creation:       32.376s
Time for strengthen operator:            3.510s
Time for prec operator:                 63.295s
  Time for abstraction:                 54.049s (Max:     0.623s, Count: 768927)
    Boolean abstraction:                 3.689s
    Solving time:                        3.169s (Max:     0.034s)
    Model enumeration time:              2.122s
    Time for BDD construction:           0.166s (Max:     0.011s)
Time for merge operator:                 2.550s
Time for coverage check:                 0.307s
  Time for BDD entailment checks:        0.226s
Total time for SMT solver (w/o itp):     5.291s

Number of path formula cache hits:   4327164 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    17.504s

Total number of created targets for pointer analysis: 50318
   Number of created targets for uf: *signed_int is 11
   Number of created targets for uf: *unsigned_char is 1685
   Number of created targets for uf: *(struct_list_head)* is 55
   Number of created targets for uf: *unsigned_long_long_int is 363
   Number of created targets for uf: *unsigned_int is 335
   Number of created targets for uf: *unsigned_long_int is 6


Number of BDD nodes:                               4667
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4476 (count: 545959, min: 0, max: 266, avg: 0.01)
Time for BDD node cleanup:                             0.117s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.272s
  Time for transition matches:                         2.562s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                      3800858 (count: 3800858, min: 1, max: 1, avg: 1.00) [1 x 3800858]

CPA algorithm statistics
------------------------
Number of iterations:            2524360
Max size of waitlist:            156
Average size of waitlist:        74
Number of computed successors:   2858112
Max successors for one state:    2
Number of times merged:          185161
Number of times stopped:         268751
Number of times breaked:         1760

Total time for CPA algorithm:       179.742s (Max:     2.631s)
  Time for choose from waitlist:      1.324s
  Time for precision adjustment:     83.663s
  Time for transfer relation:        73.156s
  Time for merge operator:            5.141s
  Time for stop operator:             4.170s
  Time for adding to reached set:     4.645s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1760
Avg. length of target path (in blocks):              214145 (count: 1760, min: 50, max: 239, avg: 121.67)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  91.748s
  Counterexample analysis:                            85.012s (Max:     0.164s, Calls: 1760)
    Refinement sat check:                             50.273s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.118s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.240s
  Precision update:                                    0.750s
  ARG update:                                          4.444s

Length of refined path (in blocks):                  210597 (count: 1760, min: 46, max: 238, avg: 119.66)
Number of affected states:                            25276 (count: 1760, min: 1, max: 122, avg: 14.36)
Length (states) of path with itp 'true':             183561 (count: 1760, min: 0, max: 209, avg: 104.30)
Length (states) of path with itp non-trivial itp:     25276 (count: 1760, min: 1, max: 122, avg: 14.36)
Length (states) of path with itp 'false':              1760 (count: 1760, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1760, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           23516 (count: 1760, min: 0, max: 121, avg: 13.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1760
Number of successful refinements:     1760
Number of failed refinements:         0
Max. size of reached set before ref.: 53846
Max. size of reached set after ref.:  52641
Avg. size of reached set before ref.: 10020.07
Avg. size of reached set after ref.:  8596.22

Total time for CEGAR algorithm:     301.022s
Time for refinements:               110.656s
Average time for refinement:          0.062s
Max time for refinement:              0.471s

Code Coverage
-----------------------------
  Function coverage:      0.619
  Visited lines:          2828
  Total lines:            4144
  Line coverage:          0.682
  Visited conditions:     530
  Total conditions:       838
  Condition coverage:     0.632

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             50536
  Number of reached locations:   1567 (29%)
    Avg states per location:     32
    Max states per location:     1198 (at node N283)
  Number of reached functions:   109 (62%)
  Number of partitions:          50425
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.698s
  Time for loading CPAs:          0.987s
  Time for loading parser:        0.704s
  Time for CFA construction:      4.849s
    Time for parsing file(s):     1.276s
    Time for AST to CFA:          1.732s
    Time for CFA sanity check:    0.369s
    Time for post-processing:     1.240s
      Time for var class.:        0.546s
Time for Analysis:              301.023s
CPU time for analysis:          300.990s
Time for analyzing result:        0.041s
Total time for CPAchecker:      307.724s
Total CPU time for CPAchecker:  307.680s
Time for statistics:              0.725s

Time for Garbage Collector:      21.214s (in 840 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                338MB (   322 MiB) max;    130MB (   124 MiB) avg;    347MB (   331 MiB) peak
Used non-heap memory:             41MB (    40 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           347MB (   331 MiB) max;    195MB (   186 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8153MB (  7775 MiB) max;   8091MB (  7716 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
