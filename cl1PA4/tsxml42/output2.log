scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__sjxm8uv/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            15785 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  14597 (92%)
  Because of loop head:            1176 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (0%)
  Times precision was empty:       14627 (93%)
  Times precision was {false}:     217 (1%)
  Times result was cached:         902 (6%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      39 (0%)
  Times result was 'false':        142 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         17068
  BDD entailment checks:           3098
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          7
Number of abstraction locations:          13
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         2578
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 10.07
Number of irrelevant predicates:          1921 (75%)
Number of preds handled by boolean abs:   114 (4%)
  Total number of models for allsat:      346
  Max number of models for allsat:        64
  Avg number of models for allsat:        8.87

Time for post operator:                  9.794s
  Time for path formula creation:        9.580s
Time for strengthen operator:            0.285s
Time for prec operator:                  3.120s
  Time for abstraction:                  2.425s (Max:     0.100s, Count: 15785)
    Boolean abstraction:                 0.677s
    Solving time:                        0.294s (Max:     0.018s)
    Model enumeration time:              0.374s
    Time for BDD construction:           0.067s (Max:     0.026s)
Time for merge operator:                 0.720s
Time for coverage check:                 0.080s
  Time for BDD entailment checks:        0.056s
Total time for SMT solver (w/o itp):     0.668s

Number of path formula cache hits:   53794 (41%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.860s

Total number of created targets for pointer analysis: 2742
   Number of created targets for uf: *signed_int is 44
   Number of created targets for uf: *unsigned_char is 21
   Number of created targets for uf: *unsigned_long_long_int is 99
   Number of created targets for uf: *unsigned_int is 386


Number of BDD nodes:                               598
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         189 (count: 19146, min: 0, max: 36, avg: 0.01)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.593s
  Time for transition matches:                         0.301s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       124983 (count: 124983, min: 1, max: 1, avg: 1.00) [1 x 124983]

CPA algorithm statistics
------------------------
Number of iterations:            64928
Max size of waitlist:            712
Average size of waitlist:        406
Number of computed successors:   79569
Max successors for one state:    2
Number of times merged:          6985
Number of times stopped:         9366
Number of times breaked:         12

Total time for CPA algorithm:        21.445s (Max:     3.346s)
  Time for choose from waitlist:      0.193s
  Time for precision adjustment:      4.715s
  Time for transfer relation:        13.553s
  Time for merge operator:            1.142s
  Time for stop operator:             0.323s
  Time for adding to reached set:     0.406s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 657 (count: 12, min: 52, max: 55, avg: 54.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.955s
  Counterexample analysis:                             0.543s (Max:     0.064s, Calls: 12)
    Refinement sat check:                              0.361s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.007s
  Precision update:                                    0.020s
  ARG update:                                          0.339s

Length of refined path (in blocks):                     552 (count: 12, min: 46, max: 46, avg: 46.00)
Number of affected states:                               12 (count: 12, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                528 (count: 12, min: 44, max: 44, avg: 44.00)
Length (states) of path with itp non-trivial itp:        12 (count: 12, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 12, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 9409
Max. size of reached set after ref.:  223
Avg. size of reached set before ref.: 5476.75
Avg. size of reached set after ref.:  223.00

Total time for CEGAR algorithm:      22.608s
Time for refinements:                 1.158s
Average time for refinement:          0.096s
Max time for refinement:              0.152s

Code Coverage
-----------------------------
  Function coverage:      0.403
  Visited lines:          2105
  Total lines:            4144
  Line coverage:          0.508
  Visited conditions:     358
  Total conditions:       838
  Condition coverage:     0.427

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             7016
  Number of reached locations:   752 (14%)
    Avg states per location:     9
    Max states per location:     63 (at node N279)
  Number of reached functions:   71 (40%)
  Number of partitions:          7010
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       0
  Size of final wait list        596

Time for analysis setup:          7.169s
  Time for loading CPAs:          1.150s
  Time for loading parser:        0.649s
  Time for CFA construction:      5.219s
    Time for parsing file(s):     1.185s
    Time for AST to CFA:          1.868s
    Time for CFA sanity check:    0.415s
    Time for post-processing:     1.553s
      Time for var class.:        0.604s
Time for Analysis:               22.608s
CPU time for analysis:           22.610s
Total time for CPAchecker:       29.791s
Total CPU time for CPAchecker:   29.780s
Time for statistics:              0.260s

Time for Garbage Collector:       1.256s (in 45 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                121MB (   116 MiB) max;     63MB (    60 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           147MB (   140 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
