scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--target--sbp--sbp_target.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_uxs4yn4z/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 7411-7412: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7415-7416: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7423-7424: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7612: Function pointer *release with type void (*)(struct kref *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10526: Function pointer *(dev->transport->get_device_type) with type u32 (*)(struct se_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11436: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11442: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11446: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11448: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11450: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(1344UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11460: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11482: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hex2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_miter_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_run_transaction to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7612: Function pointer kref_sub::release points to fw_card_release, but no corresponding call edge was created during preprocessing. Ignoring function pointer call: (*release)(kref); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7612: Ignoring function call through function pointer *release: (*release)(kref); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function core_tpg_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_del_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function transport_generic_free_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_execute_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function target_fabric_configfs_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11318: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(112UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11324: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(696UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11328: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1536UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11330: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1000UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function core_tpg_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10526: Ignoring function call through function pointer *(dev->transport->get_device_type): tmp___6 = (*(dev->transport->get_device_type))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function core_tpg_add_initiator_node_acl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1314392 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1246565 (95%)
  Because of loop head:            60818 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7009 (1%)
  Times precision was empty:       868228 (66%)
  Times precision was {false}:     1421 (0%)
  Times result was cached:         444149 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      594 (0%)
  Times result was 'false':        28116 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1027853
  BDD entailment checks:           164387
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       71
Number of predicates discovered:          7
Number of abstraction locations:          203
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         626071
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 310.71
Number of irrelevant predicates:          418935 (67%)
Number of preds handled by boolean abs:   787 (0%)
  Total number of models for allsat:      915
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.54

Time for post operator:                 34.013s
  Time for path formula creation:       30.586s
Time for strengthen operator:            5.041s
Time for prec operator:                 74.012s
  Time for abstraction:                 60.519s (Max:     0.270s, Count: 1314392)
    Boolean abstraction:                 1.043s
    Solving time:                        1.277s (Max:     0.018s)
    Model enumeration time:              0.236s
    Time for BDD construction:           0.097s (Max:     0.015s)
Time for merge operator:                 3.166s
Time for coverage check:                 0.335s
  Time for BDD entailment checks:        0.211s
Total time for SMT solver (w/o itp):     1.513s

Number of path formula cache hits:   8361093 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.654s

Total number of created targets for pointer analysis: 9173
   Number of created targets for uf: *signed_int is 8
   Number of created targets for uf: *unsigned_char is 315
   Number of created targets for uf: *(struct_list_head)* is 37
   Number of created targets for uf: *unsigned_long_long_int is 15
   Number of created targets for uf: *unsigned_int is 40


Number of BDD nodes:                               594
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1345 (count: 1046356, min: 0, max: 129, avg: 0.00)
Time for BDD node cleanup:                             0.163s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.448s
  Time for transition matches:                         4.294s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                      6805914 (count: 6805914, min: 1, max: 1, avg: 1.00) [1 x 6805914]

CPA algorithm statistics
------------------------
Number of iterations:            4600204
Max size of waitlist:            208
Average size of waitlist:        145
Number of computed successors:   5532903
Max successors for one state:    2
Number of times merged:          431733
Number of times stopped:         536416
Number of times breaked:         7009

Total time for CPA algorithm:       237.355s (Max:     1.686s)
  Time for choose from waitlist:      1.908s
  Time for precision adjustment:    107.838s
  Time for transfer relation:        93.741s
  Time for merge operator:            8.573s
  Time for stop operator:             5.578s
  Time for adding to reached set:     7.599s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7009
Avg. length of target path (in blocks):              924114 (count: 7009, min: 50, max: 161, avg: 131.85)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 405.626s
  Counterexample analysis:                           388.083s (Max:     0.154s, Calls: 7009)
    Refinement sat check:                            227.190s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.444s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.852s
  Precision update:                                    2.308s
  ARG update:                                          9.228s

Length of refined path (in blocks):                  916549 (count: 7008, min: 46, max: 160, avg: 130.79)
Number of affected states:                            87443 (count: 7008, min: 1, max: 126, avg: 12.48)
Length (states) of path with itp 'true':             822098 (count: 7008, min: 0, max: 147, avg: 117.31)
Length (states) of path with itp non-trivial itp:     87443 (count: 7008, min: 1, max: 126, avg: 12.48)
Length (states) of path with itp 'false':              7008 (count: 7008, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 7008, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           80435 (count: 7008, min: 0, max: 125, avg: 11.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7009
Number of successful refinements:     7008
Number of failed refinements:         0
Max. size of reached set before ref.: 28418
Max. size of reached set after ref.:  27826
Avg. size of reached set before ref.: 21753.74
Avg. size of reached set after ref.:  21047.89

Total time for CEGAR algorithm:     893.292s
Time for refinements:               549.497s
Average time for refinement:          0.078s
Max time for refinement:              0.383s

Code Coverage
-----------------------------
  Function coverage:      0.625
  Visited lines:          2747
  Total lines:            4144
  Line coverage:          0.663
  Visited conditions:     530
  Total conditions:       838
  Condition coverage:     0.632

CPAchecker general statistics
-----------------------------
Number of program locations:     5352
Number of CFA edges:             6081
Number of relevant variables:    748
Number of functions:             176
Number of loops:                 18
Size of reached set:             21987
  Number of reached locations:   1488 (28%)
    Avg states per location:     14
    Max states per location:     579 (at node N283)
  Number of reached functions:   110 (63%)
  Number of partitions:          21967
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N3457 (before line 11499), Function main called from node N3328, stack depth 1 [f324455], stack [main]])
  Number of target states:       1
  Size of final wait list        187

Time for analysis setup:          6.974s
  Time for loading CPAs:          1.188s
  Time for loading parser:        0.732s
  Time for CFA construction:      4.883s
    Time for parsing file(s):     1.150s
    Time for AST to CFA:          1.778s
    Time for CFA sanity check:    0.373s
    Time for post-processing:     1.329s
      Time for var class.:        0.591s
Time for Analysis:              893.292s
CPU time for analysis:          893.220s
Total time for CPAchecker:      900.274s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.417s

Time for Garbage Collector:      34.658s (in 2123 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                190MB (   182 MiB) max;    122MB (   116 MiB) avg;    196MB (   187 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           194MB (   185 MiB) max;    181MB (   173 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8153MB (  7775 MiB) max;   8118MB (  7742 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
