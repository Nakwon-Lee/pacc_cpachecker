scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--can--usb--kvaser_usb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_oijjjadi/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            19104 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  16188 (85%)
  Because of loop head:            2860 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         56 (0%)
  Times precision was empty:       5545 (29%)
  Times precision was {false}:     408 (2%)
  Times result was cached:         12818 (67%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      333 (2%)
  Times result was 'false':        880 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         14094
  BDD entailment checks:           3676
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       27
Number of predicates discovered:          4
Number of abstraction locations:          184
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         14625
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 19.74
Number of irrelevant predicates:          3268 (22%)
Number of preds handled by boolean abs:   352 (2%)
  Total number of models for allsat:      354
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.06

Time for post operator:                  3.671s
  Time for path formula creation:        3.529s
Time for strengthen operator:            0.226s
Time for prec operator:                  5.142s
  Time for abstraction:                  4.467s (Max:     0.025s, Count: 19104)
    Boolean abstraction:                 0.457s
    Solving time:                        0.504s (Max:     0.018s)
    Model enumeration time:              0.045s
    Time for BDD construction:           0.086s (Max:     0.011s)
Time for merge operator:                 0.267s
Time for coverage check:                 0.078s
  Time for BDD entailment checks:        0.070s
Total time for SMT solver (w/o itp):     0.549s

Number of path formula cache hits:   110195 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.963s

Total number of created targets for pointer analysis: 64
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *unsigned_char is 3
   Number of created targets for uf: *unsigned_int is 2
   Number of created targets for uf: *(struct_device)* is 9


Number of BDD nodes:                               221
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         688 (count: 13402, min: 0, max: 101, avg: 0.05)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.528s
  Time for transition matches:                         0.284s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       102811 (count: 102811, min: 1, max: 1, avg: 1.00) [1 x 102811]

CPA algorithm statistics
------------------------
Number of iterations:            68913
Max size of waitlist:            23
Average size of waitlist:        9
Number of computed successors:   78826
Max successors for one state:    2
Number of times merged:          5209
Number of times stopped:         8460
Number of times breaked:         56

Total time for CPA algorithm:        15.898s (Max:     1.285s)
  Time for choose from waitlist:      0.148s
  Time for precision adjustment:      6.615s
  Time for transfer relation:         6.829s
  Time for merge operator:            0.560s
  Time for stop operator:             0.434s
  Time for adding to reached set:     0.346s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   56
Avg. length of target path (in blocks):                2666 (count: 56, min: 14, max: 95, avg: 47.61)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.891s
  Counterexample analysis:                             1.261s (Max:     0.052s, Calls: 56)
    Refinement sat check:                              0.787s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.092s
  Precision update:                                    0.061s
  ARG update:                                          0.374s

Length of refined path (in blocks):                    2540 (count: 56, min: 6, max: 94, avg: 45.36)
Number of affected states:                             2464 (count: 56, min: 1, max: 93, avg: 44.00)
Length (states) of path with itp 'true':                 20 (count: 56, min: 0, max: 4, avg: 0.36)
Length (states) of path with itp non-trivial itp:      2464 (count: 56, min: 1, max: 93, avg: 44.00)
Length (states) of path with itp 'false':                56 (count: 56, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 56, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2408 (count: 56, min: 0, max: 92, avg: 43.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                56
Number of successful refinements:     56
Number of failed refinements:         0
Max. size of reached set before ref.: 1967
Max. size of reached set after ref.:  23
Avg. size of reached set before ref.: 1215.41
Avg. size of reached set after ref.:  4.79

Total time for CEGAR algorithm:      17.991s
Time for refinements:                 2.083s
Average time for refinement:          0.037s
Max time for refinement:              0.086s

Code Coverage
-----------------------------
  Function coverage:      0.579
  Visited lines:          1803
  Total lines:            2386
  Line coverage:          0.756
  Visited conditions:     250
  Total conditions:       442
  Condition coverage:     0.566

CPAchecker general statistics
-----------------------------
Number of program locations:     3173
Number of CFA edges:             3443
Number of relevant variables:    453
Number of functions:             114
Number of loops:                 16
Size of reached set:             1692
  Number of reached locations:   836 (26%)
    Avg states per location:     2
    Max states per location:     17 (at node N2268)
  Number of reached functions:   66 (58%)
  Number of partitions:          1691
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1951 (before line 8150), Function main called from node N1928, stack depth 1 [42435b98], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.180s
  Time for loading CPAs:          1.060s
  Time for loading parser:        0.813s
  Time for CFA construction:      4.122s
    Time for parsing file(s):     1.090s
    Time for AST to CFA:          1.455s
    Time for CFA sanity check:    0.281s
    Time for post-processing:     1.093s
      Time for var class.:        0.492s
Time for Analysis:               17.993s
CPU time for analysis:           17.990s
Time for analyzing result:        0.006s
Total time for CPAchecker:       24.177s
Total CPU time for CPAchecker:   24.160s
Time for statistics:              0.138s

Time for Garbage Collector:       0.436s (in 37 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     46MB (    43 MiB) avg;     74MB (    70 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     33MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8067MB (  7694 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
