scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--can--usb--kvaser_usb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1rgo5vdh/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            22933 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  19860 (87%)
  Because of loop head:            3032 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         41 (0%)
  Times precision was empty:       10801 (47%)
  Times precision was {false}:     590 (3%)
  Times result was cached:         11282 (49%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      260 (1%)
  Times result was 'false':        463 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         16078
  BDD entailment checks:           5318
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       27
Number of predicates discovered:          4
Number of abstraction locations:          148
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         13541
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 15.93
Number of irrelevant predicates:          7483 (55%)
Number of preds handled by boolean abs:   281 (2%)
  Total number of models for allsat:      298
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.15

Time for post operator:                  9.001s
  Time for path formula creation:        8.782s
Time for strengthen operator:            0.261s
Time for prec operator:                  5.534s
  Time for abstraction:                  4.713s (Max:     0.038s, Count: 22933)
    Boolean abstraction:                 0.476s
    Solving time:                        0.575s (Max:     0.015s)
    Model enumeration time:              0.052s
    Time for BDD construction:           0.081s (Max:     0.008s)
Time for merge operator:                 0.381s
Time for coverage check:                 0.071s
  Time for BDD entailment checks:        0.045s
Total time for SMT solver (w/o itp):     0.627s

Number of path formula cache hits:   78867 (59%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.008s

Total number of created targets for pointer analysis: 418
   Number of created targets for uf: *(void)* is 91
   Number of created targets for uf: *unsigned_char is 3
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               221
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         536 (count: 20765, min: 0, max: 84, avg: 0.03)
Time for BDD node cleanup:                             0.010s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.634s
  Time for transition matches:                         0.281s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       117107 (count: 117107, min: 1, max: 1, avg: 1.00) [1 x 117107]

CPA algorithm statistics
------------------------
Number of iterations:            80300
Max size of waitlist:            55
Average size of waitlist:        21
Number of computed successors:   91018
Max successors for one state:    2
Number of times merged:          5380
Number of times stopped:         9333
Number of times breaked:         41

Total time for CPA algorithm:        22.726s (Max:     1.666s)
  Time for choose from waitlist:      0.291s
  Time for precision adjustment:      7.144s
  Time for transfer relation:        12.510s
  Time for merge operator:            0.768s
  Time for stop operator:             0.394s
  Time for adding to reached set:     0.459s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   41
Avg. length of target path (in blocks):                1611 (count: 41, min: 14, max: 61, avg: 39.29)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.442s
  Counterexample analysis:                             0.815s (Max:     0.035s, Calls: 41)
    Refinement sat check:                              0.517s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.057s
  Precision update:                                    0.052s
  ARG update:                                          0.445s

Length of refined path (in blocks):                    1505 (count: 41, min: 6, max: 60, avg: 36.71)
Number of affected states:                             1444 (count: 41, min: 1, max: 59, avg: 35.22)
Length (states) of path with itp 'true':                 20 (count: 41, min: 0, max: 4, avg: 0.49)
Length (states) of path with itp non-trivial itp:      1444 (count: 41, min: 1, max: 59, avg: 35.22)
Length (states) of path with itp 'false':                41 (count: 41, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 41, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1403 (count: 41, min: 0, max: 58, avg: 34.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                41
Number of successful refinements:     41
Number of failed refinements:         0
Max. size of reached set before ref.: 2828
Max. size of reached set after ref.:  23
Avg. size of reached set before ref.: 1951.49
Avg. size of reached set after ref.:  5.44

Total time for CEGAR algorithm:      24.454s
Time for refinements:                 1.717s
Average time for refinement:          0.041s
Max time for refinement:              0.097s

Code Coverage
-----------------------------
  Function coverage:      0.579
  Visited lines:          1659
  Total lines:            2386
  Line coverage:          0.695
  Visited conditions:     202
  Total conditions:       442
  Condition coverage:     0.457

CPAchecker general statistics
-----------------------------
Number of program locations:     3173
Number of CFA edges:             3443
Number of relevant variables:    453
Number of functions:             114
Number of loops:                 16
Size of reached set:             1434
  Number of reached locations:   703 (22%)
    Avg states per location:     2
    Max states per location:     16 (at node N2269)
  Number of reached functions:   66 (58%)
  Number of partitions:          1431
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1951 (before line 8150), Function main called from node N1928, stack depth 1 [3f92c349], stack [main]])
  Number of target states:       0
  Size of final wait list        12

Time for analysis setup:          5.799s
  Time for loading CPAs:          0.964s
  Time for loading parser:        0.660s
  Time for CFA construction:      4.061s
    Time for parsing file(s):     1.114s
    Time for AST to CFA:          1.469s
    Time for CFA sanity check:    0.244s
    Time for post-processing:     0.994s
      Time for var class.:        0.464s
Time for Analysis:               24.454s
CPU time for analysis:           24.450s
Total time for CPAchecker:       30.257s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.138s

Time for Garbage Collector:       0.698s (in 43 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 87MB (    83 MiB) max;     52MB (    50 MiB) avg;     88MB (    84 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
