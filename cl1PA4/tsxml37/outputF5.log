scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--can--usb--kvaser_usb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_dnd5_ir5/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            19848 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  16981 (86%)
  Because of loop head:            2812 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         55 (0%)
  Times precision was empty:       5512 (28%)
  Times precision was {false}:     415 (2%)
  Times result was cached:         13588 (68%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      333 (2%)
  Times result was 'false':        948 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         14623
  BDD entailment checks:           3853
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       27
Number of predicates discovered:          4
Number of abstraction locations:          184
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         15570
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 20.82
Number of irrelevant predicates:          3465 (22%)
Number of preds handled by boolean abs:   352 (2%)
  Total number of models for allsat:      354
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.06

Time for post operator:                  3.728s
  Time for path formula creation:        3.502s
Time for strengthen operator:            0.169s
Time for prec operator:                  5.283s
  Time for abstraction:                  4.602s (Max:     0.024s, Count: 19848)
    Boolean abstraction:                 0.430s
    Solving time:                        0.467s (Max:     0.013s)
    Model enumeration time:              0.031s
    Time for BDD construction:           0.051s (Max:     0.012s)
Time for merge operator:                 0.204s
Time for coverage check:                 0.041s
  Time for BDD entailment checks:        0.035s
Total time for SMT solver (w/o itp):     0.498s

Number of path formula cache hits:   114783 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.899s

Total number of created targets for pointer analysis: 64
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *unsigned_char is 7
   Number of created targets for uf: *unsigned_int is 5
   Number of created targets for uf: *(struct_device)* is 9


Number of BDD nodes:                               221
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         694 (count: 13603, min: 0, max: 101, avg: 0.05)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.444s
Automaton transfers with branching:                0
Automaton transfer successors:                       106594 (count: 106594, min: 1, max: 1, avg: 1.00) [1 x 106594]

CPA algorithm statistics
------------------------
Number of iterations:            71754
Max size of waitlist:            17
Average size of waitlist:        9
Number of computed successors:   81932
Max successors for one state:    2
Number of times merged:          5385
Number of times stopped:         8697
Number of times breaked:         55

Total time for CPA algorithm:        15.624s (Max:     1.152s)
  Time for choose from waitlist:      0.178s
  Time for precision adjustment:      6.514s
  Time for transfer relation:         6.787s
  Time for merge operator:            0.525s
  Time for stop operator:             0.284s
  Time for adding to reached set:     0.425s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   55
Avg. length of target path (in blocks):                2595 (count: 55, min: 14, max: 95, avg: 47.18)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.857s
  Counterexample analysis:                             1.277s (Max:     0.053s, Calls: 55)
    Refinement sat check:                              0.797s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.068s
  Precision update:                                    0.074s
  ARG update:                                          0.364s

Length of refined path (in blocks):                    2469 (count: 55, min: 6, max: 94, avg: 44.89)
Number of affected states:                             2394 (count: 55, min: 1, max: 93, avg: 43.53)
Length (states) of path with itp 'true':                 20 (count: 55, min: 0, max: 4, avg: 0.36)
Length (states) of path with itp non-trivial itp:      2394 (count: 55, min: 1, max: 93, avg: 43.53)
Length (states) of path with itp 'false':                55 (count: 55, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 55, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2339 (count: 55, min: 0, max: 92, avg: 42.53)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                55
Number of successful refinements:     55
Number of failed refinements:         0
Max. size of reached set before ref.: 2115
Max. size of reached set after ref.:  23
Avg. size of reached set before ref.: 1288.38
Avg. size of reached set after ref.:  4.82

Total time for CEGAR algorithm:      17.695s
Time for refinements:                 2.067s
Average time for refinement:          0.037s
Max time for refinement:              0.072s

Code Coverage
-----------------------------
  Function coverage:      0.579
  Visited lines:          1803
  Total lines:            2386
  Line coverage:          0.756
  Visited conditions:     250
  Total conditions:       442
  Condition coverage:     0.566

CPAchecker general statistics
-----------------------------
Number of program locations:     3173
Number of CFA edges:             3443
Number of relevant variables:    453
Number of functions:             114
Number of loops:                 16
Size of reached set:             1692
  Number of reached locations:   836 (26%)
    Avg states per location:     2
    Max states per location:     17 (at node N2268)
  Number of reached functions:   66 (58%)
  Number of partitions:          1691
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1951 (before line 8150), Function main called from node N1928, stack depth 1 [3f92c349], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.003s
  Time for loading CPAs:          1.051s
  Time for loading parser:        0.840s
  Time for CFA construction:      3.941s
    Time for parsing file(s):     1.112s
    Time for AST to CFA:          1.423s
    Time for CFA sanity check:    0.221s
    Time for post-processing:     0.922s
      Time for var class.:        0.469s
Time for Analysis:               17.695s
CPU time for analysis:           17.690s
Time for analyzing result:        0.001s
Total time for CPAchecker:       23.706s
Total CPU time for CPAchecker:   23.680s
Time for statistics:              0.140s

Time for Garbage Collector:       0.412s (in 37 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     46MB (    43 MiB) avg;     74MB (    70 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8067MB (  7693 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
