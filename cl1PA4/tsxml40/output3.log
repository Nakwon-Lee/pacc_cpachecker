scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--wan--x25_asy.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_kl0ud2_z/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 5859-5860: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5863-5864: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5867-5868: Dead code detected: __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5894-5895: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5898-5899: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5902-5903: Dead code detected: __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 6011-6012: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6051: Function pointer *(tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 6803: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 6813: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_data_received to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5388: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6051: Ignoring function call through function pointer *(tty->ops->write): actual = (*(tty->ops->write))(tty, __CPAchecker_TMP_2, sl->xleft); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_driver_flush_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_ldisc_flush to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_netdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            14414 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  13054 (91%)
  Because of loop head:            1332 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (0%)
  Times precision was empty:       9112 (63%)
  Times precision was {false}:     437 (3%)
  Times result was cached:         4568 (32%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      297 (2%)
  Times result was 'false':        584 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         16593
  BDD entailment checks:           3763
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          11
Number of abstraction locations:          84
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         8808
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 12.00
Number of irrelevant predicates:          5912 (67%)
Number of preds handled by boolean abs:   449 (5%)
  Total number of models for allsat:      362
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.22

Time for post operator:                  9.824s
  Time for path formula creation:        9.521s
Time for strengthen operator:            0.231s
Time for prec operator:                  4.639s
  Time for abstraction:                  3.898s (Max:     0.030s, Count: 14414)
    Boolean abstraction:                 0.693s
    Solving time:                        0.673s (Max:     0.016s)
    Model enumeration time:              0.105s
    Time for BDD construction:           0.078s (Max:     0.012s)
Time for merge operator:                 0.775s
Time for coverage check:                 0.062s
  Time for BDD entailment checks:        0.045s
Total time for SMT solver (w/o itp):     0.778s

Number of path formula cache hits:   34829 (37%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.914s

Total number of created targets for pointer analysis: 4357
   Number of created targets for uf: *(void)* is 710
   Number of created targets for uf: *(struct_net_device)* is 94
   Number of created targets for uf: *unsigned_char is 45
   Number of created targets for uf: *(unsigned_char)* is 48
   Number of created targets for uf: *char is 668
   Number of created targets for uf: *unsigned_long_int is 41


Number of BDD nodes:                               289
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         688 (count: 17097, min: 0, max: 180, avg: 0.04)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.487s
Automaton transfers with branching:                0
Automaton transfer successors:                        87004 (count: 87004, min: 1, max: 1, avg: 1.00) [1 x 87004]

CPA algorithm statistics
------------------------
Number of iterations:            60174
Max size of waitlist:            215
Average size of waitlist:        103
Number of computed successors:   72946
Max successors for one state:    2
Number of times merged:          6415
Number of times stopped:         8854
Number of times breaked:         28

Total time for CPA algorithm:        22.459s (Max:     2.055s)
  Time for choose from waitlist:      0.250s
  Time for precision adjustment:      5.972s
  Time for transfer relation:        12.999s
  Time for merge operator:            1.248s
  Time for stop operator:             0.414s
  Time for adding to reached set:     0.541s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   28
Avg. length of target path (in blocks):                1518 (count: 28, min: 23, max: 95, avg: 54.21)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.804s
  Counterexample analysis:                             1.307s (Max:     0.097s, Calls: 28)
    Refinement sat check:                              0.784s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.058s
  Precision update:                                    0.024s
  ARG update:                                          0.345s

Length of refined path (in blocks):                    1337 (count: 28, min: 16, max: 90, avg: 47.75)
Number of affected states:                              930 (count: 28, min: 1, max: 89, avg: 33.21)
Length (states) of path with itp 'true':                379 (count: 28, min: 0, max: 49, avg: 13.54)
Length (states) of path with itp non-trivial itp:       930 (count: 28, min: 1, max: 89, avg: 33.21)
Length (states) of path with itp 'false':                28 (count: 28, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          26 (count: 28, min: 0, max: 2, avg: 0.93)
Equal non-trivial interpolants along paths:             876 (count: 28, min: 0, max: 86, avg: 31.29)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     28
Number of failed refinements:         0
Max. size of reached set before ref.: 3351
Max. size of reached set after ref.:  1055
Avg. size of reached set before ref.: 2364.36
Avg. size of reached set after ref.:  130.29

Total time for CEGAR algorithm:      24.473s
Time for refinements:                 1.997s
Average time for refinement:          0.071s
Max time for refinement:              0.134s

Code Coverage
-----------------------------
  Function coverage:      0.267
  Visited lines:          1202
  Total lines:            2011
  Line coverage:          0.598
  Visited conditions:     164
  Total conditions:       358
  Condition coverage:     0.458

CPAchecker general statistics
-----------------------------
Number of program locations:     2659
Number of CFA edges:             2903
Number of relevant variables:    342
Number of functions:             105
Number of loops:                 10
Size of reached set:             954
  Number of reached locations:   343 (13%)
    Avg states per location:     2
    Max states per location:     15 (at node N156)
  Number of reached functions:   28 (27%)
  Number of partitions:          950
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1262 (before line 6834), Function main called from node N1189, stack depth 1 [5aa6202e], stack [main]])
  Number of target states:       0
  Size of final wait list        81

Time for analysis setup:          5.793s
  Time for loading CPAs:          1.140s
  Time for loading parser:        0.765s
  Time for CFA construction:      3.718s
    Time for parsing file(s):     1.046s
    Time for AST to CFA:          1.411s
    Time for CFA sanity check:    0.215s
    Time for post-processing:     0.859s
      Time for var class.:        0.341s
Time for Analysis:               24.473s
CPU time for analysis:           24.460s
Total time for CPAchecker:       30.279s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.106s

Time for Garbage Collector:       0.745s (in 37 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 88MB (    84 MiB) max;     54MB (    51 MiB) avg;     90MB (    86 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     40MB (    38 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        47MB (    45 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8022MB (  7650 MiB) max;   8009MB (  7638 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
