scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--wan--x25_asy.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_q_l8ht5t/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 5859-5860: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5863-5864: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5867-5868: Dead code detected: __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (sl->xbuff): : "memory",
                       "cc");
  goto ldv_42980;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5894-5895: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5898-5899: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5902-5903: Dead code detected: __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (sl->rbuff): : "memory",
                       "cc");
  goto ldv_42991;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 6011-6012: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6051: Function pointer *(tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 6803: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 6813: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_data_received to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5388: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6051: Ignoring function call through function pointer *(tty->ops->write): actual = (*(tty->ops->write))(tty, __CPAchecker_TMP_2, sl->xleft); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_driver_flush_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_ldisc_flush to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lapb_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_netdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            16110 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  14593 (91%)
  Because of loop head:            1487 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         30 (0%)
  Times precision was empty:       9769 (61%)
  Times precision was {false}:     476 (3%)
  Times result was cached:         5418 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      447 (3%)
  Times result was 'false':        668 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         18713
  BDD entailment checks:           4269
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          17
Number of abstraction locations:          84
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         11253
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 12.19
Number of irrelevant predicates:          7524 (67%)
Number of preds handled by boolean abs:   817 (7%)
  Total number of models for allsat:      597
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.34

Time for post operator:                  9.269s
  Time for path formula creation:        9.143s
Time for strengthen operator:            0.238s
Time for prec operator:                  4.984s
  Time for abstraction:                  4.276s (Max:     0.035s, Count: 16110)
    Boolean abstraction:                 0.794s
    Solving time:                        0.713s (Max:     0.016s)
    Model enumeration time:              0.123s
    Time for BDD construction:           0.064s (Max:     0.010s)
Time for merge operator:                 0.762s
Time for coverage check:                 0.078s
  Time for BDD entailment checks:        0.071s
Total time for SMT solver (w/o itp):     0.836s

Number of path formula cache hits:   40020 (38%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.650s

Total number of created targets for pointer analysis: 4773
   Number of created targets for uf: *(void)* is 1515
   Number of created targets for uf: *(struct_net_device)* is 108
   Number of created targets for uf: *unsigned_char is 49
   Number of created targets for uf: *(unsigned_char)* is 58
   Number of created targets for uf: *char is 734
   Number of created targets for uf: *unsigned_long_int is 45


Number of BDD nodes:                               430
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1014 (count: 19402, min: 0, max: 195, avg: 0.05)
Time for BDD node cleanup:                             0.025s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.456s
Automaton transfers with branching:                0
Automaton transfer successors:                        97383 (count: 97383, min: 1, max: 1, avg: 1.00) [1 x 97383]

CPA algorithm statistics
------------------------
Number of iterations:            67411
Max size of waitlist:            219
Average size of waitlist:        107
Number of computed successors:   81825
Max successors for one state:    2
Number of times merged:          7222
Number of times stopped:         9904
Number of times breaked:         30

Total time for CPA algorithm:        22.074s (Max:     2.040s)
  Time for choose from waitlist:      0.160s
  Time for precision adjustment:      6.415s
  Time for transfer relation:        12.287s
  Time for merge operator:            1.248s
  Time for stop operator:             0.444s
  Time for adding to reached set:     0.473s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   30
Avg. length of target path (in blocks):                1708 (count: 30, min: 23, max: 97, avg: 56.93)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.927s
  Counterexample analysis:                             1.396s (Max:     0.096s, Calls: 30)
    Refinement sat check:                              0.794s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.065s
  Precision update:                                    0.027s
  ARG update:                                          0.394s

Length of refined path (in blocks):                    1467 (count: 30, min: 16, max: 90, avg: 48.90)
Number of affected states:                             1057 (count: 30, min: 1, max: 89, avg: 35.23)
Length (states) of path with itp 'true':                380 (count: 30, min: 0, max: 49, avg: 12.67)
Length (states) of path with itp non-trivial itp:      1057 (count: 30, min: 1, max: 89, avg: 35.23)
Length (states) of path with itp 'false':                30 (count: 30, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          30 (count: 30, min: 0, max: 2, avg: 1.00)
Equal non-trivial interpolants along paths:             997 (count: 30, min: 0, max: 86, avg: 33.23)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                30
Number of successful refinements:     30
Number of failed refinements:         0
Max. size of reached set before ref.: 3380
Max. size of reached set after ref.:  1055
Avg. size of reached set before ref.: 2431.67
Avg. size of reached set after ref.:  122.07

Total time for CEGAR algorithm:      24.219s
Time for refinements:                 2.135s
Average time for refinement:          0.071s
Max time for refinement:              0.127s

Code Coverage
-----------------------------
  Function coverage:      0.467
  Visited lines:          1360
  Total lines:            2011
  Line coverage:          0.676
  Visited conditions:     218
  Total conditions:       358
  Condition coverage:     0.609

CPAchecker general statistics
-----------------------------
Number of program locations:     2659
Number of CFA edges:             2903
Number of relevant variables:    342
Number of functions:             105
Number of loops:                 10
Size of reached set:             1965
  Number of reached locations:   517 (19%)
    Avg states per location:     3
    Max states per location:     30 (at node N156)
  Number of reached functions:   49 (47%)
  Number of partitions:          1951
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1262 (before line 6834), Function main called from node N1189, stack depth 1 [325f7fa9], stack [main]])
  Number of target states:       0
  Size of final wait list        188

Time for analysis setup:          6.036s
  Time for loading CPAs:          1.186s
  Time for loading parser:        0.750s
  Time for CFA construction:      3.944s
    Time for parsing file(s):     1.138s
    Time for AST to CFA:          1.415s
    Time for CFA sanity check:    0.207s
    Time for post-processing:     0.962s
      Time for var class.:        0.341s
Time for Analysis:               24.219s
CPU time for analysis:           24.220s
Total time for CPAchecker:       30.260s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.124s

Time for Garbage Collector:       0.860s (in 41 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 89MB (    85 MiB) max;     54MB (    52 MiB) avg;     93MB (    89 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     39MB (    38 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        47MB (    45 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
