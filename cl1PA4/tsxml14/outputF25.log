scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_phuf_rnb/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_new1 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3960: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3949: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4105: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4122: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)i); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4124: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_card_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            709017 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  598117 (84%)
  Because of loop head:            110627 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         273 (0%)
  Times precision was empty:       327322 (46%)
  Times precision was {false}:     6447 (1%)
  Times result was cached:         371749 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3499 (0%)
  Times result was 'false':        2257 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         578198
  BDD entailment checks:           281242
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          14
Number of abstraction locations:          179
Max number of predicates per location:    13
Avg number of predicates per location:    1
Total predicates per abstraction:         764712
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 76.89
Number of irrelevant predicates:          603865 (79%)
Number of preds handled by boolean abs:   12100 (2%)
  Total number of models for allsat:      1037019
  Max number of models for allsat:        2304
  Avg number of models for allsat:        296.38

Time for post operator:                105.664s
  Time for path formula creation:      103.973s
Time for strengthen operator:            3.231s
Time for prec operator:                532.536s
  Time for abstraction:                520.245s (Max:     2.499s, Count: 709017)
    Boolean abstraction:               464.901s
    Solving time:                       13.220s (Max:     0.249s)
    Model enumeration time:            432.974s
    Time for BDD construction:          23.016s (Max:     0.165s)
Time for merge operator:                 8.978s
Time for coverage check:                 0.359s
  Time for BDD entailment checks:        0.285s
Total time for SMT solver (w/o itp):   446.194s

Number of path formula cache hits:   1891642 (50%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    87.116s

Total number of created targets for pointer analysis: 758403
   Number of created targets for uf: *(void)* is 10459
   Number of created targets for uf: *signed_int is 109737
   Number of created targets for uf: *unsigned_char is 24
   Number of created targets for uf: *signed_long_int is 222721
   Number of created targets for uf: *(struct_mts64)* is 30
   Number of created targets for uf: *(struct_platform_device)* is 34161
   Number of created targets for uf: *unsigned_int is 56185
   Number of created targets for uf: *(struct_snd_kcontrol_new)* is 331


Number of BDD nodes:                               66164
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        7950 (count: 662783, min: 0, max: 301, avg: 0.01)
Time for BDD node cleanup:                             0.149s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.106s
  Time for transition matches:                         3.729s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                      3385366 (count: 3385366, min: 1, max: 1, avg: 1.00) [1 x 3385366]

CPA algorithm statistics
------------------------
Number of iterations:            2407291
Max size of waitlist:            958
Average size of waitlist:        484
Number of computed successors:   2699757
Max successors for one state:    2
Number of times merged:          148478
Number of times stopped:         249033
Number of times breaked:         273

Total time for CPA algorithm:       730.211s (Max:    20.704s)
  Time for choose from waitlist:      1.153s
  Time for precision adjustment:    557.130s
  Time for transfer relation:       142.635s
  Time for merge operator:           12.537s
  Time for stop operator:             3.424s
  Time for adding to reached set:     4.421s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   273
Avg. length of target path (in blocks):               26857 (count: 273, min: 29, max: 148, avg: 98.38)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  20.632s
  Counterexample analysis:                            15.412s (Max:     0.158s, Calls: 273)
    Refinement sat check:                             10.977s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.035s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.093s
  Precision update:                                    0.161s
  ARG update:                                          4.681s

Length of refined path (in blocks):                   25594 (count: 273, min: 14, max: 147, avg: 93.75)
Number of affected states:                             8323 (count: 273, min: 1, max: 146, avg: 30.49)
Length (states) of path with itp 'true':              16998 (count: 273, min: 0, max: 90, avg: 62.26)
Length (states) of path with itp non-trivial itp:      8323 (count: 273, min: 1, max: 146, avg: 30.49)
Length (states) of path with itp 'false':               273 (count: 273, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 273, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8050 (count: 273, min: 0, max: 145, avg: 29.49)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                273
Number of successful refinements:     273
Number of failed refinements:         0
Max. size of reached set before ref.: 49948
Max. size of reached set after ref.:  37433
Avg. size of reached set before ref.: 31474.62
Avg. size of reached set after ref.:  22609.21

Total time for CEGAR algorithm:     763.847s
Time for refinements:                28.618s
Average time for refinement:          0.104s
Max time for refinement:              0.316s

Code Coverage
-----------------------------
  Function coverage:      0.787
  Visited lines:          1645
  Total lines:            1738
  Line coverage:          0.946
  Visited conditions:     308
  Total conditions:       330
  Condition coverage:     0.933

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             28211
  Number of reached locations:   971 (42%)
    Avg states per location:     29
    Max states per location:     365 (at node N159)
  Number of reached functions:   70 (79%)
  Number of partitions:          28189
    Avg size of partitions:      1
    Max size of partitions:      15 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [49bf29c6], stack [main]])
  Number of target states:       0

Time for analysis setup:          4.884s
  Time for loading CPAs:          0.866s
  Time for loading parser:        0.742s
  Time for CFA construction:      3.161s
    Time for parsing file(s):     1.008s
    Time for AST to CFA:          0.983s
    Time for CFA sanity check:    0.176s
    Time for post-processing:     0.750s
      Time for var class.:        0.314s
Time for Analysis:              763.848s
CPU time for analysis:          763.780s
Time for analyzing result:        0.026s
Total time for CPAchecker:      768.735s
Total CPU time for CPAchecker:  768.660s
Time for statistics:              0.502s

Time for Garbage Collector:      29.086s (in 447 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1021MB (   974 MiB) max;    449MB (   428 MiB) avg;   1045MB (   997 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1248MB (  1190 MiB) max;    670MB (   638 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8154MB (  7776 MiB) max;   8131MB (  7755 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
