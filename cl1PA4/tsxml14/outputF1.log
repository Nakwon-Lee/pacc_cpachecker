scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_78si68pd/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3949: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4105: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4122: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)i); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4124: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3960: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_new1 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2270595 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1881206 (83%)
  Because of loop head:            386877 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2512 (0%)
  Times precision was empty:       495391 (22%)
  Times precision was {false}:     4144 (0%)
  Times result was cached:         1760384 (78%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      10676 (0%)
  Times result was 'false':        10036 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1546806
  BDD entailment checks:           720794
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          14
Number of abstraction locations:          201
Max number of predicates per location:    13
Avg number of predicates per location:    2
Total predicates per abstraction:         4137101
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 279.16
Number of irrelevant predicates:          2621409 (63%)
Number of preds handled by boolean abs:   17370 (0%)
  Total number of models for allsat:      269450
  Max number of models for allsat:        2304
  Avg number of models for allsat:        25.24

Time for post operator:                118.764s
  Time for path formula creation:      114.071s
Time for strengthen operator:            9.290s
Time for prec operator:                365.836s
  Time for abstraction:                339.825s (Max:     2.797s, Count: 2270595)
    Boolean abstraction:               133.297s
    Solving time:                       25.469s (Max:     0.589s)
    Model enumeration time:            106.218s
    Time for BDD construction:           6.985s (Max:     0.104s)
Time for merge operator:                 8.889s
Time for coverage check:                 0.860s
  Time for BDD entailment checks:        0.647s
Total time for SMT solver (w/o itp):   131.687s

Number of path formula cache hits:   10955760 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    73.145s

Total number of created targets for pointer analysis: 715604
   Number of created targets for uf: *(void)* is 1933
   Number of created targets for uf: *(struct_snd_rawmidi)* is 71
   Number of created targets for uf: *signed_int is 27783
   Number of created targets for uf: *unsigned_char is 248
   Number of created targets for uf: *signed_long_int is 72841
   Number of created targets for uf: *(struct_mts64)* is 614
   Number of created targets for uf: *(struct_platform_device)* is 24721
   Number of created targets for uf: *unsigned_int is 74303
   Number of created targets for uf: *(struct_snd_kcontrol_new)* is 1699


Number of BDD nodes:                               68912
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       22167 (count: 1302896, min: 0, max: 624, avg: 0.02)
Time for BDD node cleanup:                             0.181s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.806s
  Time for transition matches:                         8.171s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.017s
Automaton transfers with branching:                0
Automaton transfer successors:                     10112551 (count: 10112551, min: 1, max: 1, avg: 1.00) [1 x 10112551]

CPA algorithm statistics
------------------------
Number of iterations:            7403277
Max size of waitlist:            63
Average size of waitlist:        26
Number of computed successors:   8206501
Max successors for one state:    2
Number of times merged:          413006
Number of times stopped:         767941
Number of times breaked:         2512

Total time for CPA algorithm:       680.656s (Max:     3.116s)
  Time for choose from waitlist:      3.387s
  Time for precision adjustment:    415.915s
  Time for transfer relation:       207.931s
  Time for merge operator:           14.212s
  Time for stop operator:             9.656s
  Time for adding to reached set:    11.488s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2512
Avg. length of target path (in blocks):              291253 (count: 2512, min: 29, max: 208, avg: 115.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 179.344s
  Counterexample analysis:                           162.303s (Max:     0.169s, Calls: 2512)
    Refinement sat check:                            108.604s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.173s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.533s
  Precision update:                                    1.291s
  ARG update:                                         13.614s

Length of refined path (in blocks):                  278516 (count: 2512, min: 14, max: 207, avg: 110.87)
Number of affected states:                            61346 (count: 2512, min: 1, max: 206, avg: 24.42)
Length (states) of path with itp 'true':             214658 (count: 2512, min: 0, max: 151, avg: 85.45)
Length (states) of path with itp non-trivial itp:     61346 (count: 2512, min: 1, max: 206, avg: 24.42)
Length (states) of path with itp 'false':              2512 (count: 2512, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2512, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           58834 (count: 2512, min: 0, max: 205, avg: 23.42)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2512
Number of successful refinements:     2512
Number of failed refinements:         0
Max. size of reached set before ref.: 25598
Max. size of reached set after ref.:  23793
Avg. size of reached set before ref.: 9593.59
Avg. size of reached set after ref.:  6641.36

Total time for CEGAR algorithm:     895.171s
Time for refinements:               202.666s
Average time for refinement:          0.080s
Max time for refinement:              0.209s

Code Coverage
-----------------------------
  Function coverage:      0.787
  Visited lines:          1645
  Total lines:            1738
  Line coverage:          0.946
  Visited conditions:     308
  Total conditions:       330
  Condition coverage:     0.933

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             12520
  Number of reached locations:   971 (42%)
    Avg states per location:     12
    Max states per location:     152 (at node N160)
  Number of reached functions:   70 (79%)
  Number of partitions:          12480
    Avg size of partitions:      1
    Max size of partitions:      19 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [46292372], stack [main]])
  Number of target states:       0
  Size of final wait list        15

Time for analysis setup:          5.091s
  Time for loading CPAs:          0.895s
  Time for loading parser:        0.697s
  Time for CFA construction:      3.367s
    Time for parsing file(s):     1.000s
    Time for AST to CFA:          1.032s
    Time for CFA sanity check:    0.205s
    Time for post-processing:     0.916s
      Time for var class.:        0.359s
Time for Analysis:              895.171s
CPU time for analysis:          895.080s
Total time for CPAchecker:      900.267s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.313s

Time for Garbage Collector:      37.190s (in 976 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                782MB (   745 MiB) max;    391MB (   373 MiB) avg;    798MB (   761 MiB) peak
Used non-heap memory:             41MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           979MB (   933 MiB) max;    581MB (   554 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8221MB (  7840 MiB) max;   8127MB (  7751 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
