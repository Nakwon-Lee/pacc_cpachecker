scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5s7t53zr/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3949: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4105: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4122: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)i); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4124: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3960: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_new1 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1757178 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1486427 (85%)
  Because of loop head:            270276 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         475 (0%)
  Times precision was empty:       535327 (30%)
  Times precision was {false}:     7431 (0%)
  Times result was cached:         1209917 (69%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4503 (0%)
  Times result was 'false':        2820 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1195015
  BDD entailment checks:           498959
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          14
Number of abstraction locations:          196
Max number of predicates per location:    13
Avg number of predicates per location:    1
Total predicates per abstraction:         2076331
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 173.98
Number of irrelevant predicates:          1676042 (81%)
Number of preds handled by boolean abs:   13044 (1%)
  Total number of models for allsat:      922700
  Max number of models for allsat:        2304
  Avg number of models for allsat:        204.91

Time for post operator:                121.082s
  Time for path formula creation:      117.169s
Time for strengthen operator:            6.535s
Time for prec operator:                550.245s
  Time for abstraction:                528.984s (Max:     2.943s, Count: 1757178)
    Boolean abstraction:               406.671s
    Solving time:                       16.721s (Max:     0.240s)
    Model enumeration time:            372.324s
    Time for BDD construction:          24.289s (Max:     2.020s)
Time for merge operator:                 9.317s
Time for coverage check:                 0.633s
  Time for BDD entailment checks:        0.462s
Total time for SMT solver (w/o itp):   389.045s

Number of path formula cache hits:   8185044 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    82.115s

Total number of created targets for pointer analysis: 849302
   Number of created targets for uf: *(void)* is 274
   Number of created targets for uf: *signed_int is 85553
   Number of created targets for uf: *unsigned_char is 31
   Number of created targets for uf: *signed_long_int is 84481
   Number of created targets for uf: *(struct_mts64)* is 39
   Number of created targets for uf: *(struct_platform_device)* is 801
   Number of created targets for uf: *unsigned_int is 85224
   Number of created targets for uf: *(struct_snd_kcontrol_new)* is 235


Number of BDD nodes:                               73522
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9947 (count: 1099524, min: 0, max: 372, avg: 0.01)
Time for BDD node cleanup:                             0.209s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 10.002s
  Time for transition matches:                         5.521s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                      8187664 (count: 8187664, min: 1, max: 1, avg: 1.00) [1 x 8187664]

CPA algorithm statistics
------------------------
Number of iterations:            5891569
Max size of waitlist:            1019
Average size of waitlist:        605
Number of computed successors:   6578610
Max successors for one state:    2
Number of times merged:          348028
Number of times stopped:         561917
Number of times breaked:         475

Total time for CPA algorithm:       833.837s (Max:    16.066s)
  Time for choose from waitlist:      2.999s
  Time for precision adjustment:    590.860s
  Time for transfer relation:       191.552s
  Time for merge operator:           14.075s
  Time for stop operator:             7.028s
  Time for adding to reached set:    11.890s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   475
Avg. length of target path (in blocks):               61388 (count: 475, min: 29, max: 170, avg: 129.24)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  44.814s
  Counterexample analysis:                            31.950s (Max:     0.178s, Calls: 475)
    Refinement sat check:                             20.607s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.033s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.204s
  Precision update:                                    0.273s
  ARG update:                                         11.935s

Length of refined path (in blocks):                   59265 (count: 475, min: 14, max: 169, avg: 124.77)
Number of affected states:                            13553 (count: 475, min: 1, max: 146, avg: 28.53)
Length (states) of path with itp 'true':              45237 (count: 475, min: 0, max: 148, avg: 95.24)
Length (states) of path with itp non-trivial itp:     13553 (count: 475, min: 1, max: 146, avg: 28.53)
Length (states) of path with itp 'false':               475 (count: 475, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 475, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           13078 (count: 475, min: 0, max: 145, avg: 27.53)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                475
Number of successful refinements:     475
Number of failed refinements:         0
Max. size of reached set before ref.: 44710
Max. size of reached set after ref.:  30387
Avg. size of reached set before ref.: 25144.54
Avg. size of reached set after ref.:  12551.21

Total time for CEGAR algorithm:     895.310s
Time for refinements:                56.884s
Average time for refinement:          0.119s
Max time for refinement:              2.922s

Code Coverage
-----------------------------
  Function coverage:      0.787
  Visited lines:          1629
  Total lines:            1738
  Line coverage:          0.937
  Visited conditions:     308
  Total conditions:       330
  Condition coverage:     0.933

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             32039
  Number of reached locations:   945 (41%)
    Avg states per location:     33
    Max states per location:     423 (at node N1648)
  Number of reached functions:   70 (79%)
  Number of partitions:          31974
    Avg size of partitions:      1
    Max size of partitions:      25 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [6c44052e], stack [main]])
  Number of target states:       0
  Size of final wait list        783

Time for analysis setup:          4.937s
  Time for loading CPAs:          0.962s
  Time for loading parser:        0.729s
  Time for CFA construction:      3.123s
    Time for parsing file(s):     0.922s
    Time for AST to CFA:          1.033s
    Time for CFA sanity check:    0.191s
    Time for post-processing:     0.786s
      Time for var class.:        0.325s
Time for Analysis:              895.310s
CPU time for analysis:          895.240s
Total time for CPAchecker:      900.253s
Total CPU time for CPAchecker:  900.170s
Time for statistics:              0.490s

Time for Garbage Collector:      34.529s (in 615 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1011MB (   964 MiB) max;    497MB (   474 MiB) avg;   1023MB (   975 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1368MB (  1305 MiB) max;    763MB (   728 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8222MB (  7841 MiB) max;   8131MB (  7754 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
