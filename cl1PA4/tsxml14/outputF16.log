scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_owpc4u0s/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3949: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4105: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4122: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)i); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4124: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3960: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_card_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_new1 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1637171 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1448040 (88%)
  Because of loop head:            187255 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1876 (0%)
  Times precision was empty:       202510 (12%)
  Times precision was {false}:     6096 (0%)
  Times result was cached:         1424507 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4058 (0%)
  Times result was 'false':        2178 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1675384
  BDD entailment checks:           813048
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          12
Number of abstraction locations:          170
Max number of predicates per location:    11
Avg number of predicates per location:    1
Total predicates per abstraction:         3041710
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 299.56
Number of irrelevant predicates:          2718663 (89%)
Number of preds handled by boolean abs:   7143 (0%)
  Total number of models for allsat:      90625
  Max number of models for allsat:        576
  Avg number of models for allsat:        22.33

Time for post operator:                136.960s
  Time for path formula creation:      133.340s
Time for strengthen operator:            6.254s
Time for prec operator:                220.121s
  Time for abstraction:                192.454s (Max:     1.959s, Count: 1637171)
    Boolean abstraction:                47.064s
    Solving time:                       13.311s (Max:     0.136s)
    Model enumeration time:             37.237s
    Time for BDD construction:           2.274s (Max:     0.037s)
Time for merge operator:                10.093s
Time for coverage check:                 0.913s
  Time for BDD entailment checks:        0.678s
Total time for SMT solver (w/o itp):    50.548s

Number of path formula cache hits:   7241488 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    97.123s

Total number of created targets for pointer analysis: 1042744
   Number of created targets for uf: *(void)* is 18362
   Number of created targets for uf: *(struct_snd_rawmidi)* is 11
   Number of created targets for uf: *signed_int is 82107
   Number of created targets for uf: *unsigned_char is 66
   Number of created targets for uf: *signed_long_int is 771001
   Number of created targets for uf: *(struct_mts64)* is 493
   Number of created targets for uf: *(struct_platform_device)* is 21
   Number of created targets for uf: *(struct_snd_kcontrol_new)* is 2959


Number of BDD nodes:                               18755
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        8778 (count: 1071079, min: 0, max: 667, avg: 0.01)
Time for BDD node cleanup:                             0.167s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 10.179s
  Time for transition matches:                         6.055s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.015s
Automaton transfers with branching:                0
Automaton transfer successors:                      7748449 (count: 7748449, min: 1, max: 1, avg: 1.00) [1 x 7748449]

CPA algorithm statistics
------------------------
Number of iterations:            5519275
Max size of waitlist:            709
Average size of waitlist:        559
Number of computed successors:   6336104
Max successors for one state:    2
Number of times merged:          431168
Number of times stopped:         667606
Number of times breaked:         1876

Total time for CPA algorithm:       516.957s (Max:     5.140s)
  Time for choose from waitlist:      3.111s
  Time for precision adjustment:    260.282s
  Time for transfer relation:       204.688s
  Time for merge operator:           15.997s
  Time for stop operator:             7.492s
  Time for adding to reached set:    10.403s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1876
Avg. length of target path (in blocks):              533376 (count: 1876, min: 29, max: 338, avg: 284.32)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 341.209s
  Counterexample analysis:                           326.314s (Max:     0.312s, Calls: 1876)
    Refinement sat check:                            168.858s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.281s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.505s
  Precision update:                                    0.732s
  ARG update:                                         11.183s

Length of refined path (in blocks):                  529715 (count: 1876, min: 14, max: 325, avg: 282.36)
Number of affected states:                            68702 (count: 1876, min: 1, max: 235, avg: 36.62)
Length (states) of path with itp 'true':             459137 (count: 1876, min: 0, max: 293, avg: 244.74)
Length (states) of path with itp non-trivial itp:     68702 (count: 1876, min: 1, max: 235, avg: 36.62)
Length (states) of path with itp 'false':              1876 (count: 1876, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1876, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           66826 (count: 1876, min: 0, max: 234, avg: 35.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1876
Number of successful refinements:     1876
Number of failed refinements:         0
Max. size of reached set before ref.: 16725
Max. size of reached set after ref.:  11875
Avg. size of reached set before ref.: 13028.00
Avg. size of reached set after ref.:  10013.66

Total time for CEGAR algorithm:     895.251s
Time for refinements:               366.532s
Average time for refinement:          0.195s
Max time for refinement:              0.643s

Code Coverage
-----------------------------
  Function coverage:      0.674
  Visited lines:          1358
  Total lines:            1738
  Line coverage:          0.781
  Visited conditions:     258
  Total conditions:       330
  Condition coverage:     0.782

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             11428
  Number of reached locations:   721 (31%)
    Avg states per location:     15
    Max states per location:     228 (at node N83)
  Number of reached functions:   60 (67%)
  Number of partitions:          11379
    Avg size of partitions:      1
    Max size of partitions:      19 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [49bf29c6], stack [main]])
  Number of target states:       0
  Size of final wait list        558

Time for analysis setup:          5.031s
  Time for loading CPAs:          0.899s
  Time for loading parser:        0.664s
  Time for CFA construction:      3.295s
    Time for parsing file(s):     1.049s
    Time for AST to CFA:          1.017s
    Time for CFA sanity check:    0.187s
    Time for post-processing:     0.824s
      Time for var class.:        0.342s
Time for Analysis:              895.251s
CPU time for analysis:          895.170s
Total time for CPAchecker:      900.286s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.279s

Time for Garbage Collector:      31.219s (in 799 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                882MB (   841 MiB) max;    428MB (   409 MiB) avg;    905MB (   863 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           972MB (   927 MiB) max;    638MB (   608 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8153MB (  7775 MiB) max;   8144MB (  7766 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
