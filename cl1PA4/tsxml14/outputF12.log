scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_pfv55olj/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3949: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4105: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4122: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)i); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4124: Ignoring function call through function pointer *(p->ops->read_status): status = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3960: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_new1 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            758196 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  626146 (83%)
  Because of loop head:            131347 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         703 (0%)
  Times precision was empty:       200651 (26%)
  Times precision was {false}:     3968 (1%)
  Times result was cached:         548487 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      5090 (1%)
  Times result was 'false':        4078 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         527921
  BDD entailment checks:           254263
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          14
Number of abstraction locations:          198
Max number of predicates per location:    13
Avg number of predicates per location:    2
Total predicates per abstraction:         1538713
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 169.87
Number of irrelevant predicates:          1209412 (79%)
Number of preds handled by boolean abs:   9032 (1%)
  Total number of models for allsat:      182887
  Max number of models for allsat:        2304
  Avg number of models for allsat:        35.93

Time for post operator:                 47.543s
  Time for path formula creation:       46.042s
Time for strengthen operator:            2.945s
Time for prec operator:                166.143s
  Time for abstraction:                155.811s (Max:     1.172s, Count: 758196)
    Boolean abstraction:                82.883s
    Solving time:                       10.653s (Max:     0.236s)
    Model enumeration time:             71.413s
    Time for BDD construction:           4.488s (Max:     0.066s)
Time for merge operator:                 3.283s
Time for coverage check:                 0.315s
  Time for BDD entailment checks:        0.238s
Total time for SMT solver (w/o itp):    82.066s

Number of path formula cache hits:   3573564 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    31.446s

Total number of created targets for pointer analysis: 257331
   Number of created targets for uf: *(void)* is 3683
   Number of created targets for uf: *(struct_snd_rawmidi)* is 39
   Number of created targets for uf: *signed_int is 19553
   Number of created targets for uf: *unsigned_char is 38
   Number of created targets for uf: *signed_long_int is 103201
   Number of created targets for uf: *(struct_mts64)* is 94
   Number of created targets for uf: *(struct_platform_device)* is 9361
   Number of created targets for uf: *unsigned_int is 26035
   Number of created targets for uf: *(struct_snd_kcontrol_new)* is 613


Number of BDD nodes:                               74091
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       11232 (count: 506836, min: 0, max: 263, avg: 0.02)
Time for BDD node cleanup:                             0.089s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.035s
  Time for transition matches:                         2.960s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                      3379266 (count: 3379266, min: 1, max: 1, avg: 1.00) [1 x 3379266]

CPA algorithm statistics
------------------------
Number of iterations:            2474952
Max size of waitlist:            69
Average size of waitlist:        26
Number of computed successors:   2742052
Max successors for one state:    2
Number of times merged:          136829
Number of times stopped:         259715
Number of times breaked:         703

Total time for CPA algorithm:       287.396s (Max:     4.321s)
  Time for choose from waitlist:      1.047s
  Time for precision adjustment:    184.689s
  Time for transfer relation:        80.663s
  Time for merge operator:            5.522s
  Time for stop operator:             3.375s
  Time for adding to reached set:     4.630s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   703
Avg. length of target path (in blocks):               72186 (count: 703, min: 29, max: 180, avg: 102.68)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  45.895s
  Counterexample analysis:                            40.021s (Max:     0.144s, Calls: 703)
    Refinement sat check:                             28.001s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.041s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.228s
  Precision update:                                    0.403s
  ARG update:                                          4.777s

Length of refined path (in blocks):                   68497 (count: 703, min: 14, max: 173, avg: 97.44)
Number of affected states:                            19890 (count: 703, min: 1, max: 172, avg: 28.29)
Length (states) of path with itp 'true':              47904 (count: 703, min: 0, max: 118, avg: 68.14)
Length (states) of path with itp non-trivial itp:     19890 (count: 703, min: 1, max: 172, avg: 28.29)
Length (states) of path with itp 'false':               703 (count: 703, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 703, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           19187 (count: 703, min: 0, max: 171, avg: 27.29)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                703
Number of successful refinements:     703
Number of failed refinements:         0
Max. size of reached set before ref.: 33296
Max. size of reached set after ref.:  31512
Avg. size of reached set before ref.: 13699.23
Avg. size of reached set after ref.:  10218.77

Total time for CEGAR algorithm:     347.903s
Time for refinements:                55.675s
Average time for refinement:          0.079s
Max time for refinement:              0.984s

Code Coverage
-----------------------------
  Function coverage:      0.787
  Visited lines:          1645
  Total lines:            1738
  Line coverage:          0.946
  Visited conditions:     308
  Total conditions:       330
  Condition coverage:     0.933

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             31495
  Number of reached locations:   971 (42%)
    Avg states per location:     32
    Max states per location:     395 (at node N159)
  Number of reached functions:   70 (79%)
  Number of partitions:          31456
    Avg size of partitions:      1
    Max size of partitions:      17 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [49bf29c6], stack [main]])
  Number of target states:       0

Time for analysis setup:          4.813s
  Time for loading CPAs:          0.859s
  Time for loading parser:        0.678s
  Time for CFA construction:      3.167s
    Time for parsing file(s):     0.961s
    Time for AST to CFA:          1.044s
    Time for CFA sanity check:    0.189s
    Time for post-processing:     0.776s
      Time for var class.:        0.333s
Time for Analysis:              347.904s
CPU time for analysis:          347.870s
Time for analyzing result:        0.032s
Total time for CPAchecker:      352.721s
Total CPU time for CPAchecker:  352.680s
Time for statistics:              0.582s

Time for Garbage Collector:      17.977s (in 695 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                419MB (   399 MiB) max;    180MB (   171 MiB) avg;    446MB (   426 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           489MB (   467 MiB) max;    267MB (   254 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8154MB (  7776 MiB) max;   8114MB (  7738 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
