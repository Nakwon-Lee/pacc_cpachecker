scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--drivers--snd-mts64.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_qklynv71/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3973: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3958: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3960: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3947: Function pointer *(p->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3949: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4105: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4122: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4124: Function pointer *(p->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4177: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4178: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4179: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4180: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4190: Function pointer *(p->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4191: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4192: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4193: Function pointer *(p->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5069: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5073: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5075: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5077: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5081: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_peek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3973: Ignoring function call through function pointer *(p->ops->read_status): c = (*(p->ops->read_status))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4177: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4178: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4179: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4180: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4190: Ignoring function call through function pointer *(p->ops->write_data): (*(p->ops->write_data))(p, (int)c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4191: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4192: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4193: Ignoring function call through function pointer *(p->ops->write_control): (*(p->ops->write_control))(p, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit_ack to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            22819 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  18946 (83%)
  Because of loop head:            3856 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         17 (0%)
  Times precision was empty:       21554 (94%)
  Times precision was {false}:     393 (2%)
  Times result was cached:         792 (3%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      80 (0%)
  Times result was 'false':        213 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         12796
  BDD entailment checks:           4270
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          11
Number of abstraction locations:          16
Max number of predicates per location:    10
Avg number of predicates per location:    1
Total predicates per abstraction:         4226
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 8.93
Number of irrelevant predicates:          3480 (82%)
Number of preds handled by boolean abs:   340 (8%)
  Total number of models for allsat:      7773
  Max number of models for allsat:        1024
  Avg number of models for allsat:        97.16

Time for post operator:                  7.753s
  Time for path formula creation:        7.548s
Time for strengthen operator:            0.224s
Time for prec operator:                  7.930s
  Time for abstraction:                  7.168s (Max:     0.843s, Count: 22819)
    Boolean abstraction:                 5.242s
    Solving time:                        0.591s (Max:     0.018s)
    Model enumeration time:              4.375s
    Time for BDD construction:           0.414s (Max:     0.061s)
Time for merge operator:                 0.681s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.025s
Total time for SMT solver (w/o itp):     4.966s

Number of path formula cache hits:   62157 (54%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.931s

Total number of created targets for pointer analysis: 6764
   Number of created targets for uf: *signed_int is 1121
   Number of created targets for uf: *unsigned_char is 2
   Number of created targets for uf: *(struct_mts64)* is 22
   Number of created targets for uf: *(struct_platform_device)* is 1101
   Number of created targets for uf: *unsigned_int is 29


Number of BDD nodes:                               7927
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         445 (count: 28495, min: 0, max: 57, avg: 0.02)
Time for BDD node cleanup:                             0.032s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.628s
  Time for transition matches:                         0.228s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       101804 (count: 101804, min: 1, max: 1, avg: 1.00) [1 x 101804]

CPA algorithm statistics
------------------------
Number of iterations:            73660
Max size of waitlist:            231
Average size of waitlist:        75
Number of computed successors:   81942
Max successors for one state:    2
Number of times merged:          4263
Number of times stopped:         7572
Number of times breaked:         17

Total time for CPA algorithm:        24.090s (Max:     4.647s)
  Time for choose from waitlist:      0.232s
  Time for precision adjustment:      9.447s
  Time for transfer relation:        11.208s
  Time for merge operator:            0.992s
  Time for stop operator:             0.485s
  Time for adding to reached set:     0.438s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   17
Avg. length of target path (in blocks):                 586 (count: 17, min: 29, max: 44, avg: 34.47)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.995s
  Counterexample analysis:                             0.575s (Max:     0.044s, Calls: 17)
    Refinement sat check:                              0.423s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.021s
  ARG update:                                          0.334s

Length of refined path (in blocks):                     238 (count: 17, min: 14, max: 14, avg: 14.00)
Number of affected states:                               17 (count: 17, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                204 (count: 17, min: 12, max: 12, avg: 12.00)
Length (states) of path with itp non-trivial itp:        17 (count: 17, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                17 (count: 17, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 17, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 17, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                17
Number of successful refinements:     17
Number of failed refinements:         0
Max. size of reached set before ref.: 7291
Max. size of reached set after ref.:  63
Avg. size of reached set before ref.: 3837.71
Avg. size of reached set after ref.:  63.00

Total time for CEGAR algorithm:      25.286s
Time for refinements:                 1.194s
Average time for refinement:          0.070s
Max time for refinement:              0.125s

Code Coverage
-----------------------------
  Function coverage:      0.618
  Visited lines:          1411
  Total lines:            1738
  Line coverage:          0.812
  Visited conditions:     270
  Total conditions:       330
  Condition coverage:     0.818

CPAchecker general statistics
-----------------------------
Number of program locations:     2299
Number of CFA edges:             2506
Number of relevant variables:    276
Number of functions:             89
Number of loops:                 12
Size of reached set:             9987
  Number of reached locations:   761 (33%)
    Avg states per location:     13
    Max states per location:     136 (at node N1654)
  Number of reached functions:   55 (62%)
  Number of partitions:          9980
    Avg size of partitions:      1
    Max size of partitions:      8 (with key [N1063 (before line 5099), Function main called from node N1004, stack depth 1 [46292372], stack [main]])
  Number of target states:       0
  Size of final wait list        173

Time for analysis setup:          4.986s
  Time for loading CPAs:          0.933s
  Time for loading parser:        0.687s
  Time for CFA construction:      3.189s
    Time for parsing file(s):     0.984s
    Time for AST to CFA:          1.005s
    Time for CFA sanity check:    0.207s
    Time for post-processing:     0.780s
      Time for var class.:        0.351s
Time for Analysis:               25.286s
CPU time for analysis:           25.290s
Total time for CPAchecker:       30.276s
Total CPU time for CPAchecker:   30.270s
Time for statistics:              0.242s

Time for Garbage Collector:       0.598s (in 37 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 85MB (    81 MiB) max;     49MB (    47 MiB) avg;     89MB (    85 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8020MB (  7649 MiB) max;   8009MB (  7638 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
