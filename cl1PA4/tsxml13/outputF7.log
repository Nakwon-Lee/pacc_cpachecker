scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--rtl8150.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0j26issh/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7290: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7292: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7300: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __printk_ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2424990 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1971743 (81%)
  Because of loop head:            451455 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1792 (0%)
  Times precision was empty:       739904 (31%)
  Times precision was {false}:     1609 (0%)
  Times result was cached:         1679690 (69%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3787 (0%)
  Times result was 'false':        100815 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2517618
  BDD entailment checks:           1737698
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       38
Number of predicates discovered:          43
Number of abstraction locations:          161
Max number of predicates per location:    16
Avg number of predicates per location:    3
Total predicates per abstraction:         9982371
Max number of predicates per abstraction: 16
Avg number of predicates per abstraction: 1849.96
Number of irrelevant predicates:          3853756 (39%)
Number of preds handled by boolean abs:   14192 (0%)
  Total number of models for allsat:      10957
  Max number of models for allsat:        576
  Avg number of models for allsat:        2.89

Time for post operator:                 52.222s
  Time for path formula creation:       46.701s
Time for strengthen operator:            8.395s
Time for prec operator:                425.845s
  Time for abstraction:                402.109s (Max:     0.261s, Count: 2424990)
    Boolean abstraction:                 6.550s
    Solving time:                        4.481s (Max:     0.021s)
    Model enumeration time:              1.885s
    Time for BDD construction:           0.376s (Max:     0.022s)
Time for merge operator:                 2.651s
Time for coverage check:                 1.521s
  Time for BDD entailment checks:        1.158s
Total time for SMT solver (w/o itp):     6.366s

Number of path formula cache hits:   13779657 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    11.689s

Total number of created targets for pointer analysis: 20340
   Number of created targets for uf: *unsigned_short_int is 67
   Number of created targets for uf: *(void)* is 3443
   Number of created targets for uf: *signed_int is 67
   Number of created targets for uf: *unsigned_char is 203
   Number of created targets for uf: *(unsigned_char)* is 140
   Number of created targets for uf: *(struct_device)* is 124
   Number of created targets for uf: *unsigned_int is 121


Number of BDD nodes:                               20042
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       13599 (count: 2511636, min: 0, max: 1373, avg: 0.01)
Time for BDD node cleanup:                             0.351s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 12.339s
  Time for transition matches:                         6.418s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                     11230864 (count: 11230864, min: 1, max: 1, avg: 1.00) [1 x 11230864]

CPA algorithm statistics
------------------------
Number of iterations:            8078439
Max size of waitlist:            43
Average size of waitlist:        24
Number of computed successors:   9047896
Max successors for one state:    2
Number of times merged:          389960
Number of times stopped:         832230
Number of times breaked:         1792

Total time for CPA algorithm:       669.487s (Max:     2.791s)
  Time for choose from waitlist:      2.910s
  Time for precision adjustment:    474.962s
  Time for transfer relation:       142.322s
  Time for merge operator:            8.189s
  Time for stop operator:            10.677s
  Time for adding to reached set:    11.578s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1792
Avg. length of target path (in blocks):              198232 (count: 1792, min: 26, max: 132, avg: 110.62)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 217.859s
  Counterexample analysis:                           203.331s (Max:     0.212s, Calls: 1792)
    Refinement sat check:                             96.254s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.087s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.828s
  Precision update:                                    1.052s
  ARG update:                                         11.564s

Length of refined path (in blocks):                  171488 (count: 1792, min: 18, max: 120, avg: 95.70)
Number of affected states:                            77366 (count: 1792, min: 1, max: 103, avg: 43.17)
Length (states) of path with itp 'true':              92330 (count: 1792, min: 0, max: 91, avg: 51.52)
Length (states) of path with itp non-trivial itp:     77366 (count: 1792, min: 1, max: 103, avg: 43.17)
Length (states) of path with itp 'false':              1792 (count: 1792, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:       15258 (count: 1792, min: 0, max: 9, avg: 8.51)
Equal non-trivial interpolants along paths:           60316 (count: 1792, min: 0, max: 100, avg: 33.66)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1792
Number of successful refinements:     1792
Number of failed refinements:         0
Max. size of reached set before ref.: 10047
Max. size of reached set after ref.:  3408
Avg. size of reached set before ref.: 5339.55
Avg. size of reached set after ref.:  813.16

Total time for CEGAR algorithm:     894.745s
Time for refinements:               224.279s
Average time for refinement:          0.125s
Max time for refinement:              0.232s

Code Coverage
-----------------------------
  Function coverage:      0.638
  Visited lines:          1704
  Total lines:            2175
  Line coverage:          0.783
  Visited conditions:     262
  Total conditions:       404
  Condition coverage:     0.649

CPAchecker general statistics
-----------------------------
Number of program locations:     2926
Number of CFA edges:             3205
Number of relevant variables:    336
Number of functions:             116
Number of loops:                 12
Size of reached set:             3563
  Number of reached locations:   836 (29%)
    Avg states per location:     4
    Max states per location:     40 (at node N1923)
  Number of reached functions:   74 (64%)
  Number of partitions:          3492
    Avg size of partitions:      1
    Max size of partitions:      13 (with key [N929 (before line 6685), Function fill_skb_pool called from node N1340, stack depth 3 [6fbda1], stack [main, rtl8150_probe, fill_skb_pool]])
  Number of target states:       0
  Size of final wait list        30

Time for analysis setup:          5.474s
  Time for loading CPAs:          0.936s
  Time for loading parser:        0.706s
  Time for CFA construction:      3.702s
    Time for parsing file(s):     1.082s
    Time for AST to CFA:          1.330s
    Time for CFA sanity check:    0.216s
    Time for post-processing:     0.866s
      Time for var class.:        0.382s
Time for Analysis:              894.745s
CPU time for analysis:          894.680s
Total time for CPAchecker:      900.224s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              0.155s

Time for Garbage Collector:      27.317s (in 3912 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                141MB (   134 MiB) max;     99MB (    94 MiB) avg;    152MB (   145 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           167MB (   159 MiB) max;    164MB (   157 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8145MB (  7768 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
