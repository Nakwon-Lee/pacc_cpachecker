scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--rtl8150.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1hz9kzo8/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7290: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7292: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7300: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __printk_ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            28551 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  26254 (92%)
  Because of loop head:            2264 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         33 (0%)
  Times precision was empty:       21576 (76%)
  Times precision was {false}:     873 (3%)
  Times result was cached:         5594 (20%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      508 (2%)
  Times result was 'false':        1106 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         19376
  BDD entailment checks:           4780
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       38
Number of predicates discovered:          10
Number of abstraction locations:          64
Max number of predicates per location:    7
Avg number of predicates per location:    1
Total predicates per abstraction:         13197
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 9.56
Number of irrelevant predicates:          8337 (63%)
Number of preds handled by boolean abs:   1086 (8%)
  Total number of models for allsat:      1073
  Max number of models for allsat:        32
  Avg number of models for allsat:        2.11

Time for post operator:                  6.610s
  Time for path formula creation:        6.456s
Time for strengthen operator:            0.294s
Time for prec operator:                  7.148s
  Time for abstraction:                  6.390s (Max:     0.043s, Count: 28551)
    Boolean abstraction:                 1.493s
    Solving time:                        1.210s (Max:     0.021s)
    Model enumeration time:              0.449s
    Time for BDD construction:           0.170s (Max:     0.012s)
Time for merge operator:                 0.433s
Time for coverage check:                 0.091s
  Time for BDD entailment checks:        0.058s
Total time for SMT solver (w/o itp):     1.659s

Number of path formula cache hits:   139788 (80%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.754s

Total number of created targets for pointer analysis: 1385
   Number of created targets for uf: *(void)* is 532
   Number of created targets for uf: *unsigned_short_int is 3
   Number of created targets for uf: *signed_int is 6
   Number of created targets for uf: *unsigned_char is 71
   Number of created targets for uf: *(unsigned_char)* is 33
   Number of created targets for uf: *unsigned_int is 10


Number of BDD nodes:                               934
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1306 (count: 34115, min: 0, max: 162, avg: 0.04)
Time for BDD node cleanup:                             0.025s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.713s
  Time for transition matches:                         0.349s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       147162 (count: 147162, min: 1, max: 1, avg: 1.00) [1 x 147162]

CPA algorithm statistics
------------------------
Number of iterations:            97082
Max size of waitlist:            187
Average size of waitlist:        71
Number of computed successors:   110323
Max successors for one state:    2
Number of times merged:          7298
Number of times stopped:         9843
Number of times breaked:         33

Total time for CPA algorithm:        22.874s (Max:     1.838s)
  Time for choose from waitlist:      0.164s
  Time for precision adjustment:      8.824s
  Time for transfer relation:        10.889s
  Time for merge operator:            0.829s
  Time for stop operator:             0.454s
  Time for adding to reached set:     0.536s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   33
Avg. length of target path (in blocks):                1353 (count: 33, min: 26, max: 55, avg: 41.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.469s
  Counterexample analysis:                             0.830s (Max:     0.047s, Calls: 33)
    Refinement sat check:                              0.541s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.069s
  Precision update:                                    0.020s
  ARG update:                                          0.483s

Length of refined path (in blocks):                     974 (count: 33, min: 18, max: 53, avg: 29.52)
Number of affected states:                              356 (count: 33, min: 1, max: 38, avg: 10.79)
Length (states) of path with itp 'true':                585 (count: 33, min: 14, max: 38, avg: 17.73)
Length (states) of path with itp non-trivial itp:       356 (count: 33, min: 1, max: 38, avg: 10.79)
Length (states) of path with itp 'false':                33 (count: 33, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           8 (count: 33, min: 0, max: 1, avg: 0.24)
Equal non-trivial interpolants along paths:             315 (count: 33, min: 0, max: 36, avg: 9.55)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                33
Number of successful refinements:     33
Number of failed refinements:         0
Max. size of reached set before ref.: 7064
Max. size of reached set after ref.:  3152
Avg. size of reached set before ref.: 3340.76
Avg. size of reached set after ref.:  425.97

Total time for CEGAR algorithm:      24.618s
Time for refinements:                 1.724s
Average time for refinement:          0.052s
Max time for refinement:              0.099s

Code Coverage
-----------------------------
  Function coverage:      0.595
  Visited lines:          1704
  Total lines:            2175
  Line coverage:          0.783
  Visited conditions:     274
  Total conditions:       404
  Condition coverage:     0.678

CPAchecker general statistics
-----------------------------
Number of program locations:     2926
Number of CFA edges:             3205
Number of relevant variables:    336
Number of functions:             116
Number of loops:                 12
Size of reached set:             3185
  Number of reached locations:   808 (28%)
    Avg states per location:     3
    Max states per location:     30 (at node N327)
  Number of reached functions:   69 (59%)
  Number of partitions:          3177
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1474 (before line 7314), Function main called from node N1427, stack depth 1 [31e32ea2], stack [main]])
  Number of target states:       0
  Size of final wait list        53

Time for analysis setup:          5.589s
  Time for loading CPAs:          1.030s
  Time for loading parser:        0.681s
  Time for CFA construction:      3.789s
    Time for parsing file(s):     1.159s
    Time for AST to CFA:          1.248s
    Time for CFA sanity check:    0.236s
    Time for post-processing:     0.921s
      Time for var class.:        0.427s
Time for Analysis:               24.618s
CPU time for analysis:           24.620s
Total time for CPAchecker:       30.211s
Total CPU time for CPAchecker:   30.200s
Time for statistics:              0.141s

Time for Garbage Collector:       0.746s (in 46 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 82MB (    78 MiB) max;     50MB (    48 MiB) avg;     84MB (    80 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
