scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--rtl8150.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_m80b74fr/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7290: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7292: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7300: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __printk_ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2645520 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2145160 (81%)
  Because of loop head:            498372 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1988 (0%)
  Times precision was empty:       1203354 (45%)
  Times precision was {false}:     1004 (0%)
  Times result was cached:         1439415 (54%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1747 (0%)
  Times result was 'false':        108079 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2737359
  BDD entailment checks:           1900307
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       38
Number of predicates discovered:          37
Number of abstraction locations:          101
Max number of predicates per location:    14
Avg number of predicates per location:    3
Total predicates per abstraction:         7942085
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 2886.98
Number of irrelevant predicates:          3005856 (38%)
Number of preds handled by boolean abs:   6108 (0%)
  Total number of models for allsat:      3949
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.26

Time for post operator:                 53.105s
  Time for path formula creation:       48.318s
Time for strengthen operator:            9.111s
Time for prec operator:                370.319s
  Time for abstraction:                345.062s (Max:     0.039s, Count: 2645520)
    Boolean abstraction:                 2.748s
    Solving time:                        2.143s (Max:     0.028s)
    Model enumeration time:              0.519s
    Time for BDD construction:           0.237s (Max:     0.014s)
Time for merge operator:                 2.892s
Time for coverage check:                 1.718s
  Time for BDD entailment checks:        1.295s
Total time for SMT solver (w/o itp):     2.662s

Number of path formula cache hits:   15056160 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    10.820s

Total number of created targets for pointer analysis: 14918
   Number of created targets for uf: *(void)* is 2598
   Number of created targets for uf: *unsigned_short_int is 47
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 183
   Number of created targets for uf: *(unsigned_char)* is 78
   Number of created targets for uf: *(struct_device)* is 96
   Number of created targets for uf: *unsigned_int is 10


Number of BDD nodes:                               4163
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        6316 (count: 3120567, min: 0, max: 984, avg: 0.00)
Time for BDD node cleanup:                             0.382s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.565s
  Time for transition matches:                         7.131s
  Time for transition assertions:                      0.006s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                     12228800 (count: 12228800, min: 1, max: 1, avg: 1.00) [1 x 12228800]

CPA algorithm statistics
------------------------
Number of iterations:            8800089
Max size of waitlist:            40
Average size of waitlist:        23
Number of computed successors:   9856275
Max successors for one state:    2
Number of times merged:          418526
Number of times stopped:         908617
Number of times breaked:         1988

Total time for CPA algorithm:       638.971s (Max:     2.800s)
  Time for choose from waitlist:      3.326s
  Time for precision adjustment:    432.202s
  Time for transfer relation:       150.664s
  Time for merge operator:            9.179s
  Time for stop operator:            11.277s
  Time for adding to reached set:    12.171s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1988
Avg. length of target path (in blocks):              220117 (count: 1988, min: 26, max: 112, avg: 110.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 245.698s
  Counterexample analysis:                           229.882s (Max:     0.237s, Calls: 1988)
    Refinement sat check:                            108.524s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.102s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.049s
  Precision update:                                    0.787s
  ARG update:                                         12.817s

Length of refined path (in blocks):                  190368 (count: 1988, min: 18, max: 97, avg: 95.76)
Number of affected states:                            86172 (count: 1988, min: 1, max: 72, avg: 43.35)
Length (states) of path with itp 'true':             102208 (count: 1988, min: 14, max: 91, avg: 51.41)
Length (states) of path with itp non-trivial itp:     86172 (count: 1988, min: 1, max: 72, avg: 43.35)
Length (states) of path with itp 'false':              1988 (count: 1988, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:       17499 (count: 1988, min: 0, max: 9, avg: 8.80)
Equal non-trivial interpolants along paths:           66685 (count: 1988, min: 0, max: 70, avg: 33.54)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1988
Number of successful refinements:     1988
Number of failed refinements:         0
Max. size of reached set before ref.: 6846
Max. size of reached set after ref.:  2892
Avg. size of reached set before ref.: 5920.11
Avg. size of reached set after ref.:  1476.50

Total time for CEGAR algorithm:     894.721s
Time for refinements:               254.005s
Average time for refinement:          0.127s
Max time for refinement:              0.250s

Code Coverage
-----------------------------
  Function coverage:      0.707
  Visited lines:          1843
  Total lines:            2175
  Line coverage:          0.847
  Visited conditions:     302
  Total conditions:       404
  Condition coverage:     0.748

CPAchecker general statistics
-----------------------------
Number of program locations:     2926
Number of CFA edges:             3205
Number of relevant variables:    336
Number of functions:             116
Number of loops:                 12
Size of reached set:             5683
  Number of reached locations:   990 (34%)
    Avg states per location:     5
    Max states per location:     60 (at node N1923)
  Number of reached functions:   82 (71%)
  Number of partitions:          5574
    Avg size of partitions:      1
    Max size of partitions:      13 (with key [N929 (before line 6685), Function fill_skb_pool called from node N1340, stack depth 3 [72cffe5a], stack [main, rtl8150_probe, fill_skb_pool]])
  Number of target states:       0
  Size of final wait list        26

Time for analysis setup:          5.507s
  Time for loading CPAs:          0.918s
  Time for loading parser:        0.677s
  Time for CFA construction:      3.804s
    Time for parsing file(s):     1.064s
    Time for AST to CFA:          1.401s
    Time for CFA sanity check:    0.216s
    Time for post-processing:     0.887s
      Time for var class.:        0.418s
Time for Analysis:              894.721s
CPU time for analysis:          894.660s
Total time for CPAchecker:      900.233s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.185s

Time for Garbage Collector:      32.521s (in 4841 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                119MB (   113 MiB) max;     98MB (    93 MiB) avg;    120MB (   114 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8085MB (  7710 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
