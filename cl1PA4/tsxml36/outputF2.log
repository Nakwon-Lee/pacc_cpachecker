scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--wireless--zd1211rw--zd1211rw.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_10ryayne/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 16474: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16477: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16483: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 16321: Function pointer *(rf->patch_6m_band_edge) with type int (*)(struct zd_rf *, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 16201: Function pointer *(rf->set_channel) with type int (*)(struct zd_rf *, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12981: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_beacon_get_tim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_unregister_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_reset_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_alloc_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_intf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_queue_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_unlink to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_empty to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_intf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16056: Ignoring function call through function pointer *(rf->clear): (*(rf->clear))(rf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_free_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scnprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_reset_configuration to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_register_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16201: Ignoring function call through function pointer *(rf->set_channel): r = (*(rf->set_channel))(rf, (int)channel); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 16321: Ignoring function call through function pointer *(rf->patch_6m_band_edge): tmp = (*(rf->patch_6m_band_edge))(rf, (int)channel); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1780168 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1707412 (96%)
  Because of loop head:            71454 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1302 (0%)
  Times precision was empty:       511477 (29%)
  Times precision was {false}:     3809 (0%)
  Times result was cached:         1260218 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4664 (0%)
  Times result was 'false':        32059 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         891265
  BDD entailment checks:           378125
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          6
Number of abstraction locations:          324
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         2249238
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 265.46
Number of irrelevant predicates:          1634990 (73%)
Number of preds handled by boolean abs:   5918 (0%)
  Total number of models for allsat:      4819
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.03

Time for post operator:                163.878s
  Time for path formula creation:      160.583s
Time for strengthen operator:            6.966s
Time for prec operator:                389.021s
  Time for abstraction:                363.617s (Max:     1.175s, Count: 1780168)
    Boolean abstraction:                52.720s
    Solving time:                      143.638s (Max:     0.456s)
    Model enumeration time:              1.665s
    Time for BDD construction:           0.186s (Max:     0.012s)
Time for merge operator:                 4.623s
Time for coverage check:                 0.492s
  Time for BDD entailment checks:        0.365s
Total time for SMT solver (w/o itp):   145.303s

Number of path formula cache hits:   9581594 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   104.630s

Total number of created targets for pointer analysis: 2439715
   Number of created targets for uf: *unsigned_short_int is 439
   Number of created targets for uf: *(void)* is 7
   Number of created targets for uf: *(struct_sk_buff)* is 855
   Number of created targets for uf: *signed_int is 481
   Number of created targets for uf: *unsigned_char is 255
   Number of created targets for uf: *(struct_list_head)* is 4
   Number of created targets for uf: *unsigned_int is 77616
   Number of created targets for uf: *char is 305
   Number of created targets for uf: *unsigned_long_int is 9262


Number of BDD nodes:                               339
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9346 (count: 945267, min: 0, max: 261, avg: 0.01)
Time for BDD node cleanup:                             0.146s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.747s
  Time for transition matches:                         7.081s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                      8492977 (count: 8492977, min: 1, max: 1, avg: 1.00) [1 x 8492977]

CPA algorithm statistics
------------------------
Number of iterations:            5358867
Max size of waitlist:            279
Average size of waitlist:        143
Number of computed successors:   5883969
Max successors for one state:    2
Number of times merged:          256570
Number of times stopped:         405562
Number of times breaked:         1302

Total time for CPA algorithm:       721.412s (Max:     5.668s)
  Time for choose from waitlist:      2.927s
  Time for precision adjustment:    425.441s
  Time for transfer relation:       251.550s
  Time for merge operator:            8.390s
  Time for stop operator:             7.221s
  Time for adding to reached set:     9.918s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1302
Avg. length of target path (in blocks):              165519 (count: 1302, min: 26, max: 187, avg: 127.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 151.101s
  Counterexample analysis:                           139.249s (Max:     0.249s, Calls: 1302)
    Refinement sat check:                            102.964s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.106s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.493s
  Precision update:                                    0.815s
  ARG update:                                          9.687s

Length of refined path (in blocks):                  144802 (count: 1302, min: 4, max: 186, avg: 111.22)
Number of affected states:                            66693 (count: 1302, min: 1, max: 153, avg: 51.22)
Length (states) of path with itp 'true':              76807 (count: 1302, min: 0, max: 123, avg: 58.99)
Length (states) of path with itp non-trivial itp:     66693 (count: 1302, min: 1, max: 153, avg: 51.22)
Length (states) of path with itp 'false':              1302 (count: 1302, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1302, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           65391 (count: 1302, min: 0, max: 152, avg: 50.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1302
Number of successful refinements:     1302
Number of failed refinements:         0
Max. size of reached set before ref.: 16633
Max. size of reached set after ref.:  13110
Avg. size of reached set before ref.: 11167.54
Avg. size of reached set after ref.:  6992.61

Total time for CEGAR algorithm:     891.118s
Time for refinements:               163.877s
Average time for refinement:          0.125s
Max time for refinement:              0.271s

Code Coverage
-----------------------------
  Function coverage:      0.314
  Visited lines:          2628
  Total lines:            8993
  Line coverage:          0.292
  Visited conditions:     352
  Total conditions:       1684
  Condition coverage:     0.209

CPAchecker general statistics
-----------------------------
Number of program locations:     11862
Number of CFA edges:             13403
Number of relevant variables:    2119
Number of functions:             458
Number of loops:                 55
Size of reached set:             10590
  Number of reached locations:   1335 (11%)
    Avg states per location:     7
    Max states per location:     159 (at node N64)
  Number of reached functions:   144 (31%)
  Number of partitions:          10570
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N10717 (before line 20073), Function main called from node N10703, stack depth 1 [1107c465], stack [main]])
  Number of target states:       0
  Size of final wait list        173

Time for analysis setup:          9.101s
  Time for loading CPAs:          1.171s
  Time for loading parser:        0.736s
  Time for CFA construction:      7.034s
    Time for parsing file(s):     1.531s
    Time for AST to CFA:          2.764s
    Time for CFA sanity check:    0.595s
    Time for post-processing:     1.901s
      Time for var class.:        1.035s
Time for Analysis:              891.118s
CPU time for analysis:          891.050s
Total time for CPAchecker:      900.224s
Total CPU time for CPAchecker:  900.120s
Time for statistics:              0.337s

Time for Garbage Collector:      33.996s (in 1272 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                605MB (   577 MiB) max;    317MB (   302 MiB) avg;    654MB (   624 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           762MB (   726 MiB) max;    471MB (   449 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    41 MiB) avg
Total process virtual memory:   8308MB (  7923 MiB) max;   8208MB (  7828 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
