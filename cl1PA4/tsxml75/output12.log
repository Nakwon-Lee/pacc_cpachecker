scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_udwxcywc/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            14885 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  14304 (96%)
  Because of loop head:            551 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         30 (0%)
  Times precision was empty:       8825 (59%)
  Times precision was {false}:     856 (6%)
  Times result was cached:         4258 (29%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      946 (6%)
  Times result was 'false':        350 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         12894
  BDD entailment checks:           3630
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          9
Number of abstraction locations:          51
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         13430
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 7.45
Number of irrelevant predicates:          7811 (58%)
Number of preds handled by boolean abs:   2098 (16%)
  Total number of models for allsat:      2314
  Max number of models for allsat:        27
  Avg number of models for allsat:        2.45

Time for post operator:                  7.695s
  Time for path formula creation:        7.507s
Time for strengthen operator:            0.203s
Time for prec operator:                  7.956s
  Time for abstraction:                  7.291s (Max:     0.045s, Count: 14885)
    Boolean abstraction:                 2.343s
    Solving time:                        2.001s (Max:     0.017s)
    Model enumeration time:              0.446s
    Time for BDD construction:           0.212s (Max:     0.013s)
Time for merge operator:                 0.498s
Time for coverage check:                 0.054s
  Time for BDD entailment checks:        0.032s
Total time for SMT solver (w/o itp):     2.447s

Number of path formula cache hits:   63365 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.751s

Total number of created targets for pointer analysis: 434
   Number of created targets for uf: *unsigned_short_int is 133
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_int is 9


Number of BDD nodes:                               983
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2138 (count: 22686, min: 0, max: 253, avg: 0.09)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.488s
Automaton transfers with branching:                0
Automaton transfer successors:                       105276 (count: 105276, min: 1, max: 1, avg: 1.00) [1 x 105276]

CPA algorithm statistics
------------------------
Number of iterations:            54623
Max size of waitlist:            370
Average size of waitlist:        140
Number of computed successors:   64447
Max successors for one state:    2
Number of times merged:          4632
Number of times stopped:         5508
Number of times breaked:         30

Total time for CPA algorithm:        22.580s (Max:     2.345s)
  Time for choose from waitlist:      0.165s
  Time for precision adjustment:      9.251s
  Time for transfer relation:        10.745s
  Time for merge operator:            0.818s
  Time for stop operator:             0.259s
  Time for adding to reached set:     0.292s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   30
Avg. length of target path (in blocks):                1170 (count: 30, min: 18, max: 64, avg: 39.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.292s
  Counterexample analysis:                             0.802s (Max:     0.052s, Calls: 30)
    Refinement sat check:                              0.533s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.054s
  Precision update:                                    0.105s
  ARG update:                                          0.293s

Length of refined path (in blocks):                     886 (count: 30, min: 10, max: 56, avg: 29.53)
Number of affected states:                              550 (count: 30, min: 1, max: 42, avg: 18.33)
Length (states) of path with itp 'true':                306 (count: 30, min: 4, max: 13, avg: 10.20)
Length (states) of path with itp non-trivial itp:       550 (count: 30, min: 1, max: 42, avg: 18.33)
Length (states) of path with itp 'false':                30 (count: 30, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           8 (count: 30, min: 0, max: 1, avg: 0.27)
Equal non-trivial interpolants along paths:             512 (count: 30, min: 0, max: 40, avg: 17.07)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                30
Number of successful refinements:     30
Number of failed refinements:         0
Max. size of reached set before ref.: 5223
Max. size of reached set after ref.:  428
Avg. size of reached set before ref.: 2103.37
Avg. size of reached set after ref.:  265.70

Total time for CEGAR algorithm:      24.107s
Time for refinements:                 1.513s
Average time for refinement:          0.050s
Max time for refinement:              0.117s

Code Coverage
-----------------------------
  Function coverage:      0.272
  Visited lines:          1435
  Total lines:            2304
  Line coverage:          0.623
  Visited conditions:     176
  Total conditions:       508
  Condition coverage:     0.346

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             3459
  Number of reached locations:   427 (14%)
    Avg states per location:     8
    Max states per location:     125 (at node N99)
  Number of reached functions:   34 (27%)
  Number of partitions:          3435
    Avg size of partitions:      1
    Max size of partitions:      10 (with key [N1506 (before line 7707), Function main called from node N1489, stack depth 1 [1eb6e1c], stack [main]])
  Number of target states:       0
  Size of final wait list        273

Time for analysis setup:          5.625s
  Time for loading CPAs:          0.921s
  Time for loading parser:        0.704s
  Time for CFA construction:      3.890s
    Time for parsing file(s):     1.075s
    Time for AST to CFA:          1.447s
    Time for CFA sanity check:    0.243s
    Time for post-processing:     0.918s
      Time for var class.:        0.415s
Time for Analysis:               24.108s
CPU time for analysis:           24.110s
Total time for CPAchecker:       29.745s
Total CPU time for CPAchecker:   29.740s
Time for statistics:              0.163s

Time for Garbage Collector:       0.673s (in 38 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 88MB (    84 MiB) max;     52MB (    50 MiB) avg;     91MB (    86 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
