scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7bzvkd_r/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6997: Ignoring function call through function pointer *(priv->do_set_bittiming): err = (*(priv->do_set_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6581: Ignoring function call through function pointer *(priv->do_set_mode): err = (*(priv->do_set_mode))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            30515 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  28230 (93%)
  Because of loop head:            2260 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         25 (0%)
  Times precision was empty:       26652 (87%)
  Times precision was {false}:     689 (2%)
  Times result was cached:         2915 (10%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      259 (1%)
  Times result was 'false':        588 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         32046
  BDD entailment checks:           5776
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          9
Number of abstraction locations:          64
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         6103
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 6.44
Number of irrelevant predicates:          4440 (73%)
Number of preds handled by boolean abs:   489 (8%)
  Total number of models for allsat:      399
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.54

Time for post operator:                  7.309s
  Time for path formula creation:        6.971s
Time for strengthen operator:            0.377s
Time for prec operator:                  4.564s
  Time for abstraction:                  3.600s (Max:     0.058s, Count: 30515)
    Boolean abstraction:                 0.621s
    Solving time:                        0.622s (Max:     0.022s)
    Model enumeration time:              0.085s
    Time for BDD construction:           0.093s (Max:     0.015s)
Time for merge operator:                 0.501s
Time for coverage check:                 0.097s
  Time for BDD entailment checks:        0.082s
Total time for SMT solver (w/o itp):     0.707s

Number of path formula cache hits:   195380 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.824s

Total number of created targets for pointer analysis: 1114
   Number of created targets for uf: *(void)* is 181
   Number of created targets for uf: *unsigned_short_int is 13
   Number of created targets for uf: *(struct_rtnl_link_ops)* is 5
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *(struct_can_frame)* is 13
   Number of created targets for uf: *unsigned_int is 33
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               354
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         599 (count: 37668, min: 0, max: 111, avg: 0.02)
Time for BDD node cleanup:                             0.028s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.594s
  Time for transition matches:                         0.315s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       194554 (count: 194554, min: 1, max: 1, avg: 1.00) [1 x 194554]

CPA algorithm statistics
------------------------
Number of iterations:            126393
Max size of waitlist:            290
Average size of waitlist:        136
Number of computed successors:   148420
Max successors for one state:    2
Number of times merged:          13135
Number of times stopped:         17770
Number of times breaked:         25

Total time for CPA algorithm:        23.051s (Max:     1.998s)
  Time for choose from waitlist:      0.329s
  Time for precision adjustment:      6.767s
  Time for transfer relation:        12.078s
  Time for merge operator:            1.067s
  Time for stop operator:             0.598s
  Time for adding to reached set:     0.620s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   25
Avg. length of target path (in blocks):                 696 (count: 25, min: 18, max: 54, avg: 27.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.210s
  Counterexample analysis:                             0.486s (Max:     0.038s, Calls: 25)
    Refinement sat check:                              0.285s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.030s
  Precision update:                                    0.052s
  ARG update:                                          0.611s

Length of refined path (in blocks):                     430 (count: 25, min: 10, max: 51, avg: 17.20)
Number of affected states:                              224 (count: 25, min: 1, max: 46, avg: 8.96)
Length (states) of path with itp 'true':                181 (count: 25, min: 4, max: 13, avg: 7.24)
Length (states) of path with itp non-trivial itp:       224 (count: 25, min: 1, max: 46, avg: 8.96)
Length (states) of path with itp 'false':                25 (count: 25, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           5 (count: 25, min: 0, max: 1, avg: 0.20)
Equal non-trivial interpolants along paths:             194 (count: 25, min: 0, max: 44, avg: 7.76)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                25
Number of successful refinements:     25
Number of failed refinements:         0
Max. size of reached set before ref.: 12154
Max. size of reached set after ref.:  1888
Avg. size of reached set before ref.: 5425.48
Avg. size of reached set after ref.:  229.52

Total time for CEGAR algorithm:      24.506s
Time for refinements:                 1.440s
Average time for refinement:          0.057s
Max time for refinement:              0.134s

Code Coverage
-----------------------------
  Function coverage:      0.072
  Visited lines:          1125
  Total lines:            2304
  Line coverage:          0.488
  Visited conditions:     94
  Total conditions:       508
  Condition coverage:     0.185

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             163
  Number of reached locations:   161 (5%)
    Avg states per location:     1
    Max states per location:     3 (at node N85)
  Number of reached functions:   9 (7%)
  Number of partitions:          163
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          5.729s
  Time for loading CPAs:          0.947s
  Time for loading parser:        0.667s
  Time for CFA construction:      3.985s
    Time for parsing file(s):     1.110s
    Time for AST to CFA:          1.454s
    Time for CFA sanity check:    0.232s
    Time for post-processing:     0.957s
      Time for var class.:        0.446s
Time for Analysis:               24.506s
CPU time for analysis:           24.510s
Total time for CPAchecker:       30.244s
Total CPU time for CPAchecker:   30.230s
Time for statistics:              0.062s

Time for Garbage Collector:       0.953s (in 52 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                102MB (    97 MiB) max;     57MB (    55 MiB) avg;    108MB (   103 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
