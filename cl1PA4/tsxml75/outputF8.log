scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ct6n_r1l/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6997: Ignoring function call through function pointer *(priv->do_set_bittiming): err = (*(priv->do_set_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6581: Ignoring function call through function pointer *(priv->do_set_mode): err = (*(priv->do_set_mode))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1575918 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1424987 (90%)
  Because of loop head:            150697 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         234 (0%)
  Times precision was empty:       680749 (43%)
  Times precision was {false}:     3530 (0%)
  Times result was cached:         860470 (55%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      31169 (2%)
  Times result was 'false':        45606 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         2656194
  BDD entailment checks:           493530
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          47
Number of abstraction locations:          156
Max number of predicates per location:    26
Avg number of predicates per location:    10
Total predicates per abstraction:         8089554
Max number of predicates per abstraction: 26
Avg number of predicates per abstraction: 233.14
Number of irrelevant predicates:          5245548 (65%)
Number of preds handled by boolean abs:   246692 (3%)
  Total number of models for allsat:      557720
  Max number of models for allsat:        864
  Avg number of models for allsat:        17.89

Time for post operator:                173.123s
  Time for path formula creation:      167.752s
Time for strengthen operator:            9.234s
Time for prec operator:                437.763s
  Time for abstraction:                414.681s (Max:     4.280s, Count: 1575918)
    Boolean abstraction:               116.570s
    Solving time:                       46.268s (Max:     0.028s)
    Model enumeration time:             51.247s
    Time for BDD construction:          17.890s (Max:     0.233s)
Time for merge operator:                19.688s
Time for coverage check:                 0.852s
  Time for BDD entailment checks:        0.543s
Total time for SMT solver (w/o itp):    97.515s

Number of path formula cache hits:   11440039 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   122.107s

Total number of created targets for pointer analysis: 368902
   Number of created targets for uf: *unsigned_short_int is 703
   Number of created targets for uf: *(void)* is 71521
   Number of created targets for uf: *(struct_rtnl_link_ops)* is 1279
   Number of created targets for uf: *signed_int is 57
   Number of created targets for uf: *(unsigned_char)* is 1380
   Number of created targets for uf: *(struct_can_frame)* is 1800
   Number of created targets for uf: *unsigned_int is 5235
   Number of created targets for uf: *unsigned_long_int is 4129


Number of BDD nodes:                               200688
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      119136 (count: 1414061, min: 0, max: 4100, avg: 0.08)
Time for BDD node cleanup:                             0.303s
Time for BDD garbage collection:                       0.078s (in 9 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 15.409s
  Time for transition matches:                         7.558s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                     11654889 (count: 11654889, min: 1, max: 1, avg: 1.00) [1 x 11654889]

CPA algorithm statistics
------------------------
Number of iterations:            7816700
Max size of waitlist:            69
Average size of waitlist:        39
Number of computed successors:   9309506
Max successors for one state:    2
Number of times merged:          1081332
Number of times stopped:         1442991
Number of times breaked:         234

Total time for CPA algorithm:       865.297s (Max:    26.540s)
  Time for choose from waitlist:      3.093s
  Time for precision adjustment:    499.885s
  Time for transfer relation:       284.388s
  Time for merge operator:           33.027s
  Time for stop operator:            11.367s
  Time for adding to reached set:    12.955s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   234
Avg. length of target path (in blocks):               15924 (count: 234, min: 18, max: 145, avg: 68.05)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  23.692s
  Counterexample analysis:                             6.416s (Max:     0.080s, Calls: 234)
    Refinement sat check:                              3.687s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.143s
  Precision update:                                    0.221s
  ARG update:                                         16.758s

Length of refined path (in blocks):                   11299 (count: 234, min: 10, max: 102, avg: 48.29)
Number of affected states:                             8712 (count: 234, min: 1, max: 94, avg: 37.23)
Length (states) of path with itp 'true':               2353 (count: 234, min: 4, max: 39, avg: 10.06)
Length (states) of path with itp non-trivial itp:      8712 (count: 234, min: 1, max: 94, avg: 37.23)
Length (states) of path with itp 'false':               234 (count: 234, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          82 (count: 234, min: 0, max: 10, avg: 0.35)
Equal non-trivial interpolants along paths:            8396 (count: 234, min: 0, max: 92, avg: 35.88)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                234
Number of successful refinements:     234
Number of failed refinements:         0
Max. size of reached set before ref.: 106975
Max. size of reached set after ref.:  20222
Avg. size of reached set before ref.: 35151.55
Avg. size of reached set after ref.:  1948.55

Total time for CEGAR algorithm:     894.202s
Time for refinements:                28.596s
Average time for refinement:          0.122s
Max time for refinement:              0.325s

Code Coverage
-----------------------------
  Function coverage:      0.520
  Visited lines:          1955
  Total lines:            2304
  Line coverage:          0.849
  Visited conditions:     415
  Total conditions:       508
  Condition coverage:     0.817

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             51407
  Number of reached locations:   1058 (34%)
    Avg states per location:     48
    Max states per location:     540 (at node N108)
  Number of reached functions:   65 (52%)
  Number of partitions:          51114
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N1506 (before line 7707), Function main called from node N1489, stack depth 1 [1eb6e1c], stack [main]])
  Number of target states:       0
  Size of final wait list        28

Time for analysis setup:          6.071s
  Time for loading CPAs:          1.093s
  Time for loading parser:        0.710s
  Time for CFA construction:      4.143s
    Time for parsing file(s):     1.232s
    Time for AST to CFA:          1.427s
    Time for CFA sanity check:    0.257s
    Time for post-processing:     0.954s
      Time for var class.:        0.442s
Time for Analysis:              894.202s
CPU time for analysis:          894.120s
Total time for CPAchecker:      900.277s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.762s

Time for Garbage Collector:      83.580s (in 965 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1567MB (  1494 MiB) max;    651MB (   621 MiB) avg;   1625MB (  1550 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          2052MB (  1957 MiB) max;    958MB (   914 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   9233MB (  8805 MiB) max;   8375MB (  7987 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
