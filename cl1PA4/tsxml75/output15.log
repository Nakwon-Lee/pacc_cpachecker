scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_62bedp2n/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6997: Ignoring function call through function pointer *(priv->do_set_bittiming): err = (*(priv->do_set_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            20020 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  18531 (93%)
  Because of loop head:            1456 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         33 (0%)
  Times precision was empty:       14176 (71%)
  Times precision was {false}:     742 (4%)
  Times result was cached:         4560 (23%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      542 (3%)
  Times result was 'false':        666 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         21895
  BDD entailment checks:           5055
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          9
Number of abstraction locations:          52
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         12431
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 9.68
Number of irrelevant predicates:          7682 (62%)
Number of preds handled by boolean abs:   1147 (9%)
  Total number of models for allsat:      851
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.57

Time for post operator:                  7.876s
  Time for path formula creation:        7.670s
Time for strengthen operator:            0.313s
Time for prec operator:                  6.201s
  Time for abstraction:                  5.534s (Max:     0.032s, Count: 20020)
    Boolean abstraction:                 1.313s
    Solving time:                        1.136s (Max:     0.015s)
    Model enumeration time:              0.227s
    Time for BDD construction:           0.145s (Max:     0.012s)
Time for merge operator:                 0.604s
Time for coverage check:                 0.030s
  Time for BDD entailment checks:        0.023s
Total time for SMT solver (w/o itp):     1.363s

Number of path formula cache hits:   110507 (71%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.698s

Total number of created targets for pointer analysis: 430
   Number of created targets for uf: *unsigned_short_int is 91
   Number of created targets for uf: *unsigned_int is 25


Number of BDD nodes:                               499
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1256 (count: 26456, min: 0, max: 175, avg: 0.05)
Time for BDD node cleanup:                             0.022s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.582s
  Time for transition matches:                         0.289s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       137696 (count: 137696, min: 1, max: 1, avg: 1.00) [1 x 137696]

CPA algorithm statistics
------------------------
Number of iterations:            82710
Max size of waitlist:            223
Average size of waitlist:        104
Number of computed successors:   97280
Max successors for one state:    2
Number of times merged:          8420
Number of times stopped:         10880
Number of times breaked:         33

Total time for CPA algorithm:        23.151s (Max:     1.650s)
  Time for choose from waitlist:      0.209s
  Time for precision adjustment:      8.170s
  Time for transfer relation:        11.760s
  Time for merge operator:            0.971s
  Time for stop operator:             0.356s
  Time for adding to reached set:     0.512s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   33
Avg. length of target path (in blocks):                1089 (count: 33, min: 18, max: 48, avg: 33.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.292s
  Counterexample analysis:                             0.718s (Max:     0.040s, Calls: 33)
    Refinement sat check:                              0.450s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.064s
  Precision update:                                    0.060s
  ARG update:                                          0.428s

Length of refined path (in blocks):                     780 (count: 33, min: 10, max: 40, avg: 23.64)
Number of affected states:                              416 (count: 33, min: 1, max: 26, avg: 12.61)
Length (states) of path with itp 'true':                331 (count: 33, min: 4, max: 13, avg: 10.03)
Length (states) of path with itp non-trivial itp:       416 (count: 33, min: 1, max: 26, avg: 12.61)
Length (states) of path with itp 'false':                33 (count: 33, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 33, min: 0, max: 1, avg: 0.09)
Equal non-trivial interpolants along paths:             380 (count: 33, min: 0, max: 25, avg: 11.52)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                33
Number of successful refinements:     33
Number of failed refinements:         0
Max. size of reached set before ref.: 5363
Max. size of reached set after ref.:  659
Avg. size of reached set before ref.: 2830.97
Avg. size of reached set after ref.:  262.85

Total time for CEGAR algorithm:      24.640s
Time for refinements:                 1.478s
Average time for refinement:          0.044s
Max time for refinement:              0.125s

Code Coverage
-----------------------------
  Function coverage:      0.256
  Visited lines:          1350
  Total lines:            2304
  Line coverage:          0.586
  Visited conditions:     130
  Total conditions:       508
  Condition coverage:     0.256

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             987
  Number of reached locations:   318 (10%)
    Avg states per location:     3
    Max states per location:     15 (at node N85)
  Number of reached functions:   32 (26%)
  Number of partitions:          982
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N1506 (before line 7707), Function main called from node N1489, stack depth 1 [25a73de1], stack [main]])
  Number of target states:       0
  Size of final wait list        77

Time for analysis setup:          5.632s
  Time for loading CPAs:          0.901s
  Time for loading parser:        0.676s
  Time for CFA construction:      3.906s
    Time for parsing file(s):     1.123s
    Time for AST to CFA:          1.395s
    Time for CFA sanity check:    0.257s
    Time for post-processing:     0.861s
      Time for var class.:        0.375s
Time for Analysis:               24.641s
CPU time for analysis:           24.640s
Total time for CPAchecker:       30.277s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.113s

Time for Garbage Collector:       0.695s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 85MB (    81 MiB) max;     52MB (    50 MiB) avg;     87MB (    83 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
