scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zbbl4348/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6581: Ignoring function call through function pointer *(priv->do_set_mode): err = (*(priv->do_set_mode))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6997: Ignoring function call through function pointer *(priv->do_set_bittiming): err = (*(priv->do_set_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            22973 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  21085 (92%)
  Because of loop head:            1878 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (0%)
  Times precision was empty:       22611 (98%)
  Times precision was {false}:     55 (0%)
  Times result was cached:         255 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      52 (0%)
  Times result was 'false':        43 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         41862
  BDD entailment checks:           5852
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          8
Number of abstraction locations:          18
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         622
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 5.81
Number of irrelevant predicates:          406 (65%)
Number of preds handled by boolean abs:   84 (14%)
  Total number of models for allsat:      60
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.15

Time for post operator:                  7.957s
  Time for path formula creation:        7.525s
Time for strengthen operator:            0.480s
Time for prec operator:                  2.030s
  Time for abstraction:                  0.953s (Max:     0.018s, Count: 22973)
    Boolean abstraction:                 0.095s
    Solving time:                        0.061s (Max:     0.011s)
    Model enumeration time:              0.013s
    Time for BDD construction:           0.014s (Max:     0.008s)
Time for merge operator:                 0.991s
Time for coverage check:                 0.111s
  Time for BDD entailment checks:        0.077s
Total time for SMT solver (w/o itp):     0.074s

Number of path formula cache hits:   192454 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.122s

Total number of created targets for pointer analysis: 3252
   Number of created targets for uf: *(void)* is 361
   Number of created targets for uf: *signed_int is 73
   Number of created targets for uf: *(struct_can_frame)* is 25
   Number of created targets for uf: *unsigned_int is 97


Number of BDD nodes:                               221
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         140 (count: 29107, min: 0, max: 36, avg: 0.00)
Time for BDD node cleanup:                             0.027s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.807s
  Time for transition matches:                         0.353s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       187987 (count: 187987, min: 1, max: 1, avg: 1.00) [1 x 187987]

CPA algorithm statistics
------------------------
Number of iterations:            122935
Max size of waitlist:            32
Average size of waitlist:        14
Number of computed successors:   146710
Max successors for one state:    2
Number of times merged:          18005
Number of times stopped:         23692
Number of times breaked:         10

Total time for CPA algorithm:        23.260s (Max:     6.798s)
  Time for choose from waitlist:      0.362s
  Time for precision adjustment:      4.575s
  Time for transfer relation:        13.528s
  Time for merge operator:            1.944s
  Time for stop operator:             0.553s
  Time for adding to reached set:     0.720s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10
Avg. length of target path (in blocks):                 306 (count: 10, min: 18, max: 54, avg: 30.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.848s
  Counterexample analysis:                             0.201s (Max:     0.031s, Calls: 10)
    Refinement sat check:                              0.128s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.021s
  Precision update:                                    0.011s
  ARG update:                                          0.600s

Length of refined path (in blocks):                     176 (count: 10, min: 10, max: 26, avg: 17.60)
Number of affected states:                               74 (count: 10, min: 1, max: 12, avg: 7.40)
Length (states) of path with itp 'true':                 92 (count: 10, min: 4, max: 13, avg: 9.20)
Length (states) of path with itp non-trivial itp:        74 (count: 10, min: 1, max: 12, avg: 7.40)
Length (states) of path with itp 'false':                10 (count: 10, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 10, min: 0, max: 1, avg: 0.10)
Equal non-trivial interpolants along paths:              63 (count: 10, min: 0, max: 11, avg: 6.30)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10
Number of successful refinements:     10
Number of failed refinements:         0
Max. size of reached set before ref.: 23134
Max. size of reached set after ref.:  14808
Avg. size of reached set before ref.: 18088.40
Avg. size of reached set after ref.:  5892.60

Total time for CEGAR algorithm:      24.562s
Time for refinements:                 1.226s
Average time for refinement:          0.122s
Max time for refinement:              0.224s

Code Coverage
-----------------------------
  Function coverage:      0.200
  Visited lines:          1299
  Total lines:            2304
  Line coverage:          0.564
  Visited conditions:     144
  Total conditions:       508
  Condition coverage:     0.283

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             1017
  Number of reached locations:   345 (11%)
    Avg states per location:     2
    Max states per location:     55 (at node N108)
  Number of reached functions:   25 (20%)
  Number of partitions:          1016
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1506 (before line 7707), Function main called from node N1489, stack depth 1 [5f303ecd], stack [main]])
  Number of target states:       0
  Size of final wait list        25

Time for analysis setup:          5.732s
  Time for loading CPAs:          1.013s
  Time for loading parser:        0.692s
  Time for CFA construction:      3.879s
    Time for parsing file(s):     1.060s
    Time for AST to CFA:          1.382s
    Time for CFA sanity check:    0.254s
    Time for post-processing:     0.965s
      Time for var class.:        0.421s
Time for Analysis:               24.562s
CPU time for analysis:           24.560s
Total time for CPAchecker:       30.298s
Total CPU time for CPAchecker:   30.280s
Time for statistics:              0.123s

Time for Garbage Collector:       1.260s (in 50 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                122MB (   116 MiB) max;     63MB (    60 MiB) avg;    131MB (   124 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
