scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--can--can-dev.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_aj3i1cwy/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7229: Function pointer *(priv->do_get_berr_counter) with type int (*)(const struct net_device *, struct can_berr_counter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7189: Function pointer *(priv->do_get_state) with type int (*)(const struct net_device *, enum can_state *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8314: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7925: Destroying the void* pointer ldv_main_exported_3::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7426: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7673: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_trigger_rename_static to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7189: Ignoring function call through function pointer *(priv->do_get_state): (*(priv->do_get_state))(dev, &state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7229: Ignoring function call through function pointer *(priv->do_get_berr_counter): tmp___6 = (*(priv->do_get_berr_counter))(dev, &bec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6997: Ignoring function call through function pointer *(priv->do_set_bittiming): err = (*(priv->do_set_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7087: Ignoring function call through function pointer *(priv->do_set_data_bittiming): err = (*(priv->do_set_data_bittiming))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6581: Ignoring function call through function pointer *(priv->do_set_mode): err = (*(priv->do_set_mode))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2067052 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1922685 (93%)
  Because of loop head:            143778 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         589 (0%)
  Times precision was empty:       349406 (17%)
  Times precision was {false}:     4423 (0%)
  Times result was cached:         1695189 (82%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      18034 (1%)
  Times result was 'false':        106357 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         4010088
  BDD entailment checks:           805448
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          34
Number of abstraction locations:          169
Max number of predicates per location:    14
Avg number of predicates per location:    5
Total predicates per abstraction:         6072217
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 270.39
Number of irrelevant predicates:          3026695 (50%)
Number of preds handled by boolean abs:   63200 (1%)
  Total number of models for allsat:      56280
  Max number of models for allsat:        540
  Avg number of models for allsat:        3.12

Time for post operator:                125.514s
  Time for path formula creation:      119.131s
Time for strengthen operator:           14.948s
Time for prec operator:                391.984s
  Time for abstraction:                363.025s (Max:     2.261s, Count: 2067052)
    Boolean abstraction:                27.561s
    Solving time:                       21.389s (Max:     0.047s)
    Model enumeration time:              5.504s
    Time for BDD construction:           1.292s (Max:     0.035s)
Time for merge operator:                15.298s
Time for coverage check:                 1.219s
  Time for BDD entailment checks:        0.753s
Total time for SMT solver (w/o itp):    26.893s

Number of path formula cache hits:   18799475 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    60.607s

Total number of created targets for pointer analysis: 145372
   Number of created targets for uf: *unsigned_short_int is 643
   Number of created targets for uf: *(void)* is 5761
   Number of created targets for uf: *(struct_rtnl_link_ops)* is 1149
   Number of created targets for uf: *signed_int is 183
   Number of created targets for uf: *(unsigned_char)* is 25
   Number of created targets for uf: *(struct_can_frame)* is 6
   Number of created targets for uf: *unsigned_int is 5551
   Number of created targets for uf: *unsigned_long_int is 2747


Number of BDD nodes:                               99505
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       48531 (count: 1326640, min: 0, max: 1875, avg: 0.04)
Time for BDD node cleanup:                             0.225s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.984s
  Time for transition matches:                         9.161s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                     16468527 (count: 16468527, min: 1, max: 1, avg: 1.00) [1 x 16468527]

CPA algorithm statistics
------------------------
Number of iterations:            10756727
Max size of waitlist:            1537
Average size of waitlist:        469
Number of computed successors:   12983554
Max successors for one state:    2
Number of times merged:          1602320
Number of times stopped:         1985157
Number of times breaked:         589

Total time for CPA algorithm:       837.949s (Max:    15.531s)
  Time for choose from waitlist:      4.150s
  Time for precision adjustment:    474.162s
  Time for transfer relation:       268.676s
  Time for merge operator:           31.903s
  Time for stop operator:            13.747s
  Time for adding to reached set:    17.190s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   589
Avg. length of target path (in blocks):               36651 (count: 589, min: 18, max: 109, avg: 62.23)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  37.093s
  Counterexample analysis:                            15.260s (Max:     0.069s, Calls: 589)
    Refinement sat check:                              8.812s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.023s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.186s
  Precision update:                                    0.398s
  ARG update:                                         20.965s

Length of refined path (in blocks):                   27579 (count: 589, min: 10, max: 85, avg: 46.82)
Number of affected states:                            14067 (count: 589, min: 1, max: 62, avg: 23.88)
Length (states) of path with itp 'true':              12923 (count: 589, min: 4, max: 77, avg: 21.94)
Length (states) of path with itp non-trivial itp:     14067 (count: 589, min: 1, max: 62, avg: 23.88)
Length (states) of path with itp 'false':               589 (count: 589, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         764 (count: 589, min: 0, max: 6, avg: 1.30)
Equal non-trivial interpolants along paths:           12714 (count: 589, min: 0, max: 57, avg: 21.59)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                589
Number of successful refinements:     589
Number of failed refinements:         0
Max. size of reached set before ref.: 170970
Max. size of reached set after ref.:  72841
Avg. size of reached set before ref.: 30478.50
Avg. size of reached set after ref.:  12048.04

Total time for CEGAR algorithm:     894.018s
Time for refinements:                50.081s
Average time for refinement:          0.085s
Max time for refinement:              0.695s

Code Coverage
-----------------------------
  Function coverage:      0.384
  Visited lines:          1761
  Total lines:            2304
  Line coverage:          0.764
  Visited conditions:     361
  Total conditions:       508
  Condition coverage:     0.711

CPAchecker general statistics
-----------------------------
Number of program locations:     3126
Number of CFA edges:             3431
Number of relevant variables:    414
Number of functions:             125
Number of loops:                 12
Size of reached set:             36502
  Number of reached locations:   835 (27%)
    Avg states per location:     43
    Max states per location:     745 (at node N99)
  Number of reached functions:   48 (38%)
  Number of partitions:          36374
    Avg size of partitions:      1
    Max size of partitions:      25 (with key [N1506 (before line 7707), Function main called from node N1489, stack depth 1 [1eb6e1c], stack [main]])
  Number of target states:       0
  Size of final wait list        1292

Time for analysis setup:          6.225s
  Time for loading CPAs:          1.176s
  Time for loading parser:        0.758s
  Time for CFA construction:      4.149s
    Time for parsing file(s):     1.098s
    Time for AST to CFA:          1.365s
    Time for CFA sanity check:    0.275s
    Time for post-processing:     1.166s
      Time for var class.:        0.453s
Time for Analysis:              894.019s
CPU time for analysis:          893.940s
Total time for CPAchecker:      900.256s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.524s

Time for Garbage Collector:      89.589s (in 1239 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1164MB (  1110 MiB) max;    533MB (   508 MiB) avg;   1213MB (  1157 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     41MB (    39 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:          1264MB (  1205 MiB) max;    772MB (   737 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     48MB (    46 MiB) avg
Total process virtual memory:   8491MB (  8098 MiB) max;   8213MB (  7833 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
