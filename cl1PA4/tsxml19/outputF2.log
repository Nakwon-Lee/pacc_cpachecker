scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_vh04j0e1/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function synchronize_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msi to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6695: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6632: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_msi_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6598-6599: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6715: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6825: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6793: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6665: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, page, offset, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pskb_expand_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2773934 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2236292 (81%)
  Because of loop head:            537584 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         58 (0%)
  Times precision was empty:       2747241 (99%)
  Times precision was {false}:     2504 (0%)
  Times result was cached:         23538 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      651 (0%)
  Times result was 'false':        4835 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         934098
  BDD entailment checks:           438440
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          17
Number of abstraction locations:          81
Max number of predicates per location:    11
Avg number of predicates per location:    2
Total predicates per abstraction:         46352
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 14.69
Number of irrelevant predicates:          35918 (77%)
Number of preds handled by boolean abs:   2537 (5%)
  Total number of models for allsat:      1057
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.62

Time for post operator:                268.631s
  Time for path formula creation:      262.382s
Time for strengthen operator:           10.939s
Time for prec operator:                 72.612s
  Time for abstraction:                 17.110s (Max:     0.442s, Count: 2773934)
    Boolean abstraction:                 1.730s
    Solving time:                        2.409s (Max:     0.111s)
    Model enumeration time:              0.165s
    Time for BDD construction:           0.076s (Max:     0.017s)
Time for merge operator:                 7.384s
Time for coverage check:                 0.639s
  Time for BDD entailment checks:        0.494s
Total time for SMT solver (w/o itp):     2.574s

Number of path formula cache hits:   10803512 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   151.219s

Total number of created targets for pointer analysis: 638911
   Number of created targets for uf: *(void)* is 433
   Number of created targets for uf: *unsigned_short_int is 281
   Number of created targets for uf: *signed_int is 53456
   Number of created targets for uf: *unsigned_char is 595
   Number of created targets for uf: *unsigned_long_long_int is 2769
   Number of created targets for uf: *unsigned_int is 154
   Number of created targets for uf: *unsigned_long_int is 1961


Number of BDD nodes:                               1001
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2463 (count: 3203623, min: 0, max: 351, avg: 0.00)
Time for BDD node cleanup:                             0.476s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 15.541s
  Time for transition matches:                         8.644s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     11614998 (count: 11614998, min: 1, max: 1, avg: 1.00) [1 x 11614998]

CPA algorithm statistics
------------------------
Number of iterations:            7952402
Max size of waitlist:            320
Average size of waitlist:        127
Number of computed successors:   8642541
Max successors for one state:    2
Number of times merged:          247829
Number of times stopped:         680941
Number of times breaked:         58

Total time for CPA algorithm:       863.169s (Max:    37.778s)
  Time for choose from waitlist:      4.466s
  Time for precision adjustment:    141.910s
  Time for transfer relation:       652.962s
  Time for merge operator:           11.677s
  Time for stop operator:            10.437s
  Time for adding to reached set:    17.092s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   58
Avg. length of target path (in blocks):                5726 (count: 58, min: 18, max: 283, avg: 98.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  23.851s
  Counterexample analysis:                             2.926s (Max:     0.200s, Calls: 58)
    Refinement sat check:                              1.762s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.028s
  Precision update:                                    0.030s
  ARG update:                                         20.803s

Length of refined path (in blocks):                    1218 (count: 58, min: 12, max: 139, avg: 21.00)
Number of affected states:                              612 (count: 58, min: 1, max: 31, avg: 10.55)
Length (states) of path with itp 'true':                548 (count: 58, min: 0, max: 133, avg: 9.45)
Length (states) of path with itp non-trivial itp:       612 (count: 58, min: 1, max: 31, avg: 10.55)
Length (states) of path with itp 'false':                58 (count: 58, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          34 (count: 58, min: 0, max: 3, avg: 0.59)
Equal non-trivial interpolants along paths:             520 (count: 58, min: 0, max: 29, avg: 8.97)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                58
Number of successful refinements:     58
Number of failed refinements:         0
Max. size of reached set before ref.: 224914
Max. size of reached set after ref.:  34761
Avg. size of reached set before ref.: 137749.67
Avg. size of reached set after ref.:  1228.72

Total time for CEGAR algorithm:     892.209s
Time for refinements:                28.980s
Average time for refinement:          0.499s
Max time for refinement:              1.395s

Code Coverage
-----------------------------
  Function coverage:      0.451
  Visited lines:          3664
  Total lines:            6633
  Line coverage:          0.552
  Visited conditions:     717
  Total conditions:       1356
  Condition coverage:     0.529

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             38550
  Number of reached locations:   2419 (27%)
    Avg states per location:     15
    Max states per location:     1450 (at node N78)
  Number of reached functions:   137 (45%)
  Number of partitions:          38542
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N3632 (before line 10736), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        280

Time for analysis setup:          8.049s
  Time for loading CPAs:          1.185s
  Time for loading parser:        0.658s
  Time for CFA construction:      6.065s
    Time for parsing file(s):     1.383s
    Time for AST to CFA:          2.182s
    Time for CFA sanity check:    0.607s
    Time for post-processing:     1.697s
      Time for var class.:        0.806s
Time for Analysis:              892.209s
CPU time for analysis:          892.180s
Total time for CPAchecker:      900.263s
Total CPU time for CPAchecker:  900.210s
Time for statistics:              0.695s

Time for Garbage Collector:      93.091s (in 426 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2100MB (  2003 MiB) max;   1037MB (   989 MiB) avg;   2137MB (  2038 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     39MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          2269MB (  2164 MiB) max;   1511MB (  1441 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8084MB (  7709 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
