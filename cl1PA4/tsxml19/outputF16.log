scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5cxa14ae/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function synchronize_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msi to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6695: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6632: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_msi_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6598-6599: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6715: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6825: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6793: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6665: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, page, offset, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pskb_expand_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2658687 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2143379 (81%)
  Because of loop head:            515252 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         56 (0%)
  Times precision was empty:       2645336 (99%)
  Times precision was {false}:     2129 (0%)
  Times result was cached:         10640 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      582 (0%)
  Times result was 'false':        4770 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         895478
  BDD entailment checks:           420168
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          15
Number of abstraction locations:          54
Max number of predicates per location:    11
Avg number of predicates per location:    3
Total predicates per abstraction:         32054
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 11.82
Number of irrelevant predicates:          22227 (69%)
Number of preds handled by boolean abs:   2451 (8%)
  Total number of models for allsat:      966
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.66

Time for post operator:                251.844s
  Time for path formula creation:      245.572s
Time for strengthen operator:           12.340s
Time for prec operator:                 66.696s
  Time for abstraction:                 14.970s (Max:     0.284s, Count: 2658687)
    Boolean abstraction:                 1.662s
    Solving time:                        1.831s (Max:     0.117s)
    Model enumeration time:              0.166s
    Time for BDD construction:           0.069s (Max:     0.009s)
Time for merge operator:                 6.963s
Time for coverage check:                 0.440s
  Time for BDD entailment checks:        0.301s
Total time for SMT solver (w/o itp):     1.997s

Number of path formula cache hits:   10467417 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   141.434s

Total number of created targets for pointer analysis: 552779
   Number of created targets for uf: *(void)* is 397
   Number of created targets for uf: *unsigned_short_int is 233
   Number of created targets for uf: *signed_int is 49681
   Number of created targets for uf: *unsigned_char is 309
   Number of created targets for uf: *unsigned_long_long_int is 1569
   Number of created targets for uf: *unsigned_int is 112
   Number of created targets for uf: *unsigned_long_int is 1121


Number of BDD nodes:                               967
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2373 (count: 3081132, min: 0, max: 351, avg: 0.00)
Time for BDD node cleanup:                             0.478s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 16.232s
  Time for transition matches:                         9.008s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     11133098 (count: 11133098, min: 1, max: 1, avg: 1.00) [1 x 11133098]

CPA algorithm statistics
------------------------
Number of iterations:            7622658
Max size of waitlist:            288
Average size of waitlist:        121
Number of computed successors:   8284479
Max successors for one state:    2
Number of times merged:          237655
Number of times stopped:         652818
Number of times breaked:         56

Total time for CPA algorithm:       859.470s (Max:    38.604s)
  Time for choose from waitlist:      3.918s
  Time for precision adjustment:    145.759s
  Time for transfer relation:       647.505s
  Time for merge operator:           11.073s
  Time for stop operator:            10.816s
  Time for adding to reached set:    18.142s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   56
Avg. length of target path (in blocks):                5164 (count: 56, min: 18, max: 277, avg: 92.21)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  27.555s
  Counterexample analysis:                             2.614s (Max:     0.144s, Calls: 56)
    Refinement sat check:                              1.613s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.027s
  Precision update:                                    0.023s
  ARG update:                                         24.820s

Length of refined path (in blocks):                    1008 (count: 56, min: 12, max: 40, avg: 18.00)
Number of affected states:                              585 (count: 56, min: 1, max: 31, avg: 10.45)
Length (states) of path with itp 'true':                367 (count: 56, min: 0, max: 29, avg: 6.55)
Length (states) of path with itp non-trivial itp:       585 (count: 56, min: 1, max: 31, avg: 10.45)
Length (states) of path with itp 'false':                56 (count: 56, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          34 (count: 56, min: 0, max: 3, avg: 0.61)
Equal non-trivial interpolants along paths:             495 (count: 56, min: 0, max: 29, avg: 8.84)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                56
Number of successful refinements:     56
Number of failed refinements:         0
Max. size of reached set before ref.: 224914
Max. size of reached set after ref.:  529
Avg. size of reached set before ref.: 134839.32
Avg. size of reached set after ref.:  36.34

Total time for CEGAR algorithm:     891.616s
Time for refinements:                32.140s
Average time for refinement:          0.573s
Max time for refinement:              3.073s

Code Coverage
-----------------------------
  Function coverage:      0.464
  Visited lines:          3769
  Total lines:            6633
  Line coverage:          0.568
  Visited conditions:     735
  Total conditions:       1356
  Condition coverage:     0.542

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             77925
  Number of reached locations:   2532 (28%)
    Avg states per location:     30
    Max states per location:     3037 (at node N631)
  Number of reached functions:   141 (46%)
  Number of partitions:          77920
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N3632 (before line 10736), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        246

Time for analysis setup:          8.613s
  Time for loading CPAs:          1.203s
  Time for loading parser:        0.736s
  Time for CFA construction:      6.527s
    Time for parsing file(s):     1.446s
    Time for AST to CFA:          2.226s
    Time for CFA sanity check:    0.665s
    Time for post-processing:     1.975s
      Time for var class.:        0.824s
Time for Analysis:              891.616s
CPU time for analysis:          891.580s
Total time for CPAchecker:      900.234s
Total CPU time for CPAchecker:  900.170s
Time for statistics:              1.210s

Time for Garbage Collector:      92.565s (in 409 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1962MB (  1871 MiB) max;   1013MB (   966 MiB) avg;   2034MB (  1940 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          2200MB (  2098 MiB) max;   1492MB (  1423 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8084MB (  7709 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
