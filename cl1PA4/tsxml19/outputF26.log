scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_z76r0fix/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10460: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14936: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14944: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14950: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14952: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14954: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11161: Destroying the void* pointer ldv_main_exported_3::tmp___2 produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1618467 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1496127 (92%)
  Because of loop head:            122040 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         300 (0%)
  Times precision was empty:       405001 (25%)
  Times precision was {false}:     15557 (1%)
  Times result was cached:         1147951 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      49958 (3%)
  Times result was 'false':        73900 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         1613341
  BDD entailment checks:           751011
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       180
Number of predicates discovered:          24
Number of abstraction locations:          423
Max number of predicates per location:    16
Avg number of predicates per location:    2
Total predicates per abstraction:         4390289
Max number of predicates per abstraction: 16
Avg number of predicates per abstraction: 67.01
Number of irrelevant predicates:          1468428 (33%)
Number of preds handled by boolean abs:   152272 (3%)
  Total number of models for allsat:      150995
  Max number of models for allsat:        432
  Avg number of models for allsat:        3.02

Time for post operator:                208.931s
  Time for path formula creation:      203.867s
Time for strengthen operator:            9.667s
Time for prec operator:                382.617s
  Time for abstraction:                353.615s (Max:     0.492s, Count: 1618467)
    Boolean abstraction:                84.218s
    Solving time:                       57.617s (Max:     0.177s)
    Model enumeration time:             26.232s
    Time for BDD construction:           3.047s (Max:     0.022s)
Time for merge operator:                12.859s
Time for coverage check:                 0.924s
  Time for BDD entailment checks:        0.705s
Total time for SMT solver (w/o itp):    83.849s

Number of path formula cache hits:   9574833 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   137.943s

Total number of created targets for pointer analysis: 346862
   Number of created targets for uf: *unsigned_short_int is 781
   Number of created targets for uf: *(void)* is 4177
   Number of created targets for uf: *signed_int is 9665
   Number of created targets for uf: *unsigned_char is 1431
   Number of created targets for uf: *(struct_list_head)* is 131
   Number of created targets for uf: *(unsigned_char)* is 196
   Number of created targets for uf: *unsigned_long_long_int is 5
   Number of created targets for uf: *unsigned_int is 1431
   Number of created targets for uf: *unsigned_long_int is 3431


Number of BDD nodes:                               65018
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      104721 (count: 1567233, min: 0, max: 3467, avg: 0.07)
Time for BDD node cleanup:                             0.270s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.926s
  Time for transition matches:                         8.433s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                     10051939 (count: 10051939, min: 1, max: 1, avg: 1.00) [1 x 10051939]

CPA algorithm statistics
------------------------
Number of iterations:            5680161
Max size of waitlist:            3948
Average size of waitlist:        1016
Number of computed successors:   6623621
Max successors for one state:    2
Number of times merged:          431165
Number of times stopped:         608000
Number of times breaked:         300

Total time for CPA algorithm:       846.399s (Max:    35.723s)
  Time for choose from waitlist:      3.274s
  Time for precision adjustment:    436.866s
  Time for transfer relation:       343.920s
  Time for merge operator:           20.050s
  Time for stop operator:             8.715s
  Time for adding to reached set:    15.068s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   300
Avg. length of target path (in blocks):               22595 (count: 300, min: 18, max: 203, avg: 75.32)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  39.572s
  Counterexample analysis:                            26.009s (Max:     0.535s, Calls: 300)
    Refinement sat check:                             19.359s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.030s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.169s
  Precision update:                                    0.233s
  ARG update:                                         12.826s

Length of refined path (in blocks):                   19981 (count: 300, min: 12, max: 197, avg: 66.60)
Number of affected states:                            14450 (count: 300, min: 1, max: 183, avg: 48.17)
Length (states) of path with itp 'true':               5231 (count: 300, min: 0, max: 97, avg: 17.44)
Length (states) of path with itp non-trivial itp:     14450 (count: 300, min: 1, max: 183, avg: 48.17)
Length (states) of path with itp 'false':               300 (count: 300, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         213 (count: 300, min: 0, max: 3, avg: 0.71)
Equal non-trivial interpolants along paths:           13937 (count: 300, min: 0, max: 181, avg: 46.46)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                300
Number of successful refinements:     300
Number of failed refinements:         0
Max. size of reached set before ref.: 186141
Max. size of reached set after ref.:  182306
Avg. size of reached set before ref.: 23371.75
Avg. size of reached set after ref.:  3807.28

Total time for CEGAR algorithm:     891.784s
Time for refinements:                44.367s
Average time for refinement:          0.147s
Max time for refinement:              0.789s

Code Coverage
-----------------------------
  Function coverage:      0.451
  Visited lines:          3409
  Total lines:            6633
  Line coverage:          0.514
  Visited conditions:     562
  Total conditions:       1356
  Condition coverage:     0.414

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             72380
  Number of reached locations:   1735 (19%)
    Avg states per location:     41
    Max states per location:     1641 (at node N748)
  Number of reached functions:   137 (45%)
  Number of partitions:          72204
    Avg size of partitions:      1
    Max size of partitions:      54 (with key [N3632 (before line 10736), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        2893

Time for analysis setup:          8.460s
  Time for loading CPAs:          1.310s
  Time for loading parser:        0.701s
  Time for CFA construction:      6.292s
    Time for parsing file(s):     1.519s
    Time for AST to CFA:          2.224s
    Time for CFA sanity check:    0.608s
    Time for post-processing:     1.695s
      Time for var class.:        0.831s
Time for Analysis:              891.784s
CPU time for analysis:          891.670s
Total time for CPAchecker:      900.248s
Total CPU time for CPAchecker:  900.120s
Time for statistics:              1.121s

Time for Garbage Collector:      59.242s (in 584 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2123MB (  2025 MiB) max;    800MB (   763 MiB) avg;   2140MB (  2041 MiB) peak
Used non-heap memory:             48MB (    45 MiB) max;     41MB (    39 MiB) avg;     48MB (    45 MiB) peak
Allocated heap memory:          2344MB (  2235 MiB) max;   1192MB (  1136 MiB) avg
Allocated non-heap memory:        50MB (    47 MiB) max;     49MB (    47 MiB) avg
Total process virtual memory:   9303MB (  8872 MiB) max;   8584MB (  8187 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
