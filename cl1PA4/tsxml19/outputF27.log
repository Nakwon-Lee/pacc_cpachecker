scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u0cfwgyb/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10460: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14936: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14944: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14950: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14952: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14954: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11161: Destroying the void* pointer ldv_main_exported_3::tmp___2 produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2299112 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2122245 (92%)
  Because of loop head:            175237 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1630 (0%)
  Times precision was empty:       599272 (26%)
  Times precision was {false}:     5767 (0%)
  Times result was cached:         1683830 (73%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      10243 (0%)
  Times result was 'false':        77362 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         1790928
  BDD entailment checks:           819086
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       180
Number of predicates discovered:          28
Number of abstraction locations:          410
Max number of predicates per location:    17
Avg number of predicates per location:    2
Total predicates per abstraction:         3477124
Max number of predicates per abstraction: 17
Avg number of predicates per abstraction: 217.18
Number of irrelevant predicates:          1949289 (56%)
Number of preds handled by boolean abs:   27659 (1%)
  Total number of models for allsat:      17579
  Max number of models for allsat:        288
  Avg number of models for allsat:        1.72

Time for post operator:                 97.455s
  Time for path formula creation:       92.363s
Time for strengthen operator:           10.542s
Time for prec operator:                255.928s
  Time for abstraction:                226.672s (Max:     1.340s, Count: 2299112)
    Boolean abstraction:                14.533s
    Solving time:                       12.717s (Max:     0.251s)
    Model enumeration time:              2.984s
    Time for BDD construction:           0.487s (Max:     0.012s)
Time for merge operator:                 5.864s
Time for coverage check:                 0.847s
  Time for BDD entailment checks:        0.624s
Total time for SMT solver (w/o itp):    15.701s

Number of path formula cache hits:   15057042 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    26.916s

Total number of created targets for pointer analysis: 116623
   Number of created targets for uf: *(void)* is 403
   Number of created targets for uf: *unsigned_short_int is 245
   Number of created targets for uf: *signed_int is 3771
   Number of created targets for uf: *unsigned_char is 639
   Number of created targets for uf: *(struct_list_head)* is 43
   Number of created targets for uf: *(unsigned_char)* is 126
   Number of created targets for uf: *unsigned_long_long_int is 1465
   Number of created targets for uf: *unsigned_int is 457
   Number of created targets for uf: *unsigned_long_int is 561


Number of BDD nodes:                               22860
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       24130 (count: 1530160, min: 0, max: 790, avg: 0.02)
Time for BDD node cleanup:                             0.240s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 16.932s
  Time for transition matches:                         8.822s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.019s
Automaton transfers with branching:                0
Automaton transfer successors:                     12780725 (count: 12780725, min: 1, max: 1, avg: 1.00) [1 x 12780725]

CPA algorithm statistics
------------------------
Number of iterations:            7666591
Max size of waitlist:            1229
Average size of waitlist:        573
Number of computed successors:   8688578
Max successors for one state:    2
Number of times merged:          485921
Number of times stopped:         725594
Number of times breaked:         1630

Total time for CPA algorithm:       657.423s (Max:     7.161s)
  Time for choose from waitlist:      3.897s
  Time for precision adjustment:    315.079s
  Time for transfer relation:       280.484s
  Time for merge operator:           12.879s
  Time for stop operator:            10.178s
  Time for adding to reached set:    15.989s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1630
Avg. length of target path (in blocks):              138319 (count: 1630, min: 18, max: 158, avg: 84.86)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 132.912s
  Counterexample analysis:                           113.760s (Max:     0.415s, Calls: 1630)
    Refinement sat check:                             79.781s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.074s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.271s
  Precision update:                                    1.254s
  ARG update:                                         16.579s

Length of refined path (in blocks):                  108752 (count: 1630, min: 12, max: 157, avg: 66.72)
Number of affected states:                            19236 (count: 1630, min: 1, max: 148, avg: 11.80)
Length (states) of path with itp 'true':              87886 (count: 1630, min: 0, max: 91, avg: 53.92)
Length (states) of path with itp non-trivial itp:     19236 (count: 1630, min: 1, max: 148, avg: 11.80)
Length (states) of path with itp 'false':              1630 (count: 1630, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1056 (count: 1630, min: 0, max: 3, avg: 0.65)
Equal non-trivial interpolants along paths:           16550 (count: 1630, min: 0, max: 146, avg: 10.15)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1630
Number of successful refinements:     1630
Number of failed refinements:         0
Max. size of reached set before ref.: 69669
Max. size of reached set after ref.:  68042
Avg. size of reached set before ref.: 35032.21
Avg. size of reached set after ref.:  30220.47

Total time for CEGAR algorithm:     891.770s
Time for refinements:               190.879s
Average time for refinement:          0.117s
Max time for refinement:              1.335s

Code Coverage
-----------------------------
  Function coverage:      0.516
  Visited lines:          3832
  Total lines:            6633
  Line coverage:          0.578
  Visited conditions:     684
  Total conditions:       1356
  Condition coverage:     0.504

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             42477
  Number of reached locations:   2134 (24%)
    Avg states per location:     19
    Max states per location:     842 (at node N78)
  Number of reached functions:   157 (52%)
  Number of partitions:          42375
    Avg size of partitions:      1
    Max size of partitions:      14 (with key [N3985 (after line 11109), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        675

Time for analysis setup:          8.562s
  Time for loading CPAs:          1.322s
  Time for loading parser:        0.759s
  Time for CFA construction:      6.305s
    Time for parsing file(s):     1.392s
    Time for AST to CFA:          2.124s
    Time for CFA sanity check:    0.647s
    Time for post-processing:     1.954s
      Time for var class.:        0.945s
Time for Analysis:              891.770s
CPU time for analysis:          891.690s
Total time for CPAchecker:      900.338s
Total CPU time for CPAchecker:  900.240s
Time for statistics:              0.777s

Time for Garbage Collector:      72.209s (in 1636 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                525MB (   500 MiB) max;    262MB (   250 MiB) avg;    545MB (   520 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           539MB (   514 MiB) max;    386MB (   368 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8356MB (  7969 MiB) max;   8200MB (  7820 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
