scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_svs68997/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10460: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14936: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14944: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14950: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14952: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14954: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11161: Destroying the void* pointer ldv_main_exported_3::tmp___2 produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            19495 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  17572 (90%)
  Because of loop head:            1894 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         29 (0%)
  Times precision was empty:       16338 (84%)
  Times precision was {false}:     554 (3%)
  Times result was cached:         2307 (12%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      296 (2%)
  Times result was 'false':        837 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         12823
  BDD entailment checks:           2849
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          8
Number of abstraction locations:          51
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         7214
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 8.49
Number of irrelevant predicates:          4216 (58%)
Number of preds handled by boolean abs:   644 (9%)
  Total number of models for allsat:      635
  Max number of models for allsat:        24
  Avg number of models for allsat:        2.15

Time for post operator:                  6.303s
  Time for path formula creation:        6.101s
Time for strengthen operator:            0.270s
Time for prec operator:                  5.000s
  Time for abstraction:                  4.165s (Max:     0.042s, Count: 19495)
    Boolean abstraction:                 1.206s
    Solving time:                        1.014s (Max:     0.017s)
    Model enumeration time:              0.214s
    Time for BDD construction:           0.117s (Max:     0.012s)
Time for merge operator:                 0.435s
Time for coverage check:                 0.068s
  Time for BDD entailment checks:        0.066s
Total time for SMT solver (w/o itp):     1.228s

Number of path formula cache hits:   94232 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.975s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               439
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         712 (count: 23986, min: 0, max: 78, avg: 0.03)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.459s
Automaton transfers with branching:                0
Automaton transfer successors:                       107663 (count: 107663, min: 1, max: 1, avg: 1.00) [1 x 107663]

CPA algorithm statistics
------------------------
Number of iterations:            66141
Max size of waitlist:            269
Average size of waitlist:        110
Number of computed successors:   77705
Max successors for one state:    2
Number of times merged:          4987
Number of times stopped:         6666
Number of times breaked:         29

Total time for CPA algorithm:        19.282s (Max:     1.861s)
  Time for choose from waitlist:      0.226s
  Time for precision adjustment:      6.362s
  Time for transfer relation:        10.043s
  Time for merge operator:            0.718s
  Time for stop operator:             0.353s
  Time for adding to reached set:     0.448s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   29
Avg. length of target path (in blocks):                1075 (count: 29, min: 18, max: 62, avg: 37.07)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.148s
  Counterexample analysis:                             1.668s (Max:     0.093s, Calls: 29)
    Refinement sat check:                              1.307s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.047s
  Precision update:                                    0.042s
  ARG update:                                          0.340s

Length of refined path (in blocks):                     847 (count: 29, min: 12, max: 56, avg: 29.21)
Number of affected states:                              519 (count: 29, min: 1, max: 42, avg: 17.90)
Length (states) of path with itp 'true':                299 (count: 29, min: 8, max: 13, avg: 10.31)
Length (states) of path with itp non-trivial itp:       519 (count: 29, min: 1, max: 42, avg: 17.90)
Length (states) of path with itp 'false':                29 (count: 29, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           6 (count: 29, min: 0, max: 1, avg: 0.21)
Equal non-trivial interpolants along paths:             484 (count: 29, min: 0, max: 41, avg: 16.69)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                29
Number of successful refinements:     29
Number of failed refinements:         0
Max. size of reached set before ref.: 4592
Max. size of reached set after ref.:  1592
Avg. size of reached set before ref.: 2585.21
Avg. size of reached set after ref.:  258.07

Total time for CEGAR algorithm:      21.651s
Time for refinements:                 2.344s
Average time for refinement:          0.080s
Max time for refinement:              0.139s

Code Coverage
-----------------------------
  Function coverage:      0.240
  Visited lines:          1780
  Total lines:            6633
  Line coverage:          0.268
  Visited conditions:     314
  Total conditions:       1356
  Condition coverage:     0.232

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             2715
  Number of reached locations:   695 (8%)
    Avg states per location:     3
    Max states per location:     42 (at node N78)
  Number of reached functions:   73 (24%)
  Number of partitions:          2710
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N3632 (before line 10736), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        196

Time for analysis setup:          8.610s
  Time for loading CPAs:          1.362s
  Time for loading parser:        0.729s
  Time for CFA construction:      6.372s
    Time for parsing file(s):     1.439s
    Time for AST to CFA:          2.217s
    Time for CFA sanity check:    0.689s
    Time for post-processing:     1.817s
      Time for var class.:        0.902s
Time for Analysis:               21.651s
CPU time for analysis:           21.650s
Total time for CPAchecker:       30.268s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.165s

Time for Garbage Collector:       0.846s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 84MB (    80 MiB) max;     56MB (    53 MiB) avg;     90MB (    86 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8070MB (  7696 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
