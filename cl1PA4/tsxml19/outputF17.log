scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--ixgb--ixgb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7q4kl7y4/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 13406: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6793: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6825: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6665: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6598-6599: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6715: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6695: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6632: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10719: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10460: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14936: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14944: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14950: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14952: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14954: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11161: Destroying the void* pointer ldv_main_exported_3::tmp___2 produces garbage or the memory pointed by it is unused: ldv_main_exported_3(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2240585 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2030856 (91%)
  Because of loop head:            208493 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1236 (0%)
  Times precision was empty:       643850 (29%)
  Times precision was {false}:     7066 (0%)
  Times result was cached:         1580605 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9064 (0%)
  Times result was 'false':        90429 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2178662
  BDD entailment checks:           1003052
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       180
Number of predicates discovered:          29
Number of abstraction locations:          405
Max number of predicates per location:    17
Avg number of predicates per location:    2
Total predicates per abstraction:         4688824
Max number of predicates per abstraction: 18
Avg number of predicates per abstraction: 290.69
Number of irrelevant predicates:          2523323 (54%)
Number of preds handled by boolean abs:   21397 (0%)
  Total number of models for allsat:      19153
  Max number of models for allsat:        324
  Avg number of models for allsat:        2.11

Time for post operator:                125.770s
  Time for path formula creation:      120.333s
Time for strengthen operator:           10.640s
Time for prec operator:                292.860s
  Time for abstraction:                261.139s (Max:     1.387s, Count: 2240585)
    Boolean abstraction:                18.197s
    Solving time:                       16.170s (Max:     0.195s)
    Model enumeration time:              4.374s
    Time for BDD construction:           0.552s (Max:     0.021s)
Time for merge operator:                 9.871s
Time for coverage check:                 1.013s
  Time for BDD entailment checks:        0.737s
Total time for SMT solver (w/o itp):    20.544s

Number of path formula cache hits:   15712242 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    39.032s

Total number of created targets for pointer analysis: 182396
   Number of created targets for uf: *unsigned_short_int is 277
   Number of created targets for uf: *(void)* is 829
   Number of created targets for uf: *signed_int is 2266
   Number of created targets for uf: *(char)* is 281
   Number of created targets for uf: *unsigned_char is 243
   Number of created targets for uf: *(struct_list_head)* is 23
   Number of created targets for uf: *(unsigned_char)* is 106
   Number of created targets for uf: *unsigned_long_long_int is 3232
   Number of created targets for uf: *unsigned_int is 265
   Number of created targets for uf: *unsigned_long_int is 526


Number of BDD nodes:                               15072
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       22326 (count: 1780261, min: 0, max: 601, avg: 0.01)
Time for BDD node cleanup:                             0.240s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 18.448s
  Time for transition matches:                         9.870s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.017s
Automaton transfers with branching:                0
Automaton transfer successors:                     13543435 (count: 13543435, min: 1, max: 1, avg: 1.00) [1 x 13543435]

CPA algorithm statistics
------------------------
Number of iterations:            8046977
Max size of waitlist:            1005
Average size of waitlist:        552
Number of computed successors:   9258672
Max successors for one state:    2
Number of times merged:          587805
Number of times stopped:         865923
Number of times breaked:         1236

Total time for CPA algorithm:       730.055s (Max:    14.435s)
  Time for choose from waitlist:      4.446s
  Time for precision adjustment:    356.219s
  Time for transfer relation:       304.504s
  Time for merge operator:           17.262s
  Time for stop operator:            10.810s
  Time for adding to reached set:    15.091s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1236
Avg. length of target path (in blocks):               96922 (count: 1236, min: 18, max: 158, avg: 78.42)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 106.236s
  Counterexample analysis:                            84.015s (Max:     0.445s, Calls: 1236)
    Refinement sat check:                             60.151s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.060s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.285s
  Precision update:                                    1.109s
  ARG update:                                         20.118s

Length of refined path (in blocks):                   76424 (count: 1236, min: 12, max: 157, avg: 61.83)
Number of affected states:                            17510 (count: 1236, min: 1, max: 148, avg: 14.17)
Length (states) of path with itp 'true':              57678 (count: 1236, min: 0, max: 78, avg: 46.67)
Length (states) of path with itp non-trivial itp:     17510 (count: 1236, min: 1, max: 148, avg: 14.17)
Length (states) of path with itp 'false':              1236 (count: 1236, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         866 (count: 1236, min: 0, max: 3, avg: 0.70)
Equal non-trivial interpolants along paths:           15408 (count: 1236, min: 0, max: 146, avg: 12.47)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1236
Number of successful refinements:     1236
Number of failed refinements:         0
Max. size of reached set before ref.: 72970
Max. size of reached set after ref.:  38956
Avg. size of reached set before ref.: 28242.81
Avg. size of reached set after ref.:  21536.38

Total time for CEGAR algorithm:     891.764s
Time for refinements:               138.478s
Average time for refinement:          0.112s
Max time for refinement:              1.653s

Code Coverage
-----------------------------
  Function coverage:      0.306
  Visited lines:          2274
  Total lines:            6633
  Line coverage:          0.343
  Visited conditions:     358
  Total conditions:       1356
  Condition coverage:     0.264

CPAchecker general statistics
-----------------------------
Number of program locations:     9036
Number of CFA edges:             10369
Number of relevant variables:    1490
Number of functions:             304
Number of loops:                 66
Size of reached set:             13169
  Number of reached locations:   911 (10%)
    Avg states per location:     14
    Max states per location:     284 (at node N748)
  Number of reached functions:   93 (31%)
  Number of partitions:          13114
    Avg size of partitions:      1
    Max size of partitions:      16 (with key [N3632 (before line 10736), Function main called from node N3582, stack depth 1 [58739e5e], stack [main]])
  Number of target states:       0
  Size of final wait list        596

Time for analysis setup:          8.501s
  Time for loading CPAs:          1.127s
  Time for loading parser:        0.731s
  Time for CFA construction:      6.478s
    Time for parsing file(s):     1.443s
    Time for AST to CFA:          2.197s
    Time for CFA sanity check:    0.622s
    Time for post-processing:     2.038s
      Time for var class.:        0.916s
Time for Analysis:              891.764s
CPU time for analysis:          891.650s
Total time for CPAchecker:      900.269s
Total CPU time for CPAchecker:  900.120s
Time for statistics:              0.370s

Time for Garbage Collector:      71.534s (in 1563 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                640MB (   610 MiB) max;    295MB (   282 MiB) avg;    657MB (   627 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           663MB (   632 MiB) max;    430MB (   410 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8289MB (  7905 MiB) max;   8183MB (  7804 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
