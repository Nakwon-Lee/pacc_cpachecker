scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--mellanox--mlx4--mlx4_en.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_c5amtcxq/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 10966: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10966: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10967: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10969: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10969: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10970: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10972: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10976: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10976: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10977: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10979: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10979: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10980: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10982: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10996: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10996: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10997: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10999: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10999: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11000: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11002: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
  goto ldv_6061;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
  goto ldv_6061;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11020: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11020: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11021: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11023: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11023: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11024: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11026: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11030: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11030: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11031: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11033: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11033: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11034: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11036: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11050: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11050: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11051: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11053: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11053: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11054: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11056: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
  goto ldv_6073;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
  goto ldv_6073;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17098: Dead code detected: tmp = kmalloc((unsigned long )buf->nbufs * 8UL, 208U); (CFACreationUtils.addEdgeToCFA, INFO)

line 17100: Dead code detected: [!(((unsigned long)pages) == ((unsigned long)((struct page **)0)))] (CFACreationUtils.addEdgeToCFA, INFO)

line 17101: Dead code detected: return (-12); (CFACreationUtils.addEdgeToCFA, INFO)

line 17105: Dead code detected: i = 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 17134: Dead code detected: vunmap((void const *)buf->direct.buf); (CFACreationUtils.addEdgeToCFA, INFO)

lines 17661-17676: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17663: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17666: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17668: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17672: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17681-17696: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17683: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17686: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17688: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17692: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17703: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17706: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17712: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17721-17736: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17723: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17726: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17728: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17732: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  default:
  __bad_percpu_size();
  }
  ldv_41071:
  pscr_ret__ = pfo_ret__;
  goto ldv_41077;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  default:
  __bad_percpu_size();
  }
  ldv_41081:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_41077;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  default:
  __bad_percpu_size();
  }
  ldv_41090:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_41077;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  default:
  __bad_percpu_size();
  }
  ldv_41099:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_41077;
  default:
  __bad_size_call_parameter();
  goto ldv_41077;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17828-17843: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17830: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17833: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17835: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17839: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17848-17863: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17850: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17853: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17855: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17859: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17870: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17873: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17879: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17888-17903: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17890: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17893: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17895: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17899: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  default:
  __bad_percpu_size();
  }
  ldv_41135:
  pscr_ret__ = pfo_ret__;
  goto ldv_41141;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  default:
  __bad_percpu_size();
  }
  ldv_41145:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_41141;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  default:
  __bad_percpu_size();
  }
  ldv_41154:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_41141;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  default:
  __bad_percpu_size();
  }
  ldv_41163:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_41141;
  default:
  __bad_size_call_parameter();
  goto ldv_41141;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 21405: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8826: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11340: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8759-8760: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8876: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11403: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8856: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11370: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8793: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10345: Function pointer *fallback with type u16 (*)(struct net_device *, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8196: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 23196: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(33UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function mlx4_unregister_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 24992-24993: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "cap: 0x%x en: 0x%x mbc: 0x%x delay: %d\n", __CPAchecker_TMP_1, __CPAchecker_TMP_2, __CPAchecker_TMP_3, __CPAchecker_TMP_4) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_SET_PORT_general to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 25005: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed setting pause params\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function ldv__builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv__builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 24848-24849: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad ETS BW sum: %d. Should be exactly 100%%\n", total_ets_bw) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 24834-24835: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "TC[%d]: Not supported TSA: %d\n", i, (int)((ets->tc_tsa)[i])) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 24820-24821: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad priority in UP <=> TC mapping. TC: %d, UP: %d\n", i, (int)((ets->prio_tc)[i])) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_SET_PORT_SCHEDULER to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_SET_PORT_PRIO2TC to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24574: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function mlx4_register_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_mr_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_uar_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_pd_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ptp_clock_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 21807-21808: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Destroying netdev on port:%d\n", priv->port) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_free_hwq_res to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq_cpu_rmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 9555-9556: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Destroying tx ring, qpn: %d\n", ring->qpn) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_bf_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_affinity_hint to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_release_eq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_release_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_flow_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 18532-18533: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Error detaching flow. rc = %d\n", rc) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24578: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(64UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15676: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 24580: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 23204: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22690: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(33UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function timecounter_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_write_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function timecounter_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15684: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_zalloc(60UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22710: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15694: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8356: Destroying the void* pointer ldv_main_exported_5::tmp___6 produces garbage or the memory pointed by it is unused: ldv_main_exported_5(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17425: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17400: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_CLOSE_PORT to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21244: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "stop port called while port already down\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __local_bh_disable_ip to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __local_bh_enable_ip to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_unicast_promisc_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_multicast_promisc_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_flow_steer_promisc_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_multicast_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_SET_MCAST_FLTR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_modify to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 9821-9822: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Freeing Tx buf - cons:0x%x prod:0x%x\n", ring->cons, ring->prod) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 9828: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Tx consumer passed producer!\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function dql_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_read_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_tstamp_tx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8793: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8856: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 9851-9852: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Freed %d uncompleted tx descriptors\n", cnt) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function napi_hash_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_cq_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function synchronize_sched to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 19460-19461: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Releasing qp: port %d, qpn %d\n", priv->port, qpn) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 19398-19399: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Registering MAC: %pM for deleting\n", priv->dev->dev_addr) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_unregister_mac to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 19421-19422: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Registering MAC: %pM for deleting\n", (unsigned char *)(&(entry->mac))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 19262: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Invalid steering mode.\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_unicast_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_call_rcu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 12090-12091: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Freeing Rx buf - cons:%d prod:%d\n", ring->cons, ring->prod) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 12108-12109: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Processing descriptor:%d\n", index) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 11989-11990: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Freeing fragment:%d\n", nr) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function put_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11370: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11880-11881: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Freeing allocator:%d count:%d\n", i, tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function free_cpumask_var to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24279: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Changing Time Stamp configuration\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_qp_reserve_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21679: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "failed reserving range for TX rings\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_cpu_rmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __cpu_to_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8300: Destroying the void* pointer ldv_main_exported_4::tmp___18 produces garbage or the memory pointed by it is unused: ldv_main_exported_4(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

lines 20546-20547: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Tx timeout called on port:%d\n", priv->port) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 21849-21850: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Change MTU called - current:%d new:%d\n", dev->mtu, new_mtu) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21855: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad MTU size:%d.\n", new_mtu) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 10345: Ignoring call via function pointer mlx4_en_select_queue::fallback for which no suitable target was found in line: tmp___1 = (*fallback)(dev, skb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 21593: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Close port called\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 10187: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Non-linear headers\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21563: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Cannot open - device down/disabled\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_alloc_cmd_mailbox to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mlx4_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_free_cmd_mailbox to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21507: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Failed dumping statistics\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18825: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "adding VLAN:%d\n", (int)vid) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18868: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Killing VID:%d\n", (int)vid) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20579: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Scheduling watchdog\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 19591: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Port is down while registering mac, exiting...\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __mlx4_replace_mac to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __compiletime_assert_402 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_register_mac to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_unicast_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19214: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Failed Attaching Unicast\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_flow_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 19085-19086: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "added vxlan steering rule, mac %pM reg_id %llx\n", addr, *reg_id) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 19078-19079: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "failed to add vxlan steering rule, err %d\n", err) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 19585: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed changing HW MAC address\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21866: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Change MTU called with card down!?\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 20924: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "start port called while port already up\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 13047-13048: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Rx buffer scatter-list (effective-mtu:%d num_frags:%d):\n", eff_mtu, __CPAchecker_TMP_2) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 13055-13057: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "  frag:%d - size:%d prefix:%d align:%d stride:%d\n", i, (int)(((priv->frag_info)[i]).frag_size), (int)(((priv->frag_info)[i]).frag_prefix_size), (int)(((priv->frag_info)[i]).frag_align), (int)(((priv->frag_info)[i]).frag_stride)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20941: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Rx buf size:%d\n", priv->rx_skb_size) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 15696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15700: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_test_interrupts to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            11025 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  9655 (88%)
  Because of loop head:            1359 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (0%)
  Times precision was empty:       10750 (98%)
  Times precision was {false}:     109 (1%)
  Times result was cached:         81 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      85 (1%)
  Times result was 'false':        83 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         7274
  BDD entailment checks:           2166
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          9
Number of abstraction locations:          48
Max number of predicates per location:    8
Avg number of predicates per location:    1
Total predicates per abstraction:         573
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 2.95
Number of irrelevant predicates:          337 (59%)
Number of preds handled by boolean abs:   176 (31%)
  Total number of models for allsat:      509
  Max number of models for allsat:        128
  Avg number of models for allsat:        5.99

Time for post operator:                  9.162s
  Time for path formula creation:        9.025s
Time for strengthen operator:            0.208s
Time for prec operator:                  1.786s
  Time for abstraction:                  1.205s (Max:     0.052s, Count: 11025)
    Boolean abstraction:                 0.416s
    Solving time:                        0.219s (Max:     0.014s)
    Model enumeration time:              0.144s
    Time for BDD construction:           0.058s (Max:     0.011s)
Time for merge operator:                 0.379s
Time for coverage check:                 0.064s
  Time for BDD entailment checks:        0.057s
Total time for SMT solver (w/o itp):     0.363s

Number of path formula cache hits:   39746 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.297s

Total number of created targets for pointer analysis: 8549
   Number of created targets for uf: *(void)* is 7
   Number of created targets for uf: *(struct_net_device)* is 13
   Number of created targets for uf: *enum_mlx4_net_trans_rule_id is 4
   Number of created targets for uf: *(struct_cpu_rmap)* is 4
   Number of created targets for uf: *(unsigned_char)* is 16
   Number of created targets for uf: *unsigned_short_int is 24
   Number of created targets for uf: *signed_int is 8
   Number of created targets for uf: *unsigned_char is 475
   Number of created targets for uf: *(struct_list_head)* is 4
   Number of created targets for uf: *_Bool is 10
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *unsigned_int is 14
   Number of created targets for uf: *(struct_ptp_clock)* is 3


Number of BDD nodes:                               1219
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         175 (count: 14096, min: 0, max: 37, avg: 0.01)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.465s
Automaton transfers with branching:                0
Automaton transfer successors:                        65589 (count: 65589, min: 1, max: 1, avg: 1.00) [1 x 65589]

CPA algorithm statistics
------------------------
Number of iterations:            39977
Max size of waitlist:            118
Average size of waitlist:        50
Number of computed successors:   45208
Max successors for one state:    2
Number of times merged:          2554
Number of times stopped:         4679
Number of times breaked:         11

Total time for CPA algorithm:        17.708s (Max:     5.538s)
  Time for choose from waitlist:      0.151s
  Time for precision adjustment:      3.085s
  Time for transfer relation:        12.368s
  Time for merge operator:            0.561s
  Time for stop operator:             0.299s
  Time for adding to reached set:     0.362s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                 368 (count: 11, min: 12, max: 89, avg: 33.45)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.690s
  Counterexample analysis:                             0.358s (Max:     0.067s, Calls: 11)
    Refinement sat check:                              0.236s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.020s
  Precision update:                                    0.014s
  ARG update:                                          0.272s

Length of refined path (in blocks):                     138 (count: 11, min: 8, max: 58, avg: 12.55)
Number of affected states:                               67 (count: 11, min: 1, max: 57, avg: 6.09)
Length (states) of path with itp 'true':                 60 (count: 11, min: 0, max: 6, avg: 5.45)
Length (states) of path with itp non-trivial itp:        67 (count: 11, min: 1, max: 57, avg: 6.09)
Length (states) of path with itp 'false':                11 (count: 11, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 11, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              56 (count: 11, min: 0, max: 56, avg: 5.09)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 14675
Max. size of reached set after ref.:  33
Avg. size of reached set before ref.: 3558.82
Avg. size of reached set after ref.:  30.27

Total time for CEGAR algorithm:      18.614s
Time for refinements:                 0.902s
Average time for refinement:          0.082s
Max time for refinement:              0.277s

Code Coverage
-----------------------------
  Function coverage:      0.106
  Visited lines:          2081
  Total lines:            10975
  Line coverage:          0.190
  Visited conditions:     268
  Total conditions:       2806
  Condition coverage:     0.096

CPAchecker general statistics
-----------------------------
Number of program locations:     15470
Number of CFA edges:             17818
Number of relevant variables:    2783
Number of functions:             556
Number of loops:                 161
Size of reached set:             1632
  Number of reached locations:   769 (5%)
    Avg states per location:     2
    Max states per location:     32 (at node N100)
  Number of reached functions:   59 (11%)
  Number of partitions:          1631
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N533 (before line 8210), Function main called from node N496, stack depth 1 [48cd8e71], stack [main]])
  Number of target states:       0
  Size of final wait list        27

Time for analysis setup:         11.647s
  Time for loading CPAs:          1.371s
  Time for loading parser:        0.831s
  Time for CFA construction:      9.255s
    Time for parsing file(s):     1.739s
    Time for AST to CFA:          3.463s
    Time for CFA sanity check:    1.237s
    Time for post-processing:     2.700s
      Time for var class.:        1.281s
Time for Analysis:               18.614s
CPU time for analysis:           18.610s
Total time for CPAchecker:       30.266s
Total CPU time for CPAchecker:   30.230s
Time for statistics:              0.168s

Time for Garbage Collector:       0.945s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                107MB (   102 MiB) max;     68MB (    65 MiB) avg;    111MB (   106 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     33MB (    32 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8066MB (  7692 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
