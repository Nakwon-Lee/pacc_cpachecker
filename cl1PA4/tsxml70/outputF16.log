scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--mellanox--mlx4--mlx4_en.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b9sl1lwu/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 10966: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10966: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10967: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10969: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10969: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10970: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10972: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10976: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10976: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10977: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10979: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10979: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10980: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10982: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10996: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10996: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 10997: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10999: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 10999: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11000: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11002: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
  goto ldv_6061;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
  goto ldv_6061;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11020: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11020: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11021: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11023: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11023: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11024: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11026: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11030: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11030: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11031: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11033: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11033: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11034: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11036: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11050: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11050: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11051: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11053: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 11053: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 11054: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11056: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
  goto ldv_6073;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
  goto ldv_6073;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17098: Dead code detected: tmp = kmalloc((unsigned long )buf->nbufs * 8UL, 208U); (CFACreationUtils.addEdgeToCFA, INFO)

line 17100: Dead code detected: [!(((unsigned long)pages) == ((unsigned long)((struct page **)0)))] (CFACreationUtils.addEdgeToCFA, INFO)

line 17101: Dead code detected: return (-12); (CFACreationUtils.addEdgeToCFA, INFO)

line 17105: Dead code detected: i = 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 17134: Dead code detected: vunmap((void const *)buf->direct.buf); (CFACreationUtils.addEdgeToCFA, INFO)

lines 17661-17676: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17663: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17666: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17668: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17672: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17681-17696: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17683: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17686: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17688: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17692: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17703: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17706: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17712: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17721-17736: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17723: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17726: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17728: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17732: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41071;
  default:
  __bad_percpu_size();
  }
  ldv_41071:
  pscr_ret__ = pfo_ret__;
  goto ldv_41077;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41081;
  default:
  __bad_percpu_size();
  }
  ldv_41081:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_41077;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41090;
  default:
  __bad_percpu_size();
  }
  ldv_41090:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_41077;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41099;
  default:
  __bad_percpu_size();
  }
  ldv_41099:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_41077;
  default:
  __bad_size_call_parameter();
  goto ldv_41077;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17828-17843: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17830: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17833: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17835: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17839: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17848-17863: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17850: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17853: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17855: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17859: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17870: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17873: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17879: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17888-17903: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17890: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17893: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17895: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17899: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_41135;
  default:
  __bad_percpu_size();
  }
  ldv_41135:
  pscr_ret__ = pfo_ret__;
  goto ldv_41141;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_41145;
  default:
  __bad_percpu_size();
  }
  ldv_41145:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_41141;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_41154;
  default:
  __bad_percpu_size();
  }
  ldv_41154:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_41141;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_41163;
  default:
  __bad_percpu_size();
  }
  ldv_41163:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_41141;
  default:
  __bad_size_call_parameter();
  goto ldv_41141;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 21405: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8826: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11340: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8759-8760: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8876: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11403: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8856: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11370: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8793: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10345: Function pointer *fallback with type u16 (*)(struct net_device *, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8196: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_unregister_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 23196: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(33UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_mr_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_uar_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_pd_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24574: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function mlx4_register_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ptp_clock_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 24992-24993: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "cap: 0x%x en: 0x%x mbc: 0x%x delay: %d\n", __CPAchecker_TMP_1, __CPAchecker_TMP_2, __CPAchecker_TMP_3, __CPAchecker_TMP_4) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_SET_PORT_general to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 25005: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed setting pause params\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 24578: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(64UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15676: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv__builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv__builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 21807-21808: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Destroying netdev on port:%d\n", priv->port) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_free_hwq_res to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 24848-24849: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad ETS BW sum: %d. Should be exactly 100%%\n", total_ets_bw) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 24834-24835: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "TC[%d]: Not supported TSA: %d\n", i, (int)((ets->tc_tsa)[i])) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 24820-24821: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad priority in UP <=> TC mapping. TC: %d, UP: %d\n", i, (int)((ets->prio_tc)[i])) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq_cpu_rmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24580: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function mlx4_SET_PORT_PRIO2TC to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 23204: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22690: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(33UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function timecounter_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_write_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function timecounter_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15684: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_zalloc(60UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22710: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15694: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8356: Destroying the void* pointer ldv_main_exported_5::tmp___6 produces garbage or the memory pointed by it is unused: ldv_main_exported_5(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8300: Destroying the void* pointer ldv_main_exported_4::tmp___18 produces garbage or the memory pointed by it is unused: ldv_main_exported_4(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15696: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

lines 20546-20547: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Tx timeout called on port:%d\n", priv->port) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 21849-21850: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Change MTU called - current:%d new:%d\n", dev->mtu, new_mtu) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21855: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Bad MTU size:%d.\n", new_mtu) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 10345: Ignoring call via function pointer mlx4_en_select_queue::fallback for which no suitable target was found in line: tmp___1 = (*fallback)(dev, skb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 21593: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Close port called\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 21563: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Cannot open - device down/disabled\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18825: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "adding VLAN:%d\n", (int)vid) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18868: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Killing VID:%d\n", (int)vid) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 20579: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Scheduling watchdog\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 22245-22246: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "vxlan port %d isn\'t configured, ignoring\n", (int)tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_register_vlan to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 18844-18845: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "failed adding vlan %d\n", (int)vid) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_unregister_vlan to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17425: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17400: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 15700: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function mlx4_alloc_cmd_mailbox to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_wol_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13998: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to get WoL information\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 13983: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to get WoL information\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function ethtool_op_get_ts_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_wol_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14060: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to set WoL information\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14047: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to get WoL info, unable to modify\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15481-15482: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Unsupported ethtool command. (%d)\n", cmd->cmd) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14551: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed setting pause params\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_test_interrupts to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_cq_modify to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_release_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 9555-9556: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Destroying tx ring, qpn: %d\n", ring->qpn) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_bf_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_flow_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 15321-15322: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Fail to detach network rule at location %d. registration id = 0x%llx\n", cmd->fs.location, rule->id) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_pd_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_uar_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_SET_PORT_SCHEDULER to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_mr_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_mr_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_affinity_hint to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_release_eq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __rwlock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_get_num_default_rss_queues to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ptp_clock_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_tx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_set_real_num_rx_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_CLOSE_PORT to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21244: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "stop port called while port already down\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_qp_reserve_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21679: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "failed reserving range for TX rings\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15226-15227: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "rxnfc: RX ring (%llu) is inactive\n", cmd->fs.ring_cookie) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15218-15219: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "rxnfc: RX ring (%llu) doesn\'t exist\n", cmd->fs.ring_cookie) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 18532-18533: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Error detaching flow. rc = %d\n", rc) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __local_bh_disable_ip to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mlx4_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 20924: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "start port called while port already up\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_cpu_rmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15549: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Using %d TX rings\n", priv->tx_ring_num) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 15537: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed reallocating port resources\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14782: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed starting port\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_free_cmd_mailbox to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21750: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to allocate NIC resources\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 15550: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "Using %d RX rings\n", priv->rx_ring_num) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __cpu_to_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx4_flow_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 15258-15259: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Fail to attach network rule at location %d\n", cmd->fs.location) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 15244-15245: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Fail to detach network rule at location %d. registration id = %llx\n", cmd->fs.location, loc_rule->id) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15554: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed starting port\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mlx4_alloc_hwq_res to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21866: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Change MTU called with card down!?\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 22209-22210: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "vxlan port %d configured, can\'t add port %d\n", (int)tmp___1, (int)tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19591: Ignoring parameters passed as varargs to function en_print: en_print("\017", (const struct mlx4_en_priv *)priv, "Port is down while registering mac, exiting...\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 16700: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed to allocate CQ structure\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14635: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed reallocating port resources\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 20566-20568: Ignoring parameters passed as varargs to function en_print: en_print("\f", (const struct mlx4_en_priv *)priv, "TX timeout on queue: %d, QP: 0x%x, CQ: 0x%x, Cons: 0x%x, Prod: 0x%x\n", i, (*((priv->tx_ring) + ((unsigned long)i)))->qpn, __CPAchecker_TMP_0, (*((priv->tx_ring) + ((unsigned long)i)))->cons, (*((priv->tx_ring) + ((unsigned long)i)))->prod) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 22418: Ignoring parameters passed as varargs to function en_print: en_print("\016", (const struct mlx4_en_priv *)priv, "enabling only PFC DCB ops\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14643: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Failed starting port\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 23916: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Transmitting loopback packet failed\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 23940: Ignoring parameters passed as varargs to function en_print: en_print("\v", (const struct mlx4_en_priv *)priv, "Loopback packet didn\'t arrive\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1900214 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1705128 (90%)
  Because of loop head:            194743 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         343 (0%)
  Times precision was empty:       631516 (33%)
  Times precision was {false}:     3803 (0%)
  Times result was cached:         1257677 (66%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7218 (0%)
  Times result was 'false':        18296 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1450120
  BDD entailment checks:           534974
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          15
Number of abstraction locations:          449
Max number of predicates per location:    12
Avg number of predicates per location:    2
Total predicates per abstraction:         3409762
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 309.39
Number of irrelevant predicates:          1929014 (57%)
Number of preds handled by boolean abs:   13962 (0%)
  Total number of models for allsat:      41022
  Max number of models for allsat:        648
  Avg number of models for allsat:        5.68

Time for post operator:                187.334s
  Time for path formula creation:      182.317s
Time for strengthen operator:           11.667s
Time for prec operator:                360.907s
  Time for abstraction:                328.298s (Max:     5.033s, Count: 1900214)
    Boolean abstraction:                63.676s
    Solving time:                       76.157s (Max:     4.943s)
    Model enumeration time:              6.440s
    Time for BDD construction:           1.314s (Max:     0.116s)
Time for merge operator:                 8.800s
Time for coverage check:                 0.690s
  Time for BDD entailment checks:        0.488s
Total time for SMT solver (w/o itp):    82.597s

Number of path formula cache hits:   13137563 (94%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    95.752s

Total number of created targets for pointer analysis: 720344
   Number of created targets for uf: *(void)* is 232
   Number of created targets for uf: *(struct_net_device)* is 10
   Number of created targets for uf: *(struct_pci_dev)* is 60
   Number of created targets for uf: *(struct_cpu_rmap)* is 43
   Number of created targets for uf: *(unsigned_char)* is 4
   Number of created targets for uf: *unsigned_long_int is 223
   Number of created targets for uf: *unsigned_short_int is 69
   Number of created targets for uf: *signed_int is 183
   Number of created targets for uf: *unsigned_char is 7260
   Number of created targets for uf: *(struct_list_head)* is 67
   Number of created targets for uf: *(struct_mlx4_dev)* is 16
   Number of created targets for uf: *_Bool is 16
   Number of created targets for uf: *(struct_workqueue_struct)* is 17
   Number of created targets for uf: *unsigned_long_long_int is 115
   Number of created targets for uf: *unsigned_int is 407
   Number of created targets for uf: *(struct_ptp_clock)* is 15


Number of BDD nodes:                               24874
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       16145 (count: 1234236, min: 0, max: 340, avg: 0.01)
Time for BDD node cleanup:                             0.226s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 15.329s
  Time for transition matches:                         8.561s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                     11764261 (count: 11764261, min: 1, max: 1, avg: 1.00) [1 x 11764261]

CPA algorithm statistics
------------------------
Number of iterations:            7170568
Max size of waitlist:            1358
Average size of waitlist:        336
Number of computed successors:   8173648
Max successors for one state:    2
Number of times merged:          457573
Number of times stopped:         813233
Number of times breaked:         343

Total time for CPA algorithm:       836.868s (Max:     8.468s)
  Time for choose from waitlist:      3.082s
  Time for precision adjustment:    422.046s
  Time for transfer relation:       354.979s
  Time for merge operator:           15.050s
  Time for stop operator:             9.983s
  Time for adding to reached set:    11.721s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   343
Avg. length of target path (in blocks):               30436 (count: 343, min: 12, max: 111, avg: 88.73)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  40.023s
  Counterexample analysis:                            19.273s (Max:     0.167s, Calls: 343)
    Refinement sat check:                             13.521s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.036s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.212s
  Precision update:                                    1.420s
  ARG update:                                         18.823s

Length of refined path (in blocks):                   27283 (count: 343, min: 8, max: 110, avg: 79.54)
Number of affected states:                            20773 (count: 343, min: 1, max: 109, avg: 60.56)
Length (states) of path with itp 'true':               6167 (count: 343, min: 0, max: 94, avg: 17.98)
Length (states) of path with itp non-trivial itp:     20773 (count: 343, min: 1, max: 109, avg: 60.56)
Length (states) of path with itp 'false':               343 (count: 343, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 343, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           20430 (count: 343, min: 0, max: 108, avg: 59.56)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                343
Number of successful refinements:     343
Number of failed refinements:         0
Max. size of reached set before ref.: 73953
Max. size of reached set after ref.:  51044
Avg. size of reached set before ref.: 28024.66
Avg. size of reached set after ref.:  6643.42

Total time for CEGAR algorithm:     888.991s
Time for refinements:                49.943s
Average time for refinement:          0.145s
Max time for refinement:              2.401s

Code Coverage
-----------------------------
  Function coverage:      0.185
  Visited lines:          2665
  Total lines:            10975
  Line coverage:          0.243
  Visited conditions:     452
  Total conditions:       2806
  Condition coverage:     0.161

CPAchecker general statistics
-----------------------------
Number of program locations:     15470
Number of CFA edges:             17818
Number of relevant variables:    2783
Number of functions:             556
Number of loops:                 161
Size of reached set:             8352
  Number of reached locations:   1284 (8%)
    Avg states per location:     6
    Max states per location:     182 (at node N100)
  Number of reached functions:   103 (19%)
  Number of partitions:          8335
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N533 (before line 8210), Function main called from node N496, stack depth 1 [59db8216], stack [main]])
  Number of target states:       0
  Size of final wait list        72

Time for analysis setup:         11.319s
  Time for loading CPAs:          1.313s
  Time for loading parser:        0.743s
  Time for CFA construction:      9.109s
    Time for parsing file(s):     1.717s
    Time for AST to CFA:          3.422s
    Time for CFA sanity check:    1.003s
    Time for post-processing:     2.812s
      Time for var class.:        1.169s
Time for Analysis:              888.991s
CPU time for analysis:          888.920s
Total time for CPAchecker:      900.322s
Total CPU time for CPAchecker:  900.210s
Time for statistics:              0.302s

Time for Garbage Collector:      64.552s (in 1139 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                907MB (   864 MiB) max;    415MB (   395 MiB) avg;    930MB (   887 MiB) peak
Used non-heap memory:             49MB (    47 MiB) max;     41MB (    39 MiB) avg;     49MB (    47 MiB) peak
Allocated heap memory:           936MB (   893 MiB) max;    601MB (   573 MiB) avg
Allocated non-heap memory:        51MB (    49 MiB) max;     51MB (    49 MiB) avg
Total process virtual memory:   8236MB (  7854 MiB) max;   8152MB (  7774 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
