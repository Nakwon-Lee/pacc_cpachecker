scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--usb--host--xhci-hcd.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__yrku82k/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5084: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5087: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5093: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5110: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5110: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5111: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5113: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5113: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5114: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5116: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5120: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5120: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5121: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5123: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5123: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5124: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5126: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5140: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5140: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5141: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5143: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5143: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5144: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5146: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (val));
  }
  goto ldv_6061;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (val));
  }
  goto ldv_6061;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (val));
  }
  goto ldv_6061;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5164: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5164: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5165: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5167: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5167: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5168: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5170: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5174: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5174: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5175: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5177: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5177: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5178: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5180: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5194: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5194: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5195: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5197: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 5197: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 5198: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5200: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (__preempt_count): "qi" (- val));
  }
  goto ldv_6073;
  case 2UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 4UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (__preempt_count): "ri" (- val));
  }
  goto ldv_6073;
  case 8UL: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (__preempt_count));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (__preempt_count));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (__preempt_count): "re" (- val));
  }
  goto ldv_6073;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 23710: Dead code detected: *((u8 *)__gu_p) = (unsigned char )status; (CFACreationUtils.addEdgeToCFA, INFO)

line 23713: Dead code detected: put_unaligned_le16((int )((unsigned short )status), __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

line 23719: Dead code detected: put_unaligned_le64((unsigned long long )status, __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  *((u8 *)__gu_p) = (unsigned char )status;
  goto ldv_29053;
  case 2UL:
  put_unaligned_le16((int )((unsigned short )status), __gu_p);
  goto ldv_29053;
  case 4UL:
  put_unaligned_le32(status, __gu_p);
  goto ldv_29053;
  case 8UL:
  put_unaligned_le64((unsigned long long )status, __gu_p);
  goto ldv_29053;
  default:
  __bad_unaligned_access_size();
  goto ldv_29053;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 27044: Dead code detected: __ptr = (u8 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 27049: Dead code detected: __ptr___0 = (u16 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 27059: Dead code detected: __ptr___2 = (u64 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5646;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5646;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5646;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5646;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13713: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13745: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6361-6364: Function pointer *((void (*)(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int))it_func) with type void (*)(void *, struct xhci_hcd *, struct xhci_container_ctx *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 17667-17669: Function pointer *((void (*)(void *, void *, struct xhci_generic_trb *))it_func) with type void (*)(void *, void *, struct xhci_generic_trb *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6042: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6254: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17562: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6095: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13806: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6307: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13858: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6148: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17458: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22774: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 27236: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6201: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17510: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13911: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17614: Function pointer *((void (*)(void *, struct va_format *))it_func) with type void (*)(void *, struct va_format *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_8 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12893: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_pci_shutdown to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26972: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ftrace_event_reg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function trace_event_raw_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26894: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function trace_define_field to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26816: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ftrace_raw_output_prep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function trace_seq_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_is_primary_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6848-6849: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_quirks, "Compliance mode detected->port %d", i + 1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function ldv__builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18563: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_cancel_urb___0, "Stop EP timer ran, but another timer marked xHCI as DYING, exiting.") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 18570: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_cancel_urb___0, "Stop EP timer ran, but no command pending, exiting.") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26759: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(144UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11032: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_address, "Bad Slot ID %d", udev->slot_id) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7040: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_init, "xhci_run") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6464: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_init, "// Turn on HC, cmd = 0x%x.", temp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_check_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 8243-8244: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_cancel_urb, "Ep 0x%x: URB %p to be canceled on non-responsive xHCI host.", (int)(urb->ep->desc.bEndpointAddress), urb) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8209: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_cancel_urb, "HW died, freeing TD.") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 8262-8264: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_cancel_urb, "Cancel URB %p, dev %s, ep 0x%x, starting at offset 0x%llx", urb, (char *)(&(urb->dev->devpath)), (int)(urb->ep->desc.bEndpointAddress), tmp___1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function ldv__builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6850: Ignoring parameters passed as varargs to function xhci_dbg_trace: xhci_dbg_trace(xhci, &trace_xhci_dbg_quirks, "Attempting compliance mode recovery") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_is_watching to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_lockdep_current_cpu_online to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_is_held to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_rcu_suspicious to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6148: Ignoring call via function pointer trace_xhci_dbg_quirks::it_func for which no suitable target was found in line: (*((void (*)(void *, struct va_format *))it_func))(__data, vaf); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6148: Ignoring function call through function pointer *((void (*)(void *, struct va_format *))it_func): (*((void (*)(void *, struct va_format *))it_func))(__data, vaf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17562: Ignoring call via function pointer trace_xhci_dbg_cancel_urb___0::it_func for which no suitable target was found in line: (*((void (*)(void *, struct va_format *))it_func))(__data, vaf); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 17562: Ignoring function call through function pointer *((void (*)(void *, struct va_format *))it_func): (*((void (*)(void *, struct va_format *))it_func))(__data, vaf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_hcd_resume_root_hub to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_poll_rh_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function radix_tree_lookup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ___ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_unlink_urb_from_ep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1555486 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1517934 (98%)
  Because of loop head:            37038 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         514 (0%)
  Times precision was empty:       775307 (50%)
  Times precision was {false}:     4683 (0%)
  Times result was cached:         762992 (49%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      12504 (1%)
  Times result was 'false':        47294 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         1297273
  BDD entailment checks:           267729
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       163
Number of predicates discovered:          40
Number of abstraction locations:          184
Max number of predicates per location:    32
Avg number of predicates per location:    6
Total predicates per abstraction:         4487632
Max number of predicates per abstraction: 32
Avg number of predicates per abstraction: 261.11
Number of irrelevant predicates:          3130283 (70%)
Number of preds handled by boolean abs:   64565 (1%)
  Total number of models for allsat:      975970
  Max number of models for allsat:        10368
  Avg number of models for allsat:        78.05

Time for post operator:                178.218s
  Time for path formula creation:      172.497s
Time for strengthen operator:           10.309s
Time for prec operator:                356.136s
  Time for abstraction:                328.066s (Max:     3.386s, Count: 1555486)
    Boolean abstraction:               168.442s
    Solving time:                       13.288s (Max:     0.018s)
    Model enumeration time:            126.438s
    Time for BDD construction:          30.523s (Max:     1.967s)
Time for merge operator:                11.982s
Time for coverage check:                 0.460s
  Time for BDD entailment checks:        0.311s
Total time for SMT solver (w/o itp):   139.726s

Number of path formula cache hits:   14051115 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    61.996s

Total number of created targets for pointer analysis: 16909
   Number of created targets for uf: *(void)* is 573
   Number of created targets for uf: *unsigned_short_int is 76
   Number of created targets for uf: *signed_int is 17
   Number of created targets for uf: *((unsigned_int)*)* is 11
   Number of created targets for uf: *(struct_list_head)* is 49
   Number of created targets for uf: *unsigned_int is 171
   Number of created targets for uf: *char is 1066
   Number of created targets for uf: *unsigned_long_int is 1482


Number of BDD nodes:                               239726
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       35581 (count: 1151952, min: 0, max: 1273, avg: 0.03)
Time for BDD node cleanup:                             0.217s
Time for BDD garbage collection:                       0.110s (in 4 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.878s
  Time for transition matches:                         8.123s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     13495223 (count: 13495223, min: 1, max: 1, avg: 1.00) [1 x 13495223]

CPA algorithm statistics
------------------------
Number of iterations:            5716062
Max size of waitlist:            2353
Average size of waitlist:        689
Number of computed successors:   6819570
Max successors for one state:    2
Number of times merged:          514772
Number of times stopped:         653824
Number of times breaked:         514

Total time for CPA algorithm:       849.103s (Max:     9.083s)
  Time for choose from waitlist:      3.424s
  Time for precision adjustment:    394.659s
  Time for transfer relation:       399.077s
  Time for merge operator:           18.094s
  Time for stop operator:             7.356s
  Time for adding to reached set:    11.747s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   514
Avg. length of target path (in blocks):               30771 (count: 514, min: 14, max: 104, avg: 59.87)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  33.776s
  Counterexample analysis:                            21.465s (Max:     0.108s, Calls: 514)
    Refinement sat check:                             15.299s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.218s
  Precision update:                                    0.280s
  ARG update:                                         11.539s

Length of refined path (in blocks):                   15606 (count: 514, min: 2, max: 103, avg: 30.36)
Number of affected states:                            11560 (count: 514, min: 1, max: 102, avg: 22.49)
Length (states) of path with itp 'true':               3532 (count: 514, min: 0, max: 60, avg: 6.87)
Length (states) of path with itp non-trivial itp:     11560 (count: 514, min: 1, max: 102, avg: 22.49)
Length (states) of path with itp 'false':               514 (count: 514, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         132 (count: 514, min: 0, max: 3, avg: 0.26)
Equal non-trivial interpolants along paths:           10914 (count: 514, min: 0, max: 101, avg: 21.23)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                514
Number of successful refinements:     514
Number of failed refinements:         0
Max. size of reached set before ref.: 28691
Max. size of reached set after ref.:  22840
Avg. size of reached set before ref.: 12911.47
Avg. size of reached set after ref.:  1046.12

Total time for CEGAR algorithm:     887.461s
Time for refinements:                37.848s
Average time for refinement:          0.073s
Max time for refinement:              0.257s

Code Coverage
-----------------------------
  Function coverage:      0.227
  Visited lines:          3211
  Total lines:            15594
  Line coverage:          0.206
  Visited conditions:     879
  Total conditions:       4902
  Condition coverage:     0.179

CPAchecker general statistics
-----------------------------
Number of program locations:     21343
Number of CFA edges:             25828
Number of relevant variables:    3868
Number of functions:             534
Number of loops:                 165
Size of reached set:             19663
  Number of reached locations:   1817 (9%)
    Avg states per location:     10
    Max states per location:     681 (at node N552)
  Number of reached functions:   121 (23%)
  Number of partitions:          19602
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N6952 (after line 13207), Function main called from node N6890, stack depth 1 [559d9517], stack [main]])
  Number of target states:       0
  Size of final wait list        1145

Time for analysis setup:         12.762s
  Time for loading CPAs:          1.490s
  Time for loading parser:        0.730s
  Time for CFA construction:     10.395s
    Time for parsing file(s):     1.714s
    Time for AST to CFA:          3.876s
    Time for CFA sanity check:    1.290s
    Time for post-processing:     3.328s
      Time for var class.:        1.727s
Time for Analysis:              887.461s
CPU time for analysis:          887.390s
Total time for CPAchecker:      900.228s
Total CPU time for CPAchecker:  900.120s
Time for statistics:              0.623s

Time for Garbage Collector:      35.345s (in 689 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1029MB (   982 MiB) max;    559MB (   533 MiB) avg;   1044MB (   996 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1339MB (  1277 MiB) max;    868MB (   828 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8355MB (  7968 MiB) max;   8216MB (  7836 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
