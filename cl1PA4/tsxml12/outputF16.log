scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--video--fbdev--via--viafb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bmxvmvbg/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5320: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5323: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5329: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_32591;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_32591;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_32591;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_32591;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_32591;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5346-5347: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5350-5351: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5358-5359: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_32602;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_32602;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_32602;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_32602;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_32602;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5533-5534: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5537-5538: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5545-5546: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_32620;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_32620;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_32620;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_32620;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_32620;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5566-5567: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5570-5571: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5578-5579: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_32630;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_32630;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_32630;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_32630;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_32630;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5600-5601: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5604-5605: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5612-5613: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_32640;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_32640;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_32640;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_32640;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_32640;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5672-5673: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5676-5677: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5684-5685: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_32653;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_32653;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_32653;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_32653;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_32653;
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15122: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15154: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5896-5900: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5848-5851: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5957-5961: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7735: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7741: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7622: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7674: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7661: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 16745: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(208UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7635: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7609: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7713: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7648: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7687: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1032UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

lines 5896-5900: Ignoring function call through function pointer *(shared->hw_bitblt): tmp = (*(shared->hw_bitblt))(shared->vdev->engine_mmio, 1, area->width, area->height, (int)((u8 )(info->var.bits_per_pixel)), viapar->vram_addr, info->fix.line_length, area->dx, area->dy, (u32 *)0U, viapar->vram_addr, info->fix.line_length, area->sx, area->sy, 0U, 0U, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function cfb_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5957-5961: Ignoring function call through function pointer *(shared->hw_bitblt): tmp = (*(shared->hw_bitblt))(shared->vdev->engine_mmio, (int)op, image->width, image->height, (int)((u8 )(info->var.bits_per_pixel)), viapar->vram_addr, info->fix.line_length, image->dx, image->dy, __CPAchecker_TMP_10, 0U, 0U, 0U, 0U, fg_color, bg_color, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function cfb_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_get_color_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10960: Ignoring function call through function pointer *(clock.set_engine_pll_state): (*(clock.set_engine_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10961: Ignoring function call through function pointer *(clock.set_primary_clock_source): (*(clock.set_primary_clock_source))(0, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10962: Ignoring function call through function pointer *(clock.set_secondary_clock_source): (*(clock.set_secondary_clock_source))(0, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10963: Ignoring function call through function pointer *(clock.set_primary_pll_state): (*(clock.set_primary_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10964: Ignoring function call through function pointer *(clock.set_primary_clock_state): (*(clock.set_primary_clock_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10965: Ignoring function call through function pointer *(clock.set_secondary_pll_state): (*(clock.set_secondary_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10966: Ignoring function call through function pointer *(clock.set_secondary_clock_state): (*(clock.set_secondary_clock_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            106676 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  94837 (89%)
  Because of loop head:            11612 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         227 (0%)
  Times precision was empty:       32362 (30%)
  Times precision was {false}:     653 (1%)
  Times result was cached:         72254 (68%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1407 (1%)
  Times result was 'false':        2071 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         104658
  BDD entailment checks:           18984
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       200
Number of predicates discovered:          10
Number of abstraction locations:          188
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         177651
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 86.24
Number of irrelevant predicates:          56927 (32%)
Number of preds handled by boolean abs:   2432 (1%)
  Total number of models for allsat:      1642
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.17

Time for post operator:                 19.314s
  Time for path formula creation:       18.919s
Time for strengthen operator:            0.727s
Time for prec operator:                812.872s
  Time for abstraction:                809.987s (Max:   795.337s, Count: 106676)
    Boolean abstraction:                 1.874s
    Solving time:                      796.894s (Max:   794.967s)
    Model enumeration time:              0.209s
    Time for BDD construction:           0.091s (Max:     0.009s)
Time for merge operator:                 1.724s
Time for coverage check:                 0.096s
  Time for BDD entailment checks:        0.071s
Total time for SMT solver (w/o itp):   797.103s

Number of path formula cache hits:   697976 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    11.404s

Total number of created targets for pointer analysis: 3072
   Number of created targets for uf: *(void)* is 6
   Number of created targets for uf: *signed_int is 26
   Number of created targets for uf: *unsigned_char is 135
   Number of created targets for uf: *(struct_list_head)* is 127
   Number of created targets for uf: *(struct_dma_map_ops)* is 6
   Number of created targets for uf: *unsigned_long_long_int is 6
   Number of created targets for uf: *(unsigned_long_long_int)* is 6
   Number of created targets for uf: *unsigned_int is 383


Number of BDD nodes:                               493
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3012 (count: 63373, min: 0, max: 319, avg: 0.05)
Time for BDD node cleanup:                             0.032s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.223s
  Time for transition matches:                         0.621s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                       642974 (count: 642974, min: 1, max: 1, avg: 1.00) [1 x 642974]

CPA algorithm statistics
------------------------
Number of iterations:            423821
Max size of waitlist:            216
Average size of waitlist:        81
Number of computed successors:   505190
Max successors for one state:    2
Number of times merged:          42837
Number of times stopped:         55586
Number of times breaked:         227

Total time for CPA algorithm:       851.749s (Max:   795.989s)
  Time for choose from waitlist:      0.328s
  Time for precision adjustment:    816.745s
  Time for transfer relation:        28.124s
  Time for merge operator:            2.527s
  Time for stop operator:             0.891s
  Time for adding to reached set:     1.178s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   227
Avg. length of target path (in blocks):               28110 (count: 227, min: 23, max: 413, avg: 123.83)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  38.891s
  Counterexample analysis:                            37.351s (Max:     0.419s, Calls: 227)
    Refinement sat check:                             29.616s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.015s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.200s
  Precision update:                                    0.143s
  ARG update:                                          0.949s

Length of refined path (in blocks):                   25528 (count: 227, min: 4, max: 177, avg: 112.46)
Number of affected states:                            22105 (count: 227, min: 1, max: 176, avg: 97.38)
Length (states) of path with itp 'true':               3196 (count: 227, min: 0, max: 107, avg: 14.08)
Length (states) of path with itp non-trivial itp:     22105 (count: 227, min: 1, max: 176, avg: 97.38)
Length (states) of path with itp 'false':               227 (count: 227, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 227, min: 0, max: 1, avg: 0.00)
Equal non-trivial interpolants along paths:           21877 (count: 227, min: 0, max: 175, avg: 96.37)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                227
Number of successful refinements:     227
Number of failed refinements:         0
Max. size of reached set before ref.: 4150
Max. size of reached set after ref.:  1770
Avg. size of reached set before ref.: 2228.91
Avg. size of reached set after ref.:  268.74

Total time for CEGAR algorithm:     891.504s
Time for refinements:                39.684s
Average time for refinement:          0.174s
Max time for refinement:              0.442s

Code Coverage
-----------------------------
  Function coverage:      0.204
  Visited lines:          1865
  Total lines:            8320
  Line coverage:          0.224
  Visited conditions:     326
  Total conditions:       2972
  Condition coverage:     0.110

CPAchecker general statistics
-----------------------------
Number of program locations:     11845
Number of CFA edges:             14108
Number of relevant variables:    1459
Number of functions:             422
Number of loops:                 60
Size of reached set:             2576
  Number of reached locations:   872 (7%)
    Avg states per location:     2
    Max states per location:     33 (at node N61)
  Number of reached functions:   86 (20%)
  Number of partitions:          2571
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N9475 (before line 16122), Function main called from node N9445, stack depth 1 [97cb8dc], stack [main]])
  Number of target states:       0
  Size of final wait list        119

Time for analysis setup:          9.150s
  Time for loading CPAs:          1.275s
  Time for loading parser:        0.676s
  Time for CFA construction:      7.036s
    Time for parsing file(s):     1.382s
    Time for AST to CFA:          2.578s
    Time for CFA sanity check:    0.849s
    Time for post-processing:     2.079s
      Time for var class.:        1.072s
Time for Analysis:              891.504s
CPU time for analysis:          891.290s
Total time for CPAchecker:      900.665s
Total CPU time for CPAchecker:  900.420s
Time for statistics:              0.150s

Time for Garbage Collector:       1.993s (in 231 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                100MB (    95 MiB) max;     78MB (    75 MiB) avg;    102MB (    98 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8735MB (  8330 MiB) max;   8459MB (  8067 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
