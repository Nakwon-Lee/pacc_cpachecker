scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--pci--cs46xx--snd-cs46xx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__pw_6bka/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 9829: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9997: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10495: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5365: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9261: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9221: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_preallocate_pages_for_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11951: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12005: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12013: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function copy_to_user_fromio to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12851: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_pcm_lib_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_dma_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_lib_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12653: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_dma_alloc_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8194: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_hw_constraint_list to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8236: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12359: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12217: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11669: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12497: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12065: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11803: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11257: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11101: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_ac97_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_suspend_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10429: Ignoring function call through function pointer *(chip->amplifier_ctrl): (*(chip->amplifier_ctrl))(chip, -(chip->amplifier)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            271853 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  259643 (96%)
  Because of loop head:            12095 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         115 (0%)
  Times precision was empty:       205946 (76%)
  Times precision was {false}:     2072 (1%)
  Times result was cached:         62185 (23%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1650 (1%)
  Times result was 'false':        5149 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         312957
  BDD entailment checks:           50389
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       136
Number of predicates discovered:          18
Number of abstraction locations:          167
Max number of predicates per location:    17
Avg number of predicates per location:    1
Total predicates per abstraction:         139787
Max number of predicates per abstraction: 17
Avg number of predicates per abstraction: 37.56
Number of irrelevant predicates:          96461 (69%)
Number of preds handled by boolean abs:   3191 (2%)
  Total number of models for allsat:      2950690
  Max number of models for allsat:        49152
  Avg number of models for allsat:        1788.30

Time for post operator:                 78.630s
  Time for path formula creation:       77.534s
Time for strengthen operator:            2.599s
Time for prec operator:                750.838s
  Time for abstraction:                745.535s (Max:    13.278s, Count: 271853)
    Boolean abstraction:               728.664s
    Solving time:                        5.803s (Max:     0.088s)
    Model enumeration time:            629.704s
    Time for BDD construction:          95.965s (Max:     1.759s)
Time for merge operator:                 5.002s
Time for coverage check:                 0.143s
  Time for BDD entailment checks:        0.110s
Total time for SMT solver (w/o itp):   635.507s

Number of path formula cache hits:   2024557 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    64.769s

Total number of created targets for pointer analysis: 252403
   Number of created targets for uf: *(void)* is 1005
   Number of created targets for uf: *(struct_snd_cs46xx)* is 93
   Number of created targets for uf: *(struct_snd_pcm)* is 187
   Number of created targets for uf: *signed_int is 24922
   Number of created targets for uf: *signed_long_int is 1541
   Number of created targets for uf: *unsigned_int is 7310
   Number of created targets for uf: *unsigned_long_int is 309


Number of BDD nodes:                               79086
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3961 (count: 279163, min: 0, max: 219, avg: 0.01)
Time for BDD node cleanup:                             0.053s
Time for BDD garbage collection:                       0.264s (in 78 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.873s
  Time for transition matches:                         2.224s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                      2362678 (count: 2362678, min: 1, max: 1, avg: 1.00) [1 x 2362678]

CPA algorithm statistics
------------------------
Number of iterations:            1210494
Max size of waitlist:            683
Average size of waitlist:        346
Number of computed successors:   1437429
Max successors for one state:    2
Number of times merged:          131284
Number of times stopped:         165017
Number of times breaked:         115

Total time for CPA algorithm:       881.633s (Max:    30.945s)
  Time for choose from waitlist:      0.820s
  Time for precision adjustment:    761.660s
  Time for transfer relation:       103.104s
  Time for merge operator:            7.033s
  Time for stop operator:             2.165s
  Time for adding to reached set:     2.772s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   115
Avg. length of target path (in blocks):                8745 (count: 115, min: 9, max: 94, avg: 76.04)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   9.038s
  Counterexample analysis:                             6.432s (Max:     0.116s, Calls: 115)
    Refinement sat check:                              4.878s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.093s
  Precision update:                                    0.078s
  ARG update:                                          2.314s

Length of refined path (in blocks):                    8194 (count: 115, min: 4, max: 85, avg: 71.25)
Number of affected states:                             5925 (count: 115, min: 1, max: 83, avg: 51.52)
Length (states) of path with itp 'true':               2154 (count: 115, min: 0, max: 59, avg: 18.73)
Length (states) of path with itp non-trivial itp:      5925 (count: 115, min: 1, max: 83, avg: 51.52)
Length (states) of path with itp 'false':               115 (count: 115, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 115, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5810 (count: 115, min: 0, max: 82, avg: 50.52)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                115
Number of successful refinements:     115
Number of failed refinements:         0
Max. size of reached set before ref.: 14387
Max. size of reached set after ref.:  743
Avg. size of reached set before ref.: 11183.93
Avg. size of reached set after ref.:  235.96

Total time for CEGAR algorithm:     891.571s
Time for refinements:                 9.912s
Average time for refinement:          0.086s
Max time for refinement:              0.184s

Code Coverage
-----------------------------
  Function coverage:      0.329
  Visited lines:          2733
  Total lines:            8429
  Line coverage:          0.324
  Visited conditions:     884
  Total conditions:       2724
  Condition coverage:     0.325

CPAchecker general statistics
-----------------------------
Number of program locations:     12067
Number of CFA edges:             14273
Number of relevant variables:    1821
Number of functions:             301
Number of loops:                 82
Size of reached set:             8246
  Number of reached locations:   1780 (15%)
    Avg states per location:     4
    Max states per location:     127 (at node N59)
  Number of reached functions:   99 (33%)
  Number of partitions:          8227
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N230 (before line 5388), Function main called from node N201, stack depth 1 [5e2b512b], stack [main]])
  Number of target states:       0
  Size of final wait list        478

Time for analysis setup:          8.705s
  Time for loading CPAs:          1.213s
  Time for loading parser:        0.643s
  Time for CFA construction:      6.675s
    Time for parsing file(s):     1.378s
    Time for AST to CFA:          2.505s
    Time for CFA sanity check:    0.559s
    Time for post-processing:     1.919s
      Time for var class.:        1.074s
Time for Analysis:              891.571s
CPU time for analysis:          891.510s
Total time for CPAchecker:      900.288s
Total CPU time for CPAchecker:  900.200s
Time for statistics:              0.299s

Time for Garbage Collector:      12.676s (in 487 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                442MB (   422 MiB) max;    274MB (   261 MiB) avg;    448MB (   427 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           469MB (   447 MiB) max;    390MB (   372 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8151MB (  7773 MiB) max;   8084MB (  7710 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
