scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--pci--cs46xx--snd-cs46xx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_yv_fapge/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 9829: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9997: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10495: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5365: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11951: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9261: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9291: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_rawmidi_transmit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9221: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9251: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12005: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12013: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function copy_to_user_fromio to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12851: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_pcm_lib_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_dma_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12653: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8236: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_dma_alloc_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8194: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_hw_constraint_list to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_format_physical_width to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_malloc_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12359: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12217: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11669: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 6410: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6410: Unsupported feature (recursion): amp_voyetra(chip, 1); (line was originally pointer call(amp_voyetra) (*(chip->active_ctrl))(chip, 1);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            7011 (23% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  6756 (96%)
  Because of loop head:            251 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (0%)
  Times precision was empty:       6977 (100%)
  Times precision was {false}:     14 (0%)
  Times result was cached:         12 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      8 (0%)
  Times result was 'false':        14 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         2657
  BDD entailment checks:           745
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       136
Number of predicates discovered:          5
Number of abstraction locations:          5
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         70
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 3.18
Number of irrelevant predicates:          50 (71%)
Number of preds handled by boolean abs:   20 (29%)
  Total number of models for allsat:      8
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.460s
  Time for path formula creation:        3.345s
Time for strengthen operator:            0.105s
Time for prec operator:                  0.728s
  Time for abstraction:                  0.310s (Max:     0.022s, Count: 7011)
    Boolean abstraction:                 0.039s
    Solving time:                        0.032s (Max:     0.012s)
    Model enumeration time:              0.008s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.133s
Time for coverage check:                 0.044s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):     0.040s

Number of path formula cache hits:   28416 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.970s

Total number of created targets for pointer analysis: 1242
   Number of created targets for uf: *signed_int is 201
   Number of created targets for uf: *unsigned_int is 173


Number of BDD nodes:                               208
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          58 (count: 7873, min: 0, max: 22, avg: 0.01)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.259s
Automaton transfers with branching:                0
Automaton transfer successors:                        31112 (count: 31112, min: 1, max: 1, avg: 1.00) [1 x 31112]

CPA algorithm statistics
------------------------
Number of iterations:            20510
Max size of waitlist:            45
Average size of waitlist:        26
Number of computed successors:   22390
Max successors for one state:    2
Number of times merged:          956
Number of times stopped:         1689
Number of times breaked:         4

Total time for CPA algorithm:         8.116s (Max:     3.250s)
  Time for choose from waitlist:      0.073s
  Time for precision adjustment:      1.379s
  Time for transfer relation:         5.374s
  Time for merge operator:            0.283s
  Time for stop operator:             0.232s
  Time for adding to reached set:     0.213s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  75 (count: 4, min: 16, max: 27, avg: 18.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.386s
  Counterexample analysis:                             0.193s (Max:     0.060s, Calls: 4)
    Refinement sat check:                              0.166s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.029s
  ARG update:                                          0.151s

Length of refined path (in blocks):                      16 (count: 4, min: 4, max: 4, avg: 4.00)
Number of affected states:                                4 (count: 4, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  8 (count: 4, min: 2, max: 2, avg: 2.00)
Length (states) of path with itp non-trivial itp:         4 (count: 4, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 4, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 5134
Max. size of reached set after ref.:  13
Avg. size of reached set before ref.: 4231.75
Avg. size of reached set after ref.:  13.00

Total time for CEGAR algorithm:       8.596s
Time for refinements:                 0.479s
Average time for refinement:          0.119s
Max time for refinement:              0.151s

Code Coverage
-----------------------------
  Function coverage:      0.292
  Visited lines:          1905
  Total lines:            8429
  Line coverage:          0.226
  Visited conditions:     380
  Total conditions:       2724
  Condition coverage:     0.140

CPAchecker general statistics
-----------------------------
Number of program locations:     12067
Number of CFA edges:             14273
Number of relevant variables:    1821
Number of functions:             301
Number of loops:                 82
Size of reached set:             3813
  Number of reached locations:   1089 (9%)
    Avg states per location:     3
    Max states per location:     93 (at node N502)
  Number of reached functions:   88 (29%)
  Number of partitions:          3812
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N230 (before line 5388), Function main called from node N201, stack depth 1 [17d19538], stack [main]])
  Number of target states:       0
  Size of final wait list        24

Time for analysis setup:          9.290s
  Time for loading CPAs:          1.234s
  Time for loading parser:        0.740s
  Time for CFA construction:      7.198s
    Time for parsing file(s):     1.460s
    Time for AST to CFA:          2.505s
    Time for CFA sanity check:    0.711s
    Time for post-processing:     2.330s
      Time for var class.:        1.180s
Time for Analysis:                8.597s
CPU time for analysis:            8.600s
Total time for CPAchecker:       17.891s
Total CPU time for CPAchecker:   17.860s
Time for statistics:              0.228s

Time for Garbage Collector:       0.585s (in 27 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 82MB (    78 MiB) max;     52MB (    50 MiB) avg;     91MB (    87 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     31MB (    29 MiB) avg;     38MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     32MB (    31 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8059MB (  7685 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
