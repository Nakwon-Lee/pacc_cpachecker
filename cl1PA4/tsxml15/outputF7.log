scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--pci--cs46xx--snd-cs46xx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_s1w1ggpw/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 9829: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9997: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10495: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5365: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9261: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9221: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_preallocate_pages_for_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12497: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11803: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11257: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11101: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12653: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12217: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11951: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_dma_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_lib_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12065: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_dma_alloc_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8194: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_hw_constraint_list to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8236: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12851: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12359: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11669: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12005: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12013: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function copy_to_user_fromio to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10472: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_suspend_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10429: Ignoring function call through function pointer *(chip->amplifier_ctrl): (*(chip->amplifier_ctrl))(chip, -(chip->amplifier)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            167385 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  160868 (96%)
  Because of loop head:            6432 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         85 (0%)
  Times precision was empty:       132956 (79%)
  Times precision was {false}:     1567 (1%)
  Times result was cached:         32276 (19%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      586 (0%)
  Times result was 'false':        3356 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         194485
  BDD entailment checks:           26543
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       136
Number of predicates discovered:          19
Number of abstraction locations:          169
Max number of predicates per location:    18
Avg number of predicates per location:    1
Total predicates per abstraction:         73437
Max number of predicates per abstraction: 18
Avg number of predicates per abstraction: 34.11
Number of irrelevant predicates:          53043 (72%)
Number of preds handled by boolean abs:   1585 (2%)
  Total number of models for allsat:      2654741
  Max number of models for allsat:        98304
  Avg number of models for allsat:        4530.27

Time for post operator:                 64.397s
  Time for path formula creation:       63.632s
Time for strengthen operator:            1.455s
Time for prec operator:                782.702s
  Time for abstraction:                779.405s (Max:    34.745s, Count: 167385)
    Boolean abstraction:               769.468s
    Solving time:                        2.908s (Max:     0.094s)
    Model enumeration time:            676.980s
    Time for BDD construction:          91.523s (Max:     3.741s)
Time for merge operator:                 4.977s
Time for coverage check:                 0.179s
  Time for BDD entailment checks:        0.121s
Total time for SMT solver (w/o itp):   679.888s

Number of path formula cache hits:   1220274 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    52.571s

Total number of created targets for pointer analysis: 157768
   Number of created targets for uf: *(void)* is 692
   Number of created targets for uf: *(struct_snd_cs46xx)* is 70
   Number of created targets for uf: *(struct_snd_pcm)* is 7
   Number of created targets for uf: *signed_int is 18734
   Number of created targets for uf: *signed_long_int is 1061
   Number of created targets for uf: *unsigned_int is 19425
   Number of created targets for uf: *unsigned_long_int is 17


Number of BDD nodes:                               37137
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1912 (count: 172362, min: 0, max: 224, avg: 0.01)
Time for BDD node cleanup:                             0.045s
Time for BDD garbage collection:                       0.258s (in 89 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.525s
  Time for transition matches:                         1.389s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      1502335 (count: 1502335, min: 1, max: 1, avg: 1.00) [1 x 1502335]

CPA algorithm statistics
------------------------
Number of iterations:            749026
Max size of waitlist:            741
Average size of waitlist:        295
Number of computed successors:   896847
Max successors for one state:    2
Number of times merged:          83971
Number of times stopped:         103196
Number of times breaked:         85

Total time for CPA algorithm:       883.657s (Max:    78.634s)
  Time for choose from waitlist:      0.508s
  Time for precision adjustment:    789.511s
  Time for transfer relation:        81.486s
  Time for merge operator:            6.217s
  Time for stop operator:             1.427s
  Time for adding to reached set:     1.552s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   85
Avg. length of target path (in blocks):                5922 (count: 85, min: 9, max: 86, avg: 69.67)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.719s
  Counterexample analysis:                             4.723s (Max:     0.114s, Calls: 85)
    Refinement sat check:                              3.618s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.097s
  Precision update:                                    0.051s
  ARG update:                                          1.741s

Length of refined path (in blocks):                    5646 (count: 85, min: 4, max: 84, avg: 66.42)
Number of affected states:                             5293 (count: 85, min: 1, max: 83, avg: 62.27)
Length (states) of path with itp 'true':                268 (count: 85, min: 0, max: 59, avg: 3.15)
Length (states) of path with itp non-trivial itp:      5293 (count: 85, min: 1, max: 83, avg: 62.27)
Length (states) of path with itp 'false':                85 (count: 85, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 85, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5208 (count: 85, min: 0, max: 82, avg: 61.27)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                85
Number of successful refinements:     85
Number of failed refinements:         0
Max. size of reached set before ref.: 14609
Max. size of reached set after ref.:  380
Avg. size of reached set before ref.: 9306.79
Avg. size of reached set after ref.:  22.62

Total time for CEGAR algorithm:     891.077s
Time for refinements:                 7.416s
Average time for refinement:          0.087s
Max time for refinement:              0.183s

Code Coverage
-----------------------------
  Function coverage:      0.206
  Visited lines:          1680
  Total lines:            8429
  Line coverage:          0.199
  Visited conditions:     286
  Total conditions:       2724
  Condition coverage:     0.105

CPAchecker general statistics
-----------------------------
Number of program locations:     12067
Number of CFA edges:             14273
Number of relevant variables:    1821
Number of functions:             301
Number of loops:                 82
Size of reached set:             1141
  Number of reached locations:   655 (5%)
    Avg states per location:     1
    Max states per location:     29 (at node N16)
  Number of reached functions:   62 (21%)
  Number of partitions:          1139
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N230 (before line 5388), Function main called from node N201, stack depth 1 [5e2b512b], stack [main]])
  Number of target states:       0
  Size of final wait list        72

Time for analysis setup:          9.206s
  Time for loading CPAs:          1.301s
  Time for loading parser:        0.684s
  Time for CFA construction:      7.058s
    Time for parsing file(s):     1.375s
    Time for AST to CFA:          2.431s
    Time for CFA sanity check:    0.931s
    Time for post-processing:     2.196s
      Time for var class.:        1.011s
Time for Analysis:              891.077s
CPU time for analysis:          891.030s
Total time for CPAchecker:      900.288s
Total CPU time for CPAchecker:  900.210s
Time for statistics:              0.129s

Time for Garbage Collector:      10.150s (in 453 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                368MB (   351 MiB) max;    210MB (   200 MiB) avg;    373MB (   356 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           452MB (   431 MiB) max;    316MB (   302 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8083MB (  7708 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
