scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-sound--pci--cs46xx--snd-cs46xx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_egh884ya/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 9829: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9997: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10495: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5365: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9261: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9221: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_set_ops to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_preallocate_pages_for_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12497: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11803: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11257: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11101: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12653: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12217: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11951: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(272UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_ctl_boolean_mono_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_lib_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_dma_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_lib_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12065: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function snd_dma_alloc_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8194: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_pcm_hw_constraint_list to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8236: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, -1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12851: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12359: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11669: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12005: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12013: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(512UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function copy_to_user_fromio to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10472: Ignoring function call through function pointer *(chip->active_ctrl): (*(chip->active_ctrl))(chip, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_suspend_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ac97_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10429: Ignoring function call through function pointer *(chip->amplifier_ctrl): (*(chip->amplifier_ctrl))(chip, -(chip->amplifier)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            11596 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  11208 (97%)
  Because of loop head:            382 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (0%)
  Times precision was empty:       11442 (99%)
  Times precision was {false}:     37 (0%)
  Times result was cached:         97 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      20 (0%)
  Times result was 'false':        26 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         14153
  BDD entailment checks:           1613
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       136
Number of predicates discovered:          7
Number of abstraction locations:          7
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         429
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 7.53
Number of irrelevant predicates:          360 (84%)
Number of preds handled by boolean abs:   65 (15%)
  Total number of models for allsat:      142
  Max number of models for allsat:        64
  Avg number of models for allsat:        7.10

Time for post operator:                 11.996s
  Time for path formula creation:       11.718s
Time for strengthen operator:            0.341s
Time for prec operator:                  1.295s
  Time for abstraction:                  0.710s (Max:     0.044s, Count: 11596)
    Boolean abstraction:                 0.143s
    Solving time:                        0.089s (Max:     0.010s)
    Model enumeration time:              0.037s
    Time for BDD construction:           0.037s (Max:     0.011s)
Time for merge operator:                 0.816s
Time for coverage check:                 0.059s
  Time for BDD entailment checks:        0.052s
Total time for SMT solver (w/o itp):     0.126s

Number of path formula cache hits:   72443 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    10.745s

Total number of created targets for pointer analysis: 12418
   Number of created targets for uf: *(struct_snd_cs46xx)* is 8
   Number of created targets for uf: *(struct_snd_pcm)* is 15
   Number of created targets for uf: *signed_int is 1821
   Number of created targets for uf: *unsigned_int is 295


Number of BDD nodes:                               456
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         133 (count: 13426, min: 0, max: 32, avg: 0.01)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.565s
  Time for transition matches:                         0.304s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       110698 (count: 110698, min: 1, max: 1, avg: 1.00) [1 x 110698]

CPA algorithm statistics
------------------------
Number of iterations:            53470
Max size of waitlist:            516
Average size of waitlist:        285
Number of computed successors:   64372
Max successors for one state:    2
Number of times merged:          6270
Number of times stopped:         7788
Number of times breaked:         6

Total time for CPA algorithm:        20.902s (Max:     5.281s)
  Time for choose from waitlist:      0.135s
  Time for precision adjustment:      2.585s
  Time for transfer relation:        15.407s
  Time for merge operator:            1.158s
  Time for stop operator:             0.347s
  Time for adding to reached set:     0.315s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  75 (count: 6, min: 9, max: 16, avg: 12.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.604s
  Counterexample analysis:                             0.304s (Max:     0.072s, Calls: 6)
    Refinement sat check:                              0.232s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.010s
  ARG update:                                          0.264s

Length of refined path (in blocks):                      24 (count: 6, min: 4, max: 4, avg: 4.00)
Number of affected states:                                6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                 12 (count: 6, min: 2, max: 2, avg: 2.00)
Length (states) of path with itp non-trivial itp:         6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 6, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 9446
Max. size of reached set after ref.:  13
Avg. size of reached set before ref.: 8310.00
Avg. size of reached set after ref.:  13.00

Total time for CEGAR algorithm:      21.689s
Time for refinements:                 0.786s
Average time for refinement:          0.131s
Max time for refinement:              0.190s

Code Coverage
-----------------------------
  Function coverage:      0.272
  Visited lines:          2609
  Total lines:            8429
  Line coverage:          0.310
  Visited conditions:     880
  Total conditions:       2724
  Condition coverage:     0.323

CPAchecker general statistics
-----------------------------
Number of program locations:     12067
Number of CFA edges:             14273
Number of relevant variables:    1821
Number of functions:             301
Number of loops:                 82
Size of reached set:             6776
  Number of reached locations:   1641 (14%)
    Avg states per location:     4
    Max states per location:     112 (at node N59)
  Number of reached functions:   82 (27%)
  Number of partitions:          6775
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N230 (before line 5388), Function main called from node N201, stack depth 1 [5e2b512b], stack [main]])
  Number of target states:       0
  Size of final wait list        420

Time for analysis setup:          8.578s
  Time for loading CPAs:          1.154s
  Time for loading parser:        0.749s
  Time for CFA construction:      6.483s
    Time for parsing file(s):     1.335s
    Time for AST to CFA:          2.484s
    Time for CFA sanity check:    0.539s
    Time for post-processing:     1.850s
      Time for var class.:        0.962s
Time for Analysis:               21.689s
CPU time for analysis:           21.690s
Total time for CPAchecker:       30.271s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.358s

Time for Garbage Collector:       1.135s (in 50 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                113MB (   108 MiB) max;     66MB (    63 MiB) avg;    123MB (   117 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8070MB (  7696 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
