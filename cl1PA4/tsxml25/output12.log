scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--staging--rtl8723au--r8723au.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7ghthh48/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 24027-24028: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24031-24032: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24039-24040: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 53727: Dead code detected: return (1U); (CFACreationUtils.addEdgeToCFA, INFO)

line 53875: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 53894: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54011: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54030: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54081: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54100: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67206: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67374: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 77530: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77533: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77536: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 93820: Dead code detected: return (0U); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12854: Function pointer *rw8 with type int (*)(struct rtw_adapter *, u16 , u8 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 79060: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            15 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  15 (100%)
  Because of loop head:            0 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       15 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         2
  BDD entailment checks:           0
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       270
Number of predicates discovered:          0

Time for post operator:                  3.528s
  Time for path formula creation:        3.501s
Time for strengthen operator:            0.010s
Time for prec operator:                  0.008s
  Time for abstraction:                  0.001s (Max:     0.001s, Count: 15)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.031s
Time for coverage check:                 0.000s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   0 (0%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.365s

Total number of created targets for pointer analysis: 14672
   Number of created targets for uf: *unsigned_short_int is 41
   Number of created targets for uf: *unsigned_char is 137
   Number of created targets for uf: *unsigned_int is 90


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD node cleanup queue:                           0 (count: 16, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.071s
Automaton transfers with branching:                0
Automaton transfer successors:                         4245 (count: 4245, min: 1, max: 1, avg: 1.00) [1 x 4245]

CPA algorithm statistics
------------------------
Number of iterations:            43
Max size of waitlist:            3
Average size of waitlist:        1
Number of computed successors:   44
Max successors for one state:    2
Number of times merged:          1
Number of times stopped:         1
Number of times breaked:         0

Total time for CPA algorithm:         3.965s (Max:     3.965s)
  Time for choose from waitlist:      0.000s
  Time for precision adjustment:      0.021s
  Time for transfer relation:         3.889s
  Time for merge operator:            0.032s
  Time for stop operator:             0.002s
  Time for adding to reached set:     0.012s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.004
  Visited lines:          1772
  Total lines:            51303
  Line coverage:          0.035
  Visited conditions:     4
  Total conditions:       19732
  Condition coverage:     0.000

CPAchecker general statistics
-----------------------------
Number of program locations:     76181
Number of CFA edges:             90520
Number of relevant variables:    12585
Number of functions:             2316
Number of loops:                 568
Size of reached set:             44
  Number of reached locations:   44 (0%)
    Avg states per location:     1
    Max states per location:     1 (at node N42)
  Number of reached functions:   9 (0%)
  Number of partitions:          44
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        1

Time for analysis setup:         26.264s
  Time for loading CPAs:          1.782s
  Time for loading parser:        0.711s
  Time for CFA construction:     23.586s
    Time for parsing file(s):     3.379s
    Time for AST to CFA:          8.303s
    Time for CFA sanity check:    2.075s
    Time for post-processing:     9.523s
      Time for var class.:        5.290s
Time for Analysis:                3.965s
CPU time for analysis:            3.970s
Total time for CPAchecker:       30.247s
Total CPU time for CPAchecker:   30.140s
Time for statistics:              0.277s

Time for Garbage Collector:       2.824s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                407MB (   388 MiB) max;    202MB (   192 MiB) avg;    417MB (   397 MiB) peak
Used non-heap memory:             44MB (    42 MiB) max;     31MB (    29 MiB) avg;     45MB (    43 MiB) peak
Allocated heap memory:           511MB (   488 MiB) max;    335MB (   319 MiB) avg
Allocated non-heap memory:        45MB (    43 MiB) max;     32MB (    30 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8057MB (  7683 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
