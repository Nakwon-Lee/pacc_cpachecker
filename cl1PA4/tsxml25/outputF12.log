scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--staging--rtl8723au--r8723au.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8e4xnn1n/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 24027-24028: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24031-24032: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24039-24040: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 53727: Dead code detected: return (1U); (CFACreationUtils.addEdgeToCFA, INFO)

line 53875: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 53894: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54011: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54030: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54081: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54100: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67206: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67374: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 77530: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77533: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77536: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 93820: Dead code detected: return (0U); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12854: Function pointer *rw8 with type int (*)(struct rtw_adapter *, u16 , u8 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 79060: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 74188: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kill_pid to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 74164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(144UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cfg80211_connect_result to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cfg80211_disconnected to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 76574: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 79247: Destroying the void* pointer ldv_main_exported_13::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_13(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function queue_work_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_my_bssid23a to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cfg80211_rx_mgmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            10234 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  9602 (94%)
  Because of loop head:            583 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         49 (0%)
  Times precision was empty:       6701 (65%)
  Times precision was {false}:     226 (2%)
  Times result was cached:         3030 (30%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      277 (3%)
  Times result was 'false':        239 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         12735
  BDD entailment checks:           1263
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       270
Number of predicates discovered:          9
Number of abstraction locations:          163
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         5146
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 10.23
Number of irrelevant predicates:          2380 (46%)
Number of preds handled by boolean abs:   415 (8%)
  Total number of models for allsat:      300
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.08

Time for post operator:                 29.538s
  Time for path formula creation:       29.414s
Time for strengthen operator:            0.165s
Time for prec operator:                 45.955s
  Time for abstraction:                 45.175s (Max:     3.877s, Count: 10234)
    Boolean abstraction:                22.021s
    Solving time:                       34.879s (Max:     3.466s)
    Model enumeration time:              2.961s
    Time for BDD construction:           0.052s (Max:     0.012s)
Time for merge operator:                 3.509s
Time for coverage check:                 0.036s
  Time for BDD entailment checks:        0.027s
Total time for SMT solver (w/o itp):    37.840s

Number of path formula cache hits:   53360 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    27.083s

Total number of created targets for pointer analysis: 648458
   Number of created targets for uf: *unsigned_short_int is 41
   Number of created targets for uf: *(void)* is 43
   Number of created targets for uf: *(struct_sta_info)* is 21
   Number of created targets for uf: *unsigned_char is 133
   Number of created targets for uf: *(struct_list_head)* is 74
   Number of created targets for uf: *(unsigned_char)* is 3
   Number of created targets for uf: *unsigned_int is 545


Number of BDD nodes:                               251
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         627 (count: 10837, min: 0, max: 166, avg: 0.06)
Time for BDD node cleanup:                             0.022s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.367s
Automaton transfers with branching:                0
Automaton transfer successors:                        72801 (count: 72801, min: 1, max: 1, avg: 1.00) [1 x 72801]

CPA algorithm statistics
------------------------
Number of iterations:            45419
Max size of waitlist:            57
Average size of waitlist:        31
Number of computed successors:   52978
Max successors for one state:    2
Number of times merged:          5736
Number of times stopped:         6883
Number of times breaked:         49

Total time for CPA algorithm:        83.947s (Max:    10.106s)
  Time for choose from waitlist:      0.079s
  Time for precision adjustment:     46.668s
  Time for transfer relation:        32.454s
  Time for merge operator:            3.722s
  Time for stop operator:             0.200s
  Time for adding to reached set:     0.191s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   49
Avg. length of target path (in blocks):                6176 (count: 49, min: 45, max: 175, avg: 126.04)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 792.556s
  Counterexample analysis:                           792.143s (Max:    28.712s, Calls: 49)
    Refinement sat check:                            770.505s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.053s
  Precision update:                                    0.048s
  ARG update:                                          0.232s

Length of refined path (in blocks):                    5377 (count: 48, min: 26, max: 170, avg: 112.02)
Number of affected states:                             1263 (count: 48, min: 3, max: 91, avg: 26.31)
Length (states) of path with itp 'true':               4066 (count: 48, min: 0, max: 159, avg: 84.71)
Length (states) of path with itp non-trivial itp:      1263 (count: 48, min: 3, max: 91, avg: 26.31)
Length (states) of path with itp 'false':                48 (count: 48, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           2 (count: 48, min: 0, max: 1, avg: 0.04)
Equal non-trivial interpolants along paths:            1213 (count: 48, min: 2, max: 90, avg: 25.27)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                49
Number of successful refinements:     48
Number of failed refinements:         0
Max. size of reached set before ref.: 6424
Max. size of reached set after ref.:  5911
Avg. size of reached set before ref.: 3914.33
Avg. size of reached set after ref.:  3040.52

Total time for CEGAR algorithm:     877.102s
Time for refinements:               793.014s
Average time for refinement:         16.183s
Max time for refinement:             28.732s

Code Coverage
-----------------------------
  Function coverage:      0.062
  Visited lines:          3694
  Total lines:            51303
  Line coverage:          0.072
  Visited conditions:     668
  Total conditions:       19732
  Condition coverage:     0.034

CPAchecker general statistics
-----------------------------
Number of program locations:     76181
Number of CFA edges:             90520
Number of relevant variables:    12585
Number of functions:             2316
Number of loops:                 568
Size of reached set:             5685
  Number of reached locations:   1842 (2%)
    Avg states per location:     3
    Max states per location:     26 (at node N78825)
  Number of reached functions:   144 (6%)
  Number of partitions:          5681
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N59156 (before line 79093), Function main called from node N59116, stack depth 1 [70a0932b], stack [main]])
  Number of target states:       1
  Size of final wait list        40

Time for analysis setup:         25.199s
  Time for loading CPAs:          1.613s
  Time for loading parser:        0.710s
  Time for CFA construction:     22.722s
    Time for parsing file(s):     3.434s
    Time for AST to CFA:          7.780s
    Time for CFA sanity check:    2.012s
    Time for post-processing:     9.315s
      Time for var class.:        5.593s
Time for Analysis:              877.102s
CPU time for analysis:          877.010s
Total time for CPAchecker:      902.306s
Total CPU time for CPAchecker:  902.110s
Time for statistics:              0.380s

Time for Garbage Collector:       3.654s (in 93 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                399MB (   381 MiB) max;    301MB (   287 MiB) avg;    409MB (   390 MiB) peak
Used non-heap memory:             49MB (    47 MiB) max;     47MB (    45 MiB) avg;     49MB (    47 MiB) peak
Allocated heap memory:           407MB (   388 MiB) max;    403MB (   385 MiB) avg
Allocated non-heap memory:        51MB (    49 MiB) max;     50MB (    48 MiB) avg
Total process virtual memory:   8692MB (  8289 MiB) max;   8570MB (  8173 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
