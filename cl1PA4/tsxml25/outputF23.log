scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--staging--rtl8723au--r8723au.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ju01x1ba/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 24027-24028: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24031-24032: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 24039-24040: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5626;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 53727: Dead code detected: return (1U); (CFACreationUtils.addEdgeToCFA, INFO)

line 53875: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 53894: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54011: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54030: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54081: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 54100: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67206: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 67374: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 77530: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77533: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 77536: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3067;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 93820: Dead code detected: return (0U); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12854: Function pointer *rw8 with type int (*)(struct rtw_adapter *, u16 , u8 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 79060: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 74354: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74188: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 76574: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_uninit_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_13 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 79247: Destroying the void* pointer ldv_main_exported_13::tmp produces garbage or the memory pointed by it is unused: ldv_main_exported_13(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74368: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74378: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74380: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74382: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74386: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74390: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___18 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74392: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___19 = ldv_zalloc(128UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74398: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___22 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74402: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___24 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_bind_14 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_14 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function jiffies_to_msecs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 74164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(120UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 74174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(144UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wiphy_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ieee80211_frequency_to_channel to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cfg80211_mgmt_tx_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_alloc_name to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wiphy_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13685: Return type of function cfg80211_find_ie is (u8 )*, but result is used as type (const u8 )*: p = cfg80211_find_ie(45, ((u8 *)(&(pcur_bss->IEs))) + 12U, (int)((pcur_bss->IELength) - 12U)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function cfg80211_find_ie to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_reset_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmemdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 71951: Return type of function cfg80211_find_vendor_ie is (u8 )*, but result is used as type (const u8 )*: pwpa = cfg80211_find_vendor_ie(20722U, 1, (u8 *)buf, (int)ielen); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function cfg80211_find_vendor_ie to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 71972: Return type of function cfg80211_find_ie is (u8 )*, but result is used as type (const u8 )*: pwpa2 = cfg80211_find_ie(48, (u8 *)buf, (int)ielen); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function queue_work_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            233269 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  213920 (92%)
  Because of loop head:            19325 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         24 (0%)
  Times precision was empty:       216479 (93%)
  Times precision was {false}:     445 (0%)
  Times result was cached:         15840 (7%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      505 (0%)
  Times result was 'false':        965 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         452148
  BDD entailment checks:           47324
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       270
Number of predicates discovered:          7
Number of abstraction locations:          97
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         26091
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 27.46
Number of irrelevant predicates:          19210 (74%)
Number of preds handled by boolean abs:   874 (3%)
  Total number of models for allsat:      689
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.36

Time for post operator:                617.261s
  Time for path formula creation:      616.088s
Time for strengthen operator:            2.151s
Time for prec operator:                 28.181s
  Time for abstraction:                 20.158s (Max:     3.662s, Count: 233269)
    Boolean abstraction:                12.479s
    Solving time:                       14.041s (Max:     3.344s)
    Model enumeration time:              0.572s
    Time for BDD construction:           0.053s (Max:     0.004s)
Time for merge operator:                68.386s
Time for coverage check:                 0.147s
  Time for BDD entailment checks:        0.081s
Total time for SMT solver (w/o itp):    14.613s

Number of path formula cache hits:   2058309 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   577.362s

Total number of created targets for pointer analysis: 23669931
   Number of created targets for uf: *(void)* is 49
   Number of created targets for uf: *enum_nl80211_iftype is 28
   Number of created targets for uf: *(struct_net_device)* is 17
   Number of created targets for uf: *(unsigned_char)* is 345
   Number of created targets for uf: *unsigned_long_int is 253
   Number of created targets for uf: *unsigned_short_int is 41
   Number of created targets for uf: *signed_int is 85
   Number of created targets for uf: *unsigned_char is 133
   Number of created targets for uf: *(struct_list_head)* is 97
   Number of created targets for uf: *_Bool is 99
   Number of created targets for uf: *unsigned_long_long_int is 29
   Number of created targets for uf: *unsigned_int is 6953
   Number of created targets for uf: *(struct_device)* is 49


Number of BDD nodes:                               535
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1145 (count: 269182, min: 0, max: 191, avg: 0.00)
Time for BDD node cleanup:                             0.063s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.327s
  Time for transition matches:                         1.935s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      2186947 (count: 2186947, min: 1, max: 1, avg: 1.00) [1 x 2186947]

CPA algorithm statistics
------------------------
Number of iterations:            1414346
Max size of waitlist:            1026
Average size of waitlist:        466
Number of computed successors:   1680937
Max successors for one state:    2
Number of times merged:          202412
Number of times stopped:         246093
Number of times breaked:         24

Total time for CPA algorithm:       777.770s (Max:    58.033s)
  Time for choose from waitlist:      0.722s
  Time for precision adjustment:     40.804s
  Time for transfer relation:       655.388s
  Time for merge operator:           71.055s
  Time for stop operator:             2.087s
  Time for adding to reached set:     2.690s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   24
Avg. length of target path (in blocks):                1959 (count: 24, min: 31, max: 105, avg: 81.63)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  96.448s
  Counterexample analysis:                            92.807s (Max:     4.335s, Calls: 24)
    Refinement sat check:                             90.085s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.035s
  Precision update:                                    0.016s
  ARG update:                                          3.549s

Length of refined path (in blocks):                    1681 (count: 23, min: 26, max: 104, avg: 73.09)
Number of affected states:                             1495 (count: 23, min: 5, max: 103, avg: 65.00)
Length (states) of path with itp 'true':                163 (count: 23, min: 0, max: 33, avg: 7.09)
Length (states) of path with itp non-trivial itp:      1495 (count: 23, min: 5, max: 103, avg: 65.00)
Length (states) of path with itp 'false':                23 (count: 23, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 23, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1472 (count: 23, min: 4, max: 102, avg: 64.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                24
Number of successful refinements:     23
Number of failed refinements:         0
Max. size of reached set before ref.: 75302
Max. size of reached set after ref.:  240
Avg. size of reached set before ref.: 59773.17
Avg. size of reached set after ref.:  29.39

Total time for CEGAR algorithm:     875.300s
Time for refinements:                97.522s
Average time for refinement:          4.063s
Max time for refinement:              4.460s

Code Coverage
-----------------------------
  Function coverage:      0.111
  Visited lines:          6295
  Total lines:            51303
  Line coverage:          0.123
  Visited conditions:     1976
  Total conditions:       19732
  Condition coverage:     0.100

CPAchecker general statistics
-----------------------------
Number of program locations:     76181
Number of CFA edges:             90520
Number of relevant variables:    12585
Number of functions:             2316
Number of loops:                 568
Size of reached set:             74312
  Number of reached locations:   4890 (6%)
    Avg states per location:     15
    Max states per location:     686 (at node N100)
  Number of reached functions:   256 (11%)
  Number of partitions:          74304
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N59156 (before line 79093), Function main called from node N59116, stack depth 1 [64221eff], stack [main]])
  Number of target states:       1
  Size of final wait list        1019

Time for analysis setup:         27.102s
  Time for loading CPAs:          1.751s
  Time for loading parser:        0.677s
  Time for CFA construction:     24.450s
    Time for parsing file(s):     3.347s
    Time for AST to CFA:          8.293s
    Time for CFA sanity check:    2.776s
    Time for post-processing:     9.721s
      Time for var class.:        5.645s
Time for Analysis:              875.300s
CPU time for analysis:          875.220s
Total time for CPAchecker:      902.417s
Total CPU time for CPAchecker:  902.250s
Time for statistics:              1.269s

Time for Garbage Collector:      34.910s (in 676 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                729MB (   695 MiB) max;    403MB (   385 MiB) avg;    735MB (   701 MiB) peak
Used non-heap memory:             50MB (    47 MiB) max;     41MB (    40 MiB) avg;     50MB (    48 MiB) peak
Allocated heap memory:           739MB (   705 MiB) max;    600MB (   572 MiB) avg
Allocated non-heap memory:        52MB (    50 MiB) max;     52MB (    49 MiB) avg
Total process virtual memory:   8658MB (  8257 MiB) max;   8413MB (  8023 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
