scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3zpswowm/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8904: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8936: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8776: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8709-8710: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8826: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8806: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8743: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6785: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6721: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6723: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6947: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6572: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6574: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6697: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6677: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6678: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(mbx->ops.write) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12890: Function pointer *(ei->get_variants) with type s32 (*)(struct igbvf_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11085: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11108: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13793: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11292: Ignoring function call through function pointer *(hw->mac.ops.update_mc_addr_list): (*(hw->mac.ops.update_mc_addr_list))(hw, mta_list, (u32 )i, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11085: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11108: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7990: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(20UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 6658: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7940: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7994: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11328: Ignoring function call through function pointer *(mac->ops.reset_hw): tmp = (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11334: Ignoring function call through function pointer *(mac->ops.init_hw): (*(mac->ops.init_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7996: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7946: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8002: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7948: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8008: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8010: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14295: Destroying the void* pointer ldv_main_exported_10::tmp___5 produces garbage or the memory pointed by it is unused: ldv_main_exported_10(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11636: Ignoring function call through function pointer *(hw->mac.ops.rar_set): (*(hw->mac.ops.rar_set))(hw, (u8 *)(&(hw->mac.addr)), 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6721: Ignoring function call through function pointer *(mbx->ops.write_posted): ret_val = (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6723: Ignoring function call through function pointer *(mbx->ops.read_posted): ret_val = (*(mbx->ops.read_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12890: Ignoring function call through function pointer *(ei->get_variants): err = (*(ei->get_variants))(adapter); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11445: Ignoring function call through function pointer *(adapter->ei->init_ops): (*(adapter->ei->init_ops))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11446: Ignoring function call through function pointer *(adapter->hw.mac.ops.init_params): rc = (*(adapter->hw.mac.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11452: Ignoring function call through function pointer *(adapter->hw.mbx.ops.init_params): rc = (*(adapter->hw.mbx.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6768: Ignoring function call through function pointer *(mbx->ops.check_for_rst): tmp = (*(mbx->ops.check_for_rst))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6768: Unsupported feature (recursion): tmp = e1000_check_for_link_vf(hw); (line was originally pointer call(e1000_check_for_link_vf) tmp = (*(mbx->ops.check_for_rst))(hw);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            1076276 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  943799 (88%)
  Because of loop head:            132098 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         379 (0%)
  Times precision was empty:       539108 (50%)
  Times precision was {false}:     7882 (1%)
  Times result was cached:         522478 (49%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6808 (1%)
  Times result was 'false':        50496 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         1115123
  BDD entailment checks:           555631
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       116
Number of predicates discovered:          19
Number of abstraction locations:          199
Max number of predicates per location:    14
Avg number of predicates per location:    3
Total predicates per abstraction:         2122275
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 144.47
Number of irrelevant predicates:          1305647 (62%)
Number of preds handled by boolean abs:   16836 (1%)
  Total number of models for allsat:      72085
  Max number of models for allsat:        720
  Avg number of models for allsat:        10.59

Time for post operator:                 59.806s
  Time for path formula creation:       57.309s
Time for strengthen operator:            5.446s
Time for prec operator:                147.845s
  Time for abstraction:                132.344s (Max:     1.100s, Count: 1076276)
    Boolean abstraction:                32.517s
    Solving time:                        9.867s (Max:     0.025s)
    Model enumeration time:             23.019s
    Time for BDD construction:           2.157s (Max:     0.576s)
Time for merge operator:                 3.730s
Time for coverage check:                 0.620s
  Time for BDD entailment checks:        0.449s
Total time for SMT solver (w/o itp):    32.886s

Number of path formula cache hits:   7100140 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    24.603s

Total number of created targets for pointer analysis: 42173
   Number of created targets for uf: *unsigned_short_int is 273
   Number of created targets for uf: *(void)* is 109
   Number of created targets for uf: *enum_e1000_mac_type is 25
   Number of created targets for uf: *(unsigned_char)* is 43
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 9109
   Number of created targets for uf: *(struct_igbvf_info)* is 13
   Number of created targets for uf: *unsigned_long_long_int is 937
   Number of created targets for uf: *unsigned_int is 81


Number of BDD nodes:                               47871
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       15566 (count: 1190426, min: 0, max: 532, avg: 0.01)
Time for BDD node cleanup:                             0.208s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.346s
  Time for transition matches:                         4.823s
  Time for transition assertions:                      0.010s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      6252567 (count: 6252567, min: 1, max: 1, avg: 1.00) [1 x 6252567]

CPA algorithm statistics
------------------------
Number of iterations:            3896129
Max size of waitlist:            1995
Average size of waitlist:        708
Number of computed successors:   4599046
Max successors for one state:    2
Number of times merged:          279746
Number of times stopped:         447661
Number of times breaked:         379

Total time for CPA algorithm:       333.125s (Max:     4.551s)
  Time for choose from waitlist:      1.692s
  Time for precision adjustment:    180.347s
  Time for transfer relation:       120.846s
  Time for merge operator:            7.823s
  Time for stop operator:             5.375s
  Time for adding to reached set:     6.158s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   379
Avg. length of target path (in blocks):               22369 (count: 379, min: 26, max: 82, avg: 59.02)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  24.522s
  Counterexample analysis:                            14.967s (Max:     0.117s, Calls: 379)
    Refinement sat check:                             10.391s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.128s
  Precision update:                                    0.211s
  ARG update:                                          8.990s

Length of refined path (in blocks):                   18094 (count: 379, min: 20, max: 79, avg: 47.74)
Number of affected states:                             7954 (count: 379, min: 1, max: 64, avg: 20.99)
Length (states) of path with itp 'true':               9761 (count: 379, min: 14, max: 51, avg: 25.75)
Length (states) of path with itp non-trivial itp:      7954 (count: 379, min: 1, max: 64, avg: 20.99)
Length (states) of path with itp 'false':               379 (count: 379, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         138 (count: 379, min: 0, max: 2, avg: 0.36)
Equal non-trivial interpolants along paths:            7437 (count: 379, min: 0, max: 62, avg: 19.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                379
Number of successful refinements:     379
Number of failed refinements:         0
Max. size of reached set before ref.: 37681
Max. size of reached set after ref.:  29606
Avg. size of reached set before ref.: 18446.27
Avg. size of reached set after ref.:  7696.99

Total time for CEGAR algorithm:     365.859s
Time for refinements:                30.016s
Average time for refinement:          0.079s
Max time for refinement:              0.920s

Code Coverage
-----------------------------
  Function coverage:      0.375
  Visited lines:          2627
  Total lines:            5568
  Line coverage:          0.472
  Visited conditions:     572
  Total conditions:       1626
  Condition coverage:     0.352

CPAchecker general statistics
-----------------------------
Number of program locations:     8234
Number of CFA edges:             9524
Number of relevant variables:    1360
Number of functions:             320
Number of loops:                 41
Size of reached set:             26914
  Number of reached locations:   1434 (17%)
    Avg states per location:     18
    Max states per location:     532 (at node N717)
  Number of reached functions:   120 (38%)
  Number of partitions:          26850
    Avg size of partitions:      1
    Max size of partitions:      15 (with key [N6169 (before line 13827), Function main called from node N6096, stack depth 1 [39266403], stack [main]])
  Number of target states:       0
  Size of final wait list        1384

Time for analysis setup:          8.440s
  Time for loading CPAs:          1.302s
  Time for loading parser:        0.729s
  Time for CFA construction:      6.239s
    Time for parsing file(s):     1.371s
    Time for AST to CFA:          2.024s
    Time for CFA sanity check:    0.587s
    Time for post-processing:     2.030s
      Time for var class.:        0.886s
Time for Analysis:              365.859s
CPU time for analysis:          365.800s
Total time for CPAchecker:      374.303s
Total CPU time for CPAchecker:  374.220s
Time for statistics:              0.593s

Time for Garbage Collector:      29.084s (in 818 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                455MB (   433 MiB) max;    220MB (   210 MiB) avg;    482MB (   459 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           511MB (   488 MiB) max;    321MB (   306 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8222MB (  7841 MiB) max;   8123MB (  7747 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
