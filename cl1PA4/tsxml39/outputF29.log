scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_44unf35q/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8904: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8936: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8776: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8709-8710: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8826: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8806: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8743: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6785: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6721: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6723: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6947: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6572: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6574: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6697: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6677: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6678: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(mbx->ops.write) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12890: Function pointer *(ei->get_variants) with type s32 (*)(struct igbvf_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11085: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11108: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13793: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11292: Ignoring function call through function pointer *(hw->mac.ops.update_mc_addr_list): (*(hw->mac.ops.update_mc_addr_list))(hw, mta_list, (u32 )i, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11085: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11108: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7990: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7994: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7996: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8002: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8008: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8010: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14295: Destroying the void* pointer ldv_main_exported_10::tmp___5 produces garbage or the memory pointed by it is unused: ldv_main_exported_10(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(20UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7940: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7946: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7948: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11636: Ignoring function call through function pointer *(hw->mac.ops.rar_set): (*(hw->mac.ops.rar_set))(hw, (u8 *)(&(hw->mac.addr)), 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12890: Ignoring function call through function pointer *(ei->get_variants): err = (*(ei->get_variants))(adapter); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6658: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11328: Ignoring function call through function pointer *(mac->ops.reset_hw): tmp = (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11334: Ignoring function call through function pointer *(mac->ops.init_hw): (*(mac->ops.init_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6721: Ignoring function call through function pointer *(mbx->ops.write_posted): ret_val = (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6723: Ignoring function call through function pointer *(mbx->ops.read_posted): ret_val = (*(mbx->ops.read_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2229600 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1921963 (86%)
  Because of loop head:            306155 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1482 (0%)
  Times precision was empty:       828503 (37%)
  Times precision was {false}:     15314 (1%)
  Times result was cached:         1368409 (61%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17374 (1%)
  Times result was 'false':        94059 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2577043
  BDD entailment checks:           1439277
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       116
Number of predicates discovered:          17
Number of abstraction locations:          216
Max number of predicates per location:    11
Avg number of predicates per location:    3
Total predicates per abstraction:         5474959
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 167.49
Number of irrelevant predicates:          4122971 (75%)
Number of preds handled by boolean abs:   45805 (1%)
  Total number of models for allsat:      114915
  Max number of models for allsat:        288
  Avg number of models for allsat:        6.61

Time for post operator:                172.487s
  Time for path formula creation:      167.886s
Time for strengthen operator:            9.994s
Time for prec operator:                309.194s
  Time for abstraction:                272.685s (Max:     1.209s, Count: 2229600)
    Boolean abstraction:                54.087s
    Solving time:                       21.054s (Max:     0.135s)
    Model enumeration time:             34.238s
    Time for BDD construction:           2.312s (Max:     0.062s)
Time for merge operator:                12.649s
Time for coverage check:                 1.507s
  Time for BDD entailment checks:        1.173s
Total time for SMT solver (w/o itp):    55.292s

Number of path formula cache hits:   13065344 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    74.991s

Total number of created targets for pointer analysis: 151037
   Number of created targets for uf: *unsigned_short_int is 1177
   Number of created targets for uf: *(void)* is 2395
   Number of created targets for uf: *enum_e1000_mac_type is 533
   Number of created targets for uf: *(unsigned_char)* is 932
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 42373
   Number of created targets for uf: *(struct_igbvf_info)* is 267
   Number of created targets for uf: *unsigned_int is 1297


Number of BDD nodes:                               10376
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       35314 (count: 2462217, min: 0, max: 1737, avg: 0.01)
Time for BDD node cleanup:                             0.367s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.754s
  Time for transition matches:                         7.854s
  Time for transition assertions:                      0.006s
  Time for transition actions:                         0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                     12123538 (count: 12123538, min: 1, max: 1, avg: 1.00) [1 x 12123538]

CPA algorithm statistics
------------------------
Number of iterations:            7797604
Max size of waitlist:            3021
Average size of waitlist:        979
Number of computed successors:   9219251
Max successors for one state:    2
Number of times merged:          568883
Number of times stopped:         928824
Number of times breaked:         1482

Total time for CPA algorithm:       723.729s (Max:     9.060s)
  Time for choose from waitlist:      4.428s
  Time for precision adjustment:    368.335s
  Time for transfer relation:       283.569s
  Time for merge operator:           20.980s
  Time for stop operator:            11.000s
  Time for adding to reached set:    15.225s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1482
Avg. length of target path (in blocks):              137203 (count: 1482, min: 26, max: 121, avg: 92.58)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 115.371s
  Counterexample analysis:                            95.442s (Max:     0.145s, Calls: 1482)
    Refinement sat check:                             63.763s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.071s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.248s
  Precision update:                                    1.008s
  ARG update:                                         17.466s

Length of refined path (in blocks):                  110815 (count: 1482, min: 20, max: 116, avg: 74.77)
Number of affected states:                            14341 (count: 1482, min: 1, max: 101, avg: 9.68)
Length (states) of path with itp 'true':              94992 (count: 1482, min: 14, max: 100, avg: 64.10)
Length (states) of path with itp non-trivial itp:     14341 (count: 1482, min: 1, max: 101, avg: 9.68)
Length (states) of path with itp 'false':              1482 (count: 1482, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         129 (count: 1482, min: 0, max: 2, avg: 0.09)
Equal non-trivial interpolants along paths:           12730 (count: 1482, min: 0, max: 99, avg: 8.59)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1482
Number of successful refinements:     1482
Number of failed refinements:         0
Max. size of reached set before ref.: 55374
Max. size of reached set after ref.:  41549
Avg. size of reached set before ref.: 22148.56
Avg. size of reached set after ref.:  16644.66

Total time for CEGAR algorithm:     891.805s
Time for refinements:               145.812s
Average time for refinement:          0.098s
Max time for refinement:              0.326s

Code Coverage
-----------------------------
  Function coverage:      0.375
  Visited lines:          2538
  Total lines:            5568
  Line coverage:          0.456
  Visited conditions:     546
  Total conditions:       1626
  Condition coverage:     0.336

CPAchecker general statistics
-----------------------------
Number of program locations:     8234
Number of CFA edges:             9524
Number of relevant variables:    1360
Number of functions:             320
Number of loops:                 41
Size of reached set:             39590
  Number of reached locations:   1361 (17%)
    Avg states per location:     29
    Max states per location:     727 (at node N717)
  Number of reached functions:   120 (38%)
  Number of partitions:          39479
    Avg size of partitions:      1
    Max size of partitions:      25 (with key [N6169 (before line 13827), Function main called from node N6096, stack depth 1 [39266403], stack [main]])
  Number of target states:       0
  Size of final wait list        1995

Time for analysis setup:          8.448s
  Time for loading CPAs:          1.395s
  Time for loading parser:        0.683s
  Time for CFA construction:      6.217s
    Time for parsing file(s):     1.364s
    Time for AST to CFA:          2.076s
    Time for CFA sanity check:    0.655s
    Time for post-processing:     1.910s
      Time for var class.:        0.785s
Time for Analysis:              891.805s
CPU time for analysis:          891.740s
Total time for CPAchecker:      900.269s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.760s

Time for Garbage Collector:      48.030s (in 969 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1101MB (  1050 MiB) max;    527MB (   503 MiB) avg;   1195MB (  1140 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1475MB (  1407 MiB) max;    795MB (   758 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8422MB (  8032 MiB) max;   8251MB (  7869 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
