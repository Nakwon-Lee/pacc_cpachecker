scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3jm38v6x/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8904: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8936: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8776: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8709-8710: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8826: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8806: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8743: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6785: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6721: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6723: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6947: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6572: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6574: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6697: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6677: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6678: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(mbx->ops.write) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12890: Function pointer *(ei->get_variants) with type s32 (*)(struct igbvf_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11085: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11108: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13793: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(20UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7940: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7946: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7948: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7990: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7994: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7996: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8002: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8008: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8010: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14295: Destroying the void* pointer ldv_main_exported_10::tmp___5 produces garbage or the memory pointed by it is unused: ldv_main_exported_10(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            20272 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  18776 (93%)
  Because of loop head:            1475 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         21 (0%)
  Times precision was empty:       18929 (93%)
  Times precision was {false}:     217 (1%)
  Times result was cached:         955 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      171 (1%)
  Times result was 'false':        232 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         16972
  BDD entailment checks:           3374
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       116
Number of predicates discovered:          6
Number of abstraction locations:          15
Max number of predicates per location:    5
Avg number of predicates per location:    3
Total predicates per abstraction:         4086
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 10.53
Number of irrelevant predicates:          2634 (64%)
Number of preds handled by boolean abs:   443 (11%)
  Total number of models for allsat:      512
  Max number of models for allsat:        32
  Avg number of models for allsat:        2.99

Time for post operator:                  8.087s
  Time for path formula creation:        7.882s
Time for strengthen operator:            0.392s
Time for prec operator:                  3.925s
  Time for abstraction:                  2.939s (Max:     0.051s, Count: 20272)
    Boolean abstraction:                 0.951s
    Solving time:                        0.603s (Max:     0.021s)
    Model enumeration time:              0.253s
    Time for BDD construction:           0.158s (Max:     0.015s)
Time for merge operator:                 0.598s
Time for coverage check:                 0.051s
  Time for BDD entailment checks:        0.039s
Total time for SMT solver (w/o itp):     0.856s

Number of path formula cache hits:   112152 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.367s

Total number of created targets for pointer analysis: 1512
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 757


Number of BDD nodes:                               379
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         410 (count: 24502, min: 0, max: 44, avg: 0.02)
Time for BDD node cleanup:                             0.023s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.563s
  Time for transition matches:                         0.298s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       129188 (count: 129188, min: 1, max: 1, avg: 1.00) [1 x 129188]

CPA algorithm statistics
------------------------
Number of iterations:            78069
Max size of waitlist:            405
Average size of waitlist:        216
Number of computed successors:   93467
Max successors for one state:    2
Number of times merged:          6799
Number of times stopped:         9348
Number of times breaked:         21

Total time for CPA algorithm:        20.524s (Max:     2.504s)
  Time for choose from waitlist:      0.256s
  Time for precision adjustment:      5.505s
  Time for transfer relation:        11.722s
  Time for merge operator:            1.017s
  Time for stop operator:             0.346s
  Time for adding to reached set:     0.510s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   21
Avg. length of target path (in blocks):                 691 (count: 21, min: 26, max: 37, avg: 32.90)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.353s
  Counterexample analysis:                             0.778s (Max:     0.058s, Calls: 21)
    Refinement sat check:                              0.596s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.071s
  Precision update:                                    0.020s
  ARG update:                                          0.450s

Length of refined path (in blocks):                     490 (count: 21, min: 20, max: 25, avg: 23.33)
Number of affected states:                              115 (count: 21, min: 1, max: 8, avg: 5.48)
Length (states) of path with itp 'true':                354 (count: 21, min: 16, max: 18, avg: 16.86)
Length (states) of path with itp non-trivial itp:       115 (count: 21, min: 1, max: 8, avg: 5.48)
Length (states) of path with itp 'false':                21 (count: 21, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 21, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              94 (count: 21, min: 0, max: 7, avg: 4.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 5299
Max. size of reached set after ref.:  77
Avg. size of reached set before ref.: 3989.52
Avg. size of reached set after ref.:  74.14

Total time for CEGAR algorithm:      22.098s
Time for refinements:                 1.572s
Average time for refinement:          0.074s
Max time for refinement:              0.156s

Code Coverage
-----------------------------
  Function coverage:      0.144
  Visited lines:          1739
  Total lines:            5568
  Line coverage:          0.312
  Visited conditions:     280
  Total conditions:       1626
  Condition coverage:     0.172

CPAchecker general statistics
-----------------------------
Number of program locations:     8234
Number of CFA edges:             9524
Number of relevant variables:    1360
Number of functions:             320
Number of loops:                 41
Size of reached set:             1665
  Number of reached locations:   523 (6%)
    Avg states per location:     3
    Max states per location:     48 (at node N717)
  Number of reached functions:   46 (14%)
  Number of partitions:          1661
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N6169 (before line 13827), Function main called from node N6096, stack depth 1 [2aa14ae6], stack [main]])
  Number of target states:       0
  Size of final wait list        206

Time for analysis setup:          8.147s
  Time for loading CPAs:          1.335s
  Time for loading parser:        0.704s
  Time for CFA construction:      5.937s
    Time for parsing file(s):     1.280s
    Time for AST to CFA:          2.160s
    Time for CFA sanity check:    0.568s
    Time for post-processing:     1.670s
      Time for var class.:        0.795s
Time for Analysis:               22.099s
CPU time for analysis:           22.100s
Total time for CPAchecker:       30.249s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.145s

Time for Garbage Collector:       0.970s (in 45 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 98MB (    94 MiB) max;     63MB (    60 MiB) avg;     99MB (    95 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     40MB (    38 MiB) avg;     48MB (    46 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        49MB (    46 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8089MB (  7714 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
