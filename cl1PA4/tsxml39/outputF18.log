scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7zj4gg4t/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8904: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8936: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8776: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8709-8710: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8826: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8806: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8743: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6785: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6721: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6723: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6947: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6572: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6574: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6697: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6677: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6678: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(mbx->ops.write) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12890: Function pointer *(ei->get_variants) with type s32 (*)(struct igbvf_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11085: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11108: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13793: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(20UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7940: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7946: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7948: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7990: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7994: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7996: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8002: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8008: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8010: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14295: Destroying the void* pointer ldv_main_exported_10::tmp___5 produces garbage or the memory pointed by it is unused: ldv_main_exported_10(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11085: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11108: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11328: Ignoring function call through function pointer *(mac->ops.reset_hw): tmp = (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11334: Ignoring function call through function pointer *(mac->ops.init_hw): (*(mac->ops.init_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11292: Ignoring function call through function pointer *(hw->mac.ops.update_mc_addr_list): (*(hw->mac.ops.update_mc_addr_list))(hw, mta_list, (u32 )i, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6658: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12890: Ignoring function call through function pointer *(ei->get_variants): err = (*(ei->get_variants))(adapter); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11445: Ignoring function call through function pointer *(adapter->ei->init_ops): (*(adapter->ei->init_ops))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11446: Ignoring function call through function pointer *(adapter->hw.mac.ops.init_params): rc = (*(adapter->hw.mac.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11452: Ignoring function call through function pointer *(adapter->hw.mbx.ops.init_params): rc = (*(adapter->hw.mbx.ops.init_params))(&(adapter->hw)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_disable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6768: Ignoring function call through function pointer *(mbx->ops.check_for_rst): tmp = (*(mbx->ops.check_for_rst))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6768: Unsupported feature (recursion): tmp = e1000_check_for_link_vf(hw); (line was originally pointer call(e1000_check_for_link_vf) tmp = (*(mbx->ops.check_for_rst))(hw);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            270268 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  248922 (92%)
  Because of loop head:            21165 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         181 (0%)
  Times precision was empty:       192557 (71%)
  Times precision was {false}:     2024 (1%)
  Times result was cached:         71540 (26%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4147 (2%)
  Times result was 'false':        4430 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         260722
  BDD entailment checks:           81092
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       116
Number of predicates discovered:          13
Number of abstraction locations:          123
Max number of predicates per location:    9
Avg number of predicates per location:    3
Total predicates per abstraction:         357485
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 57.93
Number of irrelevant predicates:          191344 (54%)
Number of preds handled by boolean abs:   9146 (3%)
  Total number of models for allsat:      9661
  Max number of models for allsat:        96
  Avg number of models for allsat:        2.33

Time for post operator:                 33.997s
  Time for path formula creation:       32.779s
Time for strengthen operator:            1.996s
Time for prec operator:                 37.525s
  Time for abstraction:                 32.138s (Max:     0.421s, Count: 270268)
    Boolean abstraction:                 7.295s
    Solving time:                        4.954s (Max:     0.045s)
    Model enumeration time:              2.334s
    Time for BDD construction:           0.381s (Max:     0.017s)
Time for merge operator:                 3.215s
Time for coverage check:                 0.146s
  Time for BDD entailment checks:        0.098s
Total time for SMT solver (w/o itp):     7.288s

Number of path formula cache hits:   1686921 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    19.376s

Total number of created targets for pointer analysis: 14583
   Number of created targets for uf: *unsigned_short_int is 129
   Number of created targets for uf: *(void)* is 37
   Number of created targets for uf: *enum_e1000_mac_type is 9
   Number of created targets for uf: *(unsigned_char)* is 15
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 6373
   Number of created targets for uf: *(struct_igbvf_info)* is 5
   Number of created targets for uf: *unsigned_long_long_int is 1163
   Number of created targets for uf: *unsigned_int is 33


Number of BDD nodes:                               1909
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        8443 (count: 309345, min: 0, max: 276, avg: 0.03)
Time for BDD node cleanup:                             0.075s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.733s
  Time for transition matches:                         1.376s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      1702271 (count: 1702271, min: 1, max: 1, avg: 1.00) [1 x 1702271]

CPA algorithm statistics
------------------------
Number of iterations:            1036647
Max size of waitlist:            896
Average size of waitlist:        345
Number of computed successors:   1241897
Max successors for one state:    2
Number of times merged:          89815
Number of times stopped:         122674
Number of times breaked:         181

Total time for CPA algorithm:       115.370s (Max:     2.502s)
  Time for choose from waitlist:      0.680s
  Time for precision adjustment:     46.817s
  Time for transfer relation:        53.839s
  Time for merge operator:            4.966s
  Time for stop operator:             1.963s
  Time for adding to reached set:     2.857s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   181
Avg. length of target path (in blocks):               11051 (count: 181, min: 26, max: 109, avg: 61.06)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  10.308s
  Counterexample analysis:                             7.502s (Max:     0.159s, Calls: 181)
    Refinement sat check:                              5.214s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.012s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.090s
  Precision update:                                    0.116s
  ARG update:                                          2.451s

Length of refined path (in blocks):                    8988 (count: 181, min: 20, max: 100, avg: 49.66)
Number of affected states:                             5484 (count: 181, min: 1, max: 78, avg: 30.30)
Length (states) of path with itp 'true':               3323 (count: 181, min: 14, max: 74, avg: 18.36)
Length (states) of path with itp non-trivial itp:      5484 (count: 181, min: 1, max: 78, avg: 30.30)
Length (states) of path with itp 'false':               181 (count: 181, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          43 (count: 181, min: 0, max: 2, avg: 0.24)
Equal non-trivial interpolants along paths:            5260 (count: 181, min: 0, max: 77, avg: 29.06)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                181
Number of successful refinements:     181
Number of failed refinements:         0
Max. size of reached set before ref.: 12641
Max. size of reached set after ref.:  9680
Avg. size of reached set before ref.: 6515.84
Avg. size of reached set after ref.:  410.42

Total time for CEGAR algorithm:     126.706s
Time for refinements:                11.265s
Average time for refinement:          0.062s
Max time for refinement:              0.226s

Code Coverage
-----------------------------
  Function coverage:      0.316
  Visited lines:          2289
  Total lines:            5568
  Line coverage:          0.411
  Visited conditions:     518
  Total conditions:       1626
  Condition coverage:     0.319

CPAchecker general statistics
-----------------------------
Number of program locations:     8234
Number of CFA edges:             9524
Number of relevant variables:    1360
Number of functions:             320
Number of loops:                 41
Size of reached set:             9713
  Number of reached locations:   1136 (14%)
    Avg states per location:     8
    Max states per location:     175 (at node N717)
  Number of reached functions:   101 (32%)
  Number of partitions:          9679
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N6169 (before line 13827), Function main called from node N6096, stack depth 1 [39266403], stack [main]])
  Number of target states:       0
  Size of final wait list        523

Time for analysis setup:          8.377s
  Time for loading CPAs:          1.147s
  Time for loading parser:        0.750s
  Time for CFA construction:      6.337s
    Time for parsing file(s):     1.418s
    Time for AST to CFA:          2.364s
    Time for CFA sanity check:    0.636s
    Time for post-processing:     1.677s
      Time for var class.:        0.734s
Time for Analysis:              126.706s
CPU time for analysis:          126.700s
Total time for CPAchecker:      135.087s
Total CPU time for CPAchecker:  135.060s
Time for statistics:              0.267s

Time for Garbage Collector:       6.414s (in 336 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                232MB (   221 MiB) max;    119MB (   114 MiB) avg;    240MB (   229 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     39MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           245MB (   233 MiB) max;    183MB (   175 MiB) avg
Allocated non-heap memory:        45MB (    43 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8092MB (  7717 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
