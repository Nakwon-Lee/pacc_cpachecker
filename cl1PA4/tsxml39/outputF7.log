scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9z4dvp_8/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8904: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8936: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8776: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8709-8710: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8826: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8806: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8743: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6785: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6721: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6723: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6947: Function pointer *(mbx->ops.read) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6572: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6574: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6697: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6677: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6678: Function pointer *(mbx->ops.read_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6658: Function pointer *(mbx->ops.write_posted) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6969: Function pointer *(mbx->ops.write) with type s32 (*)(struct e1000_hw *, u32 *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12890: Function pointer *(ei->get_variants) with type s32 (*)(struct igbvf_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11085: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11108: Function pointer *(hw->mac.ops.set_vfta) with type s32 (*)(struct e1000_hw *, u16 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13793: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device_mem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11085: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11108: Ignoring function call through function pointer *(hw->mac.ops.set_vfta): tmp___0 = (*(hw->mac.ops.set_vfta))(hw, (int)vid, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11292: Ignoring function call through function pointer *(hw->mac.ops.update_mc_addr_list): (*(hw->mac.ops.update_mc_addr_list))(hw, mta_list, (u32 )i, 0U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7938: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(20UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7990: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7940: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7994: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7996: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7946: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7948: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8002: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8008: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8010: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14295: Destroying the void* pointer ldv_main_exported_10::tmp___5 produces garbage or the memory pointed by it is unused: ldv_main_exported_10(); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11636: Ignoring function call through function pointer *(hw->mac.ops.rar_set): (*(hw->mac.ops.rar_set))(hw, (u8 *)(&(hw->mac.addr)), 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11328: Ignoring function call through function pointer *(mac->ops.reset_hw): tmp = (*(mac->ops.reset_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11334: Ignoring function call through function pointer *(mac->ops.init_hw): (*(mac->ops.init_hw))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6658: Ignoring function call through function pointer *(mbx->ops.write_posted): (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6721: Ignoring function call through function pointer *(mbx->ops.write_posted): ret_val = (*(mbx->ops.write_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6723: Ignoring function call through function pointer *(mbx->ops.read_posted): ret_val = (*(mbx->ops.read_posted))(hw, (u32 *)(&msgbuf), 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12890: Ignoring function call through function pointer *(ei->get_variants): err = (*(ei->get_variants))(adapter); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1939016 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1673258 (86%)
  Because of loop head:            264508 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1250 (0%)
  Times precision was empty:       658167 (34%)
  Times precision was {false}:     20630 (1%)
  Times result was cached:         1238300 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      21919 (1%)
  Times result was 'false':        69088 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2336378
  BDD entailment checks:           1403994
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       116
Number of predicates discovered:          21
Number of abstraction locations:          228
Max number of predicates per location:    15
Avg number of predicates per location:    2
Total predicates per abstraction:         3477965
Max number of predicates per abstraction: 15
Avg number of predicates per abstraction: 81.74
Number of irrelevant predicates:          2632850 (76%)
Number of preds handled by boolean abs:   48487 (1%)
  Total number of models for allsat:      496938
  Max number of models for allsat:        960
  Avg number of models for allsat:        22.67

Time for post operator:                120.716s
  Time for path formula creation:      116.111s
Time for strengthen operator:            8.561s
Time for prec operator:                417.543s
  Time for abstraction:                386.664s (Max:     1.783s, Count: 1939016)
    Boolean abstraction:               196.833s
    Solving time:                       26.473s (Max:     0.021s)
    Model enumeration time:            163.506s
    Time for BDD construction:          12.366s (Max:     0.108s)
Time for merge operator:                 7.927s
Time for coverage check:                 1.357s
  Time for BDD entailment checks:        1.032s
Total time for SMT solver (w/o itp):   189.979s

Number of path formula cache hits:   11479887 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    57.098s

Total number of created targets for pointer analysis: 112531
   Number of created targets for uf: *unsigned_short_int is 1697
   Number of created targets for uf: *(void)* is 127
   Number of created targets for uf: *enum_e1000_mac_type is 29
   Number of created targets for uf: *(unsigned_char)* is 50
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 29233
   Number of created targets for uf: *(struct_igbvf_info)* is 15
   Number of created targets for uf: *unsigned_int is 1477


Number of BDD nodes:                               112674
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       44481 (count: 2308424, min: 0, max: 1252, avg: 0.02)
Time for BDD node cleanup:                             0.269s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.424s
  Time for transition matches:                         7.430s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                     10402735 (count: 10402735, min: 1, max: 1, avg: 1.00) [1 x 10402735]

CPA algorithm statistics
------------------------
Number of iterations:            6708399
Max size of waitlist:            3648
Average size of waitlist:        1213
Number of computed successors:   7894155
Max successors for one state:    2
Number of times merged:          466192
Number of times stopped:         777904
Number of times breaked:         1250

Total time for CPA algorithm:       749.176s (Max:    16.937s)
  Time for choose from waitlist:      3.797s
  Time for precision adjustment:    468.883s
  Time for transfer relation:       218.367s
  Time for merge operator:           15.246s
  Time for stop operator:            10.880s
  Time for adding to reached set:    13.785s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1250
Avg. length of target path (in blocks):               91856 (count: 1250, min: 26, max: 100, avg: 73.48)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  73.790s
  Counterexample analysis:                            57.049s (Max:     0.107s, Calls: 1250)
    Refinement sat check:                             40.345s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.059s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.160s
  Precision update:                                    0.701s
  ARG update:                                         14.992s

Length of refined path (in blocks):                   77486 (count: 1250, min: 20, max: 89, avg: 61.99)
Number of affected states:                             8232 (count: 1250, min: 1, max: 66, avg: 6.59)
Length (states) of path with itp 'true':              68004 (count: 1250, min: 14, max: 87, avg: 54.40)
Length (states) of path with itp non-trivial itp:      8232 (count: 1250, min: 1, max: 66, avg: 6.59)
Length (states) of path with itp 'false':              1250 (count: 1250, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         137 (count: 1250, min: 0, max: 2, avg: 0.11)
Equal non-trivial interpolants along paths:            6845 (count: 1250, min: 0, max: 64, avg: 5.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1250
Number of successful refinements:     1250
Number of failed refinements:         0
Max. size of reached set before ref.: 77499
Max. size of reached set after ref.:  67539
Avg. size of reached set before ref.: 32533.71
Avg. size of reached set after ref.:  26932.96

Total time for CEGAR algorithm:     891.977s
Time for refinements:               112.406s
Average time for refinement:          0.089s
Max time for refinement:              0.302s

Code Coverage
-----------------------------
  Function coverage:      0.388
  Visited lines:          2616
  Total lines:            5568
  Line coverage:          0.470
  Visited conditions:     578
  Total conditions:       1626
  Condition coverage:     0.355

CPAchecker general statistics
-----------------------------
Number of program locations:     8234
Number of CFA edges:             9524
Number of relevant variables:    1360
Number of functions:             320
Number of loops:                 41
Size of reached set:             46222
  Number of reached locations:   1452 (18%)
    Avg states per location:     31
    Max states per location:     673 (at node N717)
  Number of reached functions:   124 (39%)
  Number of partitions:          46112
    Avg size of partitions:      1
    Max size of partitions:      29 (with key [N6169 (before line 13827), Function main called from node N6096, stack depth 1 [39266403], stack [main]])
  Number of target states:       0
  Size of final wait list        1980

Time for analysis setup:          8.269s
  Time for loading CPAs:          1.199s
  Time for loading parser:        0.732s
  Time for CFA construction:      6.202s
    Time for parsing file(s):     1.325s
    Time for AST to CFA:          2.183s
    Time for CFA sanity check:    0.638s
    Time for post-processing:     1.853s
      Time for var class.:        0.799s
Time for Analysis:              891.977s
CPU time for analysis:          891.840s
Total time for CPAchecker:      900.251s
Total CPU time for CPAchecker:  900.090s
Time for statistics:              0.718s

Time for Garbage Collector:      47.843s (in 1056 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                853MB (   813 MiB) max;    414MB (   394 MiB) avg;    865MB (   825 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1048MB (  1000 MiB) max;    611MB (   582 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8492MB (  8099 MiB) max;   8219MB (  7839 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
