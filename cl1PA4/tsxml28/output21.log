scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--ethernet--neterion--vxge--vxge.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__ro1p6dt/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 8258: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8261: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8267: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6004;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8986: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9098: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

lines 20237-20252: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 20239: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20242: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20244: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20248: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 20257-20272: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 20259: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20262: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20264: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20268: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 20279: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20282: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20288: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 20297-20312: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 20299: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20302: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20304: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20308: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_41294;
    default:
    __bad_percpu_size();
    }
    ldv_41294:
    pscr_ret__ = pfo_ret__;
    goto ldv_41300;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_41304;
    default:
    __bad_percpu_size();
    }
    ldv_41304:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_41300;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_41313;
    default:
    __bad_percpu_size();
    }
    ldv_41313:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_41300;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_41322;
    default:
    __bad_percpu_size();
    }
    ldv_41322:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_41300;
    default:
    __bad_size_call_parameter();
    goto ldv_41300;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 27639: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 19637: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8559-8560: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 19570-19571: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8613: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19700: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19733: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19667: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8593: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19604: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 16314: Function pointer *(ring->callback) with type enum vxge_hw_status (*)(struct __vxge_hw_ring *, void *, u8 , void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 26988: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 27000: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26456: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 18974: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18976: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19522: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19497: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            29534 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  24576 (83%)
  Because of loop head:            4936 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         22 (0%)
  Times precision was empty:       27595 (93%)
  Times precision was {false}:     88 (0%)
  Times result was cached:         1777 (6%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      74 (0%)
  Times result was 'false':        183 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         18363
  BDD entailment checks:           5275
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       127
Number of predicates discovered:          4
Number of abstraction locations:          35
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         3083
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 19.03
Number of irrelevant predicates:          2203 (71%)
Number of preds handled by boolean abs:   83 (3%)
  Total number of models for allsat:      87
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.18

Time for post operator:                  5.506s
  Time for path formula creation:        5.279s
Time for strengthen operator:            0.354s
Time for prec operator:                  2.643s
  Time for abstraction:                  1.877s (Max:     0.062s, Count: 29534)
    Boolean abstraction:                 0.234s
    Solving time:                        0.263s (Max:     0.026s)
    Model enumeration time:              0.038s
    Time for BDD construction:           0.027s (Max:     0.008s)
Time for merge operator:                 0.296s
Time for coverage check:                 0.078s
  Time for BDD entailment checks:        0.071s
Total time for SMT solver (w/o itp):     0.301s

Number of path formula cache hits:   183989 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.006s

Total number of created targets for pointer analysis: 2041
   Number of created targets for uf: *unsigned_short_int is 162
   Number of created targets for uf: *signed_int is 3
   Number of created targets for uf: *enum_vxge_hw_event is 8
   Number of created targets for uf: *unsigned_long_long_int is 4
   Number of created targets for uf: *unsigned_int is 141


Number of BDD nodes:                               212
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         175 (count: 33786, min: 0, max: 48, avg: 0.01)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.680s
  Time for transition matches:                         0.361s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       167978 (count: 167978, min: 1, max: 1, avg: 1.00) [1 x 167978]

CPA algorithm statistics
------------------------
Number of iterations:            101016
Max size of waitlist:            375
Average size of waitlist:        244
Number of computed successors:   116655
Max successors for one state:    2
Number of times merged:          6544
Number of times stopped:         10574
Number of times breaked:         22

Total time for CPA algorithm:        17.257s (Max:     2.655s)
  Time for choose from waitlist:      0.253s
  Time for precision adjustment:      4.449s
  Time for transfer relation:         9.797s
  Time for merge operator:            0.670s
  Time for stop operator:             0.421s
  Time for adding to reached set:     0.449s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   22
Avg. length of target path (in blocks):                 438 (count: 22, min: 16, max: 21, avg: 19.91)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.195s
  Counterexample analysis:                             0.608s (Max:     0.060s, Calls: 22)
    Refinement sat check:                              0.487s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.023s
  Precision update:                                    0.016s
  ARG update:                                          0.522s

Length of refined path (in blocks):                     339 (count: 22, min: 12, max: 19, avg: 15.41)
Number of affected states:                               85 (count: 22, min: 0, max: 18, avg: 3.86)
Length (states) of path with itp 'true':                232 (count: 22, min: 0, max: 14, avg: 10.55)
Length (states) of path with itp non-trivial itp:        85 (count: 22, min: 0, max: 18, avg: 3.86)
Length (states) of path with itp 'false':                22 (count: 22, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 22, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              71 (count: 22, min: 0, max: 17, avg: 3.23)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                22
Number of successful refinements:     22
Number of failed refinements:         0
Max. size of reached set before ref.: 8525
Max. size of reached set after ref.:  6466
Avg. size of reached set before ref.: 6843.82
Avg. size of reached set after ref.:  2380.18

Total time for CEGAR algorithm:      18.855s
Time for refinements:                 1.520s
Average time for refinement:          0.069s
Max time for refinement:              0.131s

Code Coverage
-----------------------------
  Function coverage:      0.211
  Visited lines:          2898
  Total lines:            12712
  Line coverage:          0.228
  Visited conditions:     590
  Total conditions:       3206
  Condition coverage:     0.184

CPAchecker general statistics
-----------------------------
Number of program locations:     16925
Number of CFA edges:             19373
Number of relevant variables:    2875
Number of functions:             541
Number of loops:                 185
Size of reached set:             7699
  Number of reached locations:   1512 (9%)
    Avg states per location:     5
    Max states per location:     128 (at node N250)
  Number of reached functions:   114 (21%)
  Number of partitions:          7693
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N15924 (before line 27031), Function main called from node N15848, stack depth 1 [45e68fac], stack [main]])
  Number of target states:       0
  Size of final wait list        345

Time for analysis setup:         11.400s
  Time for loading CPAs:          1.327s
  Time for loading parser:        0.686s
  Time for CFA construction:      9.262s
    Time for parsing file(s):     1.710s
    Time for AST to CFA:          3.698s
    Time for CFA sanity check:    0.880s
    Time for post-processing:     2.791s
      Time for var class.:        1.326s
Time for Analysis:               18.855s
CPU time for analysis:           18.860s
Total time for CPAchecker:       30.261s
Total CPU time for CPAchecker:   30.230s
Time for statistics:              0.309s

Time for Garbage Collector:       1.280s (in 60 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                110MB (   105 MiB) max;     67MB (    63 MiB) avg;    118MB (   113 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     34MB (    32 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     35MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8068MB (  7694 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
