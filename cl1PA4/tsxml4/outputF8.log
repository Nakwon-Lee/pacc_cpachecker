scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--usb--r8152.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_v1qqy8mz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 7299-7314: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7301: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7304: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7306: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7310: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7319-7334: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7321: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7324: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7326: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7330: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7341: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7344: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7350: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7359-7374: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7361: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7364: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7366: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7370: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_40900;
  default:
  __bad_percpu_size();
  }
  ldv_40900:
  pscr_ret__ = pfo_ret__;
  goto ldv_40906;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_40910;
  default:
  __bad_percpu_size();
  }
  ldv_40910:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_40906;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_40919;
  default:
  __bad_percpu_size();
  }
  ldv_40919:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_40906;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_40928;
  default:
  __bad_percpu_size();
  }
  ldv_40928:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_40906;
  default:
  __bad_size_call_parameter();
  goto ldv_40906;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9862: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9896: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10143: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10283: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10322: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10410: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10449: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10651: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10690: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10769: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10808: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 12216: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12218: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_reset_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_driver_set_configuration to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_clone_tx_timestamp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11483: Ignoring function call through function pointer *(tp->rtl_ops.init): (*(tp->rtl_ops.init))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_tstamp_tx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_queue_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7778: Destroying the void* pointer get_registers::tmp produces garbage or the memory pointed by it is unused: ret = get_registers(tp, (int)index, (int)type, (int)size, data); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7768: Destroying the void* pointer get_registers::tmp produces garbage or the memory pointed by it is unused: ret = get_registers(tp, (int)index, (int)type, (int)limit, data); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmemdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11500: Ignoring function call through function pointer *(tp->rtl_ops.up): (*(tp->rtl_ops.up))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12071: Ignoring function call through function pointer *(tp->rtl_ops.unload): (*(tp->rtl_ops.unload))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kmalloc_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11167: Ignoring function call through function pointer *(tp->rtl_ops.up): (*(tp->rtl_ops.up))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11223: Ignoring function call through function pointer *(tp->rtl_ops.down): (*(tp->rtl_ops.down))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11160: Ignoring function call through function pointer *(tp->rtl_ops.disable): (*(tp->rtl_ops.disable))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12025: Ignoring function call through function pointer *(tp->rtl_ops.init): (*(tp->rtl_ops.init))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11461: Ignoring function call through function pointer *(tp->rtl_ops.down): (*(tp->rtl_ops.down))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3249181 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3045380 (94%)
  Because of loop head:            203637 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         164 (0%)
  Times precision was empty:       713659 (22%)
  Times precision was {false}:     3277 (0%)
  Times result was cached:         2528259 (78%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3986 (0%)
  Times result was 'false':        63692 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         2332003
  BDD entailment checks:           703721
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       56
Number of predicates discovered:          12
Number of abstraction locations:          218
Max number of predicates per location:    8
Avg number of predicates per location:    2
Total predicates per abstraction:         5659102
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 779.17
Number of irrelevant predicates:          4761455 (84%)
Number of preds handled by boolean abs:   7403 (0%)
  Total number of models for allsat:      6141
  Max number of models for allsat:        48
  Avg number of models for allsat:        1.54

Time for post operator:                159.161s
  Time for path formula creation:      150.357s
Time for strengthen operator:           15.070s
Time for prec operator:                312.099s
  Time for abstraction:                260.212s (Max:     2.003s, Count: 3249181)
    Boolean abstraction:                 4.240s
    Solving time:                        4.384s (Max:     0.017s)
    Model enumeration time:              0.850s
    Time for BDD construction:           0.231s (Max:     0.012s)
Time for merge operator:                10.844s
Time for coverage check:                 1.019s
  Time for BDD entailment checks:        0.739s
Total time for SMT solver (w/o itp):     5.234s

Number of path formula cache hits:   20951996 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    44.098s

Total number of created targets for pointer analysis: 42435
   Number of created targets for uf: *(void)* is 151
   Number of created targets for uf: *unsigned_short_int is 256
   Number of created targets for uf: *(struct_sk_buff)* is 712
   Number of created targets for uf: *unsigned_char is 25
   Number of created targets for uf: *(struct_list_head)* is 595
   Number of created targets for uf: *(unsigned_char)* is 21
   Number of created targets for uf: *unsigned_long_long_int is 1232
   Number of created targets for uf: *unsigned_int is 488
   Number of created targets for uf: *(struct_device)* is 277
   Number of created targets for uf: *unsigned_long_int is 10


Number of BDD nodes:                               2324
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        8460 (count: 1459834, min: 0, max: 278, avg: 0.01)
Time for BDD node cleanup:                             0.301s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 22.219s
  Time for transition matches:                        11.385s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                     17636847 (count: 17636847, min: 1, max: 1, avg: 1.00) [1 x 17636847]

CPA algorithm statistics
------------------------
Number of iterations:            11072221
Max size of waitlist:            4451
Average size of waitlist:        1993
Number of computed successors:   12746758
Max successors for one state:    2
Number of times merged:          814141
Number of times stopped:         1350891
Number of times breaked:         164

Total time for CPA algorithm:       835.948s (Max:    20.977s)
  Time for choose from waitlist:      4.801s
  Time for precision adjustment:    411.023s
  Time for transfer relation:       333.683s
  Time for merge operator:           20.801s
  Time for stop operator:            14.026s
  Time for adding to reached set:    18.363s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   164
Avg. length of target path (in blocks):               10409 (count: 164, min: 30, max: 87, avg: 63.47)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  51.779s
  Counterexample analysis:                             4.902s (Max:     0.057s, Calls: 164)
    Refinement sat check:                              3.132s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.091s
  Precision update:                                    0.092s
  ARG update:                                         46.558s

Length of refined path (in blocks):                    8934 (count: 164, min: 22, max: 85, avg: 54.48)
Number of affected states:                             5296 (count: 164, min: 1, max: 66, avg: 32.29)
Length (states) of path with itp 'true':               3474 (count: 164, min: 18, max: 57, avg: 21.18)
Length (states) of path with itp non-trivial itp:      5296 (count: 164, min: 1, max: 66, avg: 32.29)
Length (states) of path with itp 'false':               164 (count: 164, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          66 (count: 164, min: 0, max: 1, avg: 0.40)
Equal non-trivial interpolants along paths:            5066 (count: 164, min: 0, max: 64, avg: 30.89)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                164
Number of successful refinements:     164
Number of failed refinements:         0
Max. size of reached set before ref.: 295901
Max. size of reached set after ref.:  96113
Avg. size of reached set before ref.: 70040.63
Avg. size of reached set after ref.:  1523.07

Total time for CEGAR algorithm:     894.366s
Time for refinements:                58.189s
Average time for refinement:          0.354s
Max time for refinement:              1.586s

Code Coverage
-----------------------------
  Function coverage:      0.403
  Visited lines:          2307
  Total lines:            4556
  Line coverage:          0.506
  Visited conditions:     512
  Total conditions:       1132
  Condition coverage:     0.452

CPAchecker general statistics
-----------------------------
Number of program locations:     6452
Number of CFA edges:             7604
Number of relevant variables:    1079
Number of functions:             253
Number of loops:                 42
Size of reached set:             95293
  Number of reached locations:   1393 (22%)
    Avg states per location:     68
    Max states per location:     2414 (at node N985)
  Number of reached functions:   102 (40%)
  Number of partitions:          94860
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N4958 (before line 12240), Function main called from node N4891, stack depth 1 [59edb4f5], stack [main]])
  Number of target states:       0
  Size of final wait list        2545

Time for analysis setup:          7.131s
  Time for loading CPAs:          1.084s
  Time for loading parser:        0.657s
  Time for CFA construction:      5.221s
    Time for parsing file(s):     1.276s
    Time for AST to CFA:          1.992s
    Time for CFA sanity check:    0.440s
    Time for post-processing:     1.273s
      Time for var class.:        0.583s
Time for Analysis:              894.366s
CPU time for analysis:          894.310s
Total time for CPAchecker:      901.507s
Total CPU time for CPAchecker:  901.440s
Time for statistics:              1.130s

Time for Garbage Collector:     125.062s (in 1072 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                985MB (   939 MiB) max;    486MB (   463 MiB) avg;   1006MB (   960 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    40 MiB) peak
Allocated heap memory:           996MB (   950 MiB) max;    712MB (   679 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8124MB (  7748 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
