scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--caif--caif_hsi.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_17v1zoc9/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5216: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5219: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5222: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5245: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5248: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5254: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7223: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7228: Dead code detected: tmp___9 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7233: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___8 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___8->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 2UL:
  tmp___9 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___9->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 4UL:
  tmp___10 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___10->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 8UL:
  tmp___11 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___11->state): : "memory",
                       "cc");
  goto ldv_43363;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7974: Function pointer *get_ops with type struct cfhsi_ops *(*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7732: Function pointer *(cfhsi->ops->cfhsi_rx_cancel) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7738: Function pointer *(cfhsi->ops->cfhsi_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5858: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5873: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7685: Function pointer *(cfhsi->ops->cfhsi_up) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7703: Function pointer *(cfhsi->ops->cfhsi_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6623: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6103: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6164: Function pointer *(cfhsi->cfdev.flowctrl) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7132: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7261: Function pointer *(cfhsi->ops->cfhsi_rx_cancel) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7205: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7184: Function pointer *(cfhsi->ops->cfhsi_get_peer_wake) with type int (*)(struct cfhsi_ops *, bool *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6838: Function pointer *(cfhsi->ops->cfhsi_wake_up) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6995: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7051: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6919: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6942: Function pointer *(cfhsi->ops->cfhsi_get_peer_wake) with type int (*)(struct cfhsi_ops *, bool *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6961: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6900: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7510: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7457: Function pointer *(cfhsi->cfdev.flowctrl) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8265: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_init_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8086: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8130: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_state_change to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_queue_tail to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8238: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __symbol_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7974: Ignoring call via function pointer caif_hsi_newlink::get_ops for which no suitable target was found in line: cfhsi->ops = (*get_ops)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7974: Ignoring function call through function pointer *get_ops: cfhsi->ops = (*get_ops)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdevice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6103: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_tx): res = (*(cfhsi->ops->cfhsi_tx))(cfhsi->tx_buf, len, cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7732: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_rx_cancel): (*(cfhsi->ops->cfhsi_rx_cancel))(cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_copy_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function print_hex_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6623: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_rx): res = (*(cfhsi->ops->cfhsi_rx))(rx_ptr, rx_len, cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7738: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_down): (*(cfhsi->ops->cfhsi_down))(cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7457: Ignoring function call through function pointer *(cfhsi->cfdev.flowctrl): (*(cfhsi->cfdev.flowctrl))(cfhsi->ndev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7510: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_tx): res = (*(cfhsi->ops->cfhsi_tx))(cfhsi->tx_buf, len, cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7685: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_up): res = (*(cfhsi->ops->cfhsi_up))(cfhsi->ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5858: Ignoring function call through function pointer *(cfhsi->ops->cfhsi_fifo_occupancy): ret = (*(cfhsi->ops->cfhsi_fifo_occupancy))(cfhsi->ops, &fifo_occupancy); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2549947 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2231252 (88%)
  Because of loop head:            318287 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         408 (0%)
  Times precision was empty:       439446 (17%)
  Times precision was {false}:     4983 (0%)
  Times result was cached:         2077885 (81%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      27633 (1%)
  Times result was 'false':        128589 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         2419895
  BDD entailment checks:           1321937
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          60
Number of abstraction locations:          252
Max number of predicates per location:    17
Avg number of predicates per location:    4
Total predicates per abstraction:         9876028
Max number of predicates per abstraction: 17
Avg number of predicates per abstraction: 302.80
Number of irrelevant predicates:          4614329 (47%)
Number of preds handled by boolean abs:   99644 (1%)
  Total number of models for allsat:      57046
  Max number of models for allsat:        192
  Avg number of models for allsat:        2.06

Time for post operator:                103.848s
  Time for path formula creation:       98.258s
Time for strengthen operator:           12.451s
Time for prec operator:                460.255s
  Time for abstraction:                430.987s (Max:     2.710s, Count: 2549947)
    Boolean abstraction:                34.482s
    Solving time:                       25.063s (Max:     0.081s)
    Model enumeration time:              8.193s
    Time for BDD construction:           1.222s (Max:     0.012s)
Time for merge operator:                 7.247s
Time for coverage check:                 1.440s
  Time for BDD entailment checks:        1.072s
Total time for SMT solver (w/o itp):    33.256s

Number of path formula cache hits:   15559427 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    65.518s

Total number of created targets for pointer analysis: 106606
   Number of created targets for uf: *(void)* is 24016
   Number of created targets for uf: *unsigned_char is 13
   Number of created targets for uf: *(struct_list_head)* is 114
   Number of created targets for uf: *unsigned_int is 417
   Number of created targets for uf: *char is 177


Number of BDD nodes:                               42302
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       70554 (count: 1972633, min: 0, max: 853, avg: 0.04)
Time for BDD node cleanup:                             0.309s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 19.119s
  Time for transition matches:                        10.317s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                     14256382 (count: 14256382, min: 1, max: 1, avg: 1.00) [1 x 14256382]

CPA algorithm statistics
------------------------
Number of iterations:            8917866
Max size of waitlist:            2106
Average size of waitlist:        696
Number of computed successors:   10201656
Max successors for one state:    2
Number of times merged:          548979
Number of times stopped:         945684
Number of times breaked:         408

Total time for CPA algorithm:       848.040s (Max:    15.055s)
  Time for choose from waitlist:      4.883s
  Time for precision adjustment:    529.408s
  Time for transfer relation:       239.494s
  Time for merge operator:           15.597s
  Time for stop operator:            11.920s
  Time for adding to reached set:    20.048s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   408
Avg. length of target path (in blocks):               20902 (count: 408, min: 18, max: 117, avg: 51.23)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  29.070s
  Counterexample analysis:                             9.466s (Max:     0.112s, Calls: 408)
    Refinement sat check:                              5.928s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.014s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.146s
  Precision update:                                    0.300s
  ARG update:                                         18.923s

Length of refined path (in blocks):                   16627 (count: 408, min: 12, max: 92, avg: 40.75)
Number of affected states:                             9792 (count: 408, min: 1, max: 83, avg: 24.00)
Length (states) of path with itp 'true':               6427 (count: 408, min: 0, max: 55, avg: 15.75)
Length (states) of path with itp non-trivial itp:      9792 (count: 408, min: 1, max: 83, avg: 24.00)
Length (states) of path with itp 'false':               408 (count: 408, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         272 (count: 408, min: 0, max: 8, avg: 0.67)
Equal non-trivial interpolants along paths:            9112 (count: 408, min: 0, max: 81, avg: 22.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                408
Number of successful refinements:     408
Number of failed refinements:         0
Max. size of reached set before ref.: 275069
Max. size of reached set after ref.:  229301
Avg. size of reached set before ref.: 38597.41
Avg. size of reached set after ref.:  16274.25

Total time for CEGAR algorithm:     894.102s
Time for refinements:                40.507s
Average time for refinement:          0.099s
Max time for refinement:              0.832s

Code Coverage
-----------------------------
  Function coverage:      0.592
  Visited lines:          1984
  Total lines:            2978
  Line coverage:          0.666
  Visited conditions:     352
  Total conditions:       640
  Condition coverage:     0.550

CPAchecker general statistics
-----------------------------
Number of program locations:     4030
Number of CFA edges:             4525
Number of relevant variables:    541
Number of functions:             130
Number of loops:                 25
Size of reached set:             19532
  Number of reached locations:   1046 (26%)
    Avg states per location:     18
    Max states per location:     357 (at node N217)
  Number of reached functions:   77 (59%)
  Number of partitions:          19209
    Avg size of partitions:      1
    Max size of partitions:      25 (with key [N2668 (before line 8278), Function main called from node N2642, stack depth 1 [7942a854], stack [main]])
  Number of target states:       0
  Size of final wait list        564

Time for analysis setup:          6.146s
  Time for loading CPAs:          0.975s
  Time for loading parser:        0.715s
  Time for CFA construction:      4.359s
    Time for parsing file(s):     1.176s
    Time for AST to CFA:          1.615s
    Time for CFA sanity check:    0.270s
    Time for post-processing:     1.069s
      Time for var class.:        0.507s
Time for Analysis:              894.102s
CPU time for analysis:          894.030s
Total time for CPAchecker:      900.252s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.436s

Time for Garbage Collector:      93.800s (in 1207 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1316MB (  1255 MiB) max;    522MB (   498 MiB) avg;   1391MB (  1326 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1541MB (  1469 MiB) max;    757MB (   722 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8560MB (  8164 MiB) max;   8244MB (  7863 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
