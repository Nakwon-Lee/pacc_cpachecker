scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_safes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--caif--caif_hsi.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_sfqww0pu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5216: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5219: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5222: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3038;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5245: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5248: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5254: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_5995;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7223: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7228: Dead code detected: tmp___9 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7233: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___8 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___8->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 2UL:
  tmp___9 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___9->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 4UL:
  tmp___10 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___10->state): : "memory",
                       "cc");
  goto ldv_43363;
  case 8UL:
  tmp___11 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___11->state): : "memory",
                       "cc");
  goto ldv_43363;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7974: Function pointer *get_ops with type struct cfhsi_ops *(*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7732: Function pointer *(cfhsi->ops->cfhsi_rx_cancel) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7738: Function pointer *(cfhsi->ops->cfhsi_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5858: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5873: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7685: Function pointer *(cfhsi->ops->cfhsi_up) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7703: Function pointer *(cfhsi->ops->cfhsi_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6623: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6103: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6164: Function pointer *(cfhsi->cfdev.flowctrl) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7132: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7261: Function pointer *(cfhsi->ops->cfhsi_rx_cancel) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7205: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7184: Function pointer *(cfhsi->ops->cfhsi_get_peer_wake) with type int (*)(struct cfhsi_ops *, bool *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6838: Function pointer *(cfhsi->ops->cfhsi_wake_up) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6995: Function pointer *(cfhsi->ops->cfhsi_rx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7051: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6919: Function pointer *(cfhsi->ops->cfhsi_fifo_occupancy) with type int (*)(struct cfhsi_ops *, size_t *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6942: Function pointer *(cfhsi->ops->cfhsi_get_peer_wake) with type int (*)(struct cfhsi_ops *, bool *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6961: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6900: Function pointer *(cfhsi->ops->cfhsi_wake_down) with type int (*)(struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7510: Function pointer *(cfhsi->ops->cfhsi_tx) with type int (*)(u8 *, int, struct cfhsi_ops *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7457: Function pointer *(cfhsi->cfdev.flowctrl) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8265: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(7168UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_ndo_init_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8086: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8130: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_link_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_link_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8224: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_state_change to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nla_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8238: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            26195 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  22787 (87%)
  Because of loop head:            3374 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         34 (0%)
  Times precision was empty:       21515 (82%)
  Times precision was {false}:     551 (2%)
  Times result was cached:         3547 (14%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      582 (2%)
  Times result was 'false':        481 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         16302
  BDD entailment checks:           6896
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          10
Number of abstraction locations:          40
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         11406
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 10.07
Number of irrelevant predicates:          6819 (60%)
Number of preds handled by boolean abs:   1468 (13%)
  Total number of models for allsat:      1215
  Max number of models for allsat:        18
  Avg number of models for allsat:        2.09

Time for post operator:                  6.865s
  Time for path formula creation:        6.671s
Time for strengthen operator:            0.308s
Time for prec operator:                  6.502s
  Time for abstraction:                  5.677s (Max:     0.029s, Count: 26195)
    Boolean abstraction:                 1.708s
    Solving time:                        1.359s (Max:     0.030s)
    Model enumeration time:              0.297s
    Time for BDD construction:           0.170s (Max:     0.012s)
Time for merge operator:                 0.297s
Time for coverage check:                 0.080s
  Time for BDD entailment checks:        0.067s
Total time for SMT solver (w/o itp):     1.657s

Number of path formula cache hits:   127811 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.841s

Total number of created targets for pointer analysis: 382
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               993
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1501 (count: 34913, min: 0, max: 270, avg: 0.04)
Time for BDD node cleanup:                             0.022s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.677s
  Time for transition matches:                         0.308s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       144296 (count: 144296, min: 1, max: 1, avg: 1.00) [1 x 144296]

CPA algorithm statistics
------------------------
Number of iterations:            85272
Max size of waitlist:            428
Average size of waitlist:        134
Number of computed successors:   99249
Max successors for one state:    2
Number of times merged:          4703
Number of times stopped:         8085
Number of times breaked:         34

Total time for CPA algorithm:        22.124s (Max:     1.676s)
  Time for choose from waitlist:      0.219s
  Time for precision adjustment:      8.269s
  Time for transfer relation:        10.957s
  Time for merge operator:            0.663s
  Time for stop operator:             0.416s
  Time for adding to reached set:     0.495s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   34
Avg. length of target path (in blocks):                1001 (count: 34, min: 18, max: 44, avg: 29.44)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.514s
  Counterexample analysis:                             0.912s (Max:     0.055s, Calls: 34)
    Refinement sat check:                              0.627s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.036s
  Precision update:                                    0.065s
  ARG update:                                          0.447s

Length of refined path (in blocks):                     741 (count: 34, min: 12, max: 38, avg: 21.79)
Number of affected states:                              326 (count: 34, min: 1, max: 26, avg: 9.59)
Length (states) of path with itp 'true':                381 (count: 34, min: 8, max: 17, avg: 11.21)
Length (states) of path with itp non-trivial itp:       326 (count: 34, min: 1, max: 26, avg: 9.59)
Length (states) of path with itp 'false':                34 (count: 34, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           5 (count: 34, min: 0, max: 1, avg: 0.15)
Equal non-trivial interpolants along paths:             287 (count: 34, min: 0, max: 24, avg: 8.44)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                34
Number of successful refinements:     34
Number of failed refinements:         0
Max. size of reached set before ref.: 7077
Max. size of reached set after ref.:  943
Avg. size of reached set before ref.: 2926.03
Avg. size of reached set after ref.:  318.56

Total time for CEGAR algorithm:      23.932s
Time for refinements:                 1.786s
Average time for refinement:          0.052s
Max time for refinement:              0.108s

Code Coverage
-----------------------------
  Function coverage:      0.308
  Visited lines:          1302
  Total lines:            2978
  Line coverage:          0.437
  Visited conditions:     150
  Total conditions:       640
  Condition coverage:     0.234

CPAchecker general statistics
-----------------------------
Number of program locations:     4030
Number of CFA edges:             4525
Number of relevant variables:    541
Number of functions:             130
Number of loops:                 25
Size of reached set:             2029
  Number of reached locations:   381 (9%)
    Avg states per location:     5
    Max states per location:     36 (at node N217)
  Number of reached functions:   40 (31%)
  Number of partitions:          2015
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N2668 (before line 8278), Function main called from node N2642, stack depth 1 [7942a854], stack [main]])
  Number of target states:       0
  Size of final wait list        166

Time for analysis setup:          6.329s
  Time for loading CPAs:          1.092s
  Time for loading parser:        0.752s
  Time for CFA construction:      4.380s
    Time for parsing file(s):     1.181s
    Time for AST to CFA:          1.490s
    Time for CFA sanity check:    0.296s
    Time for post-processing:     1.176s
      Time for var class.:        0.579s
Time for Analysis:               23.932s
CPU time for analysis:           23.930s
Total time for CPAchecker:       30.268s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.146s

Time for Garbage Collector:       0.665s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 82MB (    78 MiB) max;     50MB (    48 MiB) avg;     85MB (    81 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     35MB (    33 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
