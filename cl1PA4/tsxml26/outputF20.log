scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4w4mx7a2/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2306072 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2195937 (95%)
  Because of loop head:            109760 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         375 (0%)
  Times precision was empty:       212307 (9%)
  Times precision was {false}:     7672 (0%)
  Times result was cached:         2060972 (89%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      25121 (1%)
  Times result was 'false':        77290 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         2233235
  BDD entailment checks:           637125
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          9
Number of abstraction locations:          331
Max number of predicates per location:    8
Avg number of predicates per location:    3
Total predicates per abstraction:         6837675
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 208.51
Number of irrelevant predicates:          3809298 (56%)
Number of preds handled by boolean abs:   48060 (1%)
  Total number of models for allsat:      25643
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.02

Time for post operator:                153.765s
  Time for path formula creation:      146.409s
Time for strengthen operator:           11.038s
Time for prec operator:                389.744s
  Time for abstraction:                359.637s (Max:     2.795s, Count: 2306072)
    Boolean abstraction:                32.762s
    Solving time:                       35.780s (Max:     0.097s)
    Model enumeration time:              2.627s
    Time for BDD construction:           0.438s (Max:     0.010s)
Time for merge operator:                11.276s
Time for coverage check:                 0.866s
  Time for BDD entailment checks:        0.527s
Total time for SMT solver (w/o itp):    38.407s

Number of path formula cache hits:   15801568 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    87.375s

Total number of created targets for pointer analysis: 351369
   Number of created targets for uf: *(void)* is 469
   Number of created targets for uf: *unsigned_short_int is 33387
   Number of created targets for uf: *(char)* is 3382
   Number of created targets for uf: *signed_int is 285
   Number of created targets for uf: *unsigned_char is 16953
   Number of created targets for uf: *(unsigned_char)* is 489
   Number of created targets for uf: *unsigned_int is 2722
   Number of created targets for uf: *(struct_device)* is 595


Number of BDD nodes:                               1514
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       50361 (count: 1048888, min: 0, max: 911, avg: 0.05)
Time for BDD node cleanup:                             0.197s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.747s
  Time for transition matches:                         9.359s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                     14210408 (count: 14210408, min: 1, max: 1, avg: 1.00) [1 x 14210408]

CPA algorithm statistics
------------------------
Number of iterations:            9667258
Max size of waitlist:            47
Average size of waitlist:        18
Number of computed successors:   10978325
Max successors for one state:    2
Number of times merged:          798055
Number of times stopped:         1225912
Number of times breaked:         375

Total time for CPA algorithm:       836.935s (Max:    12.704s)
  Time for choose from waitlist:      3.408s
  Time for precision adjustment:    474.621s
  Time for transfer relation:       283.707s
  Time for merge operator:           21.248s
  Time for stop operator:            12.583s
  Time for adding to reached set:    15.633s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   375
Avg. length of target path (in blocks):               38751 (count: 375, min: 19, max: 274, avg: 103.34)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  48.747s
  Counterexample analysis:                            27.557s (Max:     0.270s, Calls: 375)
    Refinement sat check:                             18.355s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.215s
  Precision update:                                    0.503s
  ARG update:                                         20.110s

Length of refined path (in blocks):                   30421 (count: 375, min: 12, max: 203, avg: 81.12)
Number of affected states:                            25719 (count: 375, min: 1, max: 202, avg: 68.58)
Length (states) of path with itp 'true':               4327 (count: 375, min: 0, max: 89, avg: 11.54)
Length (states) of path with itp non-trivial itp:     25719 (count: 375, min: 1, max: 202, avg: 68.58)
Length (states) of path with itp 'false':               375 (count: 375, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 375, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           25344 (count: 375, min: 0, max: 201, avg: 67.58)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                375
Number of successful refinements:     375
Number of failed refinements:         0
Max. size of reached set before ref.: 76787
Max. size of reached set after ref.:  30151
Avg. size of reached set before ref.: 28999.24
Avg. size of reached set after ref.:  3340.79

Total time for CEGAR algorithm:     893.752s
Time for refinements:                55.978s
Average time for refinement:          0.149s
Max time for refinement:              0.490s

Code Coverage
-----------------------------
  Function coverage:      0.774
  Visited lines:          2473
  Total lines:            2689
  Line coverage:          0.920
  Visited conditions:     566
  Total conditions:       630
  Condition coverage:     0.898

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             53203
  Number of reached locations:   1628 (44%)
    Avg states per location:     32
    Max states per location:     1261 (at node N102)
  Number of reached functions:   103 (77%)
  Number of partitions:          53059
    Avg size of partitions:      1
    Max size of partitions:      10 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        13

Time for analysis setup:          6.461s
  Time for loading CPAs:          1.117s
  Time for loading parser:        0.751s
  Time for CFA construction:      4.443s
    Time for parsing file(s):     1.280s
    Time for AST to CFA:          1.602s
    Time for CFA sanity check:    0.307s
    Time for post-processing:     1.025s
      Time for var class.:        0.537s
Time for Analysis:              893.752s
CPU time for analysis:          893.690s
Total time for CPAchecker:      900.220s
Total CPU time for CPAchecker:  900.140s
Time for statistics:              0.743s

Time for Garbage Collector:      88.423s (in 1512 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1037MB (   989 MiB) max;    419MB (   400 MiB) avg;   1056MB (  1008 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1124MB (  1072 MiB) max;    609MB (   581 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8429MB (  8039 MiB) max;   8258MB (  7876 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
