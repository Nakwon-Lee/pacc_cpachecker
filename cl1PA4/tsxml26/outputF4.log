scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_p1q0pb08/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2151337 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2037879 (95%)
  Because of loop head:            113057 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         401 (0%)
  Times precision was empty:       188133 (9%)
  Times precision was {false}:     6534 (0%)
  Times result was cached:         1934390 (90%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22280 (1%)
  Times result was 'false':        90722 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2314829
  BDD entailment checks:           774409
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          10
Number of abstraction locations:          331
Max number of predicates per location:    9
Avg number of predicates per location:    3
Total predicates per abstraction:         7085041
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 245.89
Number of irrelevant predicates:          3594213 (51%)
Number of preds handled by boolean abs:   47188 (1%)
  Total number of models for allsat:      25048
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.12

Time for post operator:                144.383s
  Time for path formula creation:      136.722s
Time for strengthen operator:           11.023s
Time for prec operator:                408.701s
  Time for abstraction:                379.873s (Max:     3.219s, Count: 2151337)
    Boolean abstraction:                28.875s
    Solving time:                       29.691s (Max:     0.089s)
    Model enumeration time:              2.655s
    Time for BDD construction:           0.534s (Max:     0.013s)
Time for merge operator:                10.964s
Time for coverage check:                 1.121s
  Time for BDD entailment checks:        0.814s
Total time for SMT solver (w/o itp):    32.346s

Number of path formula cache hits:   14606779 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    83.189s

Total number of created targets for pointer analysis: 321446
   Number of created targets for uf: *unsigned_short_int is 4358
   Number of created targets for uf: *(void)* is 720
   Number of created targets for uf: *(char)* is 7204
   Number of created targets for uf: *signed_int is 365
   Number of created targets for uf: *unsigned_char is 11452
   Number of created targets for uf: *(unsigned_char)* is 653
   Number of created targets for uf: *unsigned_int is 1852
   Number of created targets for uf: *(struct_device)* is 463


Number of BDD nodes:                               2736
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       45025 (count: 1142739, min: 0, max: 1419, avg: 0.04)
Time for BDD node cleanup:                             0.203s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 19.035s
  Time for transition matches:                         9.636s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     13163792 (count: 13163792, min: 1, max: 1, avg: 1.00) [1 x 13163792]

CPA algorithm statistics
------------------------
Number of iterations:            8862062
Max size of waitlist:            442
Average size of waitlist:        157
Number of computed successors:   10123718
Max successors for one state:    2
Number of times merged:          770210
Number of times stopped:         1119237
Number of times breaked:         401

Total time for CPA algorithm:       831.240s (Max:    13.386s)
  Time for choose from waitlist:      4.681s
  Time for precision adjustment:    482.138s
  Time for transfer relation:       269.480s
  Time for merge operator:           20.441s
  Time for stop operator:            11.690s
  Time for adding to reached set:    18.192s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   401
Avg. length of target path (in blocks):               40771 (count: 401, min: 19, max: 194, avg: 101.67)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  52.271s
  Counterexample analysis:                            28.951s (Max:     0.189s, Calls: 401)
    Refinement sat check:                             19.726s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.026s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.247s
  Precision update:                                    0.558s
  ARG update:                                         22.152s

Length of refined path (in blocks):                   34612 (count: 401, min: 12, max: 190, avg: 86.31)
Number of affected states:                            24394 (count: 401, min: 1, max: 189, avg: 60.83)
Length (states) of path with itp 'true':               9817 (count: 401, min: 0, max: 102, avg: 24.48)
Length (states) of path with itp non-trivial itp:     24394 (count: 401, min: 1, max: 189, avg: 60.83)
Length (states) of path with itp 'false':               401 (count: 401, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 401, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           23993 (count: 401, min: 0, max: 188, avg: 59.83)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                401
Number of successful refinements:     401
Number of failed refinements:         0
Max. size of reached set before ref.: 106366
Max. size of reached set after ref.:  34233
Avg. size of reached set before ref.: 26973.04
Avg. size of reached set after ref.:  4872.40

Total time for CEGAR algorithm:     894.189s
Time for refinements:                61.224s
Average time for refinement:          0.152s
Max time for refinement:              2.266s

Code Coverage
-----------------------------
  Function coverage:      0.767
  Visited lines:          2399
  Total lines:            2689
  Line coverage:          0.892
  Visited conditions:     542
  Total conditions:       630
  Condition coverage:     0.860

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             51404
  Number of reached locations:   1566 (42%)
    Avg states per location:     32
    Max states per location:     988 (at node N103)
  Number of reached functions:   102 (77%)
  Number of partitions:          51243
    Avg size of partitions:      1
    Max size of partitions:      14 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        96

Time for analysis setup:          6.075s
  Time for loading CPAs:          0.974s
  Time for loading parser:        0.712s
  Time for CFA construction:      4.279s
    Time for parsing file(s):     1.196s
    Time for AST to CFA:          1.589s
    Time for CFA sanity check:    0.295s
    Time for post-processing:     0.965s
      Time for var class.:        0.481s
Time for Analysis:              894.190s
CPU time for analysis:          894.130s
Total time for CPAchecker:      900.273s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.769s

Time for Garbage Collector:      94.744s (in 1181 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1204MB (  1149 MiB) max;    471MB (   449 MiB) avg;   1230MB (  1173 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1239MB (  1181 MiB) max;    684MB (   653 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8423MB (  8033 MiB) max;   8236MB (  7854 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
