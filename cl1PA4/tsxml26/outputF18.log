scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_x3c2jm8i/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2250742 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2133095 (95%)
  Because of loop head:            117242 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         405 (0%)
  Times precision was empty:       189838 (8%)
  Times precision was {false}:     6609 (0%)
  Times result was cached:         2031359 (90%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22936 (1%)
  Times result was 'false':        94137 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2415663
  BDD entailment checks:           808265
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          10
Number of abstraction locations:          331
Max number of predicates per location:    9
Avg number of predicates per location:    3
Total predicates per abstraction:         7459435
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 252.48
Number of irrelevant predicates:          3729720 (50%)
Number of preds handled by boolean abs:   48711 (1%)
  Total number of models for allsat:      25718
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.12

Time for post operator:                139.877s
  Time for path formula creation:      132.264s
Time for strengthen operator:           10.670s
Time for prec operator:                415.568s
  Time for abstraction:                386.069s (Max:     3.224s, Count: 2250742)
    Boolean abstraction:                29.355s
    Solving time:                       29.976s (Max:     0.097s)
    Model enumeration time:              2.823s
    Time for BDD construction:           0.486s (Max:     0.011s)
Time for merge operator:                11.342s
Time for coverage check:                 1.109s
  Time for BDD entailment checks:        0.782s
Total time for SMT solver (w/o itp):    32.799s

Number of path formula cache hits:   15270659 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    79.559s

Total number of created targets for pointer analysis: 347681
   Number of created targets for uf: *unsigned_short_int is 4829
   Number of created targets for uf: *(void)* is 735
   Number of created targets for uf: *(char)* is 7288
   Number of created targets for uf: *signed_int is 377
   Number of created targets for uf: *unsigned_char is 12913
   Number of created targets for uf: *(unsigned_char)* is 662
   Number of created targets for uf: *unsigned_int is 2152
   Number of created targets for uf: *(struct_device)* is 520


Number of BDD nodes:                               2738
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       46307 (count: 1183153, min: 0, max: 1106, avg: 0.04)
Time for BDD node cleanup:                             0.253s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.471s
  Time for transition matches:                         9.811s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.005s
Automaton transfers with branching:                0
Automaton transfer successors:                     13767027 (count: 13767027, min: 1, max: 1, avg: 1.00) [1 x 13767027]

CPA algorithm statistics
------------------------
Number of iterations:            9270119
Max size of waitlist:            442
Average size of waitlist:        157
Number of computed successors:   10586971
Max successors for one state:    2
Number of times merged:          803699
Number of times stopped:         1169993
Number of times breaked:         405

Total time for CPA algorithm:       831.423s (Max:    12.926s)
  Time for choose from waitlist:      4.648s
  Time for precision adjustment:    486.880s
  Time for transfer relation:       264.197s
  Time for merge operator:           21.252s
  Time for stop operator:            11.322s
  Time for adding to reached set:    19.578s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   405
Avg. length of target path (in blocks):               41558 (count: 405, min: 19, max: 198, avg: 102.61)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  51.917s
  Counterexample analysis:                            29.315s (Max:     0.196s, Calls: 405)
    Refinement sat check:                             19.807s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.044s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.239s
  Precision update:                                    0.418s
  ARG update:                                         21.582s

Length of refined path (in blocks):                   35271 (count: 405, min: 12, max: 190, avg: 87.09)
Number of affected states:                            25049 (count: 405, min: 1, max: 189, avg: 61.85)
Length (states) of path with itp 'true':               9817 (count: 405, min: 0, max: 102, avg: 24.24)
Length (states) of path with itp non-trivial itp:     25049 (count: 405, min: 1, max: 189, avg: 61.85)
Length (states) of path with itp 'false':               405 (count: 405, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 405, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           24644 (count: 405, min: 0, max: 188, avg: 60.85)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                405
Number of successful refinements:     405
Number of failed refinements:         0
Max. size of reached set before ref.: 106366
Max. size of reached set after ref.:  34233
Avg. size of reached set before ref.: 27645.98
Avg. size of reached set after ref.:  4824.31

Total time for CEGAR algorithm:     893.867s
Time for refinements:                60.826s
Average time for refinement:          0.150s
Max time for refinement:              1.511s

Code Coverage
-----------------------------
  Function coverage:      0.767
  Visited lines:          2423
  Total lines:            2689
  Line coverage:          0.901
  Visited conditions:     550
  Total conditions:       630
  Condition coverage:     0.873

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             80064
  Number of reached locations:   1592 (43%)
    Avg states per location:     50
    Max states per location:     1722 (at node N103)
  Number of reached functions:   102 (77%)
  Number of partitions:          79845
    Avg size of partitions:      1
    Max size of partitions:      18 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        208

Time for analysis setup:          6.416s
  Time for loading CPAs:          1.091s
  Time for loading parser:        0.720s
  Time for CFA construction:      4.448s
    Time for parsing file(s):     1.171s
    Time for AST to CFA:          1.561s
    Time for CFA sanity check:    0.294s
    Time for post-processing:     1.197s
      Time for var class.:        0.471s
Time for Analysis:              893.867s
CPU time for analysis:          893.780s
Total time for CPAchecker:      900.289s
Total CPU time for CPAchecker:  900.180s
Time for statistics:              1.066s

Time for Garbage Collector:      97.831s (in 1215 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1146MB (  1093 MiB) max;    477MB (   455 MiB) avg;   1170MB (  1116 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1177MB (  1123 MiB) max;    694MB (   662 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8424MB (  8034 MiB) max;   8248MB (  7866 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
