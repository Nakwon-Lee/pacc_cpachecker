scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_gwwnfdod/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            772824 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  739147 (96%)
  Because of loop head:            33418 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         259 (0%)
  Times precision was empty:       56191 (7%)
  Times precision was {false}:     13322 (2%)
  Times result was cached:         685782 (89%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17529 (2%)
  Times result was 'false':        21950 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         793916
  BDD entailment checks:           171834
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          9
Number of abstraction locations:          331
Max number of predicates per location:    8
Avg number of predicates per location:    3
Total predicates per abstraction:         2451704
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 79.47
Number of irrelevant predicates:          1063037 (43%)
Number of preds handled by boolean abs:   33288 (1%)
  Total number of models for allsat:      18039
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.03

Time for post operator:                117.657s
  Time for path formula creation:      115.440s
Time for strengthen operator:            4.890s
Time for prec operator:                186.349s
  Time for abstraction:                174.810s (Max:     0.335s, Count: 772824)
    Boolean abstraction:                24.189s
    Solving time:                       36.794s (Max:     0.094s)
    Model enumeration time:              1.992s
    Time for BDD construction:           0.434s (Max:     0.012s)
Time for merge operator:                 8.650s
Time for coverage check:                 0.338s
  Time for BDD entailment checks:        0.258s
Total time for SMT solver (w/o itp):    38.786s

Number of path formula cache hits:   4410680 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    97.066s

Total number of created targets for pointer analysis: 416863
   Number of created targets for uf: *(void)* is 207
   Number of created targets for uf: *unsigned_short_int is 12095
   Number of created targets for uf: *signed_int is 121
   Number of created targets for uf: *unsigned_char is 23737
   Number of created targets for uf: *(unsigned_char)* is 373
   Number of created targets for uf: *unsigned_int is 1844
   Number of created targets for uf: *(struct_device)* is 869


Number of BDD nodes:                               883
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       34880 (count: 403651, min: 0, max: 958, avg: 0.09)
Time for BDD node cleanup:                             0.122s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.635s
  Time for transition matches:                         3.636s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      4985831 (count: 4985831, min: 1, max: 1, avg: 1.00) [1 x 4985831]

CPA algorithm statistics
------------------------
Number of iterations:            3375641
Max size of waitlist:            453
Average size of waitlist:        185
Number of computed successors:   3902164
Max successors for one state:    2
Number of times merged:          311041
Number of times stopped:         443485
Number of times breaked:         259

Total time for CPA algorithm:       420.958s (Max:     4.840s)
  Time for choose from waitlist:      1.742s
  Time for precision adjustment:    214.316s
  Time for transfer relation:       169.242s
  Time for merge operator:           13.152s
  Time for stop operator:             5.035s
  Time for adding to reached set:     6.905s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   259
Avg. length of target path (in blocks):               50901 (count: 259, min: 31, max: 406, avg: 196.53)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  49.987s
  Counterexample analysis:                            42.181s (Max:     0.613s, Calls: 259)
    Refinement sat check:                             24.645s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.041s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.379s
  Precision update:                                    0.221s
  ARG update:                                          6.810s

Length of refined path (in blocks):                   41760 (count: 259, min: 12, max: 295, avg: 161.24)
Number of affected states:                            41197 (count: 259, min: 1, max: 294, avg: 159.06)
Length (states) of path with itp 'true':                304 (count: 259, min: 0, max: 138, avg: 1.17)
Length (states) of path with itp non-trivial itp:     41197 (count: 259, min: 1, max: 294, avg: 159.06)
Length (states) of path with itp 'false':               259 (count: 259, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 259, min: 0, max: 1, avg: 0.00)
Equal non-trivial interpolants along paths:           40937 (count: 259, min: 0, max: 293, avg: 158.06)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                259
Number of successful refinements:     259
Number of failed refinements:         0
Max. size of reached set before ref.: 25614
Max. size of reached set after ref.:  3862
Avg. size of reached set before ref.: 13177.37
Avg. size of reached set after ref.:  34.76

Total time for CEGAR algorithm:     476.361s
Time for refinements:                55.364s
Average time for refinement:          0.213s
Max time for refinement:              2.165s

Code Coverage
-----------------------------
  Function coverage:      0.767
  Visited lines:          2422
  Total lines:            2689
  Line coverage:          0.901
  Visited conditions:     550
  Total conditions:       630
  Condition coverage:     0.873

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             32795
  Number of reached locations:   1592 (43%)
    Avg states per location:     20
    Max states per location:     779 (at node N102)
  Number of reached functions:   102 (77%)
  Number of partitions:          32766
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.344s
  Time for loading CPAs:          1.050s
  Time for loading parser:        0.759s
  Time for CFA construction:      4.378s
    Time for parsing file(s):     1.131s
    Time for AST to CFA:          1.551s
    Time for CFA sanity check:    0.353s
    Time for post-processing:     1.162s
      Time for var class.:        0.511s
Time for Analysis:              476.361s
CPU time for analysis:          476.300s
Time for analyzing result:        0.035s
Total time for CPAchecker:      482.710s
Total CPU time for CPAchecker:  482.620s
Time for statistics:              0.670s

Time for Garbage Collector:      27.584s (in 557 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                779MB (   743 MiB) max;    373MB (   356 MiB) avg;    793MB (   757 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    40 MiB) peak
Allocated heap memory:           892MB (   851 MiB) max;    566MB (   539 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8494MB (  8101 MiB) max;   8274MB (  7891 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
