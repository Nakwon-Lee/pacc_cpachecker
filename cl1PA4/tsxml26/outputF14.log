scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0llxddzf/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1124639 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1069080 (95%)
  Because of loop head:            55246 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         313 (0%)
  Times precision was empty:       135248 (12%)
  Times precision was {false}:     9186 (1%)
  Times result was cached:         959674 (85%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      20531 (2%)
  Times result was 'false':        45636 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         1069497
  BDD entailment checks:           282533
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          10
Number of abstraction locations:          331
Max number of predicates per location:    9
Avg number of predicates per location:    3
Total predicates per abstraction:         3582997
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 120.57
Number of irrelevant predicates:          1521612 (42%)
Number of preds handled by boolean abs:   39267 (1%)
  Total number of models for allsat:      21275
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.04

Time for post operator:                102.261s
  Time for path formula creation:       98.300s
Time for strengthen operator:            6.174s
Time for prec operator:                234.982s
  Time for abstraction:                220.186s (Max:     1.869s, Count: 1124639)
    Boolean abstraction:                28.623s
    Solving time:                       34.537s (Max:     0.093s)
    Model enumeration time:              2.396s
    Time for BDD construction:           0.393s (Max:     0.008s)
Time for merge operator:                 7.148s
Time for coverage check:                 0.544s
  Time for BDD entailment checks:        0.384s
Total time for SMT solver (w/o itp):    36.933s

Number of path formula cache hits:   7078910 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    74.399s

Total number of created targets for pointer analysis: 315369
   Number of created targets for uf: *(void)* is 596
   Number of created targets for uf: *unsigned_short_int is 27350
   Number of created targets for uf: *(char)* is 1618
   Number of created targets for uf: *signed_int is 173
   Number of created targets for uf: *unsigned_char is 15870
   Number of created targets for uf: *(unsigned_char)* is 449
   Number of created targets for uf: *unsigned_int is 2142
   Number of created targets for uf: *(struct_device)* is 309


Number of BDD nodes:                               1554
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       41232 (count: 595659, min: 0, max: 740, avg: 0.07)
Time for BDD node cleanup:                             0.155s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  9.585s
  Time for transition matches:                         5.360s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                      6842857 (count: 6842857, min: 1, max: 1, avg: 1.00) [1 x 6842857]

CPA algorithm statistics
------------------------
Number of iterations:            4664552
Max size of waitlist:            47
Average size of waitlist:        18
Number of computed successors:   5309938
Max successors for one state:    2
Number of times merged:          393482
Number of times stopped:         591544
Number of times breaked:         313

Total time for CPA algorithm:       479.808s (Max:     5.544s)
  Time for choose from waitlist:      2.223s
  Time for precision adjustment:    268.138s
  Time for transfer relation:       169.317s
  Time for merge operator:           12.217s
  Time for stop operator:             6.438s
  Time for adding to reached set:     8.537s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   313
Avg. length of target path (in blocks):               40522 (count: 313, min: 19, max: 285, avg: 129.46)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  41.037s
  Counterexample analysis:                            30.744s (Max:     0.319s, Calls: 313)
    Refinement sat check:                             19.812s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.033s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.391s
  Precision update:                                    0.298s
  ARG update:                                          9.197s

Length of refined path (in blocks):                   33053 (count: 313, min: 12, max: 231, avg: 105.60)
Number of affected states:                            32072 (count: 313, min: 1, max: 230, avg: 102.47)
Length (states) of path with itp 'true':                668 (count: 313, min: 0, max: 92, avg: 2.13)
Length (states) of path with itp non-trivial itp:     32072 (count: 313, min: 1, max: 230, avg: 102.47)
Length (states) of path with itp 'false':               313 (count: 313, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 313, min: 0, max: 1, avg: 0.00)
Equal non-trivial interpolants along paths:           31758 (count: 313, min: 0, max: 229, avg: 101.46)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                313
Number of successful refinements:     313
Number of failed refinements:         0
Max. size of reached set before ref.: 39435
Max. size of reached set after ref.:  30546
Avg. size of reached set before ref.: 14956.74
Avg. size of reached set after ref.:  137.79

Total time for CEGAR algorithm:     524.336s
Time for refinements:                44.477s
Average time for refinement:          0.142s
Max time for refinement:              0.406s

Code Coverage
-----------------------------
  Function coverage:      0.767
  Visited lines:          2422
  Total lines:            2689
  Line coverage:          0.901
  Visited conditions:     550
  Total conditions:       630
  Condition coverage:     0.873

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             34428
  Number of reached locations:   1592 (43%)
    Avg states per location:     21
    Max states per location:     796 (at node N102)
  Number of reached functions:   102 (77%)
  Number of partitions:          34387
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.213s
  Time for loading CPAs:          1.154s
  Time for loading parser:        0.687s
  Time for CFA construction:      4.208s
    Time for parsing file(s):     1.134s
    Time for AST to CFA:          1.566s
    Time for CFA sanity check:    0.263s
    Time for post-processing:     0.999s
      Time for var class.:        0.506s
Time for Analysis:              524.336s
CPU time for analysis:          524.260s
Time for analyzing result:        0.039s
Total time for CPAchecker:      530.562s
Total CPU time for CPAchecker:  530.470s
Time for statistics:              0.651s

Time for Garbage Collector:      35.065s (in 767 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                847MB (   807 MiB) max;    367MB (   350 MiB) avg;    850MB (   810 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           872MB (   832 MiB) max;    532MB (   507 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8361MB (  7974 MiB) max;   8222MB (  7841 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
