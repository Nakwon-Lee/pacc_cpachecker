scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8qaxs3_o/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            18760 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  17652 (94%)
  Because of loop head:            1093 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         15 (0%)
  Times precision was empty:       17526 (93%)
  Times precision was {false}:     226 (1%)
  Times result was cached:         975 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      33 (0%)
  Times result was 'false':        329 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         17648
  BDD entailment checks:           2894
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          4
Number of abstraction locations:          16
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         1626
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 6.28
Number of irrelevant predicates:          1244 (77%)
Number of preds handled by boolean abs:   51 (3%)
  Total number of models for allsat:      69
  Max number of models for allsat:        8
  Avg number of models for allsat:        2.09

Time for post operator:                 11.337s
  Time for path formula creation:       11.143s
Time for strengthen operator:            0.285s
Time for prec operator:                  2.223s
  Time for abstraction:                  1.472s (Max:     0.039s, Count: 18760)
    Boolean abstraction:                 0.202s
    Solving time:                        0.243s (Max:     0.021s)
    Model enumeration time:              0.022s
    Time for BDD construction:           0.013s (Max:     0.005s)
Time for merge operator:                 0.709s
Time for coverage check:                 0.058s
  Time for BDD entailment checks:        0.051s
Total time for SMT solver (w/o itp):     0.265s

Number of path formula cache hits:   67672 (53%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    10.426s

Total number of created targets for pointer analysis: 10027
   Number of created targets for uf: *unsigned_short_int is 661
   Number of created targets for uf: *(char)* is 673
   Number of created targets for uf: *unsigned_char is 199
   Number of created targets for uf: *unsigned_int is 673


Number of BDD nodes:                               226
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          95 (count: 21831, min: 0, max: 22, avg: 0.00)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.566s
  Time for transition matches:                         0.243s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       115894 (count: 115894, min: 1, max: 1, avg: 1.00) [1 x 115894]

CPA algorithm statistics
------------------------
Number of iterations:            73340
Max size of waitlist:            120
Average size of waitlist:        75
Number of computed successors:   84618
Max successors for one state:    2
Number of times merged:          7377
Number of times stopped:         9574
Number of times breaked:         15

Total time for CPA algorithm:        22.355s (Max:     3.090s)
  Time for choose from waitlist:      0.208s
  Time for precision adjustment:      3.827s
  Time for transfer relation:        15.199s
  Time for merge operator:            1.156s
  Time for stop operator:             0.417s
  Time for adding to reached set:     0.326s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   15
Avg. length of target path (in blocks):                 472 (count: 15, min: 26, max: 39, avg: 31.47)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.193s
  Counterexample analysis:                             0.752s (Max:     0.077s, Calls: 15)
    Refinement sat check:                              0.556s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.038s
  ARG update:                                          0.344s

Length of refined path (in blocks):                     180 (count: 15, min: 12, max: 12, avg: 12.00)
Number of affected states:                               15 (count: 15, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                150 (count: 15, min: 10, max: 10, avg: 10.00)
Length (states) of path with itp non-trivial itp:        15 (count: 15, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                15 (count: 15, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 15, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 15, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                15
Number of successful refinements:     15
Number of failed refinements:         0
Max. size of reached set before ref.: 5967
Max. size of reached set after ref.:  53
Avg. size of reached set before ref.: 4737.13
Avg. size of reached set after ref.:  53.00

Total time for CEGAR algorithm:      23.770s
Time for refinements:                 1.411s
Average time for refinement:          0.094s
Max time for refinement:              0.213s

Code Coverage
-----------------------------
  Function coverage:      0.534
  Visited lines:          1808
  Total lines:            2689
  Line coverage:          0.672
  Visited conditions:     324
  Total conditions:       630
  Condition coverage:     0.514

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             4454
  Number of reached locations:   858 (23%)
    Avg states per location:     5
    Max states per location:     80 (at node N153)
  Number of reached functions:   71 (53%)
  Number of partitions:          4451
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        82

Time for analysis setup:          6.481s
  Time for loading CPAs:          1.055s
  Time for loading parser:        0.718s
  Time for CFA construction:      4.542s
    Time for parsing file(s):     1.192s
    Time for AST to CFA:          1.673s
    Time for CFA sanity check:    0.315s
    Time for post-processing:     1.125s
      Time for var class.:        0.564s
Time for Analysis:               23.770s
CPU time for analysis:           23.770s
Total time for CPAchecker:       30.256s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.186s

Time for Garbage Collector:       0.893s (in 44 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 97MB (    93 MiB) max;     56MB (    53 MiB) avg;    102MB (    97 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
