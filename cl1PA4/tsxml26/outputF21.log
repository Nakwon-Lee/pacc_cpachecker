scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_f5v162ew/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2094718 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1992381 (95%)
  Because of loop head:            101679 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         658 (0%)
  Times precision was empty:       146796 (7%)
  Times precision was {false}:     6867 (0%)
  Times result was cached:         1915012 (91%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      26043 (1%)
  Times result was 'false':        74844 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2028524
  BDD entailment checks:           559564
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          10
Number of abstraction locations:          331
Max number of predicates per location:    9
Avg number of predicates per location:    3
Total predicates per abstraction:         6984782
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 212.24
Number of irrelevant predicates:          3815981 (55%)
Number of preds handled by boolean abs:   59114 (1%)
  Total number of models for allsat:      29154
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.12

Time for post operator:                165.800s
  Time for path formula creation:      160.738s
Time for strengthen operator:           10.766s
Time for prec operator:                378.403s
  Time for abstraction:                348.903s (Max:     2.047s, Count: 2094718)
    Boolean abstraction:                36.237s
    Solving time:                       36.442s (Max:     0.091s)
    Model enumeration time:              3.460s
    Time for BDD construction:           0.545s (Max:     0.012s)
Time for merge operator:                13.043s
Time for coverage check:                 0.852s
  Time for BDD entailment checks:        0.610s
Total time for SMT solver (w/o itp):    39.902s

Number of path formula cache hits:   13918529 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    99.637s

Total number of created targets for pointer analysis: 432535
   Number of created targets for uf: *(void)* is 797
   Number of created targets for uf: *unsigned_short_int is 42427
   Number of created targets for uf: *(char)* is 5944
   Number of created targets for uf: *signed_int is 329
   Number of created targets for uf: *unsigned_char is 22807
   Number of created targets for uf: *(unsigned_char)* is 874
   Number of created targets for uf: *unsigned_int is 3622
   Number of created targets for uf: *(struct_device)* is 629


Number of BDD nodes:                               2236
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       52544 (count: 905891, min: 0, max: 1166, avg: 0.06)
Time for BDD node cleanup:                             0.136s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 21.246s
  Time for transition matches:                         9.480s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                     12896704 (count: 12896704, min: 1, max: 1, avg: 1.00) [1 x 12896704]

CPA algorithm statistics
------------------------
Number of iterations:            8741938
Max size of waitlist:            117
Average size of waitlist:        33
Number of computed successors:   9951607
Max successors for one state:    2
Number of times merged:          734480
Number of times stopped:         1114224
Number of times breaked:         658

Total time for CPA algorithm:       811.981s (Max:    13.419s)
  Time for choose from waitlist:      3.170s
  Time for precision adjustment:    447.142s
  Time for transfer relation:       292.273s
  Time for merge operator:           21.981s
  Time for stop operator:            10.519s
  Time for adding to reached set:    13.340s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   658
Avg. length of target path (in blocks):               56149 (count: 658, min: 19, max: 271, avg: 85.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  59.355s
  Counterexample analysis:                            38.515s (Max:     0.276s, Calls: 658)
    Refinement sat check:                             26.794s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.038s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.235s
  Precision update:                                    0.662s
  ARG update:                                         19.433s

Length of refined path (in blocks):                   47963 (count: 658, min: 12, max: 228, avg: 72.89)
Number of affected states:                            24369 (count: 658, min: 1, max: 227, avg: 37.03)
Length (states) of path with itp 'true':              22936 (count: 658, min: 0, max: 102, avg: 34.86)
Length (states) of path with itp non-trivial itp:     24369 (count: 658, min: 1, max: 227, avg: 37.03)
Length (states) of path with itp 'false':               658 (count: 658, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 658, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           23711 (count: 658, min: 0, max: 226, avg: 36.03)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                658
Number of successful refinements:     658
Number of failed refinements:         0
Max. size of reached set before ref.: 97570
Max. size of reached set after ref.:  41564
Avg. size of reached set before ref.: 26629.36
Avg. size of reached set after ref.:  13400.48

Total time for CEGAR algorithm:     894.181s
Time for refinements:                74.679s
Average time for refinement:          0.113s
Max time for refinement:              0.616s

Code Coverage
-----------------------------
  Function coverage:      0.774
  Visited lines:          2467
  Total lines:            2689
  Line coverage:          0.917
  Visited conditions:     566
  Total conditions:       630
  Condition coverage:     0.898

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             57930
  Number of reached locations:   1622 (44%)
    Avg states per location:     35
    Max states per location:     1374 (at node N102)
  Number of reached functions:   103 (77%)
  Number of partitions:          57795
    Avg size of partitions:      1
    Max size of partitions:      11 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        82

Time for analysis setup:          6.075s
  Time for loading CPAs:          1.062s
  Time for loading parser:        0.649s
  Time for CFA construction:      4.244s
    Time for parsing file(s):     1.107s
    Time for AST to CFA:          1.519s
    Time for CFA sanity check:    0.301s
    Time for post-processing:     1.079s
      Time for var class.:        0.515s
Time for Analysis:              894.181s
CPU time for analysis:          894.090s
Total time for CPAchecker:      900.260s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              0.866s

Time for Garbage Collector:      88.633s (in 1304 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1129MB (  1076 MiB) max;    456MB (   435 MiB) avg;   1197MB (  1142 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1303MB (  1243 MiB) max;    670MB (   639 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8558MB (  8162 MiB) max;   8262MB (  7879 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
