scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.16-rc1/43_2a_consumption_linux-3.16-rc1.tar.xz-43_2a-drivers--net--usb--pegasus.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ylhga_0l/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8510: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_reset_resume_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8457: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            18662 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  16738 (90%)
  Because of loop head:            1896 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (0%)
  Times precision was empty:       14381 (77%)
  Times precision was {false}:     626 (3%)
  Times result was cached:         3493 (19%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      162 (1%)
  Times result was 'false':        1018 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         19535
  BDD entailment checks:           3289
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       49
Number of predicates discovered:          6
Number of abstraction locations:          60
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         6886
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 8.74
Number of irrelevant predicates:          5345 (78%)
Number of preds handled by boolean abs:   249 (4%)
  Total number of models for allsat:      224
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.38

Time for post operator:                  8.436s
  Time for path formula creation:        8.236s
Time for strengthen operator:            0.277s
Time for prec operator:                  4.790s
  Time for abstraction:                  4.012s (Max:     0.107s, Count: 18662)
    Boolean abstraction:                 0.725s
    Solving time:                        0.825s (Max:     0.101s)
    Model enumeration time:              0.097s
    Time for BDD construction:           0.067s (Max:     0.012s)
Time for merge operator:                 0.586s
Time for coverage check:                 0.060s
  Time for BDD entailment checks:        0.051s
Total time for SMT solver (w/o itp):     0.922s

Number of path formula cache hits:   94739 (70%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.476s

Total number of created targets for pointer analysis: 5433
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *unsigned_short_int is 521
   Number of created targets for uf: *(char)* is 526
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_char is 145
   Number of created targets for uf: *unsigned_int is 544


Number of BDD nodes:                               260
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         407 (count: 21997, min: 0, max: 124, avg: 0.02)
Time for BDD node cleanup:                             0.033s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.575s
  Time for transition matches:                         0.300s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                       119026 (count: 119026, min: 1, max: 1, avg: 1.00) [1 x 119026]

CPA algorithm statistics
------------------------
Number of iterations:            75946
Max size of waitlist:            125
Average size of waitlist:        55
Number of computed successors:   89279
Max successors for one state:    2
Number of times merged:          8123
Number of times stopped:         10076
Number of times breaked:         28

Total time for CPA algorithm:        21.700s (Max:     2.377s)
  Time for choose from waitlist:      0.236s
  Time for precision adjustment:      6.339s
  Time for transfer relation:        12.155s
  Time for merge operator:            1.071s
  Time for stop operator:             0.406s
  Time for adding to reached set:     0.461s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   28
Avg. length of target path (in blocks):                 829 (count: 28, min: 19, max: 41, avg: 29.61)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.873s
  Counterexample analysis:                             1.297s (Max:     0.065s, Calls: 28)
    Refinement sat check:                              1.000s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.040s
  Precision update:                                    0.037s
  ARG update:                                          0.451s

Length of refined path (in blocks):                     491 (count: 28, min: 12, max: 39, avg: 17.54)
Number of affected states:                              203 (count: 28, min: 1, max: 38, avg: 7.25)
Length (states) of path with itp 'true':                260 (count: 28, min: 0, max: 10, avg: 9.29)
Length (states) of path with itp non-trivial itp:       203 (count: 28, min: 1, max: 38, avg: 7.25)
Length (states) of path with itp 'false':                28 (count: 28, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 28, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             175 (count: 28, min: 0, max: 37, avg: 6.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     28
Number of failed refinements:         0
Max. size of reached set before ref.: 3634
Max. size of reached set after ref.:  53
Avg. size of reached set before ref.: 2748.89
Avg. size of reached set after ref.:  49.43

Total time for CEGAR algorithm:      23.791s
Time for refinements:                 2.090s
Average time for refinement:          0.074s
Max time for refinement:              0.124s

Code Coverage
-----------------------------
  Function coverage:      0.391
  Visited lines:          1571
  Total lines:            2689
  Line coverage:          0.584
  Visited conditions:     258
  Total conditions:       630
  Condition coverage:     0.410

CPAchecker general statistics
-----------------------------
Number of program locations:     3701
Number of CFA edges:             4138
Number of relevant variables:    547
Number of functions:             133
Number of loops:                 9
Size of reached set:             2600
  Number of reached locations:   654 (18%)
    Avg states per location:     3
    Max states per location:     67 (at node N154)
  Number of reached functions:   52 (39%)
  Number of partitions:          2590
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N2177 (before line 8524), Function main called from node N2130, stack depth 1 [17f2dd85], stack [main]])
  Number of target states:       0
  Size of final wait list        92

Time for analysis setup:          6.475s
  Time for loading CPAs:          1.160s
  Time for loading parser:        0.671s
  Time for CFA construction:      4.486s
    Time for parsing file(s):     1.201s
    Time for AST to CFA:          1.639s
    Time for CFA sanity check:    0.304s
    Time for post-processing:     1.121s
      Time for var class.:        0.529s
Time for Analysis:               23.791s
CPU time for analysis:           23.780s
Total time for CPAchecker:       30.271s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.188s

Time for Garbage Collector:       0.715s (in 42 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 81MB (    78 MiB) max;     52MB (    50 MiB) avg;     85MB (    82 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
