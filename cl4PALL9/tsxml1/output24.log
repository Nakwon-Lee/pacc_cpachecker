scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---sound--drivers--vx--snd-vx-lib.ko_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xj2a0bql/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 5948: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 6793: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 6853: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8371: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8401: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8459: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8465: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8466: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8473: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8474: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8475: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8482: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8483: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8484: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8485: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8492: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8493: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8494: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8495: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8496: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8502: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8503: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8504: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8505: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8506: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8507: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 8553: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8583: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8641: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8647: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8648: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8655: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8656: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8657: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8664: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8665: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8666: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8667: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8674: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8675: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8676: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8677: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8678: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8684: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8685: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8686: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8687: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8688: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8689: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 4581: Function pointer *(chip->ops->in8) with type unsigned char (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10580: Function pointer *(chip->ops->in32) with type unsigned int (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4592: Function pointer *(chip->ops->out8) with type void (*)(struct vx_core *, int, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10591: Function pointer *(chip->ops->out32) with type void (*)(struct vx_core *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5733: Function pointer *(chip->ops->load_dsp) with type int (*)(struct vx_core *, int, const struct firmware *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6184: Function pointer *(chip->ops->load_dsp) with type int (*)(struct vx_core *, int, const struct firmware *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8962: Function pointer *(chip->ops->change_audio_source) with type void (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10834: Function pointer *(chip->ops->set_clock_source) with type void (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6388: Function pointer *(chip->ops->dma_read) with type void (*)(struct vx_core *, struct snd_pcm_runtime *, struct vx_pipe *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6376: Function pointer *(chip->ops->dma_write) with type void (*)(struct vx_core *, struct snd_pcm_runtime *, struct vx_pipe *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5436: Function pointer *(chip->ops->reset_board) with type void (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8856: Function pointer *(chip->ops->akm_write) with type void (*)(struct vx_core *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8857: Function pointer *(chip->ops->akm_write) with type void (*)(struct vx_core *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8880: Function pointer *(chip->ops->akm_write) with type void (*)(struct vx_core *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4570: Function pointer *(chip->ops->validate_irq) with type void (*)(struct vx_core *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8823: Function pointer *(chip->ops->write_codec) with type void (*)(struct vx_core *, int, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5897: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8365: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(608UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_after_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_hw_constraint_step to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5900: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8547: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(608UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            414 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            174 (42%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         240 (58%)
  Times precision was empty:       236 (57%)
  Times precision was {false}:     138 (33%)
  Times result was cached:         23 (6%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17 (4%)
  Times result was 'false':        152 (37%)
Number of strengthen sat checks:   0
Number of coverage checks:         927
  BDD entailment checks:           13
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       516
Number of predicates discovered:          7
Number of abstraction locations:          28
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         220
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 1.42
Number of irrelevant predicates:          159 (72%)
Number of preds handled by boolean abs:   55 (25%)
  Total number of models for allsat:      17
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.205s
  Time for path formula creation:        2.125s
Time for strengthen operator:            0.046s
Time for prec operator:                 10.008s
  Time for abstraction:                  9.935s (Max:     0.658s, Count: 414)
    Boolean abstraction:                 3.066s
    Solving time:                        7.217s (Max:     0.542s)
    Model enumeration time:              0.289s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.468s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     7.506s

Number of path formula cache hits:   8996 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.963s

Total number of created targets for pointer analysis: 5450
   Number of created targets for uf: *unsigned_short_int is 61
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(struct_snd_pcm_substream)* is 2
   Number of created targets for uf: *signed_int is 153
   Number of created targets for uf: *(struct_vx_pipe)* is 12
   Number of created targets for uf: *unsigned_char_:_1 is 9
   Number of created targets for uf: *unsigned_long_long_int is 9
   Number of created targets for uf: *unsigned_int is 43
   Number of created targets for uf: *signed_short_int is 2


Number of BDD nodes:                               220
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         131 (count: 1220, min: 0, max: 32, avg: 0.11)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.240s
Automaton transfers with branching:                0
Automaton transfer successors:                        12895 (count: 12895, min: 1, max: 1, avg: 1.00) [1 x 12895]

CPA algorithm statistics
------------------------
Number of iterations:            7419
Max size of waitlist:            40
Average size of waitlist:        21
Number of computed successors:   8253
Max successors for one state:    2
Number of times merged:          457
Number of times stopped:         470
Number of times breaked:         92

Total time for CPA algorithm:        14.315s (Max:     1.223s)
  Time for choose from waitlist:      0.053s
  Time for precision adjustment:     10.281s
  Time for transfer relation:         3.114s
  Time for merge operator:            0.530s
  Time for stop operator:             0.056s
  Time for adding to reached set:     0.084s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   92
Avg. length of target path (in blocks):                 157 (count: 92, min: 1, max: 3, avg: 1.71)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   8.054s
  Counterexample analysis:                             7.837s (Max:     0.499s, Calls: 92)
    Refinement sat check:                              7.229s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.027s
  ARG update:                                          0.074s

Length of refined path (in blocks):                     152 (count: 92, min: 1, max: 3, avg: 1.65)
Number of affected states:                               11 (count: 92, min: 0, max: 2, avg: 0.12)
Length (states) of path with itp 'true':                 49 (count: 92, min: 0, max: 2, avg: 0.53)
Length (states) of path with itp non-trivial itp:        11 (count: 92, min: 0, max: 2, avg: 0.12)
Length (states) of path with itp 'false':                 5 (count: 92, min: 0, max: 1, avg: 0.05)
Different non-trivial interpolants along paths:           0 (count: 92, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               4 (count: 92, min: 0, max: 1, avg: 0.04)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                92
Number of successful refinements:     92
Number of failed refinements:         0
Max. size of reached set before ref.: 1997
Max. size of reached set after ref.:  1892
Avg. size of reached set before ref.: 891.01
Avg. size of reached set after ref.:  825.33

Total time for CEGAR algorithm:      22.748s
Time for refinements:                 8.343s
Average time for refinement:          0.090s
Max time for refinement:              0.506s

Code Coverage
-----------------------------
  Function coverage:      0.164
  Visited lines:          1349
  Total lines:            5030
  Line coverage:          0.268
  Visited conditions:     126
  Total conditions:       1250
  Condition coverage:     0.101

CPAchecker general statistics
-----------------------------
Number of program locations:     7771
Number of CFA edges:             8730
Number of relevant variables:    1105
Number of functions:             579
Number of loops:                 40
Size of reached set:             1588
  Number of reached locations:   632 (8%)
    Avg states per location:     2
    Max states per location:     23 (at node N5499)
  Number of reached functions:   95 (16%)
  Number of partitions:          1588
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        28

Time for analysis setup:          7.509s
  Time for loading CPAs:          1.137s
  Time for loading parser:        0.737s
  Time for CFA construction:      5.476s
    Time for parsing file(s):     1.280s
    Time for AST to CFA:          2.137s
    Time for CFA sanity check:    0.487s
    Time for post-processing:     1.332s
      Time for var class.:        0.726s
Time for Analysis:               22.749s
CPU time for analysis:           22.740s
Total time for CPAchecker:       30.263s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.134s

Time for Garbage Collector:       0.460s (in 31 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 73MB (    70 MiB) max;     50MB (    48 MiB) avg;     76MB (    72 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    32 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8131MB (  7754 MiB) max;   8117MB (  7741 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
