scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec1_product12_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_10472o8d/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 282: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 305: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 623: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 652: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 700: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 747: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 792: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 870: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 939: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1073: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1156: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1203: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1250: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1295: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1358: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1465: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1519: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1638: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1808: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1840: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1849: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1858: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1883: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1925: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1946: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1983: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2020: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2059: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2098: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2135: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2172: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2209: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2316: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2636: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2682: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2751: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2771: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2780: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2795: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2473: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            8911 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  8567 (96%)
  Because of loop head:            324 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         20 (0%)
  Times precision was empty:       1600 (18%)
  Times precision was {false}:     187 (2%)
  Times result was cached:         6820 (77%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      304 (3%)
  Times result was 'false':        77 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         22375
  BDD entailment checks:           1261
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       47
Number of predicates discovered:          4
Number of abstraction locations:          122
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         12317
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 25.09
Number of irrelevant predicates:          5668 (46%)
Number of preds handled by boolean abs:   397 (3%)
  Total number of models for allsat:      304
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  1.461s
  Time for path formula creation:        1.393s
Time for strengthen operator:            0.114s
Time for prec operator:                  2.819s
  Time for abstraction:                  2.573s (Max:     0.040s, Count: 8911)
    Boolean abstraction:                 0.439s
    Solving time:                        0.519s (Max:     0.028s)
    Model enumeration time:              0.023s
    Time for BDD construction:           0.054s (Max:     0.014s)
Time for merge operator:                 0.328s
Time for coverage check:                 0.024s
  Time for BDD entailment checks:        0.010s
Total time for SMT solver (w/o itp):     0.542s

Number of path formula cache hits:   69994 (79%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.270s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               204
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         617 (count: 5632, min: 0, max: 168, avg: 0.11)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.333s
Automaton transfers with branching:                0
Automaton transfer successors:                        73274 (count: 73274, min: 1, max: 1, avg: 1.00) [1 x 73274]

CPA algorithm statistics
------------------------
Number of iterations:            55875
Max size of waitlist:            28
Average size of waitlist:        11
Number of computed successors:   67473
Max successors for one state:    2
Number of times merged:          10557
Number of times stopped:         11405
Number of times breaked:         20

Total time for CPA algorithm:         8.204s (Max:     0.728s)
  Time for choose from waitlist:      0.142s
  Time for precision adjustment:      3.549s
  Time for transfer relation:         3.050s
  Time for merge operator:            0.616s
  Time for stop operator:             0.181s
  Time for adding to reached set:     0.135s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   20
Avg. length of target path (in blocks):                1920 (count: 20, min: 62, max: 128, avg: 96.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.273s
  Counterexample analysis:                             0.822s (Max:     0.070s, Calls: 20)
    Refinement sat check:                              0.392s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.070s
  Precision update:                                    0.041s
  ARG update:                                          0.269s

Length of refined path (in blocks):                    1660 (count: 20, min: 59, max: 105, avg: 83.00)
Number of affected states:                             1640 (count: 20, min: 58, max: 104, avg: 82.00)
Length (states) of path with itp 'true':                  0 (count: 20, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1640 (count: 20, min: 58, max: 104, avg: 82.00)
Length (states) of path with itp 'false':                20 (count: 20, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          10 (count: 20, min: 0, max: 1, avg: 0.50)
Equal non-trivial interpolants along paths:            1610 (count: 20, min: 57, max: 102, avg: 80.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                20
Number of successful refinements:     20
Number of failed refinements:         0
Max. size of reached set before ref.: 3714
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 2733.80
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       9.661s
Time for refinements:                 1.455s
Average time for refinement:          0.072s
Max time for refinement:              0.142s

Code Coverage
-----------------------------
  Function coverage:      0.495
  Visited lines:          634
  Total lines:            1357
  Line coverage:          0.467
  Visited conditions:     220
  Total conditions:       486
  Condition coverage:     0.453

CPAchecker general statistics
-----------------------------
Number of program locations:     1859
Number of CFA edges:             2098
Number of relevant variables:    294
Number of functions:             103
Number of loops:                 4
Size of reached set:             1376
  Number of reached locations:   606 (33%)
    Avg states per location:     2
    Max states per location:     10 (at node N911)
  Number of reached functions:   51 (50%)
  Number of partitions:          1376
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.451s
  Time for loading CPAs:          0.478s
  Time for loading parser:        0.459s
  Time for CFA construction:      1.391s
    Time for parsing file(s):     0.399s
    Time for AST to CFA:          0.426s
    Time for CFA sanity check:    0.136s
    Time for post-processing:     0.335s
      Time for var class.:        0.191s
Time for Analysis:                9.661s
CPU time for analysis:            9.660s
Time for analyzing result:        0.008s
Total time for CPAchecker:       12.116s
Total CPU time for CPAchecker:   12.110s
Time for statistics:              0.138s

Time for Garbage Collector:       0.319s (in 26 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 65MB (    62 MiB) max;     42MB (    40 MiB) avg;     70MB (    67 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     33MB (    31 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8134MB (  7757 MiB) max;   8113MB (  7738 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
