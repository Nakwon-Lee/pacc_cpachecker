scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--smscufx.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_vt7_es3d/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7471: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_dealloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modedb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1796 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1731 (96%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         65 (4%)
  Times precision was empty:       1496 (83%)
  Times precision was {false}:     36 (2%)
  Times result was cached:         209 (12%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      55 (3%)
  Times result was 'false':        52 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         11094
  BDD entailment checks:           260
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1107
Number of predicates discovered:          5
Number of abstraction locations:          6
Max number of predicates per location:    4
Avg number of predicates per location:    2
Total predicates per abstraction:         545
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 5.99
Number of irrelevant predicates:          197 (36%)
Number of preds handled by boolean abs:   91 (17%)
  Total number of models for allsat:      54
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.98

Time for post operator:                  3.888s
  Time for path formula creation:        3.834s
Time for strengthen operator:            0.091s
Time for prec operator:                 13.481s
  Time for abstraction:                 13.230s (Max:     1.322s, Count: 1796)
    Boolean abstraction:                 7.900s
    Solving time:                       10.270s (Max:     1.103s)
    Model enumeration time:              0.929s
    Time for BDD construction:           0.019s (Max:     0.005s)
Time for merge operator:                 1.218s
Time for coverage check:                 0.013s
  Time for BDD entailment checks:        0.002s
Total time for SMT solver (w/o itp):    11.200s

Number of path formula cache hits:   78887 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.459s

Total number of created targets for pointer analysis: 19945
   Number of created targets for uf: *signed_int is 6
   Number of created targets for uf: *(struct_usb_device)* is 6
   Number of created targets for uf: *(struct_list_head)* is 6
   Number of created targets for uf: *unsigned_int is 645
   Number of created targets for uf: *unsigned_long_int is 11


Number of BDD nodes:                               217
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         150 (count: 2298, min: 0, max: 45, avg: 0.07)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.341s
Automaton transfers with branching:                0
Automaton transfer successors:                        91998 (count: 92008, min: 0, max: 1, avg: 1.00) [0 x 10, 1 x 91998]

CPA algorithm statistics
------------------------
Number of iterations:            60370
Max size of waitlist:            192
Average size of waitlist:        84
Number of computed successors:   67640
Max successors for one state:    2
Number of times merged:          5417
Number of times stopped:         5591
Number of times breaked:         13

Total time for CPA algorithm:        22.154s (Max:     5.742s)
  Time for choose from waitlist:      0.070s
  Time for precision adjustment:     14.192s
  Time for transfer relation:         5.617s
  Time for merge operator:            1.395s
  Time for stop operator:             0.161s
  Time for adding to reached set:     0.203s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   13
Avg. length of target path (in blocks):                  68 (count: 13, min: 2, max: 10, avg: 5.23)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.679s
  Counterexample analysis:                             3.385s (Max:     0.530s, Calls: 13)
    Refinement sat check:                              3.135s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.012s
  ARG update:                                          0.218s

Length of refined path (in blocks):                      68 (count: 13, min: 2, max: 10, avg: 5.23)
Number of affected states:                               55 (count: 13, min: 1, max: 9, avg: 4.23)
Length (states) of path with itp 'true':                  0 (count: 13, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        55 (count: 13, min: 1, max: 9, avg: 4.23)
Length (states) of path with itp 'false':                 0 (count: 13, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 13, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              42 (count: 13, min: 0, max: 8, avg: 3.23)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13
Number of successful refinements:     13
Number of failed refinements:         0
Max. size of reached set before ref.: 7259
Max. size of reached set after ref.:  7
Avg. size of reached set before ref.: 4354.31
Avg. size of reached set after ref.:  7.00

Total time for CEGAR algorithm:      26.032s
Time for refinements:                 3.878s
Average time for refinement:          0.298s
Max time for refinement:              0.603s

Code Coverage
-----------------------------
  Function coverage:      0.458
  Visited lines:          1667
  Total lines:            3007
  Line coverage:          0.554
  Visited conditions:     317
  Total conditions:       782
  Condition coverage:     0.405

CPAchecker general statistics
-----------------------------
Number of program locations:     4028
Number of CFA edges:             4596
Number of relevant variables:    609
Number of functions:             118
Number of loops:                 31
Size of reached set:             5482
  Number of reached locations:   898 (22%)
    Avg states per location:     6
    Max states per location:     253 (at node N3229)
  Number of reached functions:   54 (46%)
  Number of partitions:          5480
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3137 (before line 7418), Function main called from node N3012, stack depth 1 [5633dafd], stack [main]])
  Number of target states:       0
  Size of final wait list        136

Time for analysis setup:          4.338s
  Time for loading CPAs:          0.717s
  Time for loading parser:        0.570s
  Time for CFA construction:      2.933s
    Time for parsing file(s):     0.802s
    Time for AST to CFA:          0.930s
    Time for CFA sanity check:    0.263s
    Time for post-processing:     0.797s
      Time for var class.:        0.358s
Time for Analysis:               26.032s
CPU time for analysis:           26.030s
Total time for CPAchecker:       30.373s
Total CPU time for CPAchecker:   30.370s
Time for statistics:              0.146s

Time for Garbage Collector:       0.711s (in 50 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 93MB (    89 MiB) max;     58MB (    56 MiB) avg;     94MB (    90 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8122MB (  7746 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
