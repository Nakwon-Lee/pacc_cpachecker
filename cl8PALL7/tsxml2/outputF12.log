scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--media--firewire--firedtv.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bziyzf41/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5780: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5783: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5786: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7651: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8371: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8774: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8814: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8836: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9117: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9993: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10217: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8673: Function pointer *(fdtv->demux.dmx.add_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8679: Function pointer *(fdtv->demux.dmx.connect_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8708: Function pointer *(fdtv->demux.dmx.close) with type int (*)(struct dmx_demux *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8710: Function pointer *(fdtv->demux.dmx.remove_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8729: Function pointer *(fdtv->demux.dmx.close) with type int (*)(struct dmx_demux *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8730: Function pointer *(fdtv->demux.dmx.remove_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function print_hex_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_net_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8729: Ignoring function call through function pointer *(fdtv->demux.dmx.close): (*(fdtv->demux.dmx.close))(&(fdtv->demux.dmx)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8730: Ignoring function call through function pointer *(fdtv->demux.dmx.remove_frontend): (*(fdtv->demux.dmx.remove_frontend))(&(fdtv->demux.dmx), &(fdtv->frontend)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dvb_dmxdev_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_dmx_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_csr_string to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_run_transaction to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_generic_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_generic_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_generic_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_be to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmemdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_register_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_dmx_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_dmxdev_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8673: Ignoring function call through function pointer *(fdtv->demux.dmx.add_frontend): err = (*(fdtv->demux.dmx.add_frontend))(&(fdtv->demux.dmx), &(fdtv->frontend)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8679: Ignoring function call through function pointer *(fdtv->demux.dmx.connect_frontend): err = (*(fdtv->demux.dmx.connect_frontend))(&(fdtv->demux.dmx), &(fdtv->frontend)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dvb_net_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_register_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8708: Ignoring function call through function pointer *(fdtv->demux.dmx.close): (*(fdtv->demux.dmx.close))(&(fdtv->demux.dmx)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8710: Ignoring function call through function pointer *(fdtv->demux.dmx.remove_frontend): (*(fdtv->demux.dmx.remove_frontend))(&(fdtv->demux.dmx), &(fdtv->frontend)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dvb_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            47949 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            32715 (68%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         15234 (32%)
  Times precision was empty:       837 (2%)
  Times precision was {false}:     2155 (4%)
  Times result was cached:         41580 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3377 (7%)
  Times result was 'false':        17208 (36%)
Number of strengthen sat checks:   0
Number of coverage checks:         468771
  BDD entailment checks:           39455
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       211
Number of predicates discovered:          11
Number of abstraction locations:          11
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         232787
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 42.08
Number of irrelevant predicates:          72085 (31%)
Number of preds handled by boolean abs:   13992 (6%)
  Total number of models for allsat:      3236
  Max number of models for allsat:        8
  Avg number of models for allsat:        0.96

Time for post operator:                 37.433s
  Time for path formula creation:       35.965s
Time for strengthen operator:            2.743s
Time for prec operator:                336.394s
  Time for abstraction:                333.782s (Max:     0.422s, Count: 47949)
    Boolean abstraction:               189.037s
    Solving time:                      183.665s (Max:     0.296s)
    Model enumeration time:             16.843s
    Time for BDD construction:           0.256s (Max:     0.012s)
Time for merge operator:                 6.131s
Time for coverage check:                 0.121s
  Time for BDD entailment checks:        0.072s
Total time for SMT solver (w/o itp):   200.508s

Number of path formula cache hits:   2679429 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    20.603s

Total number of created targets for pointer analysis: 389100
   Number of created targets for uf: *(void)* is 14
   Number of created targets for uf: *enum_dmx_frontend_source is 23
   Number of created targets for uf: *(struct_input_dev)* is 13
   Number of created targets for uf: *enum_fe_sec_tone_mode is 20
   Number of created targets for uf: *enum_model_type is 13
   Number of created targets for uf: *enum_fe_sec_voltage is 20
   Number of created targets for uf: *unsigned_short_int is 11536
   Number of created targets for uf: *signed_int is 63
   Number of created targets for uf: *(char)* is 18171
   Number of created targets for uf: *unsigned_char is 227
   Number of created targets for uf: *(struct_list_head)* is 391
   Number of created targets for uf: *_Bool is 7
   Number of created targets for uf: *char is 1614
   Number of created targets for uf: *unsigned_int is 153
   Number of created targets for uf: *(struct_device)* is 22


Number of BDD nodes:                               1102
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        7218 (count: 74256, min: 0, max: 116, avg: 0.10)
Time for BDD node cleanup:                             0.025s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  4.136s
  Time for transition matches:                         2.176s
  Time for transition assertions:                      0.007s
  Time for transition actions:                         0.033s
Automaton transfers with branching:                0
Automaton transfer successors:                      2578689 (count: 2578689, min: 1, max: 1, avg: 1.00) [1 x 2578689]

CPA algorithm statistics
------------------------
Number of iterations:            1575691
Max size of waitlist:            43
Average size of waitlist:        17
Number of computed successors:   1828674
Max successors for one state:    2
Number of times merged:          214658
Number of times stopped:         234832
Number of times breaked:         82

Total time for CPA algorithm:       436.094s (Max:    23.427s)
  Time for choose from waitlist:      0.723s
  Time for precision adjustment:    349.112s
  Time for transfer relation:        66.406s
  Time for merge operator:            9.487s
  Time for stop operator:             2.332s
  Time for adding to reached set:     3.509s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   82
Avg. length of target path (in blocks):                 470 (count: 82, min: 2, max: 10, avg: 5.73)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.286s
  Counterexample analysis:                             7.672s (Max:     0.278s, Calls: 82)
    Refinement sat check:                              6.875s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.040s
  Precision update:                                    0.019s
  ARG update:                                          3.478s

Length of refined path (in blocks):                     452 (count: 82, min: 2, max: 10, avg: 5.51)
Number of affected states:                              297 (count: 82, min: 1, max: 8, avg: 3.62)
Length (states) of path with itp 'true':                 73 (count: 82, min: 0, max: 7, avg: 0.89)
Length (states) of path with itp non-trivial itp:       297 (count: 82, min: 1, max: 8, avg: 3.62)
Length (states) of path with itp 'false':                14 (count: 82, min: 0, max: 1, avg: 0.17)
Different non-trivial interpolants along paths:           0 (count: 82, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             215 (count: 82, min: 0, max: 7, avg: 2.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                82
Number of successful refinements:     82
Number of failed refinements:         0
Max. size of reached set before ref.: 56314
Max. size of reached set after ref.:  18160
Avg. size of reached set before ref.: 20291.57
Avg. size of reached set after ref.:  1878.05

Total time for CEGAR algorithm:     448.556s
Time for refinements:                12.343s
Average time for refinement:          0.150s
Max time for refinement:              0.296s

Code Coverage
-----------------------------
  Function coverage:      0.443
  Visited lines:          2414
  Total lines:            3754
  Line coverage:          0.643
  Visited conditions:     420
  Total conditions:       794
  Condition coverage:     0.529

CPAchecker general statistics
-----------------------------
Number of program locations:     5085
Number of CFA edges:             5579
Number of relevant variables:    683
Number of functions:             230
Number of loops:                 22
Size of reached set:             66726
  Number of reached locations:   1279 (25%)
    Avg states per location:     52
    Max states per location:     643 (at node N3964)
  Number of reached functions:   102 (44%)
  Number of partitions:          66721
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N3612 (before line 9818), Function main called from node N3599, stack depth 1 [3a2d3909], stack [main]])
  Number of target states:       0

Time for analysis setup:          7.109s
  Time for loading CPAs:          1.062s
  Time for loading parser:        0.769s
  Time for CFA construction:      5.173s
    Time for parsing file(s):     1.237s
    Time for AST to CFA:          2.028s
    Time for CFA sanity check:    0.395s
    Time for post-processing:     1.262s
      Time for var class.:        0.585s
Time for Analysis:              448.556s
CPU time for analysis:          448.530s
Time for analyzing result:        0.055s
Total time for CPAchecker:      455.672s
Total CPU time for CPAchecker:  455.630s
Time for statistics:              0.903s

Time for Garbage Collector:      21.796s (in 1392 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                241MB (   230 MiB) max;    112MB (   107 MiB) avg;    243MB (   232 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           245MB (   234 MiB) max;    170MB (   162 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8273MB (  7890 MiB) max;   8208MB (  7827 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
