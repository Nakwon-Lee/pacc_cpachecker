scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cpqarray.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_pm2yiv4i/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6409: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6412: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6418: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6449-6450: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6453-6454: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6457-6458: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7659: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4626: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4658: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4519: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4454-4455: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4548: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4487: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4626: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6749: Ignoring function call through function pointer *(info_p->access.set_intr_mask): (*(info_p->access.set_intr_mask))(info_p, 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4658: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4791: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memdup_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6381-6382: Destroying the void* pointer ida_ctlr_ioctl::p produces garbage or the memory pointed by it is unused: error = ida_ctlr_ioctl(host, (int)((((long)drv) - ((long)(&(host->drv)))) / 24L), my_io); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5399: Ignoring function call through function pointer *((hba[i])->access.set_intr_mask): (*((hba[i])->access.set_intr_mask))(hba[i], 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_zero_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6126: Ignoring function call through function pointer *(h->access.fifo_full): tmp = (*(h->access.fifo_full))(h); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6134: Ignoring function call through function pointer *(h->access.submit_command): (*(h->access.submit_command))(h, c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4487: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6845: Ignoring function call through function pointer *(host->access.set_intr_mask): (*(host->access.set_intr_mask))(host, 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6847: Ignoring function call through function pointer *(host->access.set_intr_mask): (*(host->access.set_intr_mask))(host, 1UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function blk_queue_logical_block_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6753: Ignoring function call through function pointer *(info_p->access.fifo_full): temp = (*(info_p->access.fifo_full))(info_p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6769: Ignoring function call through function pointer *(info_p->access.submit_command): (*(info_p->access.submit_command))(info_p, c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6898: Ignoring function call through function pointer *((hba[ctlr])->access.command_completed): tmp = (*((hba[ctlr])->access.command_completed))(hba[ctlr]); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function proc_mkdir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function proc_create_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_bounce_limit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_max_segments to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5461: Ignoring function call through function pointer *((hba[i])->access.set_intr_mask): (*((hba[i])->access.set_intr_mask))(hba[i], 1UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function alloc_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            63979 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            61505 (96%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2474 (4%)
  Times precision was empty:       34878 (55%)
  Times precision was {false}:     854 (1%)
  Times result was cached:         25386 (40%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2861 (4%)
  Times result was 'false':        9922 (16%)
Number of strengthen sat checks:   0
Number of coverage checks:         710925
  BDD entailment checks:           30833
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       515
Number of predicates discovered:          8
Number of abstraction locations:          24
Max number of predicates per location:    6
Avg number of predicates per location:    4
Total predicates per abstraction:         121088
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 32.59
Number of irrelevant predicates:          39247 (32%)
Number of preds handled by boolean abs:   9286 (8%)
  Total number of models for allsat:      2343
  Max number of models for allsat:        4
  Avg number of models for allsat:        0.82

Time for post operator:                 63.025s
  Time for path formula creation:       59.067s
Time for strengthen operator:            4.634s
Time for prec operator:                133.922s
  Time for abstraction:                129.261s (Max:     0.973s, Count: 63979)
    Boolean abstraction:                56.284s
    Solving time:                       65.965s (Max:     0.170s)
    Model enumeration time:              3.279s
    Time for BDD construction:           0.221s (Max:     0.012s)
Time for merge operator:                 8.995s
Time for coverage check:                 0.146s
  Time for BDD entailment checks:        0.067s
Total time for SMT solver (w/o itp):    69.244s

Number of path formula cache hits:   4740225 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    25.162s

Total number of created targets for pointer analysis: 34254
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_ctlr_info)*],_Parameter_2_type:_[unsigned_long_int],_VarArgs:_false)* is 17
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_ctlr_info)*],_Parameter_2_type:_[(struct_cmdlist)*],_VarArgs:_false)* is 17
   Number of created targets for uf: *(unsigned_long_int)* is 12
   Number of created targets for uf: *(struct_pci_dev)* is 7
   Number of created targets for uf: *unsigned_long_int is 36
   Number of created targets for uf: *signed_int is 4301
   Number of created targets for uf: *(struct_gendisk)* is 1153
   Number of created targets for uf: *unsigned_char is 43
   Number of created targets for uf: *(Return_type:_[unsigned_long_int],_Parameters:_1,_Parameter_1_type:_[(struct_ctlr_info)*],_VarArgs:_false)* is 49
   Number of created targets for uf: *(struct_ctlr_info)* is 57
   Number of created targets for uf: *(struct_cmdlist)* is 14
   Number of created targets for uf: *unsigned_long_long_int is 576
   Number of created targets for uf: *(struct_request_queue)* is 12
   Number of created targets for uf: *unsigned_int is 3524


Number of BDD nodes:                               370
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5397 (count: 89783, min: 0, max: 121, avg: 0.06)
Time for BDD node cleanup:                             0.024s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.070s
  Time for transition matches:                         4.250s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                      4709059 (count: 4709059, min: 1, max: 1, avg: 1.00) [1 x 4709059]

CPA algorithm statistics
------------------------
Number of iterations:            3298432
Max size of waitlist:            45
Average size of waitlist:        13
Number of computed successors:   3678206
Max successors for one state:    2
Number of times merged:          340046
Number of times stopped:         369004
Number of times breaked:         132

Total time for CPA algorithm:       319.579s (Max:    20.151s)
  Time for choose from waitlist:      1.195s
  Time for precision adjustment:    164.056s
  Time for transfer relation:       118.144s
  Time for merge operator:           14.000s
  Time for stop operator:             4.464s
  Time for adding to reached set:     7.822s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   132
Avg. length of target path (in blocks):                1147 (count: 132, min: 2, max: 14, avg: 8.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  16.827s
  Counterexample analysis:                             8.057s (Max:     0.177s, Calls: 132)
    Refinement sat check:                              7.128s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.014s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.033s
  Precision update:                                    0.064s
  ARG update:                                          8.520s

Length of refined path (in blocks):                    1137 (count: 132, min: 2, max: 14, avg: 8.61)
Number of affected states:                              663 (count: 132, min: 0, max: 13, avg: 5.02)
Length (states) of path with itp 'true':                342 (count: 132, min: 0, max: 6, avg: 2.59)
Length (states) of path with itp non-trivial itp:       663 (count: 132, min: 0, max: 13, avg: 5.02)
Length (states) of path with itp 'false':                 5 (count: 132, min: 0, max: 1, avg: 0.04)
Different non-trivial interpolants along paths:           0 (count: 132, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             533 (count: 132, min: 0, max: 12, avg: 4.04)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                132
Number of successful refinements:     132
Number of failed refinements:         0
Max. size of reached set before ref.: 139372
Max. size of reached set after ref.:  89872
Avg. size of reached set before ref.: 54160.17
Avg. size of reached set after ref.:  30220.20

Total time for CEGAR algorithm:     345.500s
Time for refinements:                22.383s
Average time for refinement:          0.169s
Max time for refinement:              0.671s

Code Coverage
-----------------------------
  Function coverage:      0.706
  Visited lines:          2514
  Total lines:            2966
  Line coverage:          0.848
  Visited conditions:     710
  Total conditions:       916
  Condition coverage:     0.775

CPAchecker general statistics
-----------------------------
Number of program locations:     4325
Number of CFA edges:             4995
Number of relevant variables:    549
Number of functions:             163
Number of loops:                 37
Size of reached set:             139206
  Number of reached locations:   1949 (45%)
    Avg states per location:     71
    Max states per location:     2484 (at node N80)
  Number of reached functions:   115 (71%)
  Number of partitions:          139204
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2621 (before line 7196), Function main called from node N2600, stack depth 1 [5580d62f], stack [main]])
  Number of target states:       0

Time for analysis setup:          6.712s
  Time for loading CPAs:          1.126s
  Time for loading parser:        0.772s
  Time for CFA construction:      4.646s
    Time for parsing file(s):     1.146s
    Time for AST to CFA:          1.515s
    Time for CFA sanity check:    0.397s
    Time for post-processing:     1.418s
      Time for var class.:        0.579s
Time for Analysis:              345.500s
CPU time for analysis:          345.480s
Time for analyzing result:        0.122s
Total time for CPAchecker:      352.217s
Total CPU time for CPAchecker:  352.180s
Time for statistics:              1.480s

Time for Garbage Collector:      32.347s (in 553 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                432MB (   412 MiB) max;    233MB (   222 MiB) avg;    441MB (   420 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     39MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           439MB (   418 MiB) max;    348MB (   332 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8276MB (  7893 MiB) max;   8185MB (  7805 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
