scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--media--dvb--frontends--cxd2820r.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_91fwm42f/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_alloca, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function intlog2 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function intlog10 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6222: Ignoring call via function pointer cxd2820r_set_frontend_c::__cil_tmp145 for which no suitable target was found in line: (*__cil_tmp145)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6222: Ignoring function call through function pointer *__cil_tmp145: (*__cil_tmp145)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6293: Ignoring call via function pointer cxd2820r_set_frontend_c::__cil_tmp176 for which no suitable target was found in line: ret = (*__cil_tmp176)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6293: Ignoring function call through function pointer *__cil_tmp176: ret = (*__cil_tmp176)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10433: Ignoring call via function pointer cxd2820r_set_frontend_t2::__cil_tmp364 for which no suitable target was found in line: (*__cil_tmp364)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10433: Ignoring function call through function pointer *__cil_tmp364: (*__cil_tmp364)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10501: Ignoring call via function pointer cxd2820r_set_frontend_t2::__cil_tmp393 for which no suitable target was found in line: ret = (*__cil_tmp393)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10501: Ignoring function call through function pointer *__cil_tmp393: ret = (*__cil_tmp393)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7960: Ignoring call via function pointer cxd2820r_set_frontend_t::__cil_tmp219 for which no suitable target was found in line: (*__cil_tmp219)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7960: Ignoring function call through function pointer *__cil_tmp219: (*__cil_tmp219)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8031: Ignoring call via function pointer cxd2820r_set_frontend_t::__cil_tmp250 for which no suitable target was found in line: ret = (*__cil_tmp250)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8031: Ignoring function call through function pointer *__cil_tmp250: ret = (*__cil_tmp250)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            615 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            605 (98%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (2%)
  Times precision was empty:       378 (61%)
  Times precision was {false}:     47 (8%)
  Times result was cached:         132 (21%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      58 (9%)
  Times result was 'false':        53 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         54791
  BDD entailment checks:           427
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       4274
Number of predicates discovered:          2
Number of abstraction locations:          6
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         237
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.26
Number of irrelevant predicates:          98 (41%)
Number of preds handled by boolean abs:   58 (24%)
  Total number of models for allsat:      45
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.78

Time for post operator:                 36.600s
  Time for path formula creation:       36.043s
Time for strengthen operator:            0.960s
Time for prec operator:                823.341s
  Time for abstraction:                822.979s (Max:   226.482s, Count: 615)
    Boolean abstraction:               591.372s
    Solving time:                      727.689s (Max:   204.343s)
    Model enumeration time:             79.584s
    Time for BDD construction:           0.028s (Max:     0.023s)
Time for merge operator:                10.583s
Time for coverage check:                 0.028s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):   807.278s

Number of path formula cache hits:   711940 (72%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    32.446s

Total number of created targets for pointer analysis: 383833
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_char is 102
   Number of created targets for uf: *enum_fe_status is 2
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         105 (count: 1405, min: 0, max: 9, avg: 0.07)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.679s
  Time for transition matches:                         1.025s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       972384 (count: 972384, min: 1, max: 1, avg: 1.00) [1 x 972384]

CPA algorithm statistics
------------------------
Number of iterations:            198870
Max size of waitlist:            48
Average size of waitlist:        28
Number of computed successors:   226568
Max successors for one state:    2
Number of times merged:          27182
Number of times stopped:         27536
Number of times breaked:         5

Total time for CPA algorithm:       886.976s (Max:   467.390s)
  Time for choose from waitlist:      0.211s
  Time for precision adjustment:    825.214s
  Time for transfer relation:        47.546s
  Time for merge operator:           11.383s
  Time for stop operator:             0.459s
  Time for adding to reached set:     0.769s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  18 (count: 5, min: 2, max: 4, avg: 3.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.159s
  Counterexample analysis:                             5.229s (Max:     4.021s, Calls: 5)
    Refinement sat check:                              4.947s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.003s
  ARG update:                                          0.888s

Length of refined path (in blocks):                      18 (count: 5, min: 2, max: 4, avg: 3.60)
Number of affected states:                               13 (count: 5, min: 1, max: 3, avg: 2.60)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        13 (count: 5, min: 1, max: 3, avg: 2.60)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               8 (count: 5, min: 0, max: 2, avg: 1.60)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 57502
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 36357.60
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:     893.364s
Time for refinements:                 6.388s
Average time for refinement:          1.277s
Max time for refinement:              4.110s

Code Coverage
-----------------------------
  Function coverage:      0.851
  Visited lines:          6594
  Total lines:            6983
  Line coverage:          0.944
  Visited conditions:     590
  Total conditions:       670
  Condition coverage:     0.881

CPAchecker general statistics
-----------------------------
Number of program locations:     7623
Number of CFA edges:             8039
Number of relevant variables:    2250
Number of functions:             67
Number of loops:                 9
Size of reached set:             17206
  Number of reached locations:   1610 (21%)
    Avg states per location:     10
    Max states per location:     284 (at node N32)
  Number of reached functions:   57 (85%)
  Number of partitions:          17206
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        23

Time for analysis setup:          7.500s
  Time for loading CPAs:          1.284s
  Time for loading parser:        0.738s
  Time for CFA construction:      5.303s
    Time for parsing file(s):     1.171s
    Time for AST to CFA:          1.909s
    Time for CFA sanity check:    0.556s
    Time for post-processing:     1.446s
      Time for var class.:        0.752s
Time for Analysis:              893.364s
CPU time for analysis:          893.320s
Total time for CPAchecker:      900.870s
Total CPU time for CPAchecker:  900.800s
Time for statistics:              0.472s

Time for Garbage Collector:       6.551s (in 152 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                414MB (   395 MiB) max;    229MB (   218 MiB) avg;    427MB (   407 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     38MB (    36 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           430MB (   410 MiB) max;    310MB (   296 MiB) avg
Allocated non-heap memory:        40MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8624MB (  8224 MiB) max;   8427MB (  8037 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
