scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--media--dvb--frontends--cxd2820r.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lup_b6b0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_alloca, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function intlog2 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function intlog10 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6222: Ignoring call via function pointer cxd2820r_set_frontend_c::__cil_tmp145 for which no suitable target was found in line: (*__cil_tmp145)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6222: Ignoring function call through function pointer *__cil_tmp145: (*__cil_tmp145)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6293: Ignoring call via function pointer cxd2820r_set_frontend_c::__cil_tmp176 for which no suitable target was found in line: ret = (*__cil_tmp176)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 6293: Ignoring function call through function pointer *__cil_tmp176: ret = (*__cil_tmp176)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10433: Ignoring call via function pointer cxd2820r_set_frontend_t2::__cil_tmp364 for which no suitable target was found in line: (*__cil_tmp364)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10433: Ignoring function call through function pointer *__cil_tmp364: (*__cil_tmp364)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10501: Ignoring call via function pointer cxd2820r_set_frontend_t2::__cil_tmp393 for which no suitable target was found in line: ret = (*__cil_tmp393)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10501: Ignoring function call through function pointer *__cil_tmp393: ret = (*__cil_tmp393)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7960: Ignoring call via function pointer cxd2820r_set_frontend_t::__cil_tmp219 for which no suitable target was found in line: (*__cil_tmp219)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7960: Ignoring function call through function pointer *__cil_tmp219: (*__cil_tmp219)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8031: Ignoring call via function pointer cxd2820r_set_frontend_t::__cil_tmp250 for which no suitable target was found in line: ret = (*__cil_tmp250)(fe, &if_freq); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8031: Ignoring function call through function pointer *__cil_tmp250: ret = (*__cil_tmp250)(fe, &if_freq); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            586 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            576 (98%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (2%)
  Times precision was empty:       368 (63%)
  Times precision was {false}:     43 (7%)
  Times result was cached:         118 (20%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      57 (10%)
  Times result was 'false':        47 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         52183
  BDD entailment checks:           415
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       4274
Number of predicates discovered:          2
Number of abstraction locations:          6
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         218
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.18
Number of irrelevant predicates:          92 (42%)
Number of preds handled by boolean abs:   57 (26%)
  Total number of models for allsat:      42
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.74

Time for post operator:                 38.695s
  Time for path formula creation:       38.060s
Time for strengthen operator:            0.975s
Time for prec operator:                810.647s
  Time for abstraction:                810.215s (Max:   247.079s, Count: 586)
    Boolean abstraction:               589.236s
    Solving time:                      756.015s (Max:   224.842s)
    Model enumeration time:             39.440s
    Time for BDD construction:           0.015s (Max:     0.007s)
Time for merge operator:                12.228s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.012s
Total time for SMT solver (w/o itp):   795.468s

Number of path formula cache hits:   665956 (70%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    34.479s

Total number of created targets for pointer analysis: 383833
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_char is 102
   Number of created targets for uf: *enum_fe_status is 2
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         101 (count: 1349, min: 0, max: 14, avg: 0.07)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.793s
  Time for transition matches:                         0.958s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       927721 (count: 927721, min: 1, max: 1, avg: 1.00) [1 x 927721]

CPA algorithm statistics
------------------------
Number of iterations:            189715
Max size of waitlist:            54
Average size of waitlist:        32
Number of computed successors:   216097
Max successors for one state:    2
Number of times merged:          25884
Number of times stopped:         26228
Number of times breaked:         5

Total time for CPA algorithm:       879.168s (Max:   494.198s)
  Time for choose from waitlist:      0.212s
  Time for precision adjustment:    812.791s
  Time for transfer relation:        50.754s
  Time for merge operator:           13.015s
  Time for stop operator:             0.416s
  Time for adding to reached set:     0.796s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  18 (count: 5, min: 2, max: 4, avg: 3.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  13.157s
  Counterexample analysis:                            11.985s (Max:     4.227s, Calls: 5)
    Refinement sat check:                             11.221s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.009s
  Precision update:                                    0.003s
  ARG update:                                          1.119s

Length of refined path (in blocks):                      18 (count: 5, min: 2, max: 4, avg: 3.60)
Number of affected states:                               13 (count: 5, min: 1, max: 3, avg: 2.60)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        13 (count: 5, min: 1, max: 3, avg: 2.60)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               8 (count: 5, min: 0, max: 2, avg: 1.60)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 57502
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 36477.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:     892.627s
Time for refinements:                13.458s
Average time for refinement:          2.691s
Max time for refinement:              4.393s

Code Coverage
-----------------------------
  Function coverage:      0.761
  Visited lines:          6321
  Total lines:            6983
  Line coverage:          0.905
  Visited conditions:     558
  Total conditions:       670
  Condition coverage:     0.833

CPAchecker general statistics
-----------------------------
Number of program locations:     7623
Number of CFA edges:             8039
Number of relevant variables:    2250
Number of functions:             67
Number of loops:                 9
Size of reached set:             7452
  Number of reached locations:   1474 (19%)
    Avg states per location:     5
    Max states per location:     119 (at node N32)
  Number of reached functions:   51 (76%)
  Number of partitions:          7452
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        21

Time for analysis setup:          7.998s
  Time for loading CPAs:          1.374s
  Time for loading parser:        0.787s
  Time for CFA construction:      5.667s
    Time for parsing file(s):     1.283s
    Time for AST to CFA:          2.023s
    Time for CFA sanity check:    0.541s
    Time for post-processing:     1.633s
      Time for var class.:        0.804s
Time for Analysis:              892.627s
CPU time for analysis:          892.530s
Total time for CPAchecker:      900.630s
Total CPU time for CPAchecker:  900.520s
Time for statistics:              0.358s

Time for Garbage Collector:       6.958s (in 149 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                402MB (   384 MiB) max;    235MB (   224 MiB) avg;    415MB (   396 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     38MB (    36 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           433MB (   413 MiB) max;    311MB (   297 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8605MB (  8206 MiB) max;   8414MB (  8024 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
