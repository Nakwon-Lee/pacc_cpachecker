scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loops/sum04_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_wwxkfbu5/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            129 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            65 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         64 (50%)
  Times precision was empty:       2 (2%)
  Times precision was {false}:     63 (49%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      64 (50%)
  Times result was 'false':        55 (43%)
Number of strengthen sat checks:   0
Number of coverage checks:         457
  BDD entailment checks:           201
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       7
Number of predicates discovered:          37
Number of abstraction locations:          2
Max number of predicates per location:    37
Avg number of predicates per location:    19
Total predicates per abstraction:         985
Max number of predicates per abstraction: 37
Avg number of predicates per abstraction: 7.76
Number of irrelevant predicates:          73 (7%)
Number of preds handled by boolean abs:   912 (93%)
  Total number of models for allsat:      366
  Max number of models for allsat:        18
  Avg number of models for allsat:        5.72

Time for post operator:                  0.080s
  Time for path formula creation:        0.077s
Time for strengthen operator:            0.011s
Time for prec operator:                  0.587s
  Time for abstraction:                  0.566s (Max:     0.017s, Count: 129)
    Boolean abstraction:                 0.230s
    Solving time:                        0.160s (Max:     0.013s)
    Model enumeration time:              0.031s
    Time for BDD construction:           0.034s (Max:     0.007s)
Time for merge operator:                 0.006s
Time for coverage check:                 0.002s
  Time for BDD entailment checks:        0.002s
Total time for SMT solver (w/o itp):     0.191s

Number of path formula cache hits:   1252 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.074s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               7273
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 2222, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.045s
Automaton transfers with branching:                0
Automaton transfer successors:                         1303 (count: 1303, min: 1, max: 1, avg: 1.00) [1 x 1303]

CPA algorithm statistics
------------------------
Number of iterations:            1041
Max size of waitlist:            3
Average size of waitlist:        2
Number of computed successors:   1243
Max successors for one state:    2
Number of times merged:          128
Number of times stopped:         128
Number of times breaked:         10

Total time for CPA algorithm:         1.037s (Max:     0.227s)
  Time for choose from waitlist:      0.004s
  Time for precision adjustment:      0.684s
  Time for transfer relation:         0.220s
  Time for merge operator:            0.029s
  Time for stop operator:             0.023s
  Time for adding to reached set:     0.026s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10
Avg. length of target path (in blocks):                  65 (count: 10, min: 2, max: 11, avg: 6.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.097s
  Counterexample analysis:                             0.056s (Max:     0.022s, Calls: 10)
    Refinement sat check:                              0.015s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.002s
  ARG update:                                          0.010s

Length of refined path (in blocks):                      64 (count: 10, min: 2, max: 10, avg: 6.40)
Number of affected states:                               54 (count: 10, min: 1, max: 9, avg: 5.40)
Length (states) of path with itp 'true':                  0 (count: 10, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        54 (count: 10, min: 1, max: 9, avg: 5.40)
Length (states) of path with itp 'false':                 1 (count: 10, min: 0, max: 1, avg: 0.10)
Different non-trivial interpolants along paths:          44 (count: 10, min: 0, max: 8, avg: 4.40)
Equal non-trivial interpolants along paths:               0 (count: 10, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10
Number of successful refinements:     10
Number of failed refinements:         0
Max. size of reached set before ref.: 170
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 93.50
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.181s
Time for refinements:                 0.144s
Average time for refinement:          0.014s
Max time for refinement:              0.071s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          7
  Total lines:            7
  Line coverage:          1.000
  Visited conditions:     8
  Total conditions:       8
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     28
Number of CFA edges:             31
Number of relevant variables:    4
Number of functions:             2
Number of loops:                 1
Size of reached set:             156
  Number of reached locations:   20 (71%)
    Avg states per location:     7
    Max states per location:     9 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          148
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N14 (before line 13), Function main called from node N9, stack depth 1 [7d4f9aae], stack [main]])
  Number of target states:       0

Time for analysis setup:          1.720s
  Time for loading CPAs:          0.556s
  Time for loading parser:        0.431s
  Time for CFA construction:      0.660s
    Time for parsing file(s):     0.275s
    Time for AST to CFA:          0.147s
    Time for CFA sanity check:    0.012s
    Time for post-processing:     0.086s
      Time for var class.:        0.027s
Time for Analysis:                1.181s
CPU time for analysis:            1.180s
Time for analyzing result:        0.000s
Total time for CPAchecker:        2.904s
Total CPU time for CPAchecker:    2.900s
Time for statistics:              0.062s

Time for Garbage Collector:       0.075s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 51MB (    48 MiB) max;     31MB (    29 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             30MB (    29 MiB) max;     23MB (    22 MiB) avg;     32MB (    30 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        33MB (    31 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8064MB (  7691 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
