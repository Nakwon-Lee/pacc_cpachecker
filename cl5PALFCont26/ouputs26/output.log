scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci8164_true-termination.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_viptfxq8/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            398 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  324 (81%)
  Because of loop head:            67 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7 (2%)
  Times precision was empty:       146 (37%)
  Times precision was {false}:     35 (9%)
  Times result was cached:         176 (44%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      41 (10%)
  Times result was 'false':        13 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         323
  BDD entailment checks:           109
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       138
Number of predicates discovered:          2
Number of abstraction locations:          31
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         252
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.32
Number of irrelevant predicates:          74 (29%)
Number of preds handled by boolean abs:   41 (16%)
  Total number of models for allsat:      41
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.851s
  Time for path formula creation:        0.794s
Time for strengthen operator:            0.080s
Time for prec operator:                  0.574s
  Time for abstraction:                  0.521s (Max:     0.038s, Count: 398)
    Boolean abstraction:                 0.125s
    Solving time:                        0.165s (Max:     0.023s)
    Model enumeration time:              0.005s
    Time for BDD construction:           0.018s (Max:     0.008s)
Time for merge operator:                 0.039s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.008s
Total time for SMT solver (w/o itp):     0.170s

Number of path formula cache hits:   4801 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.729s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          41 (count: 682, min: 0, max: 41, avg: 0.06)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.129s
Automaton transfers with branching:                0
Automaton transfer successors:                         7248 (count: 7248, min: 1, max: 1, avg: 1.00) [1 x 7248]

CPA algorithm statistics
------------------------
Number of iterations:            1700
Max size of waitlist:            17
Average size of waitlist:        6
Number of computed successors:   1947
Max successors for one state:    2
Number of times merged:          107
Number of times stopped:         192
Number of times breaked:         7

Total time for CPA algorithm:         2.493s (Max:     0.561s)
  Time for choose from waitlist:      0.011s
  Time for precision adjustment:      0.741s
  Time for transfer relation:         1.495s
  Time for merge operator:            0.075s
  Time for stop operator:             0.042s
  Time for adding to reached set:     0.032s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                 145 (count: 7, min: 9, max: 33, avg: 20.71)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.172s
  Counterexample analysis:                             0.123s (Max:     0.029s, Calls: 7)
    Refinement sat check:                              0.092s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.006s
  ARG update:                                          0.019s

Length of refined path (in blocks):                     138 (count: 7, min: 8, max: 32, avg: 19.71)
Number of affected states:                              131 (count: 7, min: 7, max: 31, avg: 18.71)
Length (states) of path with itp 'true':                  0 (count: 7, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       131 (count: 7, min: 7, max: 31, avg: 18.71)
Length (states) of path with itp 'false':                 7 (count: 7, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 7, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             124 (count: 7, min: 6, max: 30, avg: 17.71)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 321
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 223.29
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.682s
Time for refinements:                 0.187s
Average time for refinement:          0.026s
Max time for refinement:              0.041s

Code Coverage
-----------------------------
  Function coverage:      0.417
  Visited lines:          903
  Total lines:            1115
  Line coverage:          0.810
  Visited conditions:     54
  Total conditions:       78
  Condition coverage:     0.692

CPAchecker general statistics
-----------------------------
Number of program locations:     1285
Number of CFA edges:             1317
Number of relevant variables:    264
Number of functions:             36
Number of loops:                 3
Size of reached set:             201
  Number of reached locations:   178 (14%)
    Avg states per location:     1
    Max states per location:     4 (at node N212)
  Number of reached functions:   15 (42%)
  Number of partitions:          201
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.353s
  Time for loading CPAs:          0.911s
  Time for loading parser:        0.762s
  Time for CFA construction:      2.511s
    Time for parsing file(s):     0.814s
    Time for AST to CFA:          0.760s
    Time for CFA sanity check:    0.181s
    Time for post-processing:     0.593s
      Time for var class.:        0.268s
Time for Analysis:                2.682s
CPU time for analysis:            2.680s
Time for analyzing result:        0.000s
Total time for CPAchecker:        7.047s
Total CPU time for CPAchecker:    7.050s
Time for statistics:              0.079s

Time for Garbage Collector:       0.154s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 57MB (    55 MiB) max;     32MB (    31 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    34 MiB) max;     28MB (    27 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8082MB (  7707 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
