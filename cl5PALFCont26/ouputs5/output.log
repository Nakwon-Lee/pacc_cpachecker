scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--hwmon--asus_atk0110.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3y0vv5e3/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_resources_are_enforced to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_read_from_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object_typed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_get_handle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_x32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            15949 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  14975 (94%)
  Because of loop head:            940 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         34 (0%)
  Times precision was empty:       2185 (14%)
  Times precision was {false}:     508 (3%)
  Times result was cached:         12897 (81%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      359 (2%)
  Times result was 'false':        170 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         42717
  BDD entailment checks:           3571
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       378
Number of predicates discovered:          2
Number of abstraction locations:          136
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         13764
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 15.88
Number of irrelevant predicates:          2523 (18%)
Number of preds handled by boolean abs:   359 (3%)
  Total number of models for allsat:      359
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  6.884s
  Time for path formula creation:        6.632s
Time for strengthen operator:            0.393s
Time for prec operator:                  5.865s
  Time for abstraction:                  5.330s (Max:     0.083s, Count: 15949)
    Boolean abstraction:                 0.663s
    Solving time:                        1.097s (Max:     0.069s)
    Model enumeration time:              0.065s
    Time for BDD construction:           0.035s (Max:     0.013s)
Time for merge operator:                 0.715s
Time for coverage check:                 0.036s
  Time for BDD entailment checks:        0.033s
Total time for SMT solver (w/o itp):     1.162s

Number of path formula cache hits:   358769 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.132s

Total number of created targets for pointer analysis: 37
   Number of created targets for uf: *(void)* is 2
   Number of created targets for uf: *_Bool is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         693 (count: 10456, min: 0, max: 116, avg: 0.07)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.811s
  Time for transition matches:                         0.357s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       374156 (count: 374156, min: 1, max: 1, avg: 1.00) [1 x 374156]

CPA algorithm statistics
------------------------
Number of iterations:            142724
Max size of waitlist:            35
Average size of waitlist:        22
Number of computed successors:   166527
Max successors for one state:    2
Number of times merged:          19573
Number of times stopped:         22892
Number of times breaked:         34

Total time for CPA algorithm:        22.936s (Max:     1.446s)
  Time for choose from waitlist:      0.146s
  Time for precision adjustment:      7.556s
  Time for transfer relation:        12.144s
  Time for merge operator:            1.209s
  Time for stop operator:             0.437s
  Time for adding to reached set:     0.467s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   34
Avg. length of target path (in blocks):                1829 (count: 34, min: 8, max: 116, avg: 53.79)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.748s
  Counterexample analysis:                             3.122s (Max:     0.243s, Calls: 34)
    Refinement sat check:                              2.484s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.058s
  Precision update:                                    0.043s
  ARG update:                                          0.459s

Length of refined path (in blocks):                    1795 (count: 34, min: 7, max: 115, avg: 52.79)
Number of affected states:                             1761 (count: 34, min: 6, max: 114, avg: 51.79)
Length (states) of path with itp 'true':                  0 (count: 34, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1761 (count: 34, min: 6, max: 114, avg: 51.79)
Length (states) of path with itp 'false':                34 (count: 34, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 34, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1727 (count: 34, min: 5, max: 113, avg: 50.79)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                34
Number of successful refinements:     34
Number of failed refinements:         0
Max. size of reached set before ref.: 5420
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 4077.53
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      27.003s
Time for refinements:                 4.066s
Average time for refinement:          0.119s
Max time for refinement:              0.292s

Code Coverage
-----------------------------
  Function coverage:      0.679
  Visited lines:          3982
  Total lines:            4407
  Line coverage:          0.904
  Visited conditions:     318
  Total conditions:       360
  Condition coverage:     0.883

CPAchecker general statistics
-----------------------------
Number of program locations:     4826
Number of CFA edges:             5053
Number of relevant variables:    1274
Number of functions:             56
Number of loops:                 11
Size of reached set:             4932
  Number of reached locations:   955 (20%)
    Avg states per location:     5
    Max states per location:     64 (at node N190)
  Number of reached functions:   38 (68%)
  Number of partitions:          4932
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.376s
  Time for loading CPAs:          1.123s
  Time for loading parser:        0.767s
  Time for CFA construction:      4.332s
    Time for parsing file(s):     1.179s
    Time for AST to CFA:          1.417s
    Time for CFA sanity check:    0.418s
    Time for post-processing:     1.126s
      Time for var class.:        0.623s
Time for Analysis:               27.003s
CPU time for analysis:           26.990s
Time for analyzing result:        0.004s
Total time for CPAchecker:       33.384s
Total CPU time for CPAchecker:   33.360s
Time for statistics:              0.196s

Time for Garbage Collector:       1.054s (in 76 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 97MB (    93 MiB) max;     59MB (    56 MiB) avg;     99MB (    94 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     40MB (    38 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        48MB (    45 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8135MB (  7758 MiB) max;   8122MB (  7745 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
