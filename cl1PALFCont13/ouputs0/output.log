scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_eeuthujq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            341 (28% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  205 (60%)
  Because of loop head:            27 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         109 (32%)
  Times precision was empty:       12 (4%)
  Times precision was {false}:     90 (26%)
  Times result was cached:         58 (17%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      181 (53%)
  Times result was 'false':        95 (28%)
Number of strengthen sat checks:   0
Number of coverage checks:         85
  BDD entailment checks:           69
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       13
Number of predicates discovered:          18
Number of abstraction locations:          10
Max number of predicates per location:    16
Avg number of predicates per location:    7
Total predicates per abstraction:         2084
Max number of predicates per abstraction: 16
Avg number of predicates per abstraction: 7.69
Number of irrelevant predicates:          188 (9%)
Number of preds handled by boolean abs:   1382 (66%)
  Total number of models for allsat:      989
  Max number of models for allsat:        72
  Avg number of models for allsat:        5.46

Time for post operator:                  0.122s
  Time for path formula creation:        0.117s
Time for strengthen operator:            0.023s
Time for prec operator:                  1.708s
  Time for abstraction:                  1.640s (Max:     0.029s, Count: 341)
    Boolean abstraction:                 0.633s
    Solving time:                        0.308s (Max:     0.017s)
    Model enumeration time:              0.073s
    Time for BDD construction:           0.124s (Max:     0.015s)
Time for merge operator:                 0.002s
Time for coverage check:                 0.006s
  Time for BDD entailment checks:        0.005s
Total time for SMT solver (w/o itp):     0.381s

Number of path formula cache hits:   1195 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.104s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               5418
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2585 (count: 2949, min: 0, max: 2585, avg: 0.88)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.121s
Automaton transfers with branching:                0
Automaton transfer successors:                         1238 (count: 1238, min: 1, max: 1, avg: 1.00) [1 x 1238]

CPA algorithm statistics
------------------------
Number of iterations:            936
Max size of waitlist:            11
Average size of waitlist:        4
Number of computed successors:   1100
Max successors for one state:    2
Number of times merged:          8
Number of times stopped:         15
Number of times breaked:         14

Total time for CPA algorithm:         2.392s (Max:     0.329s)
  Time for choose from waitlist:      0.006s
  Time for precision adjustment:      1.826s
  Time for transfer relation:         0.452s
  Time for merge operator:            0.006s
  Time for stop operator:             0.013s
  Time for adding to reached set:     0.026s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   14
Avg. length of target path (in blocks):                 196 (count: 14, min: 3, max: 32, avg: 14.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.297s
  Counterexample analysis:                             0.197s (Max:     0.024s, Calls: 14)
    Refinement sat check:                              0.075s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.042s
  Precision update:                                    0.018s
  ARG update:                                          0.027s

Length of refined path (in blocks):                     196 (count: 14, min: 3, max: 32, avg: 14.00)
Number of affected states:                              180 (count: 14, min: 2, max: 31, avg: 12.86)
Length (states) of path with itp 'true':                  2 (count: 14, min: 0, max: 1, avg: 0.14)
Length (states) of path with itp non-trivial itp:       180 (count: 14, min: 2, max: 31, avg: 12.86)
Length (states) of path with itp 'false':                 0 (count: 14, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:          38 (count: 14, min: 1, max: 6, avg: 2.71)
Equal non-trivial interpolants along paths:             128 (count: 14, min: 0, max: 24, avg: 9.14)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                14
Number of successful refinements:     14
Number of failed refinements:         0
Max. size of reached set before ref.: 143
Max. size of reached set after ref.:  85
Avg. size of reached set before ref.: 80.93
Avg. size of reached set after ref.:  18.57

Total time for CEGAR algorithm:       2.722s
Time for refinements:                 0.327s
Average time for refinement:          0.023s
Max time for refinement:              0.061s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          31
  Total lines:            31
  Line coverage:          1.000
  Visited conditions:     12
  Total conditions:       12
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     64
Number of CFA edges:             76
Number of relevant variables:    8
Number of functions:             2
Number of loops:                 1
Size of reached set:             118
  Number of reached locations:   39 (61%)
    Avg states per location:     3
    Max states per location:     12 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          115
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N33 (before lines 23-34), Function main called from node N9, stack depth 1 [4d5650ae], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.865s
  Time for loading CPAs:          0.829s
  Time for loading parser:        0.872s
  Time for CFA construction:      1.044s
    Time for parsing file(s):     0.389s
    Time for AST to CFA:          0.209s
    Time for CFA sanity check:    0.031s
    Time for post-processing:     0.200s
      Time for var class.:        0.051s
Time for Analysis:                2.722s
CPU time for analysis:            2.730s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.593s
Total CPU time for CPAchecker:    5.590s
Time for statistics:              0.070s

Time for Garbage Collector:       0.121s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     31MB (    29 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             31MB (    29 MiB) max;     24MB (    23 MiB) avg;     33MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        34MB (    32 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8072MB (  7698 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
