scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers/parport_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3flnruh5/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6182: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6183: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6184: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6233: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6257: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6269: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6710: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6711: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6712: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6775: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6855: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6867: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 8251: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8262: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8573: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8574: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8582: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8583: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8591: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 9113: Dereferencing of non-pointer type PULONG  in expression *PortNumber (ASTConverter.convert, WARNING)

line 9408: Dereferencing of non-pointer type PULONG  in expression *PRegFlags (ASTConverter.convert, WARNING)

line 9438: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function IoAcquireCancelSpinLock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function WRITE_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeSynchronizeExecution to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeStallExecutionProcessor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function READ_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeQueryTimeIncrement to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeQueryTickCount to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5494-5495: Ignoring function call through function pointer *(Extension->ChipInfo.ParChipClearMode): Status = (*(Extension->ChipInfo.ParChipClearMode))(Extension->ChipInfo.Context, ChipMode); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 5406-5407: Ignoring function call through function pointer *(Extension->ChipInfo.ParChipSetMode): Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context, ChipMode); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: lines 5406-5407: Unsupported feature (recursion): Status = PptSetChipMode(Extension->ChipInfo.Context, ChipMode); (line was originally pointer call(PptSetChipMode) Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context,
                                                     ChipMode);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            241 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            223 (93%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18 (7%)
  Times precision was empty:       197 (82%)
  Times precision was {false}:     8 (3%)
  Times result was cached:         12 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      24 (10%)
  Times result was 'false':        14 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         1533
  BDD entailment checks:           169
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       230
Number of predicates discovered:          2
Number of abstraction locations:          3
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         44
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.38
Number of irrelevant predicates:          10 (23%)
Number of preds handled by boolean abs:   24 (55%)
  Total number of models for allsat:      40
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.67

Time for post operator:                  2.309s
  Time for path formula creation:        2.227s
Time for strengthen operator:            0.059s
Time for prec operator:                  0.590s
  Time for abstraction:                  0.507s (Max:     0.049s, Count: 241)
    Boolean abstraction:                 0.256s
    Solving time:                        0.239s (Max:     0.029s)
    Model enumeration time:              0.029s
    Time for BDD construction:           0.014s (Max:     0.007s)
Time for merge operator:                 0.319s
Time for coverage check:                 0.003s
  Time for BDD entailment checks:        0.003s
Total time for SMT solver (w/o itp):     0.268s

Number of path formula cache hits:   2526 (23%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.082s

Total number of created targets for pointer analysis: 303
   Number of created targets for uf: *(struct__LIST_ENTRY)* is 15
   Number of created targets for uf: *unsigned_char is 7
   Number of created targets for uf: *signed_long_int is 4
   Number of created targets for uf: *signed_long_long_int is 27
   Number of created targets for uf: *unsigned_long_int is 53


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          48 (count: 562, min: 0, max: 43, avg: 0.09)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.131s
Automaton transfers with branching:                0
Automaton transfer successors:                        10570 (count: 10570, min: 1, max: 1, avg: 1.00) [1 x 10570]

CPA algorithm statistics
------------------------
Number of iterations:            5520
Max size of waitlist:            99
Average size of waitlist:        55
Number of computed successors:   6418
Max successors for one state:    2
Number of times merged:          682
Number of times stopped:         823
Number of times breaked:         8

Total time for CPA algorithm:         4.839s (Max:     2.158s)
  Time for choose from waitlist:      0.044s
  Time for precision adjustment:      0.855s
  Time for transfer relation:         3.187s
  Time for merge operator:            0.384s
  Time for stop operator:             0.074s
  Time for adding to reached set:     0.088s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                  12 (count: 8, min: 1, max: 2, avg: 1.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.195s
  Counterexample analysis:                             0.142s (Max:     0.034s, Calls: 8)
    Refinement sat check:                              0.110s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.007s
  ARG update:                                          0.024s

Length of refined path (in blocks):                      12 (count: 8, min: 1, max: 2, avg: 1.50)
Number of affected states:                                2 (count: 8, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp 'true':                  2 (count: 8, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp non-trivial itp:         2 (count: 8, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp 'false':                 0 (count: 8, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 8, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 8, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 3248
Max. size of reached set after ref.:  3247
Avg. size of reached set before ref.: 1752.13
Avg. size of reached set after ref.:  1626.75

Total time for CEGAR algorithm:       5.161s
Time for refinements:                 0.296s
Average time for refinement:          0.037s
Max time for refinement:              0.054s

Code Coverage
-----------------------------
  Function coverage:      0.192
  Visited lines:          1328
  Total lines:            4105
  Line coverage:          0.324
  Visited conditions:     272
  Total conditions:       1064
  Condition coverage:     0.256

CPAchecker general statistics
-----------------------------
Number of program locations:     5534
Number of CFA edges:             6160
Number of relevant variables:    805
Number of functions:             182
Number of loops:                 37
Size of reached set:             4579
  Number of reached locations:   682 (12%)
    Avg states per location:     6
    Max states per location:     70 (at node N4472)
  Number of reached functions:   35 (19%)
  Number of partitions:          4577
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1035 (before lines 3943-3959), Function PptTrySelectDevice called from node N806, stack depth 3 [6968bcec], stack [main, PptDispatchInternalDeviceControl, PptTrySelectDevice]])
  Number of target states:       0
  Size of final wait list        59

Time for analysis setup:          6.364s
  Time for loading CPAs:          1.047s
  Time for loading parser:        0.738s
  Time for CFA construction:      4.468s
    Time for parsing file(s):     1.017s
    Time for AST to CFA:          1.611s
    Time for CFA sanity check:    0.474s
    Time for post-processing:     1.150s
      Time for var class.:        0.661s
Time for Analysis:                5.161s
CPU time for analysis:            5.160s
Total time for CPAchecker:       11.530s
Total CPU time for CPAchecker:   11.520s
Time for statistics:              0.190s

Time for Garbage Collector:       0.316s (in 13 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     39MB (    37 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     29MB (    28 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     31MB (    29 MiB) avg
Total process virtual memory:   8131MB (  7754 MiB) max;   8098MB (  7723 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
