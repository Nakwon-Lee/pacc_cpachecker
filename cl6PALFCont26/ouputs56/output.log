scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_false-termination.4-32_1-drivers--usb--serial--mos7840.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_btzengm0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3692: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 3695: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 3698: Dead code detected: Goto: case_4 (CFACreationUtils.addEdgeToCFA, INFO)

line 3704: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_4 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function interruptible_sleep_on_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10833: Destroying the void* pointer mos7840_write::__cil_tmp68 produces garbage or the memory pointed by it is unused: status = mos7840_write(tty, port, __cil_tmp32, 1); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10629: Destroying the void* pointer mos7840_write::__cil_tmp68 produces garbage or the memory pointed by it is unused: status = mos7840_write(tty, port, __cil_tmp36, 1); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15919: Destroying the void* pointer mos7840_write::__cil_tmp68 produces garbage or the memory pointed by it is unused: mos7840_write(var_group1, var_group2, var_mos7840_write_24_p2, var_mos7840_write_24_p3); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_clear_halt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15867: Destroying the void* pointer mos7840_open::__cil_tmp65 produces garbage or the memory pointed by it is unused: res_mos7840_open_18 = mos7840_open(var_group1, var_group2); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            92545 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  87453 (94%)
  Because of loop head:            5035 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         57 (0%)
  Times precision was empty:       24948 (27%)
  Times precision was {false}:     7630 (8%)
  Times result was cached:         59314 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      653 (1%)
  Times result was 'false':        159 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         181626
  BDD entailment checks:           19236
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       442
Number of predicates discovered:          2
Number of abstraction locations:          263
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         67597
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 8.16
Number of irrelevant predicates:          41000 (61%)
Number of preds handled by boolean abs:   653 (1%)
  Total number of models for allsat:      652
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 67.850s
  Time for path formula creation:       66.093s
Time for strengthen operator:            2.521s
Time for prec operator:                 45.852s
  Time for abstraction:                 43.656s (Max:     0.374s, Count: 92545)
    Boolean abstraction:                 1.197s
    Solving time:                       21.053s (Max:     0.045s)
    Model enumeration time:              0.087s
    Time for BDD construction:           0.030s (Max:     0.001s)
Time for merge operator:                 4.857s
Time for coverage check:                 0.113s
  Time for BDD entailment checks:        0.086s
Total time for SMT solver (w/o itp):    21.140s

Number of path formula cache hits:   1481428 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    60.919s

Total number of created targets for pointer analysis: 13776
   Number of created targets for uf: *unsigned_short_int is 63
   Number of created targets for uf: *signed_int is 12
   Number of created targets for uf: *unsigned_char is 291
   Number of created targets for uf: *_Bool is 141
   Number of created targets for uf: *unsigned_int is 2
   Number of created targets for uf: *char is 5


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1268 (count: 86263, min: 0, max: 254, avg: 0.01)
Time for BDD node cleanup:                             0.019s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.084s
  Time for transition matches:                         3.966s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      2602798 (count: 2602798, min: 1, max: 1, avg: 1.00) [1 x 2602798]

CPA algorithm statistics
------------------------
Number of iterations:            818795
Max size of waitlist:            66
Average size of waitlist:        33
Number of computed successors:   918391
Max successors for one state:    2
Number of times merged:          81195
Number of times stopped:         98072
Number of times breaked:         57

Total time for CPA algorithm:       169.402s (Max:     7.086s)
  Time for choose from waitlist:      0.519s
  Time for precision adjustment:     54.484s
  Time for transfer relation:       100.384s
  Time for merge operator:            6.345s
  Time for stop operator:             1.568s
  Time for adding to reached set:     2.459s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   57
Avg. length of target path (in blocks):                1999 (count: 57, min: 4, max: 137, avg: 35.07)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   5.140s
  Counterexample analysis:                             3.357s (Max:     0.535s, Calls: 57)
    Refinement sat check:                              2.540s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.061s
  Precision update:                                    0.051s
  ARG update:                                          1.604s

Length of refined path (in blocks):                    1942 (count: 57, min: 3, max: 136, avg: 34.07)
Number of affected states:                             1885 (count: 57, min: 2, max: 135, avg: 33.07)
Length (states) of path with itp 'true':                  0 (count: 57, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1885 (count: 57, min: 2, max: 135, avg: 33.07)
Length (states) of path with itp 'false':                57 (count: 57, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 57, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1828 (count: 57, min: 1, max: 134, avg: 32.07)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                57
Number of successful refinements:     57
Number of failed refinements:         0
Max. size of reached set before ref.: 16052
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 14258.11
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:     175.437s
Time for refinements:                 6.028s
Average time for refinement:          0.105s
Max time for refinement:              0.624s

Code Coverage
-----------------------------
  Function coverage:      0.797
  Visited lines:          8158
  Total lines:            8661
  Line coverage:          0.942
  Visited conditions:     912
  Total conditions:       998
  Condition coverage:     0.914

CPAchecker general statistics
-----------------------------
Number of program locations:     9928
Number of CFA edges:             10559
Number of relevant variables:    2363
Number of functions:             74
Number of loops:                 16
Size of reached set:             7620
  Number of reached locations:   3190 (32%)
    Avg states per location:     2
    Max states per location:     97 (at node N333)
  Number of reached functions:   59 (80%)
  Number of partitions:          7620
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          7.798s
  Time for loading CPAs:          1.163s
  Time for loading parser:        0.805s
  Time for CFA construction:      5.720s
    Time for parsing file(s):     1.314s
    Time for AST to CFA:          2.019s
    Time for CFA sanity check:    0.525s
    Time for post-processing:     1.608s
      Time for var class.:        0.776s
Time for Analysis:              175.437s
CPU time for analysis:          175.430s
Time for analyzing result:        0.008s
Total time for CPAchecker:      183.241s
Total CPU time for CPAchecker:  183.220s
Time for statistics:              0.271s

Time for Garbage Collector:      16.212s (in 194 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                881MB (   840 MiB) max;    331MB (   316 MiB) avg;    906MB (   864 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    37 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:          1087MB (  1037 MiB) max;    504MB (   480 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8206MB (  7825 MiB) max;   8149MB (  7772 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
