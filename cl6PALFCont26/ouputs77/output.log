scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--staging--zram--zram.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__ze2j_2s/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3263: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 3266: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 3269: Dead code detected: Goto: case_4 (CFACreationUtils.addEdgeToCFA, INFO)

line 3275: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_4 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_rwsem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_alloc_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_make_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_physical_block_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_logical_block_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_io_min to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_queue_io_opt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function zs_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function zs_destroy_pool to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1874 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1628 (87%)
  Because of loop head:            235 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (1%)
  Times precision was empty:       900 (48%)
  Times precision was {false}:     111 (6%)
  Times result was cached:         756 (40%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      107 (6%)
  Times result was 'false':        33 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         939
  BDD entailment checks:           475
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       80
Number of predicates discovered:          3
Number of abstraction locations:          61
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         1241
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 5.69
Number of irrelevant predicates:          412 (33%)
Number of preds handled by boolean abs:   128 (10%)
  Total number of models for allsat:      109
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  1.961s
  Time for path formula creation:        1.881s
Time for strengthen operator:            0.067s
Time for prec operator:                  1.252s
  Time for abstraction:                  1.120s (Max:     0.027s, Count: 1874)
    Boolean abstraction:                 0.144s
    Solving time:                        0.172s (Max:     0.011s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.011s (Max:     0.001s)
Time for merge operator:                 0.068s
Time for coverage check:                 0.033s
  Time for BDD entailment checks:        0.033s
Total time for SMT solver (w/o itp):     0.188s

Number of path formula cache hits:   23306 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.645s

Total number of created targets for pointer analysis: 21
   Number of created targets for uf: *unsigned_int is 21


Number of BDD nodes:                               206
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         208 (count: 2592, min: 0, max: 109, avg: 0.08)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.252s
Automaton transfers with branching:                0
Automaton transfer successors:                        28929 (count: 28929, min: 1, max: 1, avg: 1.00) [1 x 28929]

CPA algorithm statistics
------------------------
Number of iterations:            7377
Max size of waitlist:            13
Average size of waitlist:        6
Number of computed successors:   7966
Max successors for one state:    2
Number of times merged:          232
Number of times stopped:         533
Number of times breaked:         11

Total time for CPA algorithm:         5.535s (Max:     1.531s)
  Time for choose from waitlist:      0.070s
  Time for precision adjustment:      1.616s
  Time for transfer relation:         3.317s
  Time for merge operator:            0.109s
  Time for stop operator:             0.128s
  Time for adding to reached set:     0.083s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                 289 (count: 11, min: 10, max: 47, avg: 26.27)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.366s
  Counterexample analysis:                             0.212s (Max:     0.032s, Calls: 11)
    Refinement sat check:                              0.148s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.038s
  Precision update:                                    0.003s
  ARG update:                                          0.085s

Length of refined path (in blocks):                     273 (count: 11, min: 9, max: 46, avg: 24.82)
Number of affected states:                              257 (count: 11, min: 8, max: 45, avg: 23.36)
Length (states) of path with itp 'true':                  5 (count: 11, min: 0, max: 5, avg: 0.45)
Length (states) of path with itp non-trivial itp:       257 (count: 11, min: 8, max: 45, avg: 23.36)
Length (states) of path with itp 'false':                11 (count: 11, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 11, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             246 (count: 11, min: 7, max: 44, avg: 22.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 904
Max. size of reached set after ref.:  37
Avg. size of reached set before ref.: 629.36
Avg. size of reached set after ref.:  6.09

Total time for CEGAR algorithm:       5.966s
Time for refinements:                 0.431s
Average time for refinement:          0.039s
Max time for refinement:              0.062s

Code Coverage
-----------------------------
  Function coverage:      0.311
  Visited lines:          1592
  Total lines:            3665
  Line coverage:          0.434
  Visited conditions:     56
  Total conditions:       218
  Condition coverage:     0.257

CPAchecker general statistics
-----------------------------
Number of program locations:     4140
Number of CFA edges:             4328
Number of relevant variables:    937
Number of functions:             74
Number of loops:                 9
Size of reached set:             545
  Number of reached locations:   290 (7%)
    Avg states per location:     1
    Max states per location:     8 (at node N2844)
  Number of reached functions:   23 (31%)
  Number of partitions:          539
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2912 (before lines 6788-6810), Function zram_init called from node N3040, stack depth 2 [5611bba], stack [main, zram_init]])
  Number of target states:       0

Time for analysis setup:          5.704s
  Time for loading CPAs:          0.985s
  Time for loading parser:        0.710s
  Time for CFA construction:      3.834s
    Time for parsing file(s):     1.055s
    Time for AST to CFA:          1.283s
    Time for CFA sanity check:    0.297s
    Time for post-processing:     0.964s
      Time for var class.:        0.519s
Time for Analysis:                5.967s
CPU time for analysis:            5.960s
Time for analyzing result:        0.001s
Total time for CPAchecker:       11.678s
Total CPU time for CPAchecker:   11.650s
Time for statistics:              0.117s

Time for Garbage Collector:       0.249s (in 13 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     39MB (    37 MiB) avg;     71MB (    67 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     29MB (    28 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8100MB (  7725 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
