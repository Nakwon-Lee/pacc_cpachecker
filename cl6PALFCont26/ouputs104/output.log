scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--input--touchscreen--egalax_ts.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ht94ivw0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_master_recv to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_mt_report_slot_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_mt_report_pointer_emulation to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_output to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_set_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_input to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_master_send to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_mt_init_slots to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            443 (8% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  414 (93%)
  Because of loop head:            25 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (1%)
  Times precision was empty:       174 (39%)
  Times precision was {false}:     43 (10%)
  Times result was cached:         182 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      44 (10%)
  Times result was 'false':        7 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         219
  BDD entailment checks:           87
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       46
Number of predicates discovered:          2
Number of abstraction locations:          42
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         269
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.09
Number of irrelevant predicates:          107 (40%)
Number of preds handled by boolean abs:   44 (16%)
  Total number of models for allsat:      44
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.902s
  Time for path formula creation:        0.845s
Time for strengthen operator:            0.048s
Time for prec operator:                  0.533s
  Time for abstraction:                  0.482s (Max:     0.032s, Count: 443)
    Boolean abstraction:                 0.078s
    Solving time:                        0.095s (Max:     0.014s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.009s (Max:     0.005s)
Time for merge operator:                 0.021s
Time for coverage check:                 0.015s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     0.098s

Number of path formula cache hits:   3074 (54%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.786s

Total number of created targets for pointer analysis: 60
   Number of created targets for uf: *unsigned_char is 61


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          65 (count: 745, min: 0, max: 65, avg: 0.09)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.111s
Automaton transfers with branching:                0
Automaton transfer successors:                         5354 (count: 5354, min: 1, max: 1, avg: 1.00) [1 x 5354]

CPA algorithm statistics
------------------------
Number of iterations:            1768
Max size of waitlist:            13
Average size of waitlist:        7
Number of computed successors:   1937
Max successors for one state:    2
Number of times merged:          66
Number of times stopped:         137
Number of times breaked:         4

Total time for CPA algorithm:         2.361s (Max:     0.982s)
  Time for choose from waitlist:      0.041s
  Time for precision adjustment:      0.625s
  Time for transfer relation:         1.445s
  Time for merge operator:            0.037s
  Time for stop operator:             0.038s
  Time for adding to reached set:     0.058s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  68 (count: 4, min: 4, max: 34, avg: 17.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.110s
  Counterexample analysis:                             0.054s (Max:     0.020s, Calls: 4)
    Refinement sat check:                              0.034s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.017s
  Precision update:                                    0.014s
  ARG update:                                          0.020s

Length of refined path (in blocks):                      64 (count: 4, min: 3, max: 33, avg: 16.00)
Number of affected states:                               60 (count: 4, min: 2, max: 32, avg: 15.00)
Length (states) of path with itp 'true':                  0 (count: 4, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        60 (count: 4, min: 2, max: 32, avg: 15.00)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              56 (count: 4, min: 1, max: 31, avg: 14.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 516
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 385.25
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.516s
Time for refinements:                 0.154s
Average time for refinement:          0.038s
Max time for refinement:              0.048s

Code Coverage
-----------------------------
  Function coverage:      0.545
  Visited lines:          1061
  Total lines:            1206
  Line coverage:          0.880
  Visited conditions:     48
  Total conditions:       70
  Condition coverage:     0.686

CPAchecker general statistics
-----------------------------
Number of program locations:     1394
Number of CFA edges:             1430
Number of relevant variables:    137
Number of functions:             33
Number of loops:                 2
Size of reached set:             265
  Number of reached locations:   213 (15%)
    Avg states per location:     1
    Max states per location:     5 (at node N407)
  Number of reached functions:   18 (55%)
  Number of partitions:          265
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.517s
  Time for loading CPAs:          0.909s
  Time for loading parser:        0.734s
  Time for CFA construction:      2.689s
    Time for parsing file(s):     0.910s
    Time for AST to CFA:          0.903s
    Time for CFA sanity check:    0.156s
    Time for post-processing:     0.523s
      Time for var class.:        0.239s
Time for Analysis:                2.516s
CPU time for analysis:            2.510s
Time for analyzing result:        0.000s
Total time for CPAchecker:        7.043s
Total CPU time for CPAchecker:    7.040s
Time for statistics:              0.113s

Time for Garbage Collector:       0.152s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    56 MiB) max;     33MB (    31 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8083MB (  7708 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
