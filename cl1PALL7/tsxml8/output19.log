scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--via--viafb.ko-ldv_main12_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_w1naklk_/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4936: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4945: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4962-4963: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4966-4967: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4974-4975: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5149-5150: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5153-5154: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5161-5162: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5182-5183: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5186-5187: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5194-5195: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5216-5217: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5220-5221: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5228-5229: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5288-5289: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5292-5293: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5300-5301: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7656: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10102: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10663: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12295: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12519: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13241: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13655: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14152: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14284: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14728: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15912: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16555: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16800: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17299: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17530: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17847: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18024: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18240: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18436: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18622: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18808: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18984: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19200: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19386: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15038: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15071: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5512-5516: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5464-5467: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5573-5577: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9922: Function pointer *(clock.set_engine_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9925: Function pointer *(clock.set_primary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9926: Function pointer *(clock.set_primary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9927: Function pointer *(clock.set_secondary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9928: Function pointer *(clock.set_secondary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15621: Ignoring function call through function pointer *(hooks->suspend): (*(hooks->suspend))(hooks->private); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function console_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_get_color_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_set_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function console_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            861 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            428 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         433 (50%)
  Times precision was empty:       244 (28%)
  Times precision was {false}:     152 (18%)
  Times result was cached:         385 (45%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      80 (9%)
  Times result was 'false':        439 (51%)
Number of strengthen sat checks:   0
Number of coverage checks:         4952
  BDD entailment checks:           84
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       206
Number of predicates discovered:          10
Number of abstraction locations:          6
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         1426
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 6.15
Number of irrelevant predicates:          497 (35%)
Number of preds handled by boolean abs:   279 (20%)
  Total number of models for allsat:      77
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.96

Time for post operator:                  5.092s
  Time for path formula creation:        5.019s
Time for strengthen operator:            0.151s
Time for prec operator:                  6.016s
  Time for abstraction:                  5.818s (Max:     0.334s, Count: 861)
    Boolean abstraction:                 2.702s
    Solving time:                        3.521s (Max:     0.299s)
    Model enumeration time:              0.111s
    Time for BDD construction:           0.014s (Max:     0.002s)
Time for merge operator:                 0.481s
Time for coverage check:                 0.005s
  Time for BDD entailment checks:        0.003s
Total time for SMT solver (w/o itp):     3.632s

Number of path formula cache hits:   34942 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.347s

Total number of created targets for pointer analysis: 4588
   Number of created targets for uf: *(void)* is 17
   Number of created targets for uf: *unsigned_short_int is 130
   Number of created targets for uf: *signed_int is 43
   Number of created targets for uf: *(char)* is 17
   Number of created targets for uf: *unsigned_char is 793
   Number of created targets for uf: *(struct_list_head)* is 123
   Number of created targets for uf: *signed_long_int is 3
   Number of created targets for uf: *unsigned_long_long_int is 6
   Number of created targets for uf: *(struct_dma_map_ops)* is 6
   Number of created targets for uf: *(unsigned_long_long_int)* is 6
   Number of created targets for uf: *unsigned_int is 162
   Number of created targets for uf: *unsigned_long_int is 35


Number of BDD nodes:                               267
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         308 (count: 1790, min: 0, max: 79, avg: 0.17)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.348s
Automaton transfers with branching:                0
Automaton transfer successors:                        39704 (count: 39704, min: 1, max: 1, avg: 1.00) [1 x 39704]

CPA algorithm statistics
------------------------
Number of iterations:            26515
Max size of waitlist:            32
Average size of waitlist:        19
Number of computed successors:   29744
Max successors for one state:    2
Number of times merged:          2434
Number of times stopped:         2509
Number of times breaked:         31

Total time for CPA algorithm:        15.297s (Max:     2.714s)
  Time for choose from waitlist:      0.094s
  Time for precision adjustment:      6.604s
  Time for transfer relation:         7.090s
  Time for merge operator:            0.629s
  Time for stop operator:             0.181s
  Time for adding to reached set:     0.225s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   31
Avg. length of target path (in blocks):                 108 (count: 31, min: 1, max: 7, avg: 3.48)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.108s
  Counterexample analysis:                             3.951s (Max:     0.246s, Calls: 31)
    Refinement sat check:                              3.720s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.007s
  ARG update:                                          0.095s

Length of refined path (in blocks):                     108 (count: 31, min: 1, max: 7, avg: 3.48)
Number of affected states:                               71 (count: 31, min: 0, max: 5, avg: 2.29)
Length (states) of path with itp 'true':                  6 (count: 31, min: 0, max: 3, avg: 0.19)
Length (states) of path with itp non-trivial itp:        71 (count: 31, min: 0, max: 5, avg: 2.29)
Length (states) of path with itp 'false':                 0 (count: 31, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           1 (count: 31, min: 0, max: 1, avg: 0.03)
Equal non-trivial interpolants along paths:              45 (count: 31, min: 0, max: 4, avg: 1.45)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     31
Number of failed refinements:         0
Max. size of reached set before ref.: 3907
Max. size of reached set after ref.:  851
Avg. size of reached set before ref.: 939.65
Avg. size of reached set after ref.:  176.06

Total time for CEGAR algorithm:      19.582s
Time for refinements:                 4.255s
Average time for refinement:          0.137s
Max time for refinement:              0.264s

Code Coverage
-----------------------------
  Function coverage:      0.132
  Visited lines:          1871
  Total lines:            8588
  Line coverage:          0.218
  Visited conditions:     358
  Total conditions:       2820
  Condition coverage:     0.127

CPAchecker general statistics
-----------------------------
Number of program locations:     12603
Number of CFA edges:             14769
Number of relevant variables:    1342
Number of functions:             650
Number of loops:                 71
Size of reached set:             3125
  Number of reached locations:   1049 (8%)
    Avg states per location:     2
    Max states per location:     123 (at node N29)
  Number of reached functions:   86 (13%)
  Number of partitions:          3124
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N9340 (before line 15856), Function main called from node N9268, stack depth 1 [5cc87de4], stack [main]])
  Number of target states:       0
  Size of final wait list        27

Time for analysis setup:         10.607s
  Time for loading CPAs:          1.248s
  Time for loading parser:        0.933s
  Time for CFA construction:      8.251s
    Time for parsing file(s):     1.497s
    Time for AST to CFA:          3.202s
    Time for CFA sanity check:    0.852s
    Time for post-processing:     2.515s
      Time for var class.:        1.108s
Time for Analysis:               19.582s
CPU time for analysis:           19.580s
Total time for CPAchecker:       30.206s
Total CPU time for CPAchecker:   30.180s
Time for statistics:              0.168s

Time for Garbage Collector:       0.682s (in 43 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 87MB (    83 MiB) max;     55MB (    52 MiB) avg;     93MB (    88 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     33MB (    31 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     34MB (    33 MiB) avg
Total process virtual memory:   8131MB (  7754 MiB) max;   8113MB (  7737 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
