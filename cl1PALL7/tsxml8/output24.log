scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--via--viafb.ko-ldv_main12_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_f9o_mjql/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4936: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4945: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4962-4963: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4966-4967: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4974-4975: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5149-5150: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5153-5154: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5161-5162: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5182-5183: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5186-5187: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5194-5195: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5216-5217: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5220-5221: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5228-5229: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5288-5289: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5292-5293: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5300-5301: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7656: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10102: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10663: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12295: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12519: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13241: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13655: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14152: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14284: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14728: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15912: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16555: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16800: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17299: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17530: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17847: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18024: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18240: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18436: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18622: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18808: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18984: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19200: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19386: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15038: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15071: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5512-5516: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5464-5467: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5573-5577: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9922: Function pointer *(clock.set_engine_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9925: Function pointer *(clock.set_primary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9926: Function pointer *(clock.set_primary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9927: Function pointer *(clock.set_secondary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9928: Function pointer *(clock.set_secondary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17473: Ignoring function call through function pointer *(pos->get_preferred_mode): mode = (*(pos->get_preferred_mode))(pos); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_dealloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17434: Ignoring function call through function pointer *(pos->cleanup): (*(pos->cleanup))(pos); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function fb_destroy_modedb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15660: Ignoring function call through function pointer *(hooks->resume): (*(hooks->resume))(hooks->private); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function console_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_get_color_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_set_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function console_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 15660: Unsupported feature (recursion): via_resume(hooks->private); (line was originally pointer call(via_resume) (*(hooks->resume))(hooks->private);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            526 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            289 (55%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         237 (45%)
  Times precision was empty:       161 (31%)
  Times precision was {false}:     115 (22%)
  Times result was cached:         197 (37%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      53 (10%)
  Times result was 'false':        240 (46%)
Number of strengthen sat checks:   0
Number of coverage checks:         2156
  BDD entailment checks:           114
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       206
Number of predicates discovered:          10
Number of abstraction locations:          5
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         801
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 4.77
Number of irrelevant predicates:          378 (47%)
Number of preds handled by boolean abs:   176 (22%)
  Total number of models for allsat:      39
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.74

Time for post operator:                  4.594s
  Time for path formula creation:        4.497s
Time for strengthen operator:            0.052s
Time for prec operator:                  5.473s
  Time for abstraction:                  5.353s (Max:     0.307s, Count: 526)
    Boolean abstraction:                 2.413s
    Solving time:                        3.539s (Max:     0.259s)
    Model enumeration time:              0.051s
    Time for BDD construction:           0.012s (Max:     0.004s)
Time for merge operator:                 0.376s
Time for coverage check:                 0.007s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     3.590s

Number of path formula cache hits:   11397 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.040s

Total number of created targets for pointer analysis: 4269
   Number of created targets for uf: *(void)* is 9
   Number of created targets for uf: *(char)* is 17
   Number of created targets for uf: *signed_int is 133
   Number of created targets for uf: *unsigned_char is 261
   Number of created targets for uf: *(struct_list_head)* is 123
   Number of created targets for uf: *(struct_dma_map_ops)* is 6
   Number of created targets for uf: *unsigned_long_long_int is 6
   Number of created targets for uf: *(unsigned_long_long_int)* is 6
   Number of created targets for uf: *unsigned_int is 269
   Number of created targets for uf: *unsigned_long_int is 18


Number of BDD nodes:                               234
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         271 (count: 1346, min: 0, max: 72, avg: 0.20)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.243s
Automaton transfers with branching:                0
Automaton transfer successors:                        16709 (count: 16709, min: 1, max: 1, avg: 1.00) [1 x 16709]

CPA algorithm statistics
------------------------
Number of iterations:            10171
Max size of waitlist:            27
Average size of waitlist:        10
Number of computed successors:   11659
Max successors for one state:    2
Number of times merged:          1021
Number of times stopped:         1118
Number of times breaked:         29

Total time for CPA algorithm:        12.476s (Max:     2.388s)
  Time for choose from waitlist:      0.050s
  Time for precision adjustment:      5.788s
  Time for transfer relation:         5.712s
  Time for merge operator:            0.464s
  Time for stop operator:             0.104s
  Time for adding to reached set:     0.083s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   29
Avg. length of target path (in blocks):                  72 (count: 29, min: 1, max: 5, avg: 2.48)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.635s
  Counterexample analysis:                             3.520s (Max:     0.225s, Calls: 29)
    Refinement sat check:                              3.305s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.012s
  ARG update:                                          0.059s

Length of refined path (in blocks):                      72 (count: 29, min: 1, max: 5, avg: 2.48)
Number of affected states:                               40 (count: 29, min: 0, max: 4, avg: 1.38)
Length (states) of path with itp 'true':                  3 (count: 29, min: 0, max: 3, avg: 0.10)
Length (states) of path with itp non-trivial itp:        40 (count: 29, min: 0, max: 4, avg: 1.38)
Length (states) of path with itp 'false':                 0 (count: 29, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           1 (count: 29, min: 0, max: 1, avg: 0.03)
Equal non-trivial interpolants along paths:              16 (count: 29, min: 0, max: 2, avg: 0.55)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                29
Number of successful refinements:     29
Number of failed refinements:         0
Max. size of reached set before ref.: 1972
Max. size of reached set after ref.:  1061
Avg. size of reached set before ref.: 428.48
Avg. size of reached set after ref.:  171.17

Total time for CEGAR algorithm:      16.220s
Time for refinements:                 3.726s
Average time for refinement:          0.128s
Max time for refinement:              0.243s

Code Coverage
-----------------------------
  Function coverage:      0.132
  Visited lines:          1748
  Total lines:            8588
  Line coverage:          0.204
  Visited conditions:     298
  Total conditions:       2820
  Condition coverage:     0.106

CPAchecker general statistics
-----------------------------
Number of program locations:     12603
Number of CFA edges:             14769
Number of relevant variables:    1342
Number of functions:             650
Number of loops:                 71
Size of reached set:             2840
  Number of reached locations:   901 (7%)
    Avg states per location:     3
    Max states per location:     111 (at node N29)
  Number of reached functions:   86 (13%)
  Number of partitions:          2839
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N9340 (before line 15856), Function main called from node N9268, stack depth 1 [4693d24f], stack [main]])
  Number of target states:       0
  Size of final wait list        22

Time for analysis setup:          9.756s
  Time for loading CPAs:          1.089s
  Time for loading parser:        0.704s
  Time for CFA construction:      7.840s
    Time for parsing file(s):     1.551s
    Time for AST to CFA:          2.860s
    Time for CFA sanity check:    0.742s
    Time for post-processing:     2.467s
      Time for var class.:        1.272s
Time for Analysis:               16.220s
CPU time for analysis:           16.210s
Total time for CPAchecker:       25.982s
Total CPU time for CPAchecker:   25.950s
Time for statistics:              0.188s

Time for Garbage Collector:       0.582s (in 34 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 86MB (    82 MiB) max;     55MB (    52 MiB) avg;     90MB (    86 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     32MB (    30 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8114MB (  7738 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
