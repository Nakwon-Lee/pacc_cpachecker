scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-uwb-i1480-dfu-i1480-dfu-usb.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_03ao2u5y/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3389: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 3452: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3320: Function pointer *(i1480->rc_release) with type void (*)(struct i1480 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_intf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_undefined_pointer to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_intf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3896: Ignoring function call through function pointer *(i1480->read): result = (*(i1480->read))(i1480, reg, 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3905: Ignoring function call through function pointer *(i1480->write): result = (*(i1480->write))(i1480, reg, (const void *)buffer, 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3243: Ignoring function call through function pointer *(i1480->read): result = (*(i1480->read))(i1480, 2148007936U, 8UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3320: Ignoring function call through function pointer *(i1480->rc_release): (*(i1480->rc_release))(i1480); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_reset_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4093: Ignoring function call through function pointer *(i1480->read): result = (*(i1480->read))(i1480, 2148007936U, (size_t )4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4167: Ignoring function call through function pointer *(i1480->rc_setup): tmp = (*(i1480->rc_setup))(i1480); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 4167: Unsupported feature (recursion): tmp = i1480_fw_upload(i1480); (line was originally pointer call(i1480_fw_upload) tmp = (*(i1480->rc_setup))(i1480);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            223 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            207 (93%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         16 (7%)
  Times precision was empty:       201 (90%)
  Times precision was {false}:     16 (7%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6 (3%)
  Times result was 'false':        11 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         516
  BDD entailment checks:           20
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       253
Number of predicates discovered:          5
Number of abstraction locations:          3
Max number of predicates per location:    4
Avg number of predicates per location:    2
Total predicates per abstraction:         32
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 1.45
Number of irrelevant predicates:          16 (50%)
Number of preds handled by boolean abs:   16 (50%)
  Total number of models for allsat:      6
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.963s
  Time for path formula creation:        0.936s
Time for strengthen operator:            0.017s
Time for prec operator:                  0.969s
  Time for abstraction:                  0.922s (Max:     0.176s, Count: 223)
    Boolean abstraction:                 0.262s
    Solving time:                        0.635s (Max:     0.152s)
    Model enumeration time:              0.019s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.099s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.654s

Number of path formula cache hits:   4174 (62%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.853s

Total number of created targets for pointer analysis: 36
   Number of created targets for uf: *(void)* is 2
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_i1480)*],_Parameter_2_type:_[(char)*],_Parameter_3_type:_[unsigned_long_int],_VarArgs:_false)* is 2
   Number of created targets for uf: *(struct_usb_device)* is 2
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_i1480)*],_Parameter_2_type:_[unsigned_int],_Parameter_3_type:_[unsigned_long_int],_VarArgs:_false)* is 2
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_i1480)*],_VarArgs:_false)* is 3
   Number of created targets for uf: *unsigned_long_int is 2
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_4,_Parameter_1_type:_[(struct_i1480)*],_Parameter_2_type:_[unsigned_int],_Parameter_3_type:_[(void)*],_Parameter_4_type:_[unsigned_long_int],_VarArgs:_false)* is 2
   Number of created targets for uf: *(char)* is 5
   Number of created targets for uf: *(struct_urb)* is 2
   Number of created targets for uf: *unsigned_char is 2
   Number of created targets for uf: *(struct_usb_interface)* is 2
   Number of created targets for uf: *signed_long_int is 3
   Number of created targets for uf: *(struct_fw_hdr)* is 6
   Number of created targets for uf: *(struct_device)* is 2
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               208
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          46 (count: 367, min: 0, max: 41, avg: 0.13)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.069s
Automaton transfers with branching:                0
Automaton transfer successors:                         6441 (count: 6441, min: 1, max: 1, avg: 1.00) [1 x 6441]

CPA algorithm statistics
------------------------
Number of iterations:            3298
Max size of waitlist:            52
Average size of waitlist:        30
Number of computed successors:   3759
Max successors for one state:    2
Number of times merged:          248
Number of times stopped:         268
Number of times breaked:         8

Total time for CPA algorithm:         2.841s (Max:     0.869s)
  Time for choose from waitlist:      0.031s
  Time for precision adjustment:      1.130s
  Time for transfer relation:         1.407s
  Time for merge operator:            0.141s
  Time for stop operator:             0.030s
  Time for adding to reached set:     0.054s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                  17 (count: 8, min: 1, max: 3, avg: 2.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.249s
  Counterexample analysis:                             0.204s (Max:     0.047s, Calls: 8)
    Refinement sat check:                              0.167s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.001s
  ARG update:                                          0.031s

Length of refined path (in blocks):                      14 (count: 8, min: 1, max: 2, avg: 1.75)
Number of affected states:                                3 (count: 8, min: 0, max: 1, avg: 0.38)
Length (states) of path with itp 'true':                  3 (count: 8, min: 0, max: 1, avg: 0.38)
Length (states) of path with itp non-trivial itp:         3 (count: 8, min: 0, max: 1, avg: 0.38)
Length (states) of path with itp 'false':                 3 (count: 8, min: 0, max: 1, avg: 0.38)
Different non-trivial interpolants along paths:           0 (count: 8, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 8, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 975
Max. size of reached set after ref.:  905
Avg. size of reached set before ref.: 668.13
Avg. size of reached set after ref.:  356.00

Total time for CEGAR algorithm:       3.132s
Time for refinements:                 0.282s
Average time for refinement:          0.035s
Max time for refinement:              0.057s

Code Coverage
-----------------------------
  Function coverage:      0.720
  Visited lines:          1089
  Total lines:            1568
  Line coverage:          0.695
  Visited conditions:     132
  Total conditions:       306
  Condition coverage:     0.431

CPAchecker general statistics
-----------------------------
Number of program locations:     2135
Number of CFA edges:             2317
Number of relevant variables:    295
Number of functions:             50
Number of loops:                 19
Size of reached set:             984
  Number of reached locations:   495 (23%)
    Avg states per location:     1
    Max states per location:     7 (at node N1258)
  Number of reached functions:   36 (72%)
  Number of partitions:          984
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        38

Time for analysis setup:          4.079s
  Time for loading CPAs:          0.737s
  Time for loading parser:        0.614s
  Time for CFA construction:      2.592s
    Time for parsing file(s):     0.808s
    Time for AST to CFA:          0.879s
    Time for CFA sanity check:    0.130s
    Time for post-processing:     0.588s
      Time for var class.:        0.297s
Time for Analysis:                3.140s
CPU time for analysis:            3.140s
Total time for CPAchecker:        7.222s
Total CPU time for CPAchecker:    7.210s
Time for statistics:              0.101s

Time for Garbage Collector:       0.162s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     34MB (    33 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8090MB (  7715 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
