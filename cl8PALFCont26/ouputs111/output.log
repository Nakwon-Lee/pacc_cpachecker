scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b5fmk490/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function subdev_8255_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 1828: Destroying the void* pointer alloc_private::__cil_tmp4 produces garbage or the memory pointed by it is unused: tmp = alloc_private(dev, __cil_tmp25); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function subdev_8255_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            510 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  385 (75%)
  Because of loop head:            119 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (1%)
  Times precision was empty:       243 (48%)
  Times precision was {false}:     56 (11%)
  Times result was cached:         172 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      39 (8%)
  Times result was 'false':        11 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         556
  BDD entailment checks:           180
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       109
Number of predicates discovered:          2
Number of abstraction locations:          32
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         267
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.81
Number of irrelevant predicates:          119 (45%)
Number of preds handled by boolean abs:   39 (15%)
  Total number of models for allsat:      39
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.153s
  Time for path formula creation:        1.099s
Time for strengthen operator:            0.045s
Time for prec operator:                  0.715s
  Time for abstraction:                  0.627s (Max:     0.035s, Count: 510)
    Boolean abstraction:                 0.103s
    Solving time:                        0.182s (Max:     0.012s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.023s (Max:     0.012s)
Time for merge operator:                 0.072s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.183s

Number of path formula cache hits:   4792 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.037s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          25 (count: 942, min: 0, max: 25, avg: 0.03)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.096s
Automaton transfers with branching:                0
Automaton transfer successors:                         8398 (count: 8398, min: 1, max: 1, avg: 1.00) [1 x 8398]

CPA algorithm statistics
------------------------
Number of iterations:            2385
Max size of waitlist:            17
Average size of waitlist:        7
Number of computed successors:   2734
Max successors for one state:    2
Number of times merged:          188
Number of times stopped:         327
Number of times breaked:         6

Total time for CPA algorithm:         3.093s (Max:     0.927s)
  Time for choose from waitlist:      0.021s
  Time for precision adjustment:      0.916s
  Time for transfer relation:         1.792s
  Time for merge operator:            0.120s
  Time for stop operator:             0.081s
  Time for adding to reached set:     0.034s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                 109 (count: 6, min: 5, max: 29, avg: 18.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.143s
  Counterexample analysis:                             0.076s (Max:     0.020s, Calls: 6)
    Refinement sat check:                              0.052s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.017s
  Precision update:                                    0.005s
  ARG update:                                          0.032s

Length of refined path (in blocks):                     103 (count: 6, min: 4, max: 28, avg: 17.17)
Number of affected states:                               97 (count: 6, min: 3, max: 27, avg: 16.17)
Length (states) of path with itp 'true':                  0 (count: 6, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        97 (count: 6, min: 3, max: 27, avg: 16.17)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              91 (count: 6, min: 2, max: 26, avg: 15.17)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 485
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 365.33
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.278s
Time for refinements:                 0.185s
Average time for refinement:          0.030s
Max time for refinement:              0.044s

Code Coverage
-----------------------------
  Function coverage:      0.556
  Visited lines:          846
  Total lines:            903
  Line coverage:          0.937
  Visited conditions:     60
  Total conditions:       80
  Condition coverage:     0.750

CPAchecker general statistics
-----------------------------
Number of program locations:     1070
Number of CFA edges:             1106
Number of relevant variables:    202
Number of functions:             27
Number of loops:                 3
Size of reached set:             223
  Number of reached locations:   198 (19%)
    Avg states per location:     1
    Max states per location:     4 (at node N209)
  Number of reached functions:   15 (56%)
  Number of partitions:          223
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.316s
  Time for loading CPAs:          1.019s
  Time for loading parser:        0.737s
  Time for CFA construction:      2.406s
    Time for parsing file(s):     0.801s
    Time for AST to CFA:          0.735s
    Time for CFA sanity check:    0.173s
    Time for post-processing:     0.545s
      Time for var class.:        0.267s
Time for Analysis:                3.278s
CPU time for analysis:            3.270s
Time for analyzing result:        0.000s
Total time for CPAchecker:        7.599s
Total CPU time for CPAchecker:    7.590s
Time for statistics:              0.101s

Time for Garbage Collector:       0.160s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     33MB (    32 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     27MB (    26 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8087MB (  7712 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
