scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_211qoqrt/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7429: Unsupported feature (recursion): tmp = ldv_submit_urb(ldv_func_arg1); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            1721 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1425 (83%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         296 (17%)
  Times precision was empty:       1188 (69%)
  Times precision was {false}:     120 (7%)
  Times result was cached:         305 (18%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      108 (6%)
  Times result was 'false':        301 (17%)
Number of strengthen sat checks:   0
Number of coverage checks:         8841
  BDD entailment checks:           835
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       170
Number of predicates discovered:          11
Number of abstraction locations:          4
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         1869
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 8.20
Number of irrelevant predicates:          528 (28%)
Number of preds handled by boolean abs:   502 (27%)
  Total number of models for allsat:      184
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.70

Time for post operator:                  1.796s
  Time for path formula creation:        1.733s
Time for strengthen operator:            0.088s
Time for prec operator:                  2.781s
  Time for abstraction:                  2.634s (Max:     0.221s, Count: 1721)
    Boolean abstraction:                 1.585s
    Solving time:                        1.043s (Max:     0.060s)
    Model enumeration time:              0.588s
    Time for BDD construction:           0.045s (Max:     0.006s)
Time for merge operator:                 0.335s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     1.631s

Number of path formula cache hits:   53303 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.446s

Total number of created targets for pointer analysis: 1756
   Number of created targets for uf: *(struct_usb_device)* is 32
   Number of created targets for uf: *signed_int is 63
   Number of created targets for uf: *unsigned_char is 140
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               1177
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         738 (count: 3635, min: 0, max: 160, avg: 0.20)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.215s
Automaton transfers with branching:                0
Automaton transfer successors:                        60699 (count: 60699, min: 1, max: 1, avg: 1.00) [1 x 60699]

CPA algorithm statistics
------------------------
Number of iterations:            40448
Max size of waitlist:            71
Average size of waitlist:        33
Number of computed successors:   45712
Max successors for one state:    2
Number of times merged:          4003
Number of times stopped:         4496
Number of times breaked:         16

Total time for CPA algorithm:         7.314s (Max:     1.551s)
  Time for choose from waitlist:      0.033s
  Time for precision adjustment:      3.228s
  Time for transfer relation:         2.991s
  Time for merge operator:            0.457s
  Time for stop operator:             0.073s
  Time for adding to reached set:     0.148s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   16
Avg. length of target path (in blocks):                  91 (count: 16, min: 2, max: 10, avg: 5.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.085s
  Counterexample analysis:                             0.916s (Max:     0.134s, Calls: 16)
    Refinement sat check:                              0.809s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.015s
  Precision update:                                    0.018s
  ARG update:                                          0.108s

Length of refined path (in blocks):                      89 (count: 16, min: 2, max: 10, avg: 5.56)
Number of affected states:                               73 (count: 16, min: 1, max: 9, avg: 4.56)
Length (states) of path with itp 'true':                  0 (count: 16, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        73 (count: 16, min: 1, max: 9, avg: 4.56)
Length (states) of path with itp 'false':                 1 (count: 16, min: 0, max: 1, avg: 0.06)
Different non-trivial interpolants along paths:           4 (count: 16, min: 0, max: 2, avg: 0.25)
Equal non-trivial interpolants along paths:              53 (count: 16, min: 0, max: 8, avg: 3.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                16
Number of successful refinements:     16
Number of failed refinements:         0
Max. size of reached set before ref.: 4670
Max. size of reached set after ref.:  113
Avg. size of reached set before ref.: 2331.56
Avg. size of reached set after ref.:  113.00

Total time for CEGAR algorithm:       8.495s
Time for refinements:                 1.178s
Average time for refinement:          0.073s
Max time for refinement:              0.163s

Code Coverage
-----------------------------
  Function coverage:      0.714
  Visited lines:          1659
  Total lines:            2112
  Line coverage:          0.786
  Visited conditions:     218
  Total conditions:       374
  Condition coverage:     0.583

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             5419
  Number of reached locations:   740 (27%)
    Avg states per location:     7
    Max states per location:     49 (at node N129)
  Number of reached functions:   65 (71%)
  Number of partitions:          5413
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [988246e], stack [main]])
  Number of target states:       0
  Size of final wait list        42

Time for analysis setup:          3.351s
  Time for loading CPAs:          0.585s
  Time for loading parser:        0.472s
  Time for CFA construction:      2.207s
    Time for parsing file(s):     0.657s
    Time for AST to CFA:          0.722s
    Time for CFA sanity check:    0.143s
    Time for post-processing:     0.543s
      Time for var class.:        0.228s
Time for Analysis:                8.495s
CPU time for analysis:            8.500s
Total time for CPAchecker:       11.849s
Total CPU time for CPAchecker:   11.850s
Time for statistics:              0.111s

Time for Garbage Collector:       0.254s (in 26 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     46MB (    43 MiB) avg;     74MB (    71 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     32MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8067MB (  7693 MiB) max;   8048MB (  7675 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
