scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2im0ujom/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7429: Unsupported feature (recursion): tmp = ldv_submit_urb(ldv_func_arg1); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            1190 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            958 (81%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         232 (19%)
  Times precision was empty:       784 (66%)
  Times precision was {false}:     110 (9%)
  Times result was cached:         216 (18%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      80 (7%)
  Times result was 'false':        238 (20%)
Number of strengthen sat checks:   0
Number of coverage checks:         6691
  BDD entailment checks:           353
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       170
Number of predicates discovered:          10
Number of abstraction locations:          4
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         1209
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 6.36
Number of irrelevant predicates:          424 (35%)
Number of preds handled by boolean abs:   331 (27%)
  Total number of models for allsat:      117
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.46

Time for post operator:                  1.550s
  Time for path formula creation:        1.460s
Time for strengthen operator:            0.063s
Time for prec operator:                  2.215s
  Time for abstraction:                  2.132s (Max:     0.163s, Count: 1190)
    Boolean abstraction:                 1.060s
    Solving time:                        0.860s (Max:     0.057s)
    Model enumeration time:              0.277s
    Time for BDD construction:           0.069s (Max:     0.017s)
Time for merge operator:                 0.334s
Time for coverage check:                 0.026s
  Time for BDD entailment checks:        0.025s
Total time for SMT solver (w/o itp):     1.137s

Number of path formula cache hits:   42919 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.251s

Total number of created targets for pointer analysis: 528
   Number of created targets for uf: *(struct_usb_device)* is 12
   Number of created targets for uf: *signed_int is 75
   Number of created targets for uf: *unsigned_char is 39
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               723
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         602 (count: 2443, min: 0, max: 127, avg: 0.25)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.376s
Automaton transfers with branching:                0
Automaton transfer successors:                        47163 (count: 47163, min: 1, max: 1, avg: 1.00) [1 x 47163]

CPA algorithm statistics
------------------------
Number of iterations:            31051
Max size of waitlist:            58
Average size of waitlist:        27
Number of computed successors:   35201
Max successors for one state:    2
Number of times merged:          3169
Number of times stopped:         3402
Number of times breaked:         17

Total time for CPA algorithm:         6.757s (Max:     0.902s)
  Time for choose from waitlist:      0.107s
  Time for precision adjustment:      2.658s
  Time for transfer relation:         2.939s
  Time for merge operator:            0.435s
  Time for stop operator:             0.149s
  Time for adding to reached set:     0.107s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   17
Avg. length of target path (in blocks):                  68 (count: 17, min: 2, max: 5, avg: 4.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.755s
  Counterexample analysis:                             0.565s (Max:     0.067s, Calls: 17)
    Refinement sat check:                              0.473s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.021s
  ARG update:                                          0.136s

Length of refined path (in blocks):                      64 (count: 17, min: 2, max: 5, avg: 3.76)
Number of affected states:                               47 (count: 17, min: 1, max: 4, avg: 2.76)
Length (states) of path with itp 'true':                  0 (count: 17, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        47 (count: 17, min: 1, max: 4, avg: 2.76)
Length (states) of path with itp 'false':                 2 (count: 17, min: 0, max: 1, avg: 0.12)
Different non-trivial interpolants along paths:           3 (count: 17, min: 0, max: 2, avg: 0.18)
Equal non-trivial interpolants along paths:              27 (count: 17, min: 0, max: 3, avg: 1.59)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                17
Number of successful refinements:     17
Number of failed refinements:         0
Max. size of reached set before ref.: 3147
Max. size of reached set after ref.:  113
Avg. size of reached set before ref.: 1753.29
Avg. size of reached set after ref.:  113.00

Total time for CEGAR algorithm:       7.580s
Time for refinements:                 0.822s
Average time for refinement:          0.048s
Max time for refinement:              0.089s

Code Coverage
-----------------------------
  Function coverage:      0.714
  Visited lines:          1659
  Total lines:            2112
  Line coverage:          0.786
  Visited conditions:     218
  Total conditions:       374
  Condition coverage:     0.583

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             3677
  Number of reached locations:   740 (27%)
    Avg states per location:     4
    Max states per location:     35 (at node N129)
  Number of reached functions:   65 (71%)
  Number of partitions:          3673
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [3c5a54b7], stack [main]])
  Number of target states:       0
  Size of final wait list        48

Time for analysis setup:          3.496s
  Time for loading CPAs:          0.639s
  Time for loading parser:        0.468s
  Time for CFA construction:      2.315s
    Time for parsing file(s):     0.636s
    Time for AST to CFA:          0.731s
    Time for CFA sanity check:    0.171s
    Time for post-processing:     0.642s
      Time for var class.:        0.322s
Time for Analysis:                7.580s
CPU time for analysis:            7.580s
Total time for CPAchecker:       11.079s
Total CPU time for CPAchecker:   11.070s
Time for statistics:              0.107s

Time for Garbage Collector:       0.227s (in 22 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 69MB (    66 MiB) max;     45MB (    43 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     31MB (    30 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     33MB (    32 MiB) avg
Total process virtual memory:   8134MB (  7757 MiB) max;   8110MB (  7734 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
