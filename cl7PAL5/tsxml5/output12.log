scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3vg1drsu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3958 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            3269 (83%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         689 (17%)
  Times precision was empty:       1775 (45%)
  Times precision was {false}:     209 (5%)
  Times result was cached:         1176 (30%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      798 (20%)
  Times result was 'false':        1074 (27%)
Number of strengthen sat checks:   0
Number of coverage checks:         23056
  BDD entailment checks:           3804
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       170
Number of predicates discovered:          49
Number of abstraction locations:          9
Max number of predicates per location:    30
Avg number of predicates per location:    9
Total predicates per abstraction:         14674
Max number of predicates per abstraction: 30
Avg number of predicates per abstraction: 14.57
Number of irrelevant predicates:          3179 (22%)
Number of preds handled by boolean abs:   6040 (41%)
  Total number of models for allsat:      2606
  Max number of models for allsat:        40
  Avg number of models for allsat:        3.27

Time for post operator:                  3.071s
  Time for path formula creation:        2.951s
Time for strengthen operator:            0.166s
Time for prec operator:                 14.885s
  Time for abstraction:                 14.631s (Max:     8.314s, Count: 3958)
    Boolean abstraction:                11.577s
    Solving time:                        2.177s (Max:     0.056s)
    Model enumeration time:              9.238s
    Time for BDD construction:           0.309s (Max:     0.016s)
Time for merge operator:                 0.661s
Time for coverage check:                 0.035s
  Time for BDD entailment checks:        0.029s
Total time for SMT solver (w/o itp):    11.415s

Number of path formula cache hits:   130419 (84%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.410s

Total number of created targets for pointer analysis: 3870
   Number of created targets for uf: *(struct_usb_device)* is 32
   Number of created targets for uf: *signed_int is 63
   Number of created targets for uf: *unsigned_char is 453
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 13
   Number of created targets for uf: *unsigned_int is 56


Number of BDD nodes:                               138925
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        7617 (count: 14213, min: 0, max: 1170, avg: 0.54)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.417s
Automaton transfers with branching:                0
Automaton transfer successors:                       145143 (count: 145143, min: 1, max: 1, avg: 1.00) [1 x 145143]

CPA algorithm statistics
------------------------
Number of iterations:            97424
Max size of waitlist:            84
Average size of waitlist:        40
Number of computed successors:   110395
Max successors for one state:    2
Number of times merged:          9626
Number of times stopped:         10025
Number of times breaked:         49

Total time for CPA algorithm:        22.642s (Max:     8.796s)
  Time for choose from waitlist:      0.091s
  Time for precision adjustment:     15.695s
  Time for transfer relation:         5.098s
  Time for merge operator:            0.895s
  Time for stop operator:             0.219s
  Time for adding to reached set:     0.159s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   49
Avg. length of target path (in blocks):                 661 (count: 49, min: 2, max: 28, avg: 13.49)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.185s
  Counterexample analysis:                             3.687s (Max:     0.201s, Calls: 49)
    Refinement sat check:                              3.140s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.039s
  Precision update:                                    0.024s
  ARG update:                                          0.318s

Length of refined path (in blocks):                     621 (count: 49, min: 2, max: 28, avg: 12.67)
Number of affected states:                              442 (count: 49, min: 1, max: 27, avg: 9.02)
Length (states) of path with itp 'true':                130 (count: 49, min: 0, max: 8, avg: 2.65)
Length (states) of path with itp non-trivial itp:       442 (count: 49, min: 1, max: 27, avg: 9.02)
Length (states) of path with itp 'false':                18 (count: 49, min: 0, max: 1, avg: 0.37)
Different non-trivial interpolants along paths:         137 (count: 49, min: 0, max: 15, avg: 2.80)
Equal non-trivial interpolants along paths:             256 (count: 49, min: 0, max: 26, avg: 5.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                49
Number of successful refinements:     49
Number of failed refinements:         0
Max. size of reached set before ref.: 5649
Max. size of reached set after ref.:  2756
Avg. size of reached set before ref.: 2976.29
Avg. size of reached set after ref.:  1028.02

Total time for CEGAR algorithm:      27.101s
Time for refinements:                 4.415s
Average time for refinement:          0.090s
Max time for refinement:              0.234s

Code Coverage
-----------------------------
  Function coverage:      0.549
  Visited lines:          1491
  Total lines:            2112
  Line coverage:          0.706
  Visited conditions:     166
  Total conditions:       374
  Condition coverage:     0.444

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             3831
  Number of reached locations:   565 (21%)
    Avg states per location:     6
    Max states per location:     42 (at node N129)
  Number of reached functions:   50 (55%)
  Number of partitions:          3826
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [988246e], stack [main]])
  Number of target states:       0
  Size of final wait list        64

Time for analysis setup:          3.259s
  Time for loading CPAs:          0.607s
  Time for loading parser:        0.418s
  Time for CFA construction:      2.155s
    Time for parsing file(s):     0.635s
    Time for AST to CFA:          0.723s
    Time for CFA sanity check:    0.137s
    Time for post-processing:     0.531s
      Time for var class.:        0.231s
Time for Analysis:               27.101s
CPU time for analysis:           27.100s
Total time for CPAchecker:       30.363s
Total CPU time for CPAchecker:   30.350s
Time for statistics:              0.105s

Time for Garbage Collector:       0.522s (in 56 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 79MB (    76 MiB) max;     56MB (    53 MiB) avg;     82MB (    78 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     37MB (    35 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   8133MB (  7756 MiB) max;   8124MB (  7748 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
