scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-usb-serial-ir-usb.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_o9g9kw4c/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5004: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 5067: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_copy_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_undefined_pointer to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_generic_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            110 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            60 (55%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         50 (45%)
  Times precision was empty:       36 (33%)
  Times precision was {false}:     31 (28%)
  Times result was cached:         22 (20%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      21 (19%)
  Times result was 'false':        42 (38%)
Number of strengthen sat checks:   0
Number of coverage checks:         1841
  BDD entailment checks:           25
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       95
Number of predicates discovered:          6
Number of abstraction locations:          3
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         138
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 2.65
Number of irrelevant predicates:          52 (38%)
Number of preds handled by boolean abs:   56 (41%)
  Total number of models for allsat:      25
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.19

Time for post operator:                  1.167s
  Time for path formula creation:        1.092s
Time for strengthen operator:            0.052s
Time for prec operator:                  0.911s
  Time for abstraction:                  0.859s (Max:     0.097s, Count: 110)
    Boolean abstraction:                 0.383s
    Solving time:                        0.388s (Max:     0.053s)
    Model enumeration time:              0.059s
    Time for BDD construction:           0.025s (Max:     0.009s)
Time for merge operator:                 0.140s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.447s

Number of path formula cache hits:   8385 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.947s

Total number of created targets for pointer analysis: 10
   Number of created targets for uf: *unsigned_char is 7


Number of BDD nodes:                               240
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          71 (count: 398, min: 0, max: 54, avg: 0.18)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.214s
Automaton transfers with branching:                0
Automaton transfer successors:                        10096 (count: 10096, min: 1, max: 1, avg: 1.00) [1 x 10096]

CPA algorithm statistics
------------------------
Number of iterations:            6543
Max size of waitlist:            17
Average size of waitlist:        8
Number of computed successors:   7546
Max successors for one state:    2
Number of times merged:          908
Number of times stopped:         923
Number of times breaked:         8

Total time for CPA algorithm:         4.213s (Max:     0.817s)
  Time for choose from waitlist:      0.053s
  Time for precision adjustment:      1.347s
  Time for transfer relation:         2.134s
  Time for merge operator:            0.248s
  Time for stop operator:             0.079s
  Time for adding to reached set:     0.169s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                  17 (count: 8, min: 1, max: 3, avg: 2.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.223s
  Counterexample analysis:                             0.123s (Max:     0.044s, Calls: 8)
    Refinement sat check:                              0.096s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.023s
  Precision update:                                    0.006s
  ARG update:                                          0.043s

Length of refined path (in blocks):                      17 (count: 8, min: 1, max: 3, avg: 2.13)
Number of affected states:                                9 (count: 8, min: 0, max: 2, avg: 1.13)
Length (states) of path with itp 'true':                  0 (count: 8, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         9 (count: 8, min: 0, max: 2, avg: 1.13)
Length (states) of path with itp 'false':                 0 (count: 8, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           1 (count: 8, min: 0, max: 1, avg: 0.13)
Equal non-trivial interpolants along paths:               2 (count: 8, min: 0, max: 1, avg: 0.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 1261
Max. size of reached set after ref.:  46
Avg. size of reached set before ref.: 704.50
Avg. size of reached set after ref.:  44.50

Total time for CEGAR algorithm:       4.487s
Time for refinements:                 0.271s
Average time for refinement:          0.033s
Max time for refinement:              0.070s

Code Coverage
-----------------------------
  Function coverage:      0.833
  Visited lines:          1098
  Total lines:            1140
  Line coverage:          0.963
  Visited conditions:     170
  Total conditions:       184
  Condition coverage:     0.924

CPAchecker general statistics
-----------------------------
Number of program locations:     1438
Number of CFA edges:             1532
Number of relevant variables:    112
Number of functions:             30
Number of loops:                 3
Size of reached set:             1302
  Number of reached locations:   555 (39%)
    Avg states per location:     2
    Max states per location:     14 (at node N968)
  Number of reached functions:   25 (83%)
  Number of partitions:          1301
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N888 (before lines 4872-4947), Function main called from node N867, stack depth 1 [7c22d4f], stack [main]])
  Number of target states:       0

Time for analysis setup:          5.284s
  Time for loading CPAs:          1.117s
  Time for loading parser:        0.849s
  Time for CFA construction:      3.181s
    Time for parsing file(s):     1.040s
    Time for AST to CFA:          1.074s
    Time for CFA sanity check:    0.152s
    Time for post-processing:     0.678s
      Time for var class.:        0.318s
Time for Analysis:                4.487s
CPU time for analysis:            4.480s
Time for analyzing result:        0.002s
Total time for CPAchecker:        9.776s
Total CPU time for CPAchecker:    9.760s
Time for statistics:              0.153s

Time for Garbage Collector:       0.213s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     34MB (    33 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8092MB (  7717 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
