scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-usb-serial-ir-usb.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_cte8g4bx/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5004: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 5067: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_copy_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_undefined_pointer to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_generic_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            104 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            60 (58%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         44 (42%)
  Times precision was empty:       35 (34%)
  Times precision was {false}:     32 (31%)
  Times result was cached:         15 (14%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22 (21%)
  Times result was 'false':        36 (35%)
Number of strengthen sat checks:   0
Number of coverage checks:         1515
  BDD entailment checks:           31
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       95
Number of predicates discovered:          6
Number of abstraction locations:          3
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         118
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 2.19
Number of irrelevant predicates:          45 (38%)
Number of preds handled by boolean abs:   59 (50%)
  Total number of models for allsat:      27
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.23

Time for post operator:                  1.131s
  Time for path formula creation:        1.065s
Time for strengthen operator:            0.082s
Time for prec operator:                  0.954s
  Time for abstraction:                  0.890s (Max:     0.090s, Count: 104)
    Boolean abstraction:                 0.393s
    Solving time:                        0.408s (Max:     0.050s)
    Model enumeration time:              0.066s
    Time for BDD construction:           0.017s (Max:     0.008s)
Time for merge operator:                 0.122s
Time for coverage check:                 0.009s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.474s

Number of path formula cache hits:   6578 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.929s

Total number of created targets for pointer analysis: 10
   Number of created targets for uf: *unsigned_char is 5


Number of BDD nodes:                               230
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          51 (count: 411, min: 0, max: 34, avg: 0.12)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.128s
Automaton transfers with branching:                0
Automaton transfer successors:                         8455 (count: 8455, min: 1, max: 1, avg: 1.00) [1 x 8455]

CPA algorithm statistics
------------------------
Number of iterations:            5417
Max size of waitlist:            14
Average size of waitlist:        7
Number of computed successors:   6243
Max successors for one state:    2
Number of times merged:          742
Number of times stopped:         763
Number of times breaked:         8

Total time for CPA algorithm:         3.914s (Max:     0.781s)
  Time for choose from waitlist:      0.067s
  Time for precision adjustment:      1.277s
  Time for transfer relation:         1.971s
  Time for merge operator:            0.219s
  Time for stop operator:             0.056s
  Time for adding to reached set:     0.109s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                  17 (count: 8, min: 1, max: 3, avg: 2.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.185s
  Counterexample analysis:                             0.095s (Max:     0.033s, Calls: 8)
    Refinement sat check:                              0.067s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.008s
  ARG update:                                          0.053s

Length of refined path (in blocks):                      17 (count: 8, min: 1, max: 3, avg: 2.13)
Number of affected states:                                9 (count: 8, min: 0, max: 2, avg: 1.13)
Length (states) of path with itp 'true':                  0 (count: 8, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         9 (count: 8, min: 0, max: 2, avg: 1.13)
Length (states) of path with itp 'false':                 0 (count: 8, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           1 (count: 8, min: 0, max: 1, avg: 0.13)
Equal non-trivial interpolants along paths:               2 (count: 8, min: 0, max: 1, avg: 0.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 1254
Max. size of reached set after ref.:  46
Avg. size of reached set before ref.: 562.38
Avg. size of reached set after ref.:  44.50

Total time for CEGAR algorithm:       4.164s
Time for refinements:                 0.250s
Average time for refinement:          0.031s
Max time for refinement:              0.068s

Code Coverage
-----------------------------
  Function coverage:      0.833
  Visited lines:          1098
  Total lines:            1140
  Line coverage:          0.963
  Visited conditions:     170
  Total conditions:       184
  Condition coverage:     0.924

CPAchecker general statistics
-----------------------------
Number of program locations:     1438
Number of CFA edges:             1532
Number of relevant variables:    112
Number of functions:             30
Number of loops:                 3
Size of reached set:             1302
  Number of reached locations:   555 (39%)
    Avg states per location:     2
    Max states per location:     14 (at node N968)
  Number of reached functions:   25 (83%)
  Number of partitions:          1301
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N888 (before lines 4872-4947), Function main called from node N867, stack depth 1 [1255b1d1], stack [main]])
  Number of target states:       0

Time for analysis setup:          5.190s
  Time for loading CPAs:          1.038s
  Time for loading parser:        0.763s
  Time for CFA construction:      3.188s
    Time for parsing file(s):     1.065s
    Time for AST to CFA:          1.080s
    Time for CFA sanity check:    0.167s
    Time for post-processing:     0.624s
      Time for var class.:        0.282s
Time for Analysis:                4.165s
CPU time for analysis:            4.160s
Time for analyzing result:        0.010s
Total time for CPAchecker:        9.361s
Total CPU time for CPAchecker:    9.350s
Time for statistics:              0.148s

Time for Garbage Collector:       0.189s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     33MB (    32 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8065MB (  7692 MiB) max;   8033MB (  7661 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
