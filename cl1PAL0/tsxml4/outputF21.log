scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/elevator_spec3_product01_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3o4mgzng/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 395: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 437: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 476: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 515: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 727: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 963: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1274: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1784: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1830: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1842: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1865: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1964: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2093: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2102: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2136: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2145: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2185: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2265: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2278: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2630: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2664: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2720: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2734: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3307: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1621: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            49 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            12 (24%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         37 (76%)
  Times precision was empty:       10 (20%)
  Times precision was {false}:     28 (57%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11 (22%)
  Times result was 'false':        28 (57%)
Number of strengthen sat checks:   0
Number of coverage checks:         30481
  BDD entailment checks:           55
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       2859
Number of predicates discovered:          9
Number of abstraction locations:          2
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         116
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 2.97
Number of irrelevant predicates:          28 (24%)
Number of preds handled by boolean abs:   88 (76%)
  Total number of models for allsat:      115
  Max number of models for allsat:        18
  Avg number of models for allsat:        10.45

Time for post operator:                  4.569s
  Time for path formula creation:        4.424s
Time for strengthen operator:            0.148s
Time for prec operator:                 15.401s
  Time for abstraction:                 15.253s (Max:     1.854s, Count: 49)
    Boolean abstraction:                 6.693s
    Solving time:                       10.017s (Max:     1.443s)
    Model enumeration time:              2.970s
    Time for BDD construction:           0.058s (Max:     0.023s)
Time for merge operator:                 1.188s
Time for coverage check:                 0.016s
  Time for BDD entailment checks:        0.001s
Total time for SMT solver (w/o itp):    12.987s

Number of path formula cache hits:   5827 (8%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.286s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               770
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         261 (count: 404, min: 0, max: 57, avg: 0.65)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.453s
Automaton transfers with branching:                0
Automaton transfer successors:                        72007 (count: 72007, min: 1, max: 1, avg: 1.00) [1 x 72007]

CPA algorithm statistics
------------------------
Number of iterations:            53754
Max size of waitlist:            15
Average size of waitlist:        7
Number of computed successors:   68999
Max successors for one state:    2
Number of times merged:          15213
Number of times stopped:         15214
Number of times breaked:         9

Total time for CPA algorithm:        27.130s (Max:    16.548s)
  Time for choose from waitlist:      0.190s
  Time for precision adjustment:     16.384s
  Time for transfer relation:         7.067s
  Time for merge operator:            1.971s
  Time for stop operator:             0.232s
  Time for adding to reached set:     0.336s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                  10 (count: 9, min: 1, max: 2, avg: 1.11)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.614s
  Counterexample analysis:                             6.409s (Max:     2.092s, Calls: 9)
    Refinement sat check:                              5.997s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.021s
  Precision update:                                    0.009s
  ARG update:                                          0.024s

Length of refined path (in blocks):                      10 (count: 9, min: 1, max: 2, avg: 1.11)
Number of affected states:                                1 (count: 9, min: 0, max: 1, avg: 0.11)
Length (states) of path with itp 'true':                  0 (count: 9, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         1 (count: 9, min: 0, max: 1, avg: 0.11)
Length (states) of path with itp 'false':                 0 (count: 9, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 9, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 9, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 17700
Max. size of reached set after ref.:  14109
Avg. size of reached set before ref.: 9809.11
Avg. size of reached set after ref.:  9409.22

Total time for CEGAR algorithm:      34.437s
Time for refinements:                 7.204s
Average time for refinement:          0.800s
Max time for refinement:              2.299s

Code Coverage
-----------------------------
  Function coverage:      0.597
  Visited lines:          1021
  Total lines:            1681
  Line coverage:          0.607
  Visited conditions:     580
  Total conditions:       748
  Condition coverage:     0.775

CPAchecker general statistics
-----------------------------
Number of program locations:     2197
Number of CFA edges:             2688
Number of relevant variables:    282
Number of functions:             67
Number of loops:                 9
Size of reached set:             50159
  Number of reached locations:   1117 (51%)
    Avg states per location:     44
    Max states per location:     344 (at node N464)
  Number of reached functions:   40 (60%)
  Number of partitions:          50150
    Avg size of partitions:      1
    Max size of partitions:      10 (with key [N106 (before lines 188-216), Function cleanup called from node N1477, stack depth 4 [2ecdcfe3], stack [main, runTest, test, cleanup]])
  Number of target states:       0

Time for analysis setup:          4.242s
  Time for loading CPAs:          0.795s
  Time for loading parser:        0.782s
  Time for CFA construction:      2.474s
    Time for parsing file(s):     0.693s
    Time for AST to CFA:          0.727s
    Time for CFA sanity check:    0.269s
    Time for post-processing:     0.608s
      Time for var class.:        0.334s
Time for Analysis:               34.437s
CPU time for analysis:           34.440s
Time for analyzing result:        0.057s
Total time for CPAchecker:       38.689s
Total CPU time for CPAchecker:   38.680s
Time for statistics:              0.806s

Time for Garbage Collector:       1.015s (in 42 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                107MB (   102 MiB) max;     59MB (    57 MiB) avg;    118MB (   113 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     33MB (    31 MiB) avg;     36MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8205MB (  7825 MiB) max;   8161MB (  7783 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
