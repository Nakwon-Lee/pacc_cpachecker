scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product11_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_41gur8ml/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 73: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 94: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 131: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 207: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 394: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 431: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 473: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 496: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 539: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 548: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 563: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1203: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1249: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1559: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1600: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1609: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1634: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1692: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1721: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1769: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1816: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1861: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1939: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2008: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2142: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2225: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2272: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2319: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2364: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2427: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2534: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2588: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2660: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2707: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2753: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1040: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            4356 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4224 (97%)
  Because of loop head:            99 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         33 (1%)
  Times precision was empty:       1532 (35%)
  Times precision was {false}:     164 (4%)
  Times result was cached:         2563 (59%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      97 (2%)
  Times result was 'false':        42 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         9562
  BDD entailment checks:           330
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          4
Number of abstraction locations:          108
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         2824
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 10.82
Number of irrelevant predicates:          1522 (54%)
Number of preds handled by boolean abs:   97 (3%)
  Total number of models for allsat:      99
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  2.074s
  Time for path formula creation:        1.923s
Time for strengthen operator:            0.130s
Time for prec operator:                  2.005s
  Time for abstraction:                  1.737s (Max:     0.017s, Count: 4356)
    Boolean abstraction:                 0.184s
    Solving time:                        0.333s (Max:     0.014s)
    Model enumeration time:              0.018s
    Time for BDD construction:           0.007s (Max:     0.002s)
Time for merge operator:                 0.238s
Time for coverage check:                 0.036s
  Time for BDD entailment checks:        0.029s
Total time for SMT solver (w/o itp):     0.351s

Number of path formula cache hits:   22746 (59%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.825s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         197 (count: 3273, min: 0, max: 70, avg: 0.06)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.413s
Automaton transfers with branching:                0
Automaton transfer successors:                        33661 (count: 33661, min: 1, max: 1, avg: 1.00) [1 x 33661]

CPA algorithm statistics
------------------------
Number of iterations:            25357
Max size of waitlist:            34
Average size of waitlist:        14
Number of computed successors:   30439
Max successors for one state:    2
Number of times merged:          4616
Number of times stopped:         4852
Number of times breaked:         33

Total time for CPA algorithm:         7.973s (Max:     1.238s)
  Time for choose from waitlist:      0.141s
  Time for precision adjustment:      2.589s
  Time for transfer relation:         3.755s
  Time for merge operator:            0.526s
  Time for stop operator:             0.212s
  Time for adding to reached set:     0.194s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   33
Avg. length of target path (in blocks):                2620 (count: 33, min: 65, max: 107, avg: 79.39)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.626s
  Counterexample analysis:                             1.289s (Max:     0.059s, Calls: 33)
    Refinement sat check:                              0.615s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.054s
  Precision update:                                    0.065s
  ARG update:                                          0.168s

Length of refined path (in blocks):                    2312 (count: 33, min: 64, max: 81, avg: 70.06)
Number of affected states:                              815 (count: 33, min: 1, max: 80, avg: 24.70)
Length (states) of path with itp 'true':               1464 (count: 33, min: 0, max: 79, avg: 44.36)
Length (states) of path with itp non-trivial itp:       815 (count: 33, min: 1, max: 80, avg: 24.70)
Length (states) of path with itp 'false':                33 (count: 33, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          11 (count: 33, min: 0, max: 1, avg: 0.33)
Equal non-trivial interpolants along paths:             771 (count: 33, min: 0, max: 78, avg: 23.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                33
Number of successful refinements:     33
Number of failed refinements:         0
Max. size of reached set before ref.: 2328
Max. size of reached set after ref.:  2144
Avg. size of reached set before ref.: 1788.09
Avg. size of reached set after ref.:  1053.00

Total time for CEGAR algorithm:       9.856s
Time for refinements:                 1.847s
Average time for refinement:          0.055s
Max time for refinement:              0.094s

Code Coverage
-----------------------------
  Function coverage:      0.529
  Visited lines:          609
  Total lines:            1318
  Line coverage:          0.462
  Visited conditions:     190
  Total conditions:       476
  Condition coverage:     0.399

CPAchecker general statistics
-----------------------------
Number of program locations:     1810
Number of CFA edges:             2035
Number of relevant variables:    261
Number of functions:             102
Number of loops:                 4
Size of reached set:             1288
  Number of reached locations:   572 (32%)
    Avg states per location:     2
    Max states per location:     10 (at node N900)
  Number of reached functions:   54 (53%)
  Number of partitions:          1283
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1029 (before line 1491), Function mail called from node N1036, stack depth 6 [5b7b5484], stack [main, test, bobToRjh, sendEmail, outgoing, mail]])
  Number of target states:       0

Time for analysis setup:          4.047s
  Time for loading CPAs:          0.814s
  Time for loading parser:        0.702s
  Time for CFA construction:      2.325s
    Time for parsing file(s):     0.658s
    Time for AST to CFA:          0.700s
    Time for CFA sanity check:    0.235s
    Time for post-processing:     0.601s
      Time for var class.:        0.346s
Time for Analysis:                9.856s
CPU time for analysis:            9.850s
Time for analyzing result:        0.013s
Total time for CPAchecker:       13.908s
Total CPU time for CPAchecker:   13.890s
Time for statistics:              0.111s

Time for Garbage Collector:       0.255s (in 15 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     39MB (    37 MiB) avg;     68MB (    65 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     31MB (    29 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     33MB (    31 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8062MB (  7688 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
