scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec11_product03_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_f4g_zmfp/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 393: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 416: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 454: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 475: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 512: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 549: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 588: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 627: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 664: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 701: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 738: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 775: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 812: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 919: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 951: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 960: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 969: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1037: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1403: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1443: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1472: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1520: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1567: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1612: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1690: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1759: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1893: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1976: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2023: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2070: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2115: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2178: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2285: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2339: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2411: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2458: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2518: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2527: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2542: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1194: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            423 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  409 (97%)
  Because of loop head:            10 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (1%)
  Times precision was empty:       199 (47%)
  Times precision was {false}:     41 (10%)
  Times result was cached:         139 (33%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      44 (10%)
  Times result was 'false':        5 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         525
  BDD entailment checks:           31
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       41
Number of predicates discovered:          4
Number of abstraction locations:          55
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         224
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.64
Number of irrelevant predicates:          109 (49%)
Number of preds handled by boolean abs:   44 (20%)
  Total number of models for allsat:      46
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.05

Time for post operator:                  0.508s
  Time for path formula creation:        0.500s
Time for strengthen operator:            0.072s
Time for prec operator:                  0.540s
  Time for abstraction:                  0.493s (Max:     0.027s, Count: 423)
    Boolean abstraction:                 0.135s
    Solving time:                        0.124s (Max:     0.020s)
    Model enumeration time:              0.012s
    Time for BDD construction:           0.015s (Max:     0.012s)
Time for merge operator:                 0.083s
Time for coverage check:                 0.012s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.136s

Number of path formula cache hits:   1506 (49%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.464s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          95 (count: 708, min: 0, max: 95, avg: 0.13)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.099s
Automaton transfers with branching:                0
Automaton transfer successors:                         2712 (count: 2712, min: 1, max: 1, avg: 1.00) [1 x 2712]

CPA algorithm statistics
------------------------
Number of iterations:            1819
Max size of waitlist:            7
Average size of waitlist:        2
Number of computed successors:   2092
Max successors for one state:    2
Number of times merged:          247
Number of times stopped:         266
Number of times breaked:         4

Total time for CPA algorithm:         2.001s (Max:     0.822s)
  Time for choose from waitlist:      0.017s
  Time for precision adjustment:      0.754s
  Time for transfer relation:         0.901s
  Time for merge operator:            0.143s
  Time for stop operator:             0.053s
  Time for adding to reached set:     0.038s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                 296 (count: 4, min: 51, max: 88, avg: 74.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.273s
  Counterexample analysis:                             0.193s (Max:     0.058s, Calls: 4)
    Refinement sat check:                              0.104s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.009s
  ARG update:                                          0.025s

Length of refined path (in blocks):                     246 (count: 4, min: 50, max: 87, avg: 61.50)
Number of affected states:                              109 (count: 4, min: 1, max: 56, avg: 27.25)
Length (states) of path with itp 'true':                133 (count: 4, min: 0, max: 85, avg: 33.25)
Length (states) of path with itp non-trivial itp:       109 (count: 4, min: 1, max: 56, avg: 27.25)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           2 (count: 4, min: 0, max: 1, avg: 0.50)
Equal non-trivial interpolants along paths:             103 (count: 4, min: 0, max: 54, avg: 25.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 664
Max. size of reached set after ref.:  457
Avg. size of reached set before ref.: 526.00
Avg. size of reached set after ref.:  194.00

Total time for CEGAR algorithm:       2.321s
Time for refinements:                 0.318s
Average time for refinement:          0.079s
Max time for refinement:              0.139s

Code Coverage
-----------------------------
  Function coverage:      0.375
  Visited lines:          399
  Total lines:            1249
  Line coverage:          0.319
  Visited conditions:     94
  Total conditions:       472
  Condition coverage:     0.199

CPAchecker general statistics
-----------------------------
Number of program locations:     1698
Number of CFA edges:             1897
Number of relevant variables:    269
Number of functions:             88
Number of loops:                 4
Size of reached set:             494
  Number of reached locations:   309 (18%)
    Avg states per location:     1
    Max states per location:     4 (at node N595)
  Number of reached functions:   33 (38%)
  Number of partitions:          489
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N575 (before line 854), Function mail called from node N582, stack depth 6 [71c905a3], stack [main, test, bobToRjh, sendEmail, outgoing, mail]])
  Number of target states:       0

Time for analysis setup:          4.028s
  Time for loading CPAs:          0.848s
  Time for loading parser:        0.711s
  Time for CFA construction:      2.284s
    Time for parsing file(s):     0.634s
    Time for AST to CFA:          0.699s
    Time for CFA sanity check:    0.221s
    Time for post-processing:     0.594s
      Time for var class.:        0.334s
Time for Analysis:                2.321s
CPU time for analysis:            2.310s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.354s
Total CPU time for CPAchecker:    6.340s
Time for statistics:              0.105s

Time for Garbage Collector:       0.151s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     31MB (    30 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     26MB (    25 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8033MB (  7661 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
