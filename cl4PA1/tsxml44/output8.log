scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product05_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_g0yqduz7/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 428: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 449: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 486: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 523: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 562: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 601: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 638: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 675: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 712: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 749: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 786: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1122: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1231: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1260: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1308: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1355: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1400: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1478: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1547: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1681: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1764: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1811: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1858: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1903: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1966: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2073: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2127: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2199: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2358: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2390: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2399: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2408: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2439: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2478: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2487: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2502: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2514: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2537: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 959: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            621 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  606 (98%)
  Because of loop head:            9 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (1%)
  Times precision was empty:       327 (53%)
  Times precision was {false}:     46 (7%)
  Times result was cached:         203 (33%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      45 (7%)
  Times result was 'false':        8 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         688
  BDD entailment checks:           46
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          4
Number of abstraction locations:          55
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         294
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.23
Number of irrelevant predicates:          172 (59%)
Number of preds handled by boolean abs:   45 (15%)
  Total number of models for allsat:      47
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  0.473s
  Time for path formula creation:        0.437s
Time for strengthen operator:            0.030s
Time for prec operator:                  0.527s
  Time for abstraction:                  0.460s (Max:     0.024s, Count: 621)
    Boolean abstraction:                 0.105s
    Solving time:                        0.090s (Max:     0.022s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.011s (Max:     0.002s)
Time for merge operator:                 0.035s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.106s

Number of path formula cache hits:   2595 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.398s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          91 (count: 882, min: 0, max: 91, avg: 0.10)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.084s
Automaton transfers with branching:                0
Automaton transfer successors:                         3746 (count: 3746, min: 1, max: 1, avg: 1.00) [1 x 3746]

CPA algorithm statistics
------------------------
Number of iterations:            2547
Max size of waitlist:            6
Average size of waitlist:        3
Number of computed successors:   2903
Max successors for one state:    2
Number of times merged:          321
Number of times stopped:         345
Number of times breaked:         6

Total time for CPA algorithm:         1.937s (Max:     0.674s)
  Time for choose from waitlist:      0.028s
  Time for precision adjustment:      0.705s
  Time for transfer relation:         0.935s
  Time for merge operator:            0.107s
  Time for stop operator:             0.043s
  Time for adding to reached set:     0.033s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                 463 (count: 6, min: 53, max: 98, avg: 77.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.294s
  Counterexample analysis:                             0.214s (Max:     0.058s, Calls: 6)
    Refinement sat check:                              0.094s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.029s
  Precision update:                                    0.011s
  ARG update:                                          0.014s

Length of refined path (in blocks):                     407 (count: 6, min: 52, max: 97, avg: 67.83)
Number of affected states:                              111 (count: 6, min: 1, max: 56, avg: 18.50)
Length (states) of path with itp 'true':                290 (count: 6, min: 0, max: 95, avg: 48.33)
Length (states) of path with itp non-trivial itp:       111 (count: 6, min: 1, max: 56, avg: 18.50)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           2 (count: 6, min: 0, max: 1, avg: 0.33)
Equal non-trivial interpolants along paths:             103 (count: 6, min: 0, max: 54, avg: 17.17)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 930
Max. size of reached set after ref.:  484
Avg. size of reached set before ref.: 595.83
Avg. size of reached set after ref.:  264.33

Total time for CEGAR algorithm:       2.300s
Time for refinements:                 0.345s
Average time for refinement:          0.057s
Max time for refinement:              0.103s

Code Coverage
-----------------------------
  Function coverage:      0.398
  Visited lines:          426
  Total lines:            1246
  Line coverage:          0.342
  Visited conditions:     98
  Total conditions:       472
  Condition coverage:     0.208

CPAchecker general statistics
-----------------------------
Number of program locations:     1695
Number of CFA edges:             1894
Number of relevant variables:    255
Number of functions:             88
Number of loops:                 4
Size of reached set:             562
  Number of reached locations:   330 (19%)
    Avg states per location:     1
    Max states per location:     4 (at node N315)
  Number of reached functions:   35 (40%)
  Number of partitions:          557
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1754 (before line 2290), Function mail called from node N1761, stack depth 6 [3daa82be], stack [main, test, bobToRjh, sendEmail, outgoing, mail]])
  Number of target states:       0

Time for analysis setup:          3.748s
  Time for loading CPAs:          0.712s
  Time for loading parser:        0.756s
  Time for CFA construction:      2.106s
    Time for parsing file(s):     0.622s
    Time for AST to CFA:          0.604s
    Time for CFA sanity check:    0.177s
    Time for post-processing:     0.542s
      Time for var class.:        0.302s
Time for Analysis:                2.300s
CPU time for analysis:            2.290s
Time for analyzing result:        0.001s
Total time for CPAchecker:        6.052s
Total CPU time for CPAchecker:    6.040s
Time for statistics:              0.096s

Time for Garbage Collector:       0.121s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 57MB (    54 MiB) max;     31MB (    29 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     26MB (    25 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8089MB (  7715 MiB) max;   8030MB (  7658 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
