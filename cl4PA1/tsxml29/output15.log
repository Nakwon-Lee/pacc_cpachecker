scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec1_product12_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bz_180r2/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 282: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 305: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 623: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 652: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 700: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 747: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 792: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 870: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 939: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1073: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1156: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1203: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1250: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1295: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1358: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1465: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1519: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1638: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1808: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1840: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1849: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1858: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1883: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1925: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1946: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1983: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2020: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2059: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2098: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2135: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2172: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2209: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2316: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2636: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2682: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2751: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2771: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2780: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2795: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2473: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            8961 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  8711 (97%)
  Because of loop head:            225 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         25 (0%)
  Times precision was empty:       2174 (24%)
  Times precision was {false}:     185 (2%)
  Times result was cached:         6297 (70%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      305 (3%)
  Times result was 'false':        90 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         19144
  BDD entailment checks:           878
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       47
Number of predicates discovered:          4
Number of abstraction locations:          122
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         10949
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 22.34
Number of irrelevant predicates:          4084 (37%)
Number of preds handled by boolean abs:   398 (4%)
  Total number of models for allsat:      305
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  2.342s
  Time for path formula creation:        2.218s
Time for strengthen operator:            0.139s
Time for prec operator:                  4.156s
  Time for abstraction:                  3.670s (Max:     0.029s, Count: 8961)
    Boolean abstraction:                 0.623s
    Solving time:                        0.716s (Max:     0.014s)
    Model enumeration time:              0.035s
    Time for BDD construction:           0.056s (Max:     0.010s)
Time for merge operator:                 0.399s
Time for coverage check:                 0.028s
  Time for BDD entailment checks:        0.019s
Total time for SMT solver (w/o itp):     0.751s

Number of path formula cache hits:   62634 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.096s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               204
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         609 (count: 5819, min: 0, max: 136, avg: 0.10)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.335s
Automaton transfers with branching:                0
Automaton transfer successors:                        67889 (count: 67889, min: 1, max: 1, avg: 1.00) [1 x 67889]

CPA algorithm statistics
------------------------
Number of iterations:            51561
Max size of waitlist:            17
Average size of waitlist:        10
Number of computed successors:   61722
Max successors for one state:    2
Number of times merged:          9133
Number of times stopped:         9798
Number of times breaked:         25

Total time for CPA algorithm:        11.818s (Max:     0.872s)
  Time for choose from waitlist:      0.168s
  Time for precision adjustment:      4.999s
  Time for transfer relation:         4.347s
  Time for merge operator:            0.902s
  Time for stop operator:             0.313s
  Time for adding to reached set:     0.263s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   25
Avg. length of target path (in blocks):                2148 (count: 25, min: 58, max: 108, avg: 85.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.676s
  Counterexample analysis:                             1.174s (Max:     0.068s, Calls: 25)
    Refinement sat check:                              0.613s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.093s
  Precision update:                                    0.037s
  ARG update:                                          0.292s

Length of refined path (in blocks):                    1849 (count: 25, min: 55, max: 89, avg: 73.96)
Number of affected states:                             1824 (count: 25, min: 54, max: 88, avg: 72.96)
Length (states) of path with itp 'true':                  0 (count: 25, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1824 (count: 25, min: 54, max: 88, avg: 72.96)
Length (states) of path with itp 'false':                25 (count: 25, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          14 (count: 25, min: 0, max: 1, avg: 0.56)
Equal non-trivial interpolants along paths:            1785 (count: 25, min: 53, max: 86, avg: 71.40)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                25
Number of successful refinements:     25
Number of failed refinements:         0
Max. size of reached set before ref.: 2855
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 2021.36
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      13.660s
Time for refinements:                 1.832s
Average time for refinement:          0.073s
Max time for refinement:              0.095s

Code Coverage
-----------------------------
  Function coverage:      0.495
  Visited lines:          634
  Total lines:            1357
  Line coverage:          0.467
  Visited conditions:     220
  Total conditions:       486
  Condition coverage:     0.453

CPAchecker general statistics
-----------------------------
Number of program locations:     1859
Number of CFA edges:             2098
Number of relevant variables:    294
Number of functions:             103
Number of loops:                 4
Size of reached set:             1376
  Number of reached locations:   606 (33%)
    Avg states per location:     2
    Max states per location:     10 (at node N911)
  Number of reached functions:   51 (50%)
  Number of partitions:          1376
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.025s
  Time for loading CPAs:          0.804s
  Time for loading parser:        0.694s
  Time for CFA construction:      2.356s
    Time for parsing file(s):     0.700s
    Time for AST to CFA:          0.704s
    Time for CFA sanity check:    0.218s
    Time for post-processing:     0.589s
      Time for var class.:        0.306s
Time for Analysis:               13.660s
CPU time for analysis:           13.650s
Time for analyzing result:        0.001s
Total time for CPAchecker:       17.688s
Total CPU time for CPAchecker:   17.680s
Time for statistics:              0.132s

Time for Garbage Collector:       0.309s (in 25 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 66MB (    63 MiB) max;     41MB (    39 MiB) avg;     69MB (    65 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     32MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8067MB (  7693 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
