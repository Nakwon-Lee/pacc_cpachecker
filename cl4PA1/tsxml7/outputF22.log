scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec9_product12_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_putt0w7g/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 109: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 124: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 147: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 307: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 339: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 348: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 382: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 424: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 445: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 482: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 519: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 558: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 597: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 634: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 671: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 708: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 745: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 782: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1398: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1444: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1513: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1533: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1542: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1557: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1620: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1668: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1715: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1760: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1838: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1907: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2041: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2124: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2171: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2218: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2263: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2326: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2433: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2487: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2559: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2606: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1235: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            9467 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  9167 (97%)
  Because of loop head:            276 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         24 (0%)
  Times precision was empty:       1497 (16%)
  Times precision was {false}:     190 (2%)
  Times result was cached:         7447 (79%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      333 (4%)
  Times result was 'false':        87 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         21461
  BDD entailment checks:           1127
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       47
Number of predicates discovered:          4
Number of abstraction locations:          124
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         11929
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 22.81
Number of irrelevant predicates:          4355 (37%)
Number of preds handled by boolean abs:   426 (4%)
  Total number of models for allsat:      333
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  2.460s
  Time for path formula creation:        2.360s
Time for strengthen operator:            0.190s
Time for prec operator:                  4.446s
  Time for abstraction:                  3.958s (Max:     0.022s, Count: 9467)
    Boolean abstraction:                 0.764s
    Solving time:                        0.859s (Max:     0.016s)
    Model enumeration time:              0.056s
    Time for BDD construction:           0.029s (Max:     0.008s)
Time for merge operator:                 0.469s
Time for coverage check:                 0.050s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     0.915s

Number of path formula cache hits:   68373 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.212s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               204
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         667 (count: 5584, min: 0, max: 141, avg: 0.12)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.370s
Automaton transfers with branching:                0
Automaton transfer successors:                        73708 (count: 73708, min: 1, max: 1, avg: 1.00) [1 x 73708]

CPA algorithm statistics
------------------------
Number of iterations:            55960
Max size of waitlist:            16
Average size of waitlist:        8
Number of computed successors:   67102
Max successors for one state:    2
Number of times merged:          10167
Number of times stopped:         10945
Number of times breaked:         24

Total time for CPA algorithm:        13.113s (Max:     1.275s)
  Time for choose from waitlist:      0.155s
  Time for precision adjustment:      5.562s
  Time for transfer relation:         4.874s
  Time for merge operator:            0.944s
  Time for stop operator:             0.323s
  Time for adding to reached set:     0.350s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   24
Avg. length of target path (in blocks):                2129 (count: 24, min: 58, max: 114, avg: 88.71)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.659s
  Counterexample analysis:                             1.145s (Max:     0.073s, Calls: 24)
    Refinement sat check:                              0.584s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.091s
  Precision update:                                    0.048s
  ARG update:                                          0.320s

Length of refined path (in blocks):                    1849 (count: 24, min: 55, max: 95, avg: 77.04)
Number of affected states:                             1825 (count: 24, min: 54, max: 94, avg: 76.04)
Length (states) of path with itp 'true':                  0 (count: 24, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1825 (count: 24, min: 54, max: 94, avg: 76.04)
Length (states) of path with itp 'false':                24 (count: 24, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          13 (count: 24, min: 0, max: 1, avg: 0.54)
Equal non-trivial interpolants along paths:            1788 (count: 24, min: 53, max: 92, avg: 74.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                24
Number of successful refinements:     24
Number of failed refinements:         0
Max. size of reached set before ref.: 2854
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 2281.54
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      15.019s
Time for refinements:                 1.882s
Average time for refinement:          0.078s
Max time for refinement:              0.112s

Code Coverage
-----------------------------
  Function coverage:      0.500
  Visited lines:          643
  Total lines:            1366
  Line coverage:          0.471
  Visited conditions:     220
  Total conditions:       486
  Condition coverage:     0.453

CPAchecker general statistics
-----------------------------
Number of program locations:     1872
Number of CFA edges:             2111
Number of relevant variables:    296
Number of functions:             104
Number of loops:                 4
Size of reached set:             1386
  Number of reached locations:   611 (33%)
    Avg states per location:     2
    Max states per location:     10 (at node N1619)
  Number of reached functions:   52 (50%)
  Number of partitions:          1386
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.107s
  Time for loading CPAs:          0.890s
  Time for loading parser:        0.730s
  Time for CFA construction:      2.278s
    Time for parsing file(s):     0.680s
    Time for AST to CFA:          0.737s
    Time for CFA sanity check:    0.186s
    Time for post-processing:     0.526s
      Time for var class.:        0.280s
Time for Analysis:               15.020s
CPU time for analysis:           15.020s
Time for analyzing result:        0.002s
Total time for CPAchecker:       19.131s
Total CPU time for CPAchecker:   19.120s
Time for statistics:              0.129s

Time for Garbage Collector:       0.349s (in 27 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 65MB (    62 MiB) max;     42MB (    40 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     32MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8067MB (  7693 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
