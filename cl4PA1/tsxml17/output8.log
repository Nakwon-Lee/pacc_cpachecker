scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec4_product13_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_n6cirzn4/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 397: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 443: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 461: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 476: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 499: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 543: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 572: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 620: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 667: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 712: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 790: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 859: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 993: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1076: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1123: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1170: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1215: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1278: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1385: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1439: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1511: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1558: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2117: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2138: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2175: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2212: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2251: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2290: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2327: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2364: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2401: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2438: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2475: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2623: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2632: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2641: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2666: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2818: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2827: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2842: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 234: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            16257 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  15677 (96%)
  Because of loop head:            543 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         37 (0%)
  Times precision was empty:       3389 (21%)
  Times precision was {false}:     150 (1%)
  Times result was cached:         11930 (73%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      788 (5%)
  Times result was 'false':        192 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         41008
  BDD entailment checks:           2538
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          24
Number of abstraction locations:          131
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         32105
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 34.23
Number of irrelevant predicates:          9324 (29%)
Number of preds handled by boolean abs:   1653 (5%)
  Total number of models for allsat:      1269
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.61

Time for post operator:                  2.758s
  Time for path formula creation:        2.605s
Time for strengthen operator:            0.236s
Time for prec operator:                  6.800s
  Time for abstraction:                  6.280s (Max:     0.025s, Count: 16257)
    Boolean abstraction:                 1.478s
    Solving time:                        1.237s (Max:     0.016s)
    Model enumeration time:              0.156s
    Time for BDD construction:           0.145s (Max:     0.010s)
Time for merge operator:                 0.378s
Time for coverage check:                 0.045s
  Time for BDD entailment checks:        0.030s
Total time for SMT solver (w/o itp):     1.393s

Number of path formula cache hits:   140922 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.338s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               468
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2168 (count: 11665, min: 0, max: 343, avg: 0.19)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.474s
Automaton transfers with branching:                0
Automaton transfer successors:                       133234 (count: 133234, min: 1, max: 1, avg: 1.00) [1 x 133234]

CPA algorithm statistics
------------------------
Number of iterations:            101251
Max size of waitlist:            33
Average size of waitlist:        11
Number of computed successors:   122353
Max successors for one state:    2
Number of times merged:          19235
Number of times stopped:         20715
Number of times breaked:         37

Total time for CPA algorithm:        17.012s (Max:     1.291s)
  Time for choose from waitlist:      0.158s
  Time for precision adjustment:      8.278s
  Time for transfer relation:         5.941s
  Time for merge operator:            0.887s
  Time for stop operator:             0.319s
  Time for adding to reached set:     0.478s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   37
Avg. length of target path (in blocks):                3228 (count: 37, min: 60, max: 114, avg: 87.24)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.019s
  Counterexample analysis:                             2.260s (Max:     0.086s, Calls: 37)
    Refinement sat check:                              1.031s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.111s
  Precision update:                                    0.102s
  ARG update:                                          0.407s

Length of refined path (in blocks):                    2807 (count: 37, min: 57, max: 93, avg: 75.86)
Number of affected states:                             2572 (count: 37, min: 1, max: 92, avg: 69.51)
Length (states) of path with itp 'true':                198 (count: 37, min: 0, max: 66, avg: 5.35)
Length (states) of path with itp non-trivial itp:      2572 (count: 37, min: 1, max: 92, avg: 69.51)
Length (states) of path with itp 'false':                37 (count: 37, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         205 (count: 37, min: 0, max: 11, avg: 5.54)
Equal non-trivial interpolants along paths:            2330 (count: 37, min: 0, max: 90, avg: 62.97)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                37
Number of successful refinements:     37
Number of failed refinements:         0
Max. size of reached set before ref.: 3678
Max. size of reached set after ref.:  1246
Avg. size of reached set before ref.: 2779.41
Avg. size of reached set after ref.:  75.05

Total time for CEGAR algorithm:      20.291s
Time for refinements:                 3.276s
Average time for refinement:          0.088s
Max time for refinement:              0.135s

Code Coverage
-----------------------------
  Function coverage:      0.533
  Visited lines:          660
  Total lines:            1363
  Line coverage:          0.484
  Visited conditions:     232
  Total conditions:       486
  Condition coverage:     0.477

CPAchecker general statistics
-----------------------------
Number of program locations:     1871
Number of CFA edges:             2110
Number of relevant variables:    315
Number of functions:             105
Number of loops:                 4
Size of reached set:             1386
  Number of reached locations:   642 (34%)
    Avg states per location:     2
    Max states per location:     10 (at node N912)
  Number of reached functions:   56 (53%)
  Number of partitions:          1385
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1900 (before line 2543), Function outgoing called from node N1936, stack depth 5 [6dfac1c8], stack [main, test, bobToRjh, sendEmail, outgoing]])
  Number of target states:       0

Time for analysis setup:          4.049s
  Time for loading CPAs:          0.867s
  Time for loading parser:        0.661s
  Time for CFA construction:      2.337s
    Time for parsing file(s):     0.733s
    Time for AST to CFA:          0.716s
    Time for CFA sanity check:    0.207s
    Time for post-processing:     0.533s
      Time for var class.:        0.277s
Time for Analysis:               20.291s
CPU time for analysis:           20.300s
Time for analyzing result:        0.001s
Total time for CPAchecker:       24.347s
Total CPU time for CPAchecker:   24.350s
Time for statistics:              0.107s

Time for Garbage Collector:       0.514s (in 46 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     43MB (    41 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     33MB (    31 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8072MB (  7698 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
