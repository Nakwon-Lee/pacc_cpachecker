scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product10_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5hbztrv2/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 53: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 79: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 102: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 452: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 498: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 622: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 654: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 663: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 672: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 880: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 901: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 938: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 975: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1014: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1053: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1090: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1127: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1164: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1201: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1238: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1488: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1497: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1512: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1550: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1579: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1627: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1674: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1719: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1797: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1866: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2000: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2083: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2130: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2177: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2222: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2285: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2392: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2446: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2518: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2565: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 289: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            977 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  950 (97%)
  Because of loop head:            15 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (1%)
  Times precision was empty:       528 (54%)
  Times precision was {false}:     64 (7%)
  Times result was cached:         334 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      51 (5%)
  Times result was 'false':        9 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1209
  BDD entailment checks:           51
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       44
Number of predicates discovered:          4
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         449
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.90
Number of irrelevant predicates:          261 (58%)
Number of preds handled by boolean abs:   51 (11%)
  Total number of models for allsat:      53
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  0.636s
  Time for path formula creation:        0.598s
Time for strengthen operator:            0.039s
Time for prec operator:                  0.654s
  Time for abstraction:                  0.533s (Max:     0.018s, Count: 977)
    Boolean abstraction:                 0.050s
    Solving time:                        0.088s (Max:     0.015s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.007s (Max:     0.001s)
Time for merge operator:                 0.059s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.089s

Number of path formula cache hits:   4066 (58%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.563s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         106 (count: 1213, min: 0, max: 90, avg: 0.09)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.102s
Automaton transfers with branching:                0
Automaton transfer successors:                         6126 (count: 6126, min: 1, max: 1, avg: 1.00) [1 x 6126]

CPA algorithm statistics
------------------------
Number of iterations:            4277
Max size of waitlist:            11
Average size of waitlist:        5
Number of computed successors:   4925
Max successors for one state:    2
Number of times merged:          579
Number of times stopped:         614
Number of times breaked:         12

Total time for CPA algorithm:         2.690s (Max:     0.671s)
  Time for choose from waitlist:      0.041s
  Time for precision adjustment:      0.938s
  Time for transfer relation:         1.299s
  Time for merge operator:            0.150s
  Time for stop operator:             0.056s
  Time for adding to reached set:     0.065s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 902 (count: 12, min: 57, max: 94, avg: 75.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.591s
  Counterexample analysis:                             0.473s (Max:     0.066s, Calls: 12)
    Refinement sat check:                              0.255s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.027s
  ARG update:                                          0.051s

Length of refined path (in blocks):                     803 (count: 12, min: 56, max: 93, avg: 66.92)
Number of affected states:                              184 (count: 12, min: 1, max: 60, avg: 15.33)
Length (states) of path with itp 'true':                607 (count: 12, min: 0, max: 91, avg: 50.58)
Length (states) of path with itp non-trivial itp:       184 (count: 12, min: 1, max: 60, avg: 15.33)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 12, min: 0, max: 1, avg: 0.25)
Equal non-trivial interpolants along paths:             169 (count: 12, min: 0, max: 58, avg: 14.08)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 1252
Max. size of reached set after ref.:  975
Avg. size of reached set before ref.: 730.42
Avg. size of reached set after ref.:  430.67

Total time for CEGAR algorithm:       3.417s
Time for refinements:                 0.723s
Average time for refinement:          0.060s
Max time for refinement:              0.100s

Code Coverage
-----------------------------
  Function coverage:      0.440
  Visited lines:          462
  Total lines:            1263
  Line coverage:          0.366
  Visited conditions:     112
  Total conditions:       474
  Condition coverage:     0.236

CPAchecker general statistics
-----------------------------
Number of program locations:     1723
Number of CFA edges:             1928
Number of relevant variables:    281
Number of functions:             91
Number of loops:                 4
Size of reached set:             706
  Number of reached locations:   377 (22%)
    Avg states per location:     1
    Max states per location:     6 (at node N641)
  Number of reached functions:   40 (44%)
  Number of partitions:          703
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N394 (before line 596), Function incoming called from node N357, stack depth 7 [e26af6], stack [main, test, bobToRjh, sendEmail, outgoing, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.833s
  Time for loading CPAs:          0.730s
  Time for loading parser:        0.724s
  Time for CFA construction:      2.198s
    Time for parsing file(s):     0.600s
    Time for AST to CFA:          0.718s
    Time for CFA sanity check:    0.193s
    Time for post-processing:     0.536s
      Time for var class.:        0.291s
Time for Analysis:                3.417s
CPU time for analysis:            3.420s
Time for analyzing result:        0.000s
Total time for CPAchecker:        7.255s
Total CPU time for CPAchecker:    7.250s
Time for statistics:              0.084s

Time for Garbage Collector:       0.132s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     33MB (    32 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     29MB (    27 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8040MB (  7667 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
