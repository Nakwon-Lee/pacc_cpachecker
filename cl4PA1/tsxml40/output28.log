scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec11_product10_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_i0mktm0f/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 73: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 94: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 131: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 207: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 394: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 431: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 465: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 510: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 539: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 587: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 634: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 679: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 757: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 826: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 960: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1043: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1090: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1137: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1182: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1245: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1352: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1406: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1478: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1525: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1673: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1705: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1714: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1723: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2274: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2530: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2539: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2554: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2566: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2589: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2111: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            728 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  704 (97%)
  Because of loop head:            19 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5 (1%)
  Times precision was empty:       351 (48%)
  Times precision was {false}:     66 (9%)
  Times result was cached:         258 (35%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      53 (7%)
  Times result was 'false':        5 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         962
  BDD entailment checks:           54
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       44
Number of predicates discovered:          4
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         377
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.17
Number of irrelevant predicates:          186 (49%)
Number of preds handled by boolean abs:   53 (14%)
  Total number of models for allsat:      55
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  0.757s
  Time for path formula creation:        0.715s
Time for strengthen operator:            0.049s
Time for prec operator:                  0.604s
  Time for abstraction:                  0.523s (Max:     0.026s, Count: 728)
    Boolean abstraction:                 0.072s
    Solving time:                        0.091s (Max:     0.009s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.005s (Max:     0.001s)
Time for merge operator:                 0.081s
Time for coverage check:                 0.009s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.094s

Number of path formula cache hits:   2290 (44%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.669s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          92 (count: 1062, min: 0, max: 92, avg: 0.09)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.107s
Automaton transfers with branching:                0
Automaton transfer successors:                         4700 (count: 4700, min: 1, max: 1, avg: 1.00) [1 x 4700]

CPA algorithm statistics
------------------------
Number of iterations:            3251
Max size of waitlist:            9
Average size of waitlist:        3
Number of computed successors:   3755
Max successors for one state:    2
Number of times merged:          454
Number of times stopped:         490
Number of times breaked:         5

Total time for CPA algorithm:         2.531s (Max:     0.977s)
  Time for choose from waitlist:      0.030s
  Time for precision adjustment:      0.803s
  Time for transfer relation:         1.289s
  Time for merge operator:            0.146s
  Time for stop operator:             0.067s
  Time for adding to reached set:     0.043s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                 402 (count: 5, min: 52, max: 97, avg: 80.40)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.303s
  Counterexample analysis:                             0.223s (Max:     0.063s, Calls: 5)
    Refinement sat check:                              0.126s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.010s
  ARG update:                                          0.031s

Length of refined path (in blocks):                     325 (count: 5, min: 51, max: 96, avg: 65.00)
Number of affected states:                              177 (count: 5, min: 1, max: 60, avg: 35.40)
Length (states) of path with itp 'true':                143 (count: 5, min: 0, max: 94, avg: 28.60)
Length (states) of path with itp non-trivial itp:       177 (count: 5, min: 1, max: 60, avg: 35.40)
Length (states) of path with itp 'false':                 5 (count: 5, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 5, min: 0, max: 1, avg: 0.60)
Equal non-trivial interpolants along paths:             169 (count: 5, min: 0, max: 58, avg: 33.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 914
Max. size of reached set after ref.:  651
Avg. size of reached set before ref.: 762.60
Avg. size of reached set after ref.:  254.20

Total time for CEGAR algorithm:       2.898s
Time for refinements:                 0.357s
Average time for refinement:          0.071s
Max time for refinement:              0.136s

Code Coverage
-----------------------------
  Function coverage:      0.440
  Visited lines:          464
  Total lines:            1265
  Line coverage:          0.367
  Visited conditions:     112
  Total conditions:       474
  Condition coverage:     0.236

CPAchecker general statistics
-----------------------------
Number of program locations:     1725
Number of CFA edges:             1930
Number of relevant variables:    281
Number of functions:             91
Number of loops:                 4
Size of reached set:             719
  Number of reached locations:   377 (22%)
    Avg states per location:     1
    Max states per location:     6 (at node N88)
  Number of reached functions:   40 (44%)
  Number of partitions:          712
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1246 (before line 1647), Function incoming called from node N1209, stack depth 7 [e8ea697], stack [main, test, bobToRjh, sendEmail, outgoing, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.972s
  Time for loading CPAs:          0.885s
  Time for loading parser:        0.724s
  Time for CFA construction:      2.171s
    Time for parsing file(s):     0.645s
    Time for AST to CFA:          0.689s
    Time for CFA sanity check:    0.198s
    Time for post-processing:     0.496s
      Time for var class.:        0.259s
Time for Analysis:                2.899s
CPU time for analysis:            2.900s
Time for analyzing result:        0.001s
Total time for CPAchecker:        6.875s
Total CPU time for CPAchecker:    6.870s
Time for statistics:              0.119s

Time for Garbage Collector:       0.119s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     32MB (    30 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     27MB (    26 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     29MB (    27 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8037MB (  7665 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
