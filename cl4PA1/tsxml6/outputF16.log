scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec8_product29_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_cfclj4nq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 73: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 94: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 131: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 207: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 394: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 431: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 473: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 496: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 591: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 611: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 620: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 635: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 999: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1045: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1062: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1514: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1546: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1555: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1564: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1589: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1991: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2020: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2068: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2115: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2160: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2238: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2307: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2441: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2524: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2571: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2618: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2663: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2726: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2833: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2887: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2959: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3006: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 836: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1020533 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1013492 (99%)
  Because of loop head:            6404 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         637 (0%)
  Times precision was empty:       11704 (1%)
  Times precision was {false}:     375 (0%)
  Times result was cached:         976974 (96%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      31480 (3%)
  Times result was 'false':        49496 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         2003676
  BDD entailment checks:           250140
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       65
Number of predicates discovered:          187
Number of abstraction locations:          177
Max number of predicates per location:    34
Avg number of predicates per location:    16
Total predicates per abstraction:         10487215
Max number of predicates per abstraction: 34
Avg number of predicates per abstraction: 329.22
Number of irrelevant predicates:          3588510 (34%)
Number of preds handled by boolean abs:   343353 (3%)
  Total number of models for allsat:      1234196
  Max number of models for allsat:        6112
  Avg number of models for allsat:        39.21

Time for post operator:                 36.187s
  Time for path formula creation:       33.106s
Time for strengthen operator:            6.550s
Time for prec operator:                644.827s
  Time for abstraction:                633.452s (Max:     2.099s, Count: 1020533)
    Boolean abstraction:               243.535s
    Solving time:                       58.594s (Max:     0.070s)
    Model enumeration time:            124.503s
    Time for BDD construction:          55.536s (Max:     0.302s)
Time for merge operator:                 5.509s
Time for coverage check:                 0.829s
  Time for BDD entailment checks:        0.568s
Total time for SMT solver (w/o itp):   183.098s

Number of path formula cache hits:   7646296 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    25.096s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               76772
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      344972 (count: 568882, min: 0, max: 12505, avg: 0.61)
Time for BDD node cleanup:                             0.165s
Time for BDD garbage collection:                       0.671s (in 145 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  9.543s
  Time for transition matches:                         5.049s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                      7145836 (count: 7145836, min: 1, max: 1, avg: 1.00) [1 x 7145836]

CPA algorithm statistics
------------------------
Number of iterations:            5265925
Max size of waitlist:            1092
Average size of waitlist:        192
Number of computed successors:   6265900
Max successors for one state:    2
Number of times merged:          876768
Number of times stopped:         924268
Number of times breaked:         637

Total time for CPA algorithm:       831.290s (Max:    73.529s)
  Time for choose from waitlist:      2.011s
  Time for precision adjustment:    684.751s
  Time for transfer relation:        99.707s
  Time for merge operator:           14.371s
  Time for stop operator:             7.351s
  Time for adding to reached set:     9.110s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   637
Avg. length of target path (in blocks):               87396 (count: 637, min: 66, max: 188, avg: 137.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  51.544s
  Counterexample analysis:                            40.186s (Max:     0.487s, Calls: 637)
    Refinement sat check:                             16.101s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.037s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.268s
  Precision update:                                    0.491s
  ARG update:                                         10.026s

Length of refined path (in blocks):                   56271 (count: 637, min: 39, max: 166, avg: 88.34)
Number of affected states:                            13349 (count: 637, min: 1, max: 160, avg: 20.96)
Length (states) of path with itp 'true':              42285 (count: 637, min: 0, max: 108, avg: 66.38)
Length (states) of path with itp non-trivial itp:     13349 (count: 637, min: 1, max: 160, avg: 20.96)
Length (states) of path with itp 'false':               637 (count: 637, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1533 (count: 637, min: 0, max: 58, avg: 2.41)
Equal non-trivial interpolants along paths:           11179 (count: 637, min: 0, max: 158, avg: 17.55)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                637
Number of successful refinements:     637
Number of failed refinements:         0
Max. size of reached set before ref.: 185033
Max. size of reached set after ref.:  169443
Avg. size of reached set before ref.: 17338.78
Avg. size of reached set after ref.:  9044.48

Total time for CEGAR algorithm:     896.530s
Time for refinements:                60.724s
Average time for refinement:          0.095s
Max time for refinement:              0.679s

Code Coverage
-----------------------------
  Function coverage:      0.327
  Visited lines:          511
  Total lines:            1453
  Line coverage:          0.352
  Visited conditions:     200
  Total conditions:       498
  Condition coverage:     0.402

CPAchecker general statistics
-----------------------------
Number of program locations:     1995
Number of CFA edges:             2265
Number of relevant variables:    361
Number of functions:             113
Number of loops:                 4
Size of reached set:             8664
  Number of reached locations:   491 (25%)
    Avg states per location:     17
    Max states per location:     90 (at node N1877)
  Number of reached functions:   37 (33%)
  Number of partitions:          8611
    Avg size of partitions:      1
    Max size of partitions:      18 (with key [N809 (before lines 1114-1281), Function test called from node N1274, stack depth 2 [6e74ad81], stack [main, test]])
  Number of target states:       0
  Size of final wait list        107

Time for analysis setup:          3.738s
  Time for loading CPAs:          0.739s
  Time for loading parser:        0.646s
  Time for CFA construction:      2.179s
    Time for parsing file(s):     0.607s
    Time for AST to CFA:          0.648s
    Time for CFA sanity check:    0.214s
    Time for post-processing:     0.577s
      Time for var class.:        0.317s
Time for Analysis:              896.530s
CPU time for analysis:          896.430s
Total time for CPAchecker:      900.272s
Total CPU time for CPAchecker:  900.170s
Time for statistics:              0.219s

Time for Garbage Collector:      64.151s (in 1057 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1053MB (  1004 MiB) max;    545MB (   519 MiB) avg;   1081MB (  1031 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     37MB (    35 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:          1120MB (  1069 MiB) max;    783MB (   747 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   9510MB (  9069 MiB) max;   8654MB (  8253 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
