scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product36_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_afa6dy3m/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 61: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 84: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 404: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 450: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 468: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 522: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 551: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 599: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 646: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 691: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 769: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 838: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 972: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1055: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1102: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1149: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1194: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1257: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1364: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1418: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1490: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1537: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1604: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1613: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1628: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1781: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1813: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1822: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1831: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1901: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1922: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1959: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1996: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2035: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2074: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2111: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2148: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2185: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2222: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2259: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 241: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            3485 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3422 (98%)
  Because of loop head:            31 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         32 (1%)
  Times precision was empty:       1712 (49%)
  Times precision was {false}:     169 (5%)
  Times result was cached:         1508 (43%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      96 (3%)
  Times result was 'false':        28 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         5197
  BDD entailment checks:           259
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          85
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1773
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 6.69
Number of irrelevant predicates:          1246 (70%)
Number of preds handled by boolean abs:   96 (5%)
  Total number of models for allsat:      98
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  1.348s
  Time for path formula creation:        1.296s
Time for strengthen operator:            0.088s
Time for prec operator:                  1.524s
  Time for abstraction:                  1.237s (Max:     0.027s, Count: 3485)
    Boolean abstraction:                 0.253s
    Solving time:                        0.285s (Max:     0.014s)
    Model enumeration time:              0.047s
    Time for BDD construction:           0.015s (Max:     0.007s)
Time for merge operator:                 0.242s
Time for coverage check:                 0.017s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):     0.332s

Number of path formula cache hits:   16465 (64%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.211s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         198 (count: 3400, min: 0, max: 107, avg: 0.06)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.258s
Automaton transfers with branching:                0
Automaton transfer successors:                        22036 (count: 22036, min: 1, max: 1, avg: 1.00) [1 x 22036]

CPA algorithm statistics
------------------------
Number of iterations:            16229
Max size of waitlist:            17
Average size of waitlist:        6
Number of computed successors:   18909
Max successors for one state:    2
Number of times merged:          2469
Number of times stopped:         2629
Number of times breaked:         32

Total time for CPA algorithm:         5.761s (Max:     1.410s)
  Time for choose from waitlist:      0.094s
  Time for precision adjustment:      2.007s
  Time for transfer relation:         2.543s
  Time for merge operator:            0.459s
  Time for stop operator:             0.120s
  Time for adding to reached set:     0.175s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   32
Avg. length of target path (in blocks):                3749 (count: 32, min: 60, max: 172, avg: 117.16)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.512s
  Counterexample analysis:                             2.154s (Max:     0.125s, Calls: 32)
    Refinement sat check:                              0.985s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.042s
  Precision update:                                    0.041s
  ARG update:                                          0.136s

Length of refined path (in blocks):                    3453 (count: 32, min: 59, max: 168, avg: 107.91)
Number of affected states:                              421 (count: 32, min: 1, max: 104, avg: 13.16)
Length (states) of path with itp 'true':               3000 (count: 32, min: 0, max: 166, avg: 93.75)
Length (states) of path with itp non-trivial itp:       421 (count: 32, min: 1, max: 104, avg: 13.16)
Length (states) of path with itp 'false':                32 (count: 32, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           4 (count: 32, min: 0, max: 1, avg: 0.13)
Equal non-trivial interpolants along paths:             385 (count: 32, min: 0, max: 102, avg: 12.03)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                32
Number of successful refinements:     32
Number of failed refinements:         0
Max. size of reached set before ref.: 3598
Max. size of reached set after ref.:  2709
Avg. size of reached set before ref.: 2336.47
Avg. size of reached set after ref.:  1900.19

Total time for CEGAR algorithm:       8.680s
Time for refinements:                 2.842s
Average time for refinement:          0.088s
Max time for refinement:              0.258s

Code Coverage
-----------------------------
  Function coverage:      0.511
  Visited lines:          595
  Total lines:            1294
  Line coverage:          0.460
  Visited conditions:     198
  Total conditions:       476
  Condition coverage:     0.416

CPAchecker general statistics
-----------------------------
Number of program locations:     1765
Number of CFA edges:             1983
Number of relevant variables:    300
Number of functions:             94
Number of loops:                 4
Size of reached set:             2292
  Number of reached locations:   554 (31%)
    Avg states per location:     4
    Max states per location:     23 (at node N1517)
  Number of reached functions:   48 (51%)
  Number of partitions:          2277
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1347 (before line 1755), Function incoming called from node N1281, stack depth 8 [14b4ce6f], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__AutoResponder, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.677s
  Time for loading CPAs:          0.714s
  Time for loading parser:        0.629s
  Time for CFA construction:      2.166s
    Time for parsing file(s):     0.654s
    Time for AST to CFA:          0.656s
    Time for CFA sanity check:    0.206s
    Time for post-processing:     0.519s
      Time for var class.:        0.287s
Time for Analysis:                8.680s
CPU time for analysis:            8.670s
Time for analyzing result:        0.001s
Total time for CPAchecker:       12.361s
Total CPU time for CPAchecker:   12.350s
Time for statistics:              0.124s

Time for Garbage Collector:       0.194s (in 12 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 64MB (    61 MiB) max;     39MB (    37 MiB) avg;     68MB (    65 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     30MB (    29 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     32MB (    31 MiB) avg
Total process virtual memory:   8089MB (  7715 MiB) max;   8060MB (  7687 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
