scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product36_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_k61jrkll/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 61: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 84: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 404: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 450: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 468: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 522: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 551: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 599: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 646: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 691: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 769: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 838: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 972: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1055: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1102: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1149: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1194: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1257: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1364: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1418: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1490: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1537: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1604: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1613: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1628: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1781: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1813: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1822: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1831: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1901: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1922: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1959: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1996: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2035: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2074: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2111: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2148: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2185: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2222: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2259: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 241: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2890 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2825 (98%)
  Because of loop head:            25 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         40 (1%)
  Times precision was empty:       1514 (52%)
  Times precision was {false}:     116 (4%)
  Times result was cached:         1195 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      65 (2%)
  Times result was 'false':        40 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         4160
  BDD entailment checks:           174
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          76
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1376
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 7.60
Number of irrelevant predicates:          1053 (77%)
Number of preds handled by boolean abs:   65 (5%)
  Total number of models for allsat:      67
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  1.245s
  Time for path formula creation:        1.185s
Time for strengthen operator:            0.085s
Time for prec operator:                  1.042s
  Time for abstraction:                  0.896s (Max:     0.018s, Count: 2890)
    Boolean abstraction:                 0.116s
    Solving time:                        0.114s (Max:     0.013s)
    Model enumeration time:              0.005s
    Time for BDD construction:           0.009s (Max:     0.007s)
Time for merge operator:                 0.183s
Time for coverage check:                 0.016s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     0.119s

Number of path formula cache hits:   12651 (61%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.124s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         137 (count: 2667, min: 0, max: 51, avg: 0.05)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.258s
Automaton transfers with branching:                0
Automaton transfer successors:                        17998 (count: 17998, min: 1, max: 1, avg: 1.00) [1 x 17998]

CPA algorithm statistics
------------------------
Number of iterations:            13273
Max size of waitlist:            12
Average size of waitlist:        6
Number of computed successors:   15485
Max successors for one state:    2
Number of times merged:          1993
Number of times stopped:         2115
Number of times breaked:         40

Total time for CPA algorithm:         4.922s (Max:     0.705s)
  Time for choose from waitlist:      0.059s
  Time for precision adjustment:      1.406s
  Time for transfer relation:         2.469s
  Time for merge operator:            0.404s
  Time for stop operator:             0.112s
  Time for adding to reached set:     0.135s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   40
Avg. length of target path (in blocks):                3612 (count: 40, min: 60, max: 135, avg: 90.30)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.102s
  Counterexample analysis:                             1.828s (Max:     0.079s, Calls: 40)
    Refinement sat check:                              0.882s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.043s
  Precision update:                                    0.069s
  ARG update:                                          0.099s

Length of refined path (in blocks):                    3444 (count: 40, min: 59, max: 134, avg: 86.10)
Number of affected states:                              293 (count: 40, min: 1, max: 70, avg: 7.32)
Length (states) of path with itp 'true':               3111 (count: 40, min: 0, max: 132, avg: 77.78)
Length (states) of path with itp non-trivial itp:       293 (count: 40, min: 1, max: 70, avg: 7.32)
Length (states) of path with itp 'false':                40 (count: 40, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           4 (count: 40, min: 0, max: 1, avg: 0.10)
Equal non-trivial interpolants along paths:             249 (count: 40, min: 0, max: 68, avg: 6.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                40
Number of successful refinements:     40
Number of failed refinements:         0
Max. size of reached set before ref.: 3225
Max. size of reached set after ref.:  2838
Avg. size of reached set before ref.: 1619.88
Avg. size of reached set after ref.:  1336.10

Total time for CEGAR algorithm:       7.351s
Time for refinements:                 2.371s
Average time for refinement:          0.059s
Max time for refinement:              0.115s

Code Coverage
-----------------------------
  Function coverage:      0.511
  Visited lines:          595
  Total lines:            1294
  Line coverage:          0.460
  Visited conditions:     198
  Total conditions:       476
  Condition coverage:     0.416

CPAchecker general statistics
-----------------------------
Number of program locations:     1765
Number of CFA edges:             1983
Number of relevant variables:    300
Number of functions:             94
Number of loops:                 4
Size of reached set:             1980
  Number of reached locations:   554 (31%)
    Avg states per location:     3
    Max states per location:     18 (at node N1517)
  Number of reached functions:   48 (51%)
  Number of partitions:          1972
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1347 (before line 1755), Function incoming called from node N1281, stack depth 8 [5f5923ef], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__AutoResponder, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.788s
  Time for loading CPAs:          0.723s
  Time for loading parser:        0.675s
  Time for CFA construction:      2.215s
    Time for parsing file(s):     0.682s
    Time for AST to CFA:          0.657s
    Time for CFA sanity check:    0.199s
    Time for post-processing:     0.530s
      Time for var class.:        0.290s
Time for Analysis:                7.351s
CPU time for analysis:            7.350s
Time for analyzing result:        0.001s
Total time for CPAchecker:       11.143s
Total CPU time for CPAchecker:   11.130s
Time for statistics:              0.123s

Time for Garbage Collector:       0.187s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 65MB (    62 MiB) max;     38MB (    36 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     30MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     32MB (    30 MiB) avg
Total process virtual memory:   8089MB (  7715 MiB) max;   8057MB (  7684 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
