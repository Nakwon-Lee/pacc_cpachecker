scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec0_product09_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8n0b1ftl/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 259: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 282: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 473: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 494: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 531: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 568: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 607: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 646: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 683: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 720: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 757: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 794: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 831: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1167: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1213: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1253: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1282: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1330: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1377: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1422: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1500: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1569: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1703: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1786: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1833: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1880: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1925: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1988: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2095: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2149: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2221: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2268: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2418: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2450: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2459: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2468: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2530: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2539: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2554: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2571: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1004: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1705 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1668 (98%)
  Because of loop head:            16 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         21 (1%)
  Times precision was empty:       885 (52%)
  Times precision was {false}:     93 (5%)
  Times result was cached:         669 (39%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      58 (3%)
  Times result was 'false':        30 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         2601
  BDD entailment checks:           81
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          4
Number of abstraction locations:          68
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         820
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 5.43
Number of irrelevant predicates:          596 (73%)
Number of preds handled by boolean abs:   58 (7%)
  Total number of models for allsat:      60
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  1.116s
  Time for path formula creation:        1.043s
Time for strengthen operator:            0.072s
Time for prec operator:                  0.817s
  Time for abstraction:                  0.681s (Max:     0.014s, Count: 1705)
    Boolean abstraction:                 0.107s
    Solving time:                        0.135s (Max:     0.012s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.011s (Max:     0.004s)
Time for merge operator:                 0.145s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     0.139s

Number of path formula cache hits:   7470 (58%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.984s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         105 (count: 1788, min: 0, max: 86, avg: 0.06)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.160s
Automaton transfers with branching:                0
Automaton transfer successors:                        11132 (count: 11132, min: 1, max: 1, avg: 1.00) [1 x 11132]

CPA algorithm statistics
------------------------
Number of iterations:            8080
Max size of waitlist:            11
Average size of waitlist:        5
Number of computed successors:   9456
Max successors for one state:    2
Number of times merged:          1260
Number of times stopped:         1314
Number of times breaked:         21

Total time for CPA algorithm:         3.986s (Max:     0.647s)
  Time for choose from waitlist:      0.052s
  Time for precision adjustment:      1.123s
  Time for transfer relation:         2.068s
  Time for merge operator:            0.292s
  Time for stop operator:             0.096s
  Time for adding to reached set:     0.106s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   21
Avg. length of target path (in blocks):                1555 (count: 21, min: 56, max: 97, avg: 74.05)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.981s
  Counterexample analysis:                             0.803s (Max:     0.061s, Calls: 21)
    Refinement sat check:                              0.431s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.031s
  Precision update:                                    0.057s
  ARG update:                                          0.057s

Length of refined path (in blocks):                    1450 (count: 21, min: 55, max: 96, avg: 69.05)
Number of affected states:                              199 (count: 21, min: 1, max: 66, avg: 9.48)
Length (states) of path with itp 'true':               1230 (count: 21, min: 0, max: 94, avg: 58.57)
Length (states) of path with itp non-trivial itp:       199 (count: 21, min: 1, max: 66, avg: 9.48)
Length (states) of path with itp 'false':                21 (count: 21, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 21, min: 0, max: 1, avg: 0.14)
Equal non-trivial interpolants along paths:             175 (count: 21, min: 0, max: 64, avg: 8.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 2619
Max. size of reached set after ref.:  2288
Avg. size of reached set before ref.: 1223.67
Avg. size of reached set after ref.:  913.86

Total time for CEGAR algorithm:       5.206s
Time for refinements:                 1.193s
Average time for refinement:          0.056s
Max time for refinement:              0.111s

Code Coverage
-----------------------------
  Function coverage:      0.473
  Visited lines:          559
  Total lines:            1277
  Line coverage:          0.438
  Visited conditions:     184
  Total conditions:       474
  Condition coverage:     0.388

CPAchecker general statistics
-----------------------------
Number of program locations:     1737
Number of CFA edges:             1949
Number of relevant variables:    274
Number of functions:             91
Number of loops:                 4
Size of reached set:             1607
  Number of reached locations:   507 (29%)
    Avg states per location:     3
    Max states per location:     14 (at node N342)
  Number of reached functions:   43 (47%)
  Number of partitions:          1601
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1770 (before line 2313), Function mail called from node N1777, stack depth 7 [cdb3c85], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__Base, mail]])
  Number of target states:       0

Time for analysis setup:          4.084s
  Time for loading CPAs:          0.832s
  Time for loading parser:        0.702s
  Time for CFA construction:      2.357s
    Time for parsing file(s):     0.688s
    Time for AST to CFA:          0.710s
    Time for CFA sanity check:    0.205s
    Time for post-processing:     0.584s
      Time for var class.:        0.319s
Time for Analysis:                5.207s
CPU time for analysis:            5.200s
Time for analyzing result:        0.002s
Total time for CPAchecker:        9.295s
Total CPU time for CPAchecker:    9.280s
Time for statistics:              0.122s

Time for Garbage Collector:       0.167s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     36MB (    34 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     29MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8049MB (  7676 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
