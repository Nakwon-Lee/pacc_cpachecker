scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec11_product07_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zueqt8_j/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 73: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 94: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 131: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 207: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 394: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 431: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 492: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 521: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 569: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 616: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 661: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 739: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 808: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 942: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1025: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1072: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1119: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1164: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1227: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1334: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1388: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1460: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1507: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1819: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1851: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1860: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1869: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1938: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1947: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1962: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1974: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1997: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2521: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2567: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2603: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2358: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1582 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1546 (98%)
  Because of loop head:            15 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         21 (1%)
  Times precision was empty:       619 (39%)
  Times precision was {false}:     118 (7%)
  Times result was cached:         762 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      83 (5%)
  Times result was 'false':        33 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         2418
  BDD entailment checks:           102
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          4
Number of abstraction locations:          77
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         963
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.79
Number of irrelevant predicates:          598 (62%)
Number of preds handled by boolean abs:   83 (9%)
  Total number of models for allsat:      85
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  1.092s
  Time for path formula creation:        1.049s
Time for strengthen operator:            0.049s
Time for prec operator:                  1.156s
  Time for abstraction:                  0.985s (Max:     0.018s, Count: 1582)
    Boolean abstraction:                 0.171s
    Solving time:                        0.184s (Max:     0.014s)
    Model enumeration time:              0.007s
    Time for BDD construction:           0.016s (Max:     0.007s)
Time for merge operator:                 0.157s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.006s
Total time for SMT solver (w/o itp):     0.191s

Number of path formula cache hits:   6983 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.996s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         155 (count: 1818, min: 0, max: 112, avg: 0.09)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.169s
Automaton transfers with branching:                0
Automaton transfer successors:                        10077 (count: 10077, min: 1, max: 1, avg: 1.00) [1 x 10077]

CPA algorithm statistics
------------------------
Number of iterations:            7395
Max size of waitlist:            12
Average size of waitlist:        5
Number of computed successors:   8675
Max successors for one state:    2
Number of times merged:          1158
Number of times stopped:         1211
Number of times breaked:         21

Total time for CPA algorithm:         4.179s (Max:     0.905s)
  Time for choose from waitlist:      0.056s
  Time for precision adjustment:      1.493s
  Time for transfer relation:         1.892s
  Time for merge operator:            0.320s
  Time for stop operator:             0.068s
  Time for adding to reached set:     0.095s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   21
Avg. length of target path (in blocks):                1603 (count: 21, min: 54, max: 124, avg: 76.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.070s
  Counterexample analysis:                             0.886s (Max:     0.084s, Calls: 21)
    Refinement sat check:                              0.475s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.011s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.032s
  Precision update:                                    0.029s
  ARG update:                                          0.073s

Length of refined path (in blocks):                    1504 (count: 21, min: 53, max: 97, avg: 71.62)
Number of affected states:                              289 (count: 21, min: 1, max: 96, avg: 13.76)
Length (states) of path with itp 'true':               1194 (count: 21, min: 0, max: 92, avg: 56.86)
Length (states) of path with itp non-trivial itp:       289 (count: 21, min: 1, max: 96, avg: 13.76)
Length (states) of path with itp 'false':                21 (count: 21, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           3 (count: 21, min: 0, max: 1, avg: 0.14)
Equal non-trivial interpolants along paths:             265 (count: 21, min: 0, max: 94, avg: 12.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 2392
Max. size of reached set after ref.:  2147
Avg. size of reached set before ref.: 1124.33
Avg. size of reached set after ref.:  845.71

Total time for CEGAR algorithm:       5.449s
Time for refinements:                 1.242s
Average time for refinement:          0.059s
Max time for refinement:              0.125s

Code Coverage
-----------------------------
  Function coverage:      0.451
  Visited lines:          532
  Total lines:            1280
  Line coverage:          0.416
  Visited conditions:     180
  Total conditions:       474
  Condition coverage:     0.380

CPAchecker general statistics
-----------------------------
Number of program locations:     1740
Number of CFA edges:             1952
Number of relevant variables:    288
Number of functions:             91
Number of loops:                 4
Size of reached set:             1581
  Number of reached locations:   486 (28%)
    Avg states per location:     3
    Max states per location:     14 (at node N1332)
  Number of reached functions:   41 (45%)
  Number of partitions:          1568
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1283 (before line 1717), Function mail called from node N1290, stack depth 7 [4017fe2c], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__AutoResponder, mail]])
  Number of target states:       0

Time for analysis setup:          4.300s
  Time for loading CPAs:          0.930s
  Time for loading parser:        0.651s
  Time for CFA construction:      2.533s
    Time for parsing file(s):     0.668s
    Time for AST to CFA:          0.837s
    Time for CFA sanity check:    0.222s
    Time for post-processing:     0.640s
      Time for var class.:        0.334s
Time for Analysis:                5.449s
CPU time for analysis:            5.440s
Time for analyzing result:        0.002s
Total time for CPAchecker:        9.756s
Total CPU time for CPAchecker:    9.750s
Time for statistics:              0.131s

Time for Garbage Collector:       0.154s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    57 MiB) max;     36MB (    34 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     29MB (    27 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8051MB (  7678 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
