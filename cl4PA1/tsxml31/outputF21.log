scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec11_product40_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_82zqdbcg/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 83: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 106: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 274: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 306: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 315: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 324: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 349: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 415: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 464: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 473: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 488: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 808: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 854: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1125: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1154: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1202: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1249: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1294: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1372: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1441: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1575: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1658: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1705: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1752: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1797: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1860: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1967: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2021: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2093: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2140: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2193: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2214: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2251: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2288: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2327: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2366: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2403: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2440: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2477: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2514: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2551: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 645: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            11860 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  11593 (98%)
  Because of loop head:            246 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         21 (0%)
  Times precision was empty:       4994 (42%)
  Times precision was {false}:     299 (3%)
  Times result was cached:         6418 (54%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      149 (1%)
  Times result was 'false':        21 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         24265
  BDD entailment checks:           1039
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          139
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         6866
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 15.33
Number of irrelevant predicates:          4970 (72%)
Number of preds handled by boolean abs:   149 (2%)
  Total number of models for allsat:      151
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  4.057s
  Time for path formula creation:        3.913s
Time for strengthen operator:            0.210s
Time for prec operator:                  3.397s
  Time for abstraction:                  2.923s (Max:     0.023s, Count: 11860)
    Boolean abstraction:                 0.267s
    Solving time:                        0.524s (Max:     0.014s)
    Model enumeration time:              0.014s
    Time for BDD construction:           0.033s (Max:     0.008s)
Time for merge operator:                 0.513s
Time for coverage check:                 0.047s
  Time for BDD entailment checks:        0.040s
Total time for SMT solver (w/o itp):     0.538s

Number of path formula cache hits:   56717 (57%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.694s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         300 (count: 8431, min: 0, max: 69, avg: 0.04)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.479s
Automaton transfers with branching:                0
Automaton transfer successors:                        86815 (count: 86815, min: 1, max: 1, avg: 1.00) [1 x 86815]

CPA algorithm statistics
------------------------
Number of iterations:            65102
Max size of waitlist:            26
Average size of waitlist:        12
Number of computed successors:   77615
Max successors for one state:    2
Number of times merged:          11613
Number of times stopped:         12273
Number of times breaked:         21

Total time for CPA algorithm:        14.523s (Max:     2.022s)
  Time for choose from waitlist:      0.177s
  Time for precision adjustment:      4.588s
  Time for transfer relation:         7.007s
  Time for merge operator:            1.071s
  Time for stop operator:             0.325s
  Time for adding to reached set:     0.343s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   21
Avg. length of target path (in blocks):                2300 (count: 21, min: 67, max: 150, avg: 109.52)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.759s
  Counterexample analysis:                             1.315s (Max:     0.092s, Calls: 21)
    Refinement sat check:                              0.554s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.075s
  Precision update:                                    0.054s
  ARG update:                                          0.273s

Length of refined path (in blocks):                    1901 (count: 21, min: 66, max: 149, avg: 90.52)
Number of affected states:                             1151 (count: 21, min: 1, max: 105, avg: 54.81)
Length (states) of path with itp 'true':                729 (count: 21, min: 0, max: 147, avg: 34.71)
Length (states) of path with itp non-trivial itp:      1151 (count: 21, min: 1, max: 105, avg: 54.81)
Length (states) of path with itp 'false':                21 (count: 21, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          14 (count: 21, min: 0, max: 1, avg: 0.67)
Equal non-trivial interpolants along paths:            1116 (count: 21, min: 0, max: 103, avg: 53.14)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 4995
Max. size of reached set after ref.:  2996
Avg. size of reached set before ref.: 3919.76
Avg. size of reached set after ref.:  953.67

Total time for CEGAR algorithm:      16.585s
Time for refinements:                 2.041s
Average time for refinement:          0.097s
Max time for refinement:              0.176s

Code Coverage
-----------------------------
  Function coverage:      0.620
  Visited lines:          780
  Total lines:            1368
  Line coverage:          0.570
  Visited conditions:     290
  Total conditions:       480
  Condition coverage:     0.604

CPAchecker general statistics
-----------------------------
Number of program locations:     1882
Number of CFA edges:             2126
Number of relevant variables:    306
Number of functions:             108
Number of loops:                 4
Size of reached set:             3034
  Number of reached locations:   796 (42%)
    Avg states per location:     3
    Max states per location:     23 (at node N1727)
  Number of reached functions:   67 (62%)
  Number of partitions:          3014
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N106 (before line 248), Function incoming called from node N40, stack depth 8 [5a355ee], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__AutoResponder, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.878s
  Time for loading CPAs:          0.778s
  Time for loading parser:        0.668s
  Time for CFA construction:      2.249s
    Time for parsing file(s):     0.672s
    Time for AST to CFA:          0.683s
    Time for CFA sanity check:    0.202s
    Time for post-processing:     0.547s
      Time for var class.:        0.298s
Time for Analysis:               16.592s
CPU time for analysis:           16.590s
Time for analyzing result:        0.002s
Total time for CPAchecker:       20.475s
Total CPU time for CPAchecker:   20.470s
Time for statistics:              0.161s

Time for Garbage Collector:       0.459s (in 30 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 75MB (    72 MiB) max;     45MB (    43 MiB) avg;     77MB (    73 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     32MB (    31 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    37 MiB) max;     34MB (    33 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8069MB (  7695 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
