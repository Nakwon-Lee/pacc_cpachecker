scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec7_product17_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_re3iyiso/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 386: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 432: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 450: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 495: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 524: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 572: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 619: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 664: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 742: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 811: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 945: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1028: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1075: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1122: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1167: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1230: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1337: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1391: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1463: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1510: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1568: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1589: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1626: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1663: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1702: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1741: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1778: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1815: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1852: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1889: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1926: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2016: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2025: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2040: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2055: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2078: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2728: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2760: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2769: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2778: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2803: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 223: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            7188 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  7034 (98%)
  Because of loop head:            100 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         54 (1%)
  Times precision was empty:       744 (10%)
  Times precision was {false}:     216 (3%)
  Times result was cached:         6050 (84%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      178 (2%)
  Times result was 'false':        197 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         11227
  BDD entailment checks:           549
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          5
Number of abstraction locations:          153
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         7153
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 18.15
Number of irrelevant predicates:          2104 (29%)
Number of preds handled by boolean abs:   182 (3%)
  Total number of models for allsat:      177
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.99

Time for post operator:                  1.879s
  Time for path formula creation:        1.794s
Time for strengthen operator:            0.093s
Time for prec operator:                  3.557s
  Time for abstraction:                  3.255s (Max:     0.028s, Count: 7188)
    Boolean abstraction:                 0.364s
    Solving time:                        0.631s (Max:     0.015s)
    Model enumeration time:              0.027s
    Time for BDD construction:           0.041s (Max:     0.011s)
Time for merge operator:                 0.214s
Time for coverage check:                 0.044s
  Time for BDD entailment checks:        0.037s
Total time for SMT solver (w/o itp):     0.658s

Number of path formula cache hits:   43207 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.694s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               204
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         358 (count: 3457, min: 0, max: 133, avg: 0.10)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.423s
Automaton transfers with branching:                0
Automaton transfer successors:                        45891 (count: 45891, min: 1, max: 1, avg: 1.00) [1 x 45891]

CPA algorithm statistics
------------------------
Number of iterations:            34450
Max size of waitlist:            31
Average size of waitlist:        12
Number of computed successors:   40765
Max successors for one state:    2
Number of times merged:          5339
Number of times stopped:         5828
Number of times breaked:         54

Total time for CPA algorithm:         9.491s (Max:     0.959s)
  Time for choose from waitlist:      0.128s
  Time for precision adjustment:      4.164s
  Time for transfer relation:         3.528s
  Time for merge operator:            0.516s
  Time for stop operator:             0.232s
  Time for adding to reached set:     0.291s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   54
Avg. length of target path (in blocks):                4957 (count: 54, min: 65, max: 146, avg: 91.80)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.238s
  Counterexample analysis:                             2.689s (Max:     0.083s, Calls: 54)
    Refinement sat check:                              1.370s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.016s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.068s
  Precision update:                                    0.101s
  ARG update:                                          0.272s

Length of refined path (in blocks):                    4465 (count: 54, min: 64, max: 120, avg: 82.69)
Number of affected states:                             1500 (count: 54, min: 1, max: 119, avg: 27.78)
Length (states) of path with itp 'true':               2911 (count: 54, min: 0, max: 100, avg: 53.91)
Length (states) of path with itp non-trivial itp:      1500 (count: 54, min: 1, max: 119, avg: 27.78)
Length (states) of path with itp 'false':                54 (count: 54, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          16 (count: 54, min: 0, max: 1, avg: 0.30)
Equal non-trivial interpolants along paths:            1430 (count: 54, min: 0, max: 117, avg: 26.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                54
Number of successful refinements:     54
Number of failed refinements:         0
Max. size of reached set before ref.: 2321
Max. size of reached set after ref.:  763
Avg. size of reached set before ref.: 1007.35
Avg. size of reached set after ref.:  397.70

Total time for CEGAR algorithm:      13.069s
Time for refinements:                 3.557s
Average time for refinement:          0.065s
Max time for refinement:              0.118s

Code Coverage
-----------------------------
  Function coverage:      0.593
  Visited lines:          787
  Total lines:            1388
  Line coverage:          0.567
  Visited conditions:     316
  Total conditions:       486
  Condition coverage:     0.650

CPAchecker general statistics
-----------------------------
Number of program locations:     1905
Number of CFA edges:             2155
Number of relevant variables:    328
Number of functions:             108
Number of loops:                 4
Size of reached set:             1820
  Number of reached locations:   814 (43%)
    Avg states per location:     2
    Max states per location:     15 (at node N2111)
  Number of reached functions:   64 (59%)
  Number of partitions:          1820
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.195s
  Time for loading CPAs:          0.963s
  Time for loading parser:        0.653s
  Time for CFA construction:      2.409s
    Time for parsing file(s):     0.733s
    Time for AST to CFA:          0.707s
    Time for CFA sanity check:    0.218s
    Time for post-processing:     0.574s
      Time for var class.:        0.310s
Time for Analysis:               13.069s
CPU time for analysis:           13.080s
Time for analyzing result:        0.001s
Total time for CPAchecker:       17.271s
Total CPU time for CPAchecker:   17.260s
Time for statistics:              0.140s

Time for Garbage Collector:       0.288s (in 20 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 64MB (    61 MiB) max;     40MB (    38 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     32MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8067MB (  7693 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
