scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec11_product36_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_x0ml0zne/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 73: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 94: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 131: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 168: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 207: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 246: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 320: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 357: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 394: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 431: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 767: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 813: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 839: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 862: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1277: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1306: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1354: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1401: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1446: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1524: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1593: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1727: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1810: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1857: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1904: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1949: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2012: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2119: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2173: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2245: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2292: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2329: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2478: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2510: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2519: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2528: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2627: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2636: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2651: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 604: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2463 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2413 (98%)
  Because of loop head:            22 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (1%)
  Times precision was empty:       1215 (49%)
  Times precision was {false}:     114 (5%)
  Times result was cached:         1068 (43%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      66 (3%)
  Times result was 'false':        28 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         3331
  BDD entailment checks:           179
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          4
Number of abstraction locations:          76
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1248
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 6.93
Number of irrelevant predicates:          925 (74%)
Number of preds handled by boolean abs:   66 (5%)
  Total number of models for allsat:      68
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  1.053s
  Time for path formula creation:        0.980s
Time for strengthen operator:            0.069s
Time for prec operator:                  1.153s
  Time for abstraction:                  1.008s (Max:     0.020s, Count: 2463)
    Boolean abstraction:                 0.139s
    Solving time:                        0.189s (Max:     0.014s)
    Model enumeration time:              0.007s
    Time for BDD construction:           0.008s (Max:     0.002s)
Time for merge operator:                 0.124s
Time for coverage check:                 0.033s
  Time for BDD entailment checks:        0.030s
Total time for SMT solver (w/o itp):     0.196s

Number of path formula cache hits:   12535 (71%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.906s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         133 (count: 2369, min: 0, max: 101, avg: 0.06)
Time for BDD node cleanup:                             0.010s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.240s
Automaton transfers with branching:                0
Automaton transfer successors:                        14996 (count: 14996, min: 1, max: 1, avg: 1.00) [1 x 14996]

CPA algorithm statistics
------------------------
Number of iterations:            10995
Max size of waitlist:            14
Average size of waitlist:        7
Number of computed successors:   12750
Max successors for one state:    2
Number of times merged:          1576
Number of times stopped:         1697
Number of times breaked:         28

Total time for CPA algorithm:         4.392s (Max:     0.911s)
  Time for choose from waitlist:      0.059s
  Time for precision adjustment:      1.520s
  Time for transfer relation:         2.030s
  Time for merge operator:            0.219s
  Time for stop operator:             0.106s
  Time for adding to reached set:     0.158s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   28
Avg. length of target path (in blocks):                2617 (count: 28, min: 55, max: 138, avg: 93.46)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.529s
  Counterexample analysis:                             1.321s (Max:     0.083s, Calls: 28)
    Refinement sat check:                              0.630s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.006s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.034s
  Precision update:                                    0.028s
  ARG update:                                          0.067s

Length of refined path (in blocks):                    2481 (count: 28, min: 54, max: 137, avg: 88.61)
Number of affected states:                              281 (count: 28, min: 1, max: 70, avg: 10.04)
Length (states) of path with itp 'true':               2172 (count: 28, min: 0, max: 135, avg: 77.57)
Length (states) of path with itp non-trivial itp:       281 (count: 28, min: 1, max: 70, avg: 10.04)
Length (states) of path with itp 'false':                28 (count: 28, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           4 (count: 28, min: 0, max: 1, avg: 0.14)
Equal non-trivial interpolants along paths:             249 (count: 28, min: 0, max: 68, avg: 8.89)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     28
Number of failed refinements:         0
Max. size of reached set before ref.: 2470
Max. size of reached set after ref.:  1762
Avg. size of reached set before ref.: 1384.50
Avg. size of reached set after ref.:  1061.43

Total time for CEGAR algorithm:       6.138s
Time for refinements:                 1.708s
Average time for refinement:          0.061s
Max time for refinement:              0.115s

Code Coverage
-----------------------------
  Function coverage:      0.511
  Visited lines:          597
  Total lines:            1296
  Line coverage:          0.461
  Visited conditions:     198
  Total conditions:       476
  Condition coverage:     0.416

CPAchecker general statistics
-----------------------------
Number of program locations:     1767
Number of CFA edges:             1985
Number of relevant variables:    300
Number of functions:             94
Number of loops:                 4
Size of reached set:             1980
  Number of reached locations:   554 (31%)
    Avg states per location:     3
    Max states per location:     18 (at node N88)
  Number of reached functions:   48 (51%)
  Number of partitions:          1972
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1858 (before line 2452), Function incoming called from node N1792, stack depth 8 [105dc04d], stack [main, test, bobToRjh, sendEmail, outgoing, outgoing__wrappee__AutoResponder, mail, incoming]])
  Number of target states:       0

Time for analysis setup:          3.885s
  Time for loading CPAs:          0.805s
  Time for loading parser:        0.725s
  Time for CFA construction:      2.166s
    Time for parsing file(s):     0.674s
    Time for AST to CFA:          0.633s
    Time for CFA sanity check:    0.187s
    Time for post-processing:     0.519s
      Time for var class.:        0.281s
Time for Analysis:                6.138s
CPU time for analysis:            6.140s
Time for analyzing result:        0.002s
Total time for CPAchecker:       10.029s
Total CPU time for CPAchecker:   10.030s
Time for statistics:              0.157s

Time for Garbage Collector:       0.165s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 62MB (    59 MiB) max;     37MB (    35 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     29MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8052MB (  7679 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
