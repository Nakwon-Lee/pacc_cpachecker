scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--firmware--google--gsmi.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5ss6shdm/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3127: Dead code detected: tmp___0 = (int )_kstrtoul(s, base, res); (CFACreationUtils.addEdgeToCFA, INFO)

line 3133: Dead code detected: tmp___0 = (int )_kstrtoul(s, base, res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_get_system_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_create_and_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_files to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_efivars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_files to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_efivars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            4828 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4348 (90%)
  Because of loop head:            464 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         16 (0%)
  Times precision was empty:       1900 (39%)
  Times precision was {false}:     185 (4%)
  Times result was cached:         2596 (54%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      147 (3%)
  Times result was 'false':        28 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         12989
  BDD entailment checks:           1077
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       195
Number of predicates discovered:          2
Number of abstraction locations:          98
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         2928
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 8.82
Number of irrelevant predicates:          1189 (41%)
Number of preds handled by boolean abs:   147 (5%)
  Total number of models for allsat:      147
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.020s
  Time for path formula creation:        2.917s
Time for strengthen operator:            0.174s
Time for prec operator:                  1.861s
  Time for abstraction:                  1.604s (Max:     0.024s, Count: 4828)
    Boolean abstraction:                 0.209s
    Solving time:                        0.364s (Max:     0.013s)
    Model enumeration time:              0.006s
    Time for BDD construction:           0.012s (Max:     0.007s)
Time for merge operator:                 0.284s
Time for coverage check:                 0.048s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):     0.370s

Number of path formula cache hits:   96168 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.570s

Total number of created targets for pointer analysis: 5
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *unsigned_long_int is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         279 (count: 4789, min: 0, max: 70, avg: 0.06)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.397s
Automaton transfers with branching:                0
Automaton transfer successors:                       135773 (count: 135773, min: 1, max: 1, avg: 1.00) [1 x 135773]

CPA algorithm statistics
------------------------
Number of iterations:            44867
Max size of waitlist:            35
Average size of waitlist:        15
Number of computed successors:   51773
Max successors for one state:    2
Number of times merged:          5956
Number of times stopped:         6844
Number of times breaked:         16

Total time for CPA algorithm:         9.149s (Max:     1.436s)
  Time for choose from waitlist:      0.047s
  Time for precision adjustment:      2.504s
  Time for transfer relation:         5.236s
  Time for merge operator:            0.532s
  Time for stop operator:             0.158s
  Time for adding to reached set:     0.150s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   16
Avg. length of target path (in blocks):                 477 (count: 16, min: 11, max: 57, avg: 29.81)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.611s
  Counterexample analysis:                             0.330s (Max:     0.044s, Calls: 16)
    Refinement sat check:                              0.218s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.021s
  Precision update:                                    0.037s
  ARG update:                                          0.213s

Length of refined path (in blocks):                     461 (count: 16, min: 10, max: 56, avg: 28.81)
Number of affected states:                              445 (count: 16, min: 9, max: 55, avg: 27.81)
Length (states) of path with itp 'true':                  0 (count: 16, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       445 (count: 16, min: 9, max: 55, avg: 27.81)
Length (states) of path with itp 'false':                16 (count: 16, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 16, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             429 (count: 16, min: 8, max: 54, avg: 26.81)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                16
Number of successful refinements:     16
Number of failed refinements:         0
Max. size of reached set before ref.: 3128
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 2698.19
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       9.856s
Time for refinements:                 0.706s
Average time for refinement:          0.044s
Max time for refinement:              0.069s

Code Coverage
-----------------------------
  Function coverage:      0.780
  Visited lines:          2961
  Total lines:            3008
  Line coverage:          0.984
  Visited conditions:     176
  Total conditions:       196
  Condition coverage:     0.898

CPAchecker general statistics
-----------------------------
Number of program locations:     3321
Number of CFA edges:             3452
Number of relevant variables:    571
Number of functions:             41
Number of loops:                 2
Size of reached set:             1779
  Number of reached locations:   702 (21%)
    Avg states per location:     2
    Max states per location:     11 (at node N45)
  Number of reached functions:   32 (78%)
  Number of partitions:          1779
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.584s
  Time for loading CPAs:          0.743s
  Time for loading parser:        0.506s
  Time for CFA construction:      2.245s
    Time for parsing file(s):     0.603s
    Time for AST to CFA:          0.692s
    Time for CFA sanity check:    0.182s
    Time for post-processing:     0.630s
      Time for var class.:        0.332s
Time for Analysis:                9.856s
CPU time for analysis:            9.860s
Time for analyzing result:        0.002s
Total time for CPAchecker:       13.444s
Total CPU time for CPAchecker:   13.430s
Time for statistics:              0.122s

Time for Garbage Collector:       0.458s (in 29 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 75MB (    72 MiB) max;     47MB (    45 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     32MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8133MB (  7756 MiB) max;   8113MB (  7738 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
