scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--dvb--dvb-usb--dvb-usb-mxl111sf.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_y0e4cqgx/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8598: Function pointer *__cil_tmp25 with type int (*)(struct dvb_frontend *, u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8606: Function pointer *__cil_tmp30 with type int (*)(struct dvb_frontend *, u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8614: Function pointer *__cil_tmp35 with type int (*)(struct dvb_frontend *, u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8622: Function pointer *__cil_tmp40 with type int (*)(struct dvb_frontend *, u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8385: Function pointer *__a with type struct dvb_frontend *(*)(struct mxl111sf_state *, struct mxl111sf_demod_config *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8782: Function pointer *__a with type struct dvb_frontend *(*)(struct dvb_frontend *, struct mxl111sf_state *, struct mxl111sf_tuner_config *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8848: Function pointer *__cil_tmp10 with type int (*)(struct dvb_frontend *, u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7935: Function pointer *__a with type struct dvb_frontend *(*)(const struct lgdt3305_config *, struct i2c_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_usb_device_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_alloca, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_usb_generic_rw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_usb_generic_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tveeprom_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tveeprom_hauppauge_analog to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_module to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8782: Ignoring call via function pointer mxl111sf_attach_tuner::__a for which no suitable target was found in line: tmp___4 = (*__a)(__cil_tmp33, state, &mxl_tuner_config); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8782: Ignoring function call through function pointer *__a: tmp___4 = (*__a)(__cil_tmp33, state, &mxl_tuner_config); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __symbol_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8848: Ignoring call via function pointer mxl111sf_fe_ioctl_override::__cil_tmp10 for which no suitable target was found in line: err = (*__cil_tmp10)(fe, __cil_tmp11); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8848: Ignoring function call through function pointer *__cil_tmp10: err = (*__cil_tmp10)(fe, __cil_tmp11); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8598: Ignoring call via function pointer mxl111sf_ant_hunt::__cil_tmp25 for which no suitable target was found in line: (*__cil_tmp25)(fe, &rxPwrA); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8598: Ignoring function call through function pointer *__cil_tmp25: (*__cil_tmp25)(fe, &rxPwrA); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8606: Ignoring call via function pointer mxl111sf_ant_hunt::__cil_tmp30 for which no suitable target was found in line: (*__cil_tmp30)(fe, &rxPwr0); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8606: Ignoring function call through function pointer *__cil_tmp30: (*__cil_tmp30)(fe, &rxPwr0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8614: Ignoring call via function pointer mxl111sf_ant_hunt::__cil_tmp35 for which no suitable target was found in line: (*__cil_tmp35)(fe, &rxPwr1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8614: Ignoring function call through function pointer *__cil_tmp35: (*__cil_tmp35)(fe, &rxPwr1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8622: Ignoring call via function pointer mxl111sf_ant_hunt::__cil_tmp40 for which no suitable target was found in line: (*__cil_tmp40)(fe, &rxPwr2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8622: Ignoring function call through function pointer *__cil_tmp40: (*__cil_tmp40)(fe, &rxPwr2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8385: Ignoring call via function pointer mxl111sf_attach_demod::__a for which no suitable target was found in line: tmp___5 = (*__a)(state, &mxl_demod_config); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8385: Ignoring function call through function pointer *__a: tmp___5 = (*__a)(state, &mxl_demod_config); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7935: Ignoring call via function pointer mxl111sf_lgdt3305_frontend_attach::__a for which no suitable target was found in line: tmp___5 = (*__a)(__cil_tmp94, __cil_tmp98); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7935: Ignoring function call through function pointer *__a: tmp___5 = (*__a)(__cil_tmp94, __cil_tmp98); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            56 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            56 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       56 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         26263
  BDD entailment checks:           37
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       7134
Number of predicates discovered:          0

Time for post operator:                 21.075s
  Time for path formula creation:       20.768s
Time for strengthen operator:            0.312s
Time for prec operator:                  0.186s
  Time for abstraction:                  0.003s (Max:     0.001s, Count: 56)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 5.152s
Time for coverage check:                 0.027s
  Time for BDD entailment checks:        0.014s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   128984 (50%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    19.418s

Total number of created targets for pointer analysis: 165488
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 25
   Number of created targets for uf: *(unsigned_char)* is 5
   Number of created targets for uf: *(struct_dvb_usb_device)* is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 94, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.680s
  Time for transition matches:                         0.346s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       248868 (count: 248868, min: 1, max: 1, avg: 1.00) [1 x 248868]

CPA algorithm statistics
------------------------
Number of iterations:            69706
Max size of waitlist:            45
Average size of waitlist:        17
Number of computed successors:   82855
Max successors for one state:    2
Number of times merged:          13113
Number of times stopped:         13150
Number of times breaked:         0

Total time for CPA algorithm:        34.841s (Max:    34.841s)
  Time for choose from waitlist:      0.187s
  Time for precision adjustment:      1.337s
  Time for transfer relation:        25.965s
  Time for merge operator:            5.642s
  Time for stop operator:             0.261s
  Time for adding to reached set:     0.421s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.459
  Visited lines:          6680
  Total lines:            10844
  Line coverage:          0.616
  Visited conditions:     654
  Total conditions:       1224
  Condition coverage:     0.534

CPAchecker general statistics
-----------------------------
Number of program locations:     12018
Number of CFA edges:             12780
Number of relevant variables:    3771
Number of functions:             74
Number of loops:                 25
Size of reached set:             69706
  Number of reached locations:   1664 (14%)
    Avg states per location:     41
    Max states per location:     768 (at node N0)
  Number of reached functions:   34 (46%)
  Number of partitions:          69706
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          9.063s
  Time for loading CPAs:          1.129s
  Time for loading parser:        0.776s
  Time for CFA construction:      7.023s
    Time for parsing file(s):     1.607s
    Time for AST to CFA:          2.456s
    Time for CFA sanity check:    0.724s
    Time for post-processing:     2.008s
      Time for var class.:        1.042s
Time for Analysis:               34.841s
CPU time for analysis:           34.840s
Time for analyzing result:        0.061s
Total time for CPAchecker:       43.919s
Total CPU time for CPAchecker:   43.880s
Time for statistics:              1.082s

Time for Garbage Collector:       2.208s (in 69 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                182MB (   174 MiB) max;     85MB (    81 MiB) avg;    202MB (   192 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           210MB (   200 MiB) max;    148MB (   141 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8139MB (  7762 MiB) max;   8122MB (  7746 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
