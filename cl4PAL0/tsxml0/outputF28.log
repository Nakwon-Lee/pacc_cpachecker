scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec4_product29_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_f38cgucn/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 675: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 721: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 825: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 845: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 854: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 869: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 904: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 933: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 981: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1028: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1073: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1151: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1220: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1354: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1437: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1484: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1531: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1576: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1639: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1746: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1800: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1872: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1919: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1951: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1974: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1991: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2019: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2040: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2077: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2114: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2153: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2192: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2229: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2266: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2303: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2340: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2377: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2849: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2881: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2890: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2899: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2924: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 512: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            45 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            11 (24%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         34 (76%)
  Times precision was empty:       3 (7%)
  Times precision was {false}:     33 (73%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9 (20%)
  Times result was 'false':        31 (69%)
Number of strengthen sat checks:   0
Number of coverage checks:         8627
  BDD entailment checks:           13
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       896
Number of predicates discovered:          8
Number of abstraction locations:          2
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         86
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.05
Number of irrelevant predicates:          33 (38%)
Number of preds handled by boolean abs:   53 (62%)
  Total number of models for allsat:      61
  Max number of models for allsat:        16
  Avg number of models for allsat:        6.78

Time for post operator:                  2.761s
  Time for path formula creation:        2.672s
Time for strengthen operator:            0.151s
Time for prec operator:                  3.577s
  Time for abstraction:                  3.429s (Max:     0.202s, Count: 45)
    Boolean abstraction:                 0.452s
    Solving time:                        2.570s (Max:     0.181s)
    Model enumeration time:              0.130s
    Time for BDD construction:           0.040s (Max:     0.012s)
Time for merge operator:                 0.652s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.005s
Total time for SMT solver (w/o itp):     2.700s

Number of path formula cache hits:   9957 (34%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.536s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               440
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         160 (count: 331, min: 0, max: 67, avg: 0.48)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.331s
Automaton transfers with branching:                0
Automaton transfer successors:                        27963 (count: 27963, min: 1, max: 1, avg: 1.00) [1 x 27963]

CPA algorithm statistics
------------------------
Number of iterations:            20991
Max size of waitlist:            11
Average size of waitlist:        5
Number of computed successors:   25342
Max successors for one state:    2
Number of times merged:          4307
Number of times stopped:         4309
Number of times breaked:         3

Total time for CPA algorithm:        10.598s (Max:     6.118s)
  Time for choose from waitlist:      0.096s
  Time for precision adjustment:      4.204s
  Time for transfer relation:         4.480s
  Time for merge operator:            0.994s
  Time for stop operator:             0.132s
  Time for adding to reached set:     0.188s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                   6 (count: 3, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.335s
  Counterexample analysis:                             0.229s (Max:     0.127s, Calls: 3)
    Refinement sat check:                              0.188s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.002s
  ARG update:                                          0.078s

Length of refined path (in blocks):                       6 (count: 3, min: 2, max: 2, avg: 2.00)
Number of affected states:                                3 (count: 3, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 3, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         3 (count: 3, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 0 (count: 3, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 3, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 3, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 3473
Max. size of reached set after ref.:  136
Avg. size of reached set before ref.: 2310.33
Avg. size of reached set after ref.:  136.00

Total time for CEGAR algorithm:      11.012s
Time for refinements:                 0.413s
Average time for refinement:          0.137s
Max time for refinement:              0.186s

Code Coverage
-----------------------------
  Function coverage:      0.661
  Visited lines:          870
  Total lines:            1444
  Line coverage:          0.602
  Visited conditions:     344
  Total conditions:       498
  Condition coverage:     0.691

CPAchecker general statistics
-----------------------------
Number of program locations:     1983
Number of CFA edges:             2253
Number of relevant variables:    362
Number of functions:             112
Number of loops:                 4
Size of reached set:             14480
  Number of reached locations:   912 (46%)
    Avg states per location:     15
    Max states per location:     56 (at node N1053)
  Number of reached functions:   74 (66%)
  Number of partitions:          14477
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N1834 (before lines 2436-2603), Function test called from node N86, stack depth 2 [15a902e7], stack [main, test]])
  Number of target states:       0

Time for analysis setup:          4.483s
  Time for loading CPAs:          0.994s
  Time for loading parser:        0.762s
  Time for CFA construction:      2.593s
    Time for parsing file(s):     0.764s
    Time for AST to CFA:          0.804s
    Time for CFA sanity check:    0.223s
    Time for post-processing:     0.633s
      Time for var class.:        0.351s
Time for Analysis:               11.013s
CPU time for analysis:           11.010s
Time for analyzing result:        0.019s
Total time for CPAchecker:       15.506s
Total CPU time for CPAchecker:   15.490s
Time for statistics:              0.385s

Time for Garbage Collector:       0.409s (in 16 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 72MB (    69 MiB) max;     41MB (    39 MiB) avg;     79MB (    75 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     30MB (    29 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     33MB (    31 MiB) avg
Total process virtual memory:   8134MB (  7758 MiB) max;   8110MB (  7734 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
