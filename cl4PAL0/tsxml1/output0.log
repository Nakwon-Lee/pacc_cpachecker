scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec27_product13_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bdwbqvvr/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 53: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 373: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 419: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 445: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 468: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 551: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 560: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 575: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 688: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 720: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 729: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 738: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 763: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 882: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 911: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 959: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1006: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1051: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1129: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1198: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1332: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1415: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1462: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1509: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1554: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1617: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1724: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1778: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1850: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1897: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2250: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2271: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2308: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2345: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2384: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2423: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2460: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2497: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2534: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2571: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2608: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 210: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            20 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            9 (45%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (55%)
  Times precision was empty:       3 (15%)
  Times precision was {false}:     10 (50%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7 (35%)
  Times result was 'false':        9 (45%)
Number of strengthen sat checks:   0
Number of coverage checks:         3330
  BDD entailment checks:           10
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       358
Number of predicates discovered:          10
Number of abstraction locations:          2
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         70
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 4.12
Number of irrelevant predicates:          10 (14%)
Number of preds handled by boolean abs:   60 (86%)
  Total number of models for allsat:      118
  Max number of models for allsat:        36
  Avg number of models for allsat:        16.86

Time for post operator:                  1.332s
  Time for path formula creation:        1.266s
Time for strengthen operator:            0.106s
Time for prec operator:                  1.162s
  Time for abstraction:                  1.100s (Max:     0.126s, Count: 20)
    Boolean abstraction:                 0.406s
    Solving time:                        0.590s (Max:     0.081s)
    Model enumeration time:              0.157s
    Time for BDD construction:           0.071s (Max:     0.029s)
Time for merge operator:                 0.317s
Time for coverage check:                 0.012s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.747s

Number of path formula cache hits:   5703 (50%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.210s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1218
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         219 (count: 207, min: 0, max: 112, avg: 1.06)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.155s
Automaton transfers with branching:                0
Automaton transfer successors:                        10673 (count: 10673, min: 1, max: 1, avg: 1.00) [1 x 10673]

CPA algorithm statistics
------------------------
Number of iterations:            7946
Max size of waitlist:            10
Average size of waitlist:        5
Number of computed successors:   9622
Max successors for one state:    2
Number of times merged:          1660
Number of times stopped:         1662
Number of times breaked:         2

Total time for CPA algorithm:         4.758s (Max:     1.711s)
  Time for choose from waitlist:      0.051s
  Time for precision adjustment:      1.490s
  Time for transfer relation:         2.250s
  Time for merge operator:            0.469s
  Time for stop operator:             0.120s
  Time for adding to reached set:     0.105s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2
Avg. length of target path (in blocks):                   5 (count: 2, min: 2, max: 3, avg: 2.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.245s
  Counterexample analysis:                             0.169s (Max:     0.126s, Calls: 2)
    Refinement sat check:                              0.148s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.003s
  ARG update:                                          0.046s

Length of refined path (in blocks):                       5 (count: 2, min: 2, max: 3, avg: 2.50)
Number of affected states:                                3 (count: 2, min: 1, max: 2, avg: 1.50)
Length (states) of path with itp 'true':                  0 (count: 2, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         3 (count: 2, min: 1, max: 2, avg: 1.50)
Length (states) of path with itp 'false':                 0 (count: 2, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               1 (count: 2, min: 0, max: 1, avg: 0.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 2834
Max. size of reached set after ref.:  136
Avg. size of reached set before ref.: 2005.50
Avg. size of reached set after ref.:  136.00

Total time for CEGAR algorithm:       5.084s
Time for refinements:                 0.324s
Average time for refinement:          0.162s
Max time for refinement:              0.211s

Code Coverage
-----------------------------
  Function coverage:      0.571
  Visited lines:          684
  Total lines:            1367
  Line coverage:          0.500
  Visited conditions:     236
  Total conditions:       486
  Condition coverage:     0.486

CPAchecker general statistics
-----------------------------
Number of program locations:     1875
Number of CFA edges:             2115
Number of relevant variables:    325
Number of functions:             105
Number of loops:                 4
Size of reached set:             4213
  Number of reached locations:   666 (36%)
    Avg states per location:     6
    Max states per location:     15 (at node N1095)
  Number of reached functions:   60 (57%)
  Number of partitions:          4211
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1980 (before lines 2667-2831), Function test called from node N1544, stack depth 2 [2289aca5], stack [main, test]])
  Number of target states:       0

Time for analysis setup:          4.235s
  Time for loading CPAs:          1.013s
  Time for loading parser:        0.681s
  Time for CFA construction:      2.419s
    Time for parsing file(s):     0.733s
    Time for AST to CFA:          0.739s
    Time for CFA sanity check:    0.193s
    Time for post-processing:     0.579s
      Time for var class.:        0.307s
Time for Analysis:                5.084s
CPU time for analysis:            5.090s
Time for analyzing result:        0.004s
Total time for CPAchecker:        9.325s
Total CPU time for CPAchecker:    9.320s
Time for statistics:              0.223s

Time for Garbage Collector:       0.185s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     35MB (    34 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     28MB (    27 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8135MB (  7759 MiB) max;   8098MB (  7723 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
