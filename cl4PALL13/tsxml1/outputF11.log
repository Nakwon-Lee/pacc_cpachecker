scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_z_ubqw5l/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            18 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            7 (39%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (61%)
  Times precision was empty:       2 (11%)
  Times precision was {false}:     10 (56%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6 (33%)
  Times result was 'false':        8 (44%)
Number of strengthen sat checks:   0
Number of coverage checks:         30
  BDD entailment checks:           4
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       22
Number of predicates discovered:          4
Number of abstraction locations:          2
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         24
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 1.50
Number of irrelevant predicates:          10 (42%)
Number of preds handled by boolean abs:   14 (58%)
  Total number of models for allsat:      9
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.50

Time for post operator:                  0.078s
  Time for path formula creation:        0.076s
Time for strengthen operator:            0.004s
Time for prec operator:                  0.137s
  Time for abstraction:                  0.133s (Max:     0.045s, Count: 18)
    Boolean abstraction:                 0.046s
    Solving time:                        0.011s (Max:     0.002s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.013s (Max:     0.007s)
Time for merge operator:                 0.008s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.011s

Number of path formula cache hits:   85 (46%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.075s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               212
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 115, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.014s
Automaton transfers with branching:                0
Automaton transfer successors:                          177 (count: 177, min: 1, max: 1, avg: 1.00) [1 x 177]

CPA algorithm statistics
------------------------
Number of iterations:            130
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   157
Max successors for one state:    2
Number of times merged:          13
Number of times stopped:         14
Number of times breaked:         3

Total time for CPA algorithm:         0.356s (Max:     0.127s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.178s
  Time for transfer relation:         0.141s
  Time for merge operator:            0.011s
  Time for stop operator:             0.009s
  Time for adding to reached set:     0.009s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                   7 (count: 3, min: 2, max: 3, avg: 2.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.071s
  Counterexample analysis:                             0.033s (Max:     0.017s, Calls: 3)
    Refinement sat check:                              0.011s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.024s
  Precision update:                                    0.007s
  ARG update:                                          0.001s

Length of refined path (in blocks):                       7 (count: 3, min: 2, max: 3, avg: 2.33)
Number of affected states:                                4 (count: 3, min: 1, max: 2, avg: 1.33)
Length (states) of path with itp 'true':                  0 (count: 3, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         4 (count: 3, min: 1, max: 2, avg: 1.33)
Length (states) of path with itp 'false':                 0 (count: 3, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           1 (count: 3, min: 0, max: 1, avg: 0.33)
Equal non-trivial interpolants along paths:               0 (count: 3, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 65
Max. size of reached set after ref.:  26
Avg. size of reached set before ref.: 48.67
Avg. size of reached set after ref.:  26.00

Total time for CEGAR algorithm:       0.495s
Time for refinements:                 0.138s
Average time for refinement:          0.046s
Max time for refinement:              0.109s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          31
  Total lines:            31
  Line coverage:          1.000
  Visited conditions:     22
  Total conditions:       22
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     58
Number of CFA edges:             69
Number of relevant variables:    8
Number of functions:             2
Number of loops:                 1
Size of reached set:             68
  Number of reached locations:   39 (67%)
    Avg states per location:     1
    Max states per location:     4 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          67
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N52 (before line 35), Function main called from node N9, stack depth 1 [130c12b7], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.643s
  Time for loading CPAs:          0.813s
  Time for loading parser:        0.857s
  Time for CFA construction:      0.811s
    Time for parsing file(s):     0.378s
    Time for AST to CFA:          0.123s
    Time for CFA sanity check:    0.022s
    Time for post-processing:     0.149s
      Time for var class.:        0.055s
Time for Analysis:                0.495s
CPU time for analysis:            0.490s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.149s
Total CPU time for CPAchecker:    3.140s
Time for statistics:              0.074s

Time for Garbage Collector:       0.106s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 45MB (    42 MiB) max;     25MB (    24 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     21MB (    20 MiB) avg;     29MB (    28 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        30MB (    29 MiB) max;     22MB (    21 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8028MB (  7656 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
