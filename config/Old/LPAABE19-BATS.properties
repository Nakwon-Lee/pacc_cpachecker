# ----------------------------------------------------------------------
# This configuration file for SV-COMP'19 uses strategy selection
# to verify a wide range of benchmarks and properties.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'19
specification = specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml
cpa.arg.proofWitness = witness.graphml
termination.violation.witness = witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false
cpa.arg.compressWitness = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

cfa.distancetoError = true
cfa.scheme = L
cfa.errorloc = __VERIFIER_error

# This is the configuration used for verifying the termination property:
# everything in this file is then ignored.
termination.config = svcomp19-BATS-termination.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipFunctionPointerRecursion = true
# We set skipVoidRecursion per component
# cpa.callstack.skipVoidRecursion = true

# define unsupported functions globally, the nested concurrency analysis overrides this option
cpa.callstack.unsupportedFunctions=pthread_create,pthread_key_create,sin,cos

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

limits.time.cpu::required = 900

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

restartAlgorithm.configFiles = components/svcomp18-BATS-03-predicateAnalysis.properties, components/svcomp18-BATS-recursion.properties::if-recursive
