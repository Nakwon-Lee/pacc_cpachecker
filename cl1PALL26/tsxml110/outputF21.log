scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_y8bt4ple/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_trdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tmsdev_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tms380tr_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tmsdev_term to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            326 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            313 (96%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         13 (4%)
  Times precision was empty:       56 (17%)
  Times precision was {false}:     18 (6%)
  Times result was cached:         127 (39%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      125 (38%)
  Times result was 'false':        69 (21%)
Number of strengthen sat checks:   0
Number of coverage checks:         1827
  BDD entailment checks:           115
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       198
Number of predicates discovered:          2
Number of abstraction locations:          8
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         270
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.89
Number of irrelevant predicates:          25 (9%)
Number of preds handled by boolean abs:   125 (46%)
  Total number of models for allsat:      95
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.76

Time for post operator:                  2.240s
  Time for path formula creation:        2.148s
Time for strengthen operator:            0.090s
Time for prec operator:                  1.321s
  Time for abstraction:                  1.190s (Max:     0.035s, Count: 326)
    Boolean abstraction:                 0.421s
    Solving time:                        0.364s (Max:     0.015s)
    Model enumeration time:              0.019s
    Time for BDD construction:           0.031s (Max:     0.010s)
Time for merge operator:                 0.173s
Time for coverage check:                 0.007s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.383s

Number of path formula cache hits:   6634 (30%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.973s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         215 (count: 1028, min: 0, max: 83, avg: 0.21)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.310s
Automaton transfers with branching:                0
Automaton transfer successors:                        21634 (count: 21634, min: 1, max: 1, avg: 1.00) [1 x 21634]

CPA algorithm statistics
------------------------
Number of iterations:            10371
Max size of waitlist:            19
Average size of waitlist:        5
Number of computed successors:   11452
Max successors for one state:    2
Number of times merged:          856
Number of times stopped:         968
Number of times breaked:         5

Total time for CPA algorithm:         6.334s (Max:     2.565s)
  Time for choose from waitlist:      0.040s
  Time for precision adjustment:      1.784s
  Time for transfer relation:         3.678s
  Time for merge operator:            0.290s
  Time for stop operator:             0.117s
  Time for adding to reached set:     0.116s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  28 (count: 5, min: 1, max: 12, avg: 5.60)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.192s
  Counterexample analysis:                             0.120s (Max:     0.037s, Calls: 5)
    Refinement sat check:                              0.082s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.002s
  ARG update:                                          0.049s

Length of refined path (in blocks):                      28 (count: 5, min: 1, max: 12, avg: 5.60)
Number of affected states:                               23 (count: 5, min: 0, max: 11, avg: 4.60)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        23 (count: 5, min: 0, max: 11, avg: 4.60)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              19 (count: 5, min: 0, max: 10, avg: 3.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 2019
Max. size of reached set after ref.:  22
Avg. size of reached set before ref.: 891.80
Avg. size of reached set after ref.:  21.40

Total time for CEGAR algorithm:       6.584s
Time for refinements:                 0.249s
Average time for refinement:          0.049s
Max time for refinement:              0.065s

Code Coverage
-----------------------------
  Function coverage:      0.511
  Visited lines:          1437
  Total lines:            1728
  Line coverage:          0.832
  Visited conditions:     64
  Total conditions:       88
  Condition coverage:     0.727

CPAchecker general statistics
-----------------------------
Number of program locations:     1976
Number of CFA edges:             2045
Number of relevant variables:    232
Number of functions:             45
Number of loops:                 8
Size of reached set:             6064
  Number of reached locations:   299 (15%)
    Avg states per location:     20
    Max states per location:     223 (at node N0)
  Number of reached functions:   23 (51%)
  Number of partitions:          6064
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          5.125s
  Time for loading CPAs:          1.058s
  Time for loading parser:        0.795s
  Time for CFA construction:      3.153s
    Time for parsing file(s):     1.008s
    Time for AST to CFA:          1.104s
    Time for CFA sanity check:    0.164s
    Time for post-processing:     0.663s
      Time for var class.:        0.280s
Time for Analysis:                6.585s
CPU time for analysis:            6.580s
Time for analyzing result:        0.011s
Total time for CPAchecker:       11.714s
Total CPU time for CPAchecker:   11.700s
Time for statistics:              0.243s

Time for Garbage Collector:       0.277s (in 12 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 66MB (    63 MiB) max;     38MB (    37 MiB) avg;     70MB (    67 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     29MB (    28 MiB) avg;     36MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    36 MiB) max;     31MB (    29 MiB) avg
Total process virtual memory:   8065MB (  7691 MiB) max;   8039MB (  7666 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
