scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.7.3/linux-3.10-rc1-43_1a-bitvector-drivers--atm--he.ko-ldv_main0_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2n4yoono/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5648: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5651: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5654: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8835: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8840: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8845: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___1 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 2UL:
    tmp___2 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 4UL:
    tmp___3 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 8UL:
    tmp___4 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                         "cc");
    goto ldv_44603;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8869: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8874: Dead code detected: tmp___7 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8879: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___6 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___6->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 2UL:
    tmp___7 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___7->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 4UL:
    tmp___8 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___8->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 8UL:
    tmp___9 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___9->state): : "memory",
                         "cc");
    goto ldv_44611;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8951: Dead code detected: tmp___12 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8956: Dead code detected: tmp___13 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8961: Dead code detected: tmp___14 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___12 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___12->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 2UL:
    tmp___13 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___13->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 4UL:
    tmp___14 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___14->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 8UL:
    tmp___15 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___15->state): : "memory",
                         "cc");
    goto ldv_44629;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8983: Dead code detected: tmp___17 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8988: Dead code detected: tmp___18 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8993: Dead code detected: tmp___19 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___17 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___2), "+m" (tmp___17->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 2UL:
    tmp___18 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___2), "+m" (tmp___18->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 4UL:
    tmp___19 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___2), "+m" (tmp___19->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 8UL:
    tmp___20 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___2), "+m" (tmp___20->state): : "memory",
                         "cc");
    goto ldv_44637;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6065: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6098: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5954-5955: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5988: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7830: Function pointer *(he_dev->atm_dev->phy->start) with type int (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7902: Function pointer *(he_dev->atm_dev->phy->stop) with type int (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8403: Function pointer *(he_dev->atm_dev->phy->interrupt) with type void (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_read_config_dword to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_write_config_dword to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7902: Ignoring function call through function pointer *(he_dev->atm_dev->phy->stop): (*(he_dev->atm_dev->phy->stop))(he_dev->atm_dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6098: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dma_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_read_config_word to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_write_config_word to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atm_dev_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atm_dev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_read_config_byte to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_write_config_byte to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6065: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function suni_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7830: Ignoring function call through function pointer *(he_dev->atm_dev->phy->start): (*(he_dev->atm_dev->phy->start))(he_dev->atm_dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            64320 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  55827 (87%)
  Because of loop head:            8465 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (0%)
  Times precision was empty:       15542 (24%)
  Times precision was {false}:     498 (1%)
  Times result was cached:         47949 (75%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      331 (1%)
  Times result was 'false':        86 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         22345
  BDD entailment checks:           7273
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          2
Number of abstraction locations:          291
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         48778
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 58.84
Number of irrelevant predicates:          24039 (49%)
Number of preds handled by boolean abs:   331 (1%)
  Total number of models for allsat:      331
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  5.915s
  Time for path formula creation:        5.591s
Time for strengthen operator:            0.354s
Time for prec operator:                  7.259s
  Time for abstraction:                  5.675s (Max:     0.043s, Count: 64320)
    Boolean abstraction:                 0.258s
    Solving time:                        0.414s (Max:     0.020s)
    Model enumeration time:              0.019s
    Time for BDD construction:           0.022s (Max:     0.003s)
Time for merge operator:                 0.219s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.049s
Total time for SMT solver (w/o itp):     0.433s

Number of path formula cache hits:   309525 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.550s

Total number of created targets for pointer analysis: 145
   Number of created targets for uf: *unsigned_short_int is 2
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_atm_vcc)*],_Parameter_2_type:_[(struct_sk_buff)*],_VarArgs:_false)* is 3
   Number of created targets for uf: *unsigned_char is 3
   Number of created targets for uf: *(struct_list_head)* is 6
   Number of created targets for uf: *unsigned_int is 7


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         665 (count: 27300, min: 0, max: 220, avg: 0.02)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.615s
  Time for transition matches:                         0.307s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       271301 (count: 271301, min: 1, max: 1, avg: 1.00) [1 x 271301]

CPA algorithm statistics
------------------------
Number of iterations:            188011
Max size of waitlist:            52
Average size of waitlist:        33
Number of computed successors:   202429
Max successors for one state:    2
Number of times merged:          7536
Number of times stopped:         13270
Number of times breaked:         28

Total time for CPA algorithm:        29.217s (Max:     3.506s)
  Time for choose from waitlist:      0.203s
  Time for precision adjustment:      9.622s
  Time for transfer relation:        15.947s
  Time for merge operator:            0.534s
  Time for stop operator:             0.561s
  Time for adding to reached set:     0.693s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   28
Avg. length of target path (in blocks):               13289 (count: 28, min: 12, max: 570, avg: 474.61)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.981s
  Counterexample analysis:                             5.154s (Max:     0.320s, Calls: 28)
    Refinement sat check:                              1.163s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.011s
  Error path post-processing:                          0.694s
  Predicate creation:                                  0.235s
  Precision update:                                    0.066s
  ARG update:                                          0.648s

Length of refined path (in blocks):                   13249 (count: 27, min: 11, max: 569, avg: 490.70)
Number of affected states:                            13222 (count: 27, min: 10, max: 568, avg: 489.70)
Length (states) of path with itp 'true':                  0 (count: 27, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:     13222 (count: 27, min: 10, max: 568, avg: 489.70)
Length (states) of path with itp 'false':                27 (count: 27, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 27, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           13195 (count: 27, min: 9, max: 567, avg: 488.70)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     27
Number of failed refinements:         0
Max. size of reached set before ref.: 8661
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 6755.54
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      36.793s
Time for refinements:                 7.573s
Average time for refinement:          0.270s
Max time for refinement:              0.748s

Code Coverage
-----------------------------
  Function coverage:      0.587
  Visited lines:          2509
  Total lines:            3506
  Line coverage:          0.716
  Visited conditions:     362
  Total conditions:       670
  Condition coverage:     0.540

CPAchecker general statistics
-----------------------------
Number of program locations:     4804
Number of CFA edges:             5526
Number of relevant variables:    612
Number of functions:             121
Number of loops:                 50
Size of reached set:             8168
  Number of reached locations:   1519 (32%)
    Avg states per location:     5
    Max states per location:     284 (at node N139)
  Number of reached functions:   71 (59%)
  Number of partitions:          8168
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       1
  Size of final wait list        17

Time for analysis setup:          7.055s
  Time for loading CPAs:          0.993s
  Time for loading parser:        0.791s
  Time for CFA construction:      5.098s
    Time for parsing file(s):     1.221s
    Time for AST to CFA:          2.018s
    Time for CFA sanity check:    0.330s
    Time for post-processing:     1.287s
      Time for var class.:        0.600s
Time for Analysis:               36.793s
CPU time for analysis:           36.780s
Time for analyzing result:        0.018s
Total time for CPAchecker:       43.853s
Total CPU time for CPAchecker:   43.820s
Time for statistics:              0.334s

Time for Garbage Collector:       1.734s (in 96 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                125MB (   119 MiB) max;     68MB (    64 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8133MB (  7757 MiB) max;   8122MB (  7746 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 9873) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
