scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/module_get_put-drivers-net-pppox_false-termination.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4p1qanzl/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 4827-4828: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val),
                               "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4830-4831: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val),
                               "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4837-4838: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val),
                               "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4825: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4914: Function pointer *((pppox_protos[protocol])->create) with type int (*)(struct net *, struct socket *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4862: Function pointer *((pppox_protos[__CPAchecker_TMP_2])->ioctl) with type int (*)(struct socket *, unsigned int, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sock_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sock_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_module to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_undefined_int to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            305 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  265 (87%)
  Because of loop head:            32 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (3%)
  Times precision was empty:       44 (14%)
  Times precision was {false}:     21 (7%)
  Times result was cached:         94 (31%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      146 (48%)
  Times result was 'false':        18 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         291
  BDD entailment checks:           99
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       8
Number of predicates discovered:          21
Number of abstraction locations:          17
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         888
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 5.32
Number of irrelevant predicates:          189 (21%)
Number of preds handled by boolean abs:   503 (57%)
  Total number of models for allsat:      450
  Max number of models for allsat:        11
  Avg number of models for allsat:        3.08

Time for post operator:                  0.385s
  Time for path formula creation:        0.369s
Time for strengthen operator:            0.010s
Time for prec operator:                  0.820s
  Time for abstraction:                  0.767s (Max:     0.019s, Count: 305)
    Boolean abstraction:                 0.294s
    Solving time:                        0.177s (Max:     0.011s)
    Model enumeration time:              0.053s
    Time for BDD construction:           0.029s (Max:     0.010s)
Time for merge operator:                 0.020s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.230s

Number of path formula cache hits:   1570 (57%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.346s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1344
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         479 (count: 1463, min: 0, max: 479, avg: 0.33)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.105s
Automaton transfers with branching:                0
Automaton transfer successors:                         2484 (count: 2484, min: 1, max: 1, avg: 1.00) [1 x 2484]

CPA algorithm statistics
------------------------
Number of iterations:            1360
Max size of waitlist:            13
Average size of waitlist:        6
Number of computed successors:   1566
Max successors for one state:    2
Number of times merged:          96
Number of times stopped:         141
Number of times breaked:         8

Total time for CPA algorithm:         1.732s (Max:     0.516s)
  Time for choose from waitlist:      0.014s
  Time for precision adjustment:      0.936s
  Time for transfer relation:         0.683s
  Time for merge operator:            0.033s
  Time for stop operator:             0.018s
  Time for adding to reached set:     0.009s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                 138 (count: 8, min: 8, max: 23, avg: 17.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.208s
  Counterexample analysis:                             0.142s (Max:     0.027s, Calls: 8)
    Refinement sat check:                              0.054s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.029s
  Precision update:                                    0.003s
  ARG update:                                          0.023s

Length of refined path (in blocks):                     130 (count: 8, min: 7, max: 22, avg: 16.25)
Number of affected states:                              110 (count: 8, min: 6, max: 18, avg: 13.75)
Length (states) of path with itp 'true':                 12 (count: 8, min: 0, max: 3, avg: 1.50)
Length (states) of path with itp non-trivial itp:       110 (count: 8, min: 6, max: 18, avg: 13.75)
Length (states) of path with itp 'false':                 8 (count: 8, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          49 (count: 8, min: 0, max: 10, avg: 6.13)
Equal non-trivial interpolants along paths:              53 (count: 8, min: 3, max: 9, avg: 6.63)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 319
Max. size of reached set after ref.:  31
Avg. size of reached set before ref.: 179.25
Avg. size of reached set after ref.:  17.00

Total time for CEGAR algorithm:       1.984s
Time for refinements:                 0.252s
Average time for refinement:          0.031s
Max time for refinement:              0.068s

Code Coverage
-----------------------------
  Function coverage:      0.474
  Visited lines:          801
  Total lines:            874
  Line coverage:          0.916
  Visited conditions:     26
  Total conditions:       48
  Condition coverage:     0.542

CPAchecker general statistics
-----------------------------
Number of program locations:     977
Number of CFA edges:             997
Number of relevant variables:    35
Number of functions:             19
Number of loops:                 2
Size of reached set:             110
  Number of reached locations:   91 (9%)
    Avg states per location:     1
    Max states per location:     4 (at node N208)
  Number of reached functions:   9 (47%)
  Number of partitions:          108
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N203 (before line 4980), Function main called from node N173, stack depth 1 [77258e59], stack [main]])
  Number of target states:       0

Time for analysis setup:          3.236s
  Time for loading CPAs:          0.707s
  Time for loading parser:        0.584s
  Time for CFA construction:      1.811s
    Time for parsing file(s):     0.612s
    Time for AST to CFA:          0.585s
    Time for CFA sanity check:    0.071s
    Time for post-processing:     0.369s
      Time for var class.:        0.124s
Time for Analysis:                1.993s
CPU time for analysis:            1.990s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.233s
Total CPU time for CPAchecker:    5.220s
Time for statistics:              0.060s

Time for Garbage Collector:       0.133s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     32MB (    30 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8081MB (  7707 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
