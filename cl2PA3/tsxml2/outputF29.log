scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers/parport_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_efm_4lt7/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6182: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6183: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6184: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6233: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6257: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6269: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6710: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6711: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6712: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6775: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6855: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6867: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 8251: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8262: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8573: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8574: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8582: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8583: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8591: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 9113: Dereferencing of non-pointer type PULONG  in expression *PortNumber (ASTConverter.convert, WARNING)

line 9408: Dereferencing of non-pointer type PULONG  in expression *PRegFlags (ASTConverter.convert, WARNING)

line 9438: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function IoAcquireCancelSpinLock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoDisconnectInterrupt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedIncrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoReleaseRemoveLockEx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedDecrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoWMIRegistrationControl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoReleaseRemoveLockAndWaitEx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ObfReferenceObject to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function PoRequestPowerIrp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function PoSetPowerState(Extension->DeviceObject, powerType, powerState) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function WRITE_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function PoSetPowerState(Extension->DeviceObject, powerType, powerState) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function KeSynchronizeExecution to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoConnectInterrupt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5406-5407: Ignoring function call through function pointer *(Extension->ChipInfo.ParChipSetMode): Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context, ChipMode); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: lines 5406-5407: Unsupported feature (recursion): Status = PptSetChipMode(Extension->ChipInfo.Context, ChipMode); (line was originally pointer call(PptSetChipMode) Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context,
                                                     ChipMode);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            23075 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  19303 (84%)
  Because of loop head:            3360 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         412 (2%)
  Times precision was empty:       3401 (15%)
  Times precision was {false}:     398 (2%)
  Times result was cached:         18426 (80%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      850 (4%)
  Times result was 'false':        5149 (22%)
Number of strengthen sat checks:   0
Number of coverage checks:         34051
  BDD entailment checks:           5491
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       44
Number of predicates discovered:          45
Number of abstraction locations:          89
Max number of predicates per location:    11
Avg number of predicates per location:    5
Total predicates per abstraction:         76458
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 61.26
Number of irrelevant predicates:          23383 (31%)
Number of preds handled by boolean abs:   3130 (4%)
  Total number of models for allsat:      2964
  Max number of models for allsat:        94
  Avg number of models for allsat:        3.49

Time for post operator:                  2.250s
  Time for path formula creation:        2.095s
Time for strengthen operator:            0.215s
Time for prec operator:                 10.854s
  Time for abstraction:                 10.276s (Max:     0.037s, Count: 23075)
    Boolean abstraction:                 2.107s
    Solving time:                        1.520s (Max:     0.030s)
    Model enumeration time:              0.375s
    Time for BDD construction:           0.250s (Max:     0.014s)
Time for merge operator:                 0.190s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.055s
Total time for SMT solver (w/o itp):     1.895s

Number of path formula cache hits:   205075 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.504s

Total number of created targets for pointer analysis: 86
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(struct__LIST_ENTRY)* is 5
   Number of created targets for uf: *signed_long_int is 2
   Number of created targets for uf: *unsigned_long_int is 3
   Number of created targets for uf: *(struct__IO_STACK_LOCATION)* is 2


Number of BDD nodes:                               5700
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3427 (count: 17199, min: 0, max: 481, avg: 0.20)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.686s
  Time for transition matches:                         0.256s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.025s
Automaton transfers with branching:                0
Automaton transfer successors:                       181768 (count: 181843, min: 0, max: 1, avg: 1.00) [0 x 75, 1 x 181768]

CPA algorithm statistics
------------------------
Number of iterations:            119294
Max size of waitlist:            75
Average size of waitlist:        34
Number of computed successors:   144094
Max successors for one state:    2
Number of times merged:          14280
Number of times stopped:         16619
Number of times breaked:         412

Total time for CPA algorithm:        20.321s (Max:     0.545s)
  Time for choose from waitlist:      0.150s
  Time for precision adjustment:     12.390s
  Time for transfer relation:         5.599s
  Time for merge operator:            0.504s
  Time for stop operator:             0.433s
  Time for adding to reached set:     0.328s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   412
Avg. length of target path (in blocks):                6979 (count: 412, min: 4, max: 28, avg: 16.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.083s
  Counterexample analysis:                             5.241s (Max:     0.033s, Calls: 412)
    Refinement sat check:                              3.431s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.126s
  Precision update:                                    0.257s
  ARG update:                                          0.307s

Length of refined path (in blocks):                    6395 (count: 412, min: 3, max: 27, avg: 15.52)
Number of affected states:                             2055 (count: 412, min: 1, max: 22, avg: 4.99)
Length (states) of path with itp 'true':               3928 (count: 412, min: 0, max: 18, avg: 9.53)
Length (states) of path with itp non-trivial itp:      2055 (count: 412, min: 1, max: 22, avg: 4.99)
Length (states) of path with itp 'false':               412 (count: 412, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         316 (count: 412, min: 0, max: 4, avg: 0.77)
Equal non-trivial interpolants along paths:            1327 (count: 412, min: 0, max: 19, avg: 3.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                412
Number of successful refinements:     412
Number of failed refinements:         0
Max. size of reached set before ref.: 3507
Max. size of reached set after ref.:  3441
Avg. size of reached set before ref.: 1390.21
Avg. size of reached set after ref.:  1101.72

Total time for CEGAR algorithm:      27.475s
Time for refinements:                 6.761s
Average time for refinement:          0.016s
Max time for refinement:              0.047s

Code Coverage
-----------------------------
  Function coverage:      0.346
  Visited lines:          1654
  Total lines:            4105
  Line coverage:          0.403
  Visited conditions:     376
  Total conditions:       1064
  Condition coverage:     0.353

CPAchecker general statistics
-----------------------------
Number of program locations:     5534
Number of CFA edges:             6160
Number of relevant variables:    805
Number of functions:             182
Number of loops:                 37
Size of reached set:             3468
  Number of reached locations:   1010 (18%)
    Avg states per location:     3
    Max states per location:     48 (at node N241)
  Number of reached functions:   63 (35%)
  Number of partitions:          3410
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N4957 (after line 9636), Function main called from node N4843, stack depth 1 [4c2af006], stack [main]])
  Number of target states:       0
  Size of final wait list        59

Time for analysis setup:          6.167s
  Time for loading CPAs:          0.938s
  Time for loading parser:        0.712s
  Time for CFA construction:      4.380s
    Time for parsing file(s):     0.992s
    Time for AST to CFA:          1.495s
    Time for CFA sanity check:    0.536s
    Time for post-processing:     1.157s
      Time for var class.:        0.664s
Time for Analysis:               27.475s
CPU time for analysis:           27.470s
Total time for CPAchecker:       33.649s
Total CPU time for CPAchecker:   33.640s
Time for statistics:              0.173s

Time for Garbage Collector:       0.641s (in 75 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 71MB (    68 MiB) max;     48MB (    46 MiB) avg;     74MB (    70 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
