scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers/parport_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_guybj6k0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6182: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6183: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6184: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6233: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6257: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6269: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6710: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6711: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6712: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6775: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6855: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6867: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 8251: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8262: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8573: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8574: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8582: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8583: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8591: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 9113: Dereferencing of non-pointer type PULONG  in expression *PortNumber (ASTConverter.convert, WARNING)

line 9408: Dereferencing of non-pointer type PULONG  in expression *PRegFlags (ASTConverter.convert, WARNING)

line 9438: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function InterlockedIncrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoReleaseRemoveLockEx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoDisconnectInterrupt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedDecrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function PoRequestPowerIrp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function PoSetPowerState(Extension->DeviceObject, powerType, powerState) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ObfReferenceObject to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoWMIRegistrationControl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoReleaseRemoveLockAndWaitEx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoAcquireCancelSpinLock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function PoSetPowerState(Extension->DeviceObject, powerType, powerState) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function WRITE_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeSynchronizeExecution to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoConnectInterrupt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5406-5407: Ignoring function call through function pointer *(Extension->ChipInfo.ParChipSetMode): Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context, ChipMode); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: lines 5406-5407: Unsupported feature (recursion): Status = PptSetChipMode(Extension->ChipInfo.Context, ChipMode); (line was originally pointer call(PptSetChipMode) Status = (*(Extension->ChipInfo.ParChipSetMode))(Extension->ChipInfo.Context,
                                                     ChipMode);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            117007 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  100494 (86%)
  Because of loop head:            13759 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2754 (2%)
  Times precision was empty:       4798 (4%)
  Times precision was {false}:     707 (1%)
  Times result was cached:         109496 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2006 (2%)
  Times result was 'false':        31827 (27%)
Number of strengthen sat checks:   0
Number of coverage checks:         168836
  BDD entailment checks:           26592
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       44
Number of predicates discovered:          82
Number of abstraction locations:          173
Max number of predicates per location:    19
Avg number of predicates per location:    5
Total predicates per abstraction:         579754
Max number of predicates per abstraction: 19
Avg number of predicates per abstraction: 213.69
Number of irrelevant predicates:          163158 (28%)
Number of preds handled by boolean abs:   8990 (2%)
  Total number of models for allsat:      13405
  Max number of models for allsat:        122
  Avg number of models for allsat:        6.68

Time for post operator:                  4.262s
  Time for path formula creation:        3.788s
Time for strengthen operator:            0.705s
Time for prec operator:                 37.734s
  Time for abstraction:                 36.051s (Max:     0.033s, Count: 117007)
    Boolean abstraction:                 4.638s
    Solving time:                        2.943s (Max:     0.023s)
    Model enumeration time:              1.317s
    Time for BDD construction:           0.517s (Max:     0.023s)
Time for merge operator:                 0.395s
Time for coverage check:                 0.078s
  Time for BDD entailment checks:        0.061s
Total time for SMT solver (w/o itp):     4.260s

Number of path formula cache hits:   1006981 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.040s

Total number of created targets for pointer analysis: 107
   Number of created targets for uf: *(struct__LIST_ENTRY)* is 5
   Number of created targets for uf: *signed_long_int is 2
   Number of created targets for uf: *unsigned_long_int is 3
   Number of created targets for uf: *(struct__IO_STACK_LOCATION)* is 2


Number of BDD nodes:                               30645
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9507 (count: 53300, min: 0, max: 495, avg: 0.18)
Time for BDD node cleanup:                             0.033s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.617s
  Time for transition matches:                         0.772s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.027s
Automaton transfers with branching:                0
Automaton transfer successors:                       870691 (count: 871349, min: 0, max: 1, avg: 1.00) [0 x 658, 1 x 870691]

CPA algorithm statistics
------------------------
Number of iterations:            593771
Max size of waitlist:            33
Average size of waitlist:        14
Number of computed successors:   714584
Max successors for one state:    2
Number of times merged:          71122
Number of times stopped:         81400
Number of times breaked:         2754

Total time for CPA algorithm:        61.534s (Max:     0.484s)
  Time for choose from waitlist:      0.398s
  Time for precision adjustment:     42.340s
  Time for transfer relation:        13.502s
  Time for merge operator:            1.492s
  Time for stop operator:             0.963s
  Time for adding to reached set:     1.043s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2754
Avg. length of target path (in blocks):               60469 (count: 2754, min: 4, max: 35, avg: 21.96)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  38.204s
  Counterexample analysis:                            34.742s (Max:     0.043s, Calls: 2754)
    Refinement sat check:                             21.951s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.045s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.272s
  Precision update:                                    1.560s
  ARG update:                                          0.948s

Length of refined path (in blocks):                   52707 (count: 2754, min: 3, max: 33, avg: 19.14)
Number of affected states:                            14397 (count: 2754, min: 0, max: 29, avg: 5.23)
Length (states) of path with itp 'true':              35556 (count: 2754, min: 0, max: 26, avg: 12.91)
Length (states) of path with itp non-trivial itp:     14397 (count: 2754, min: 0, max: 29, avg: 5.23)
Length (states) of path with itp 'false':              2754 (count: 2754, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        4481 (count: 2754, min: 0, max: 6, avg: 1.63)
Equal non-trivial interpolants along paths:            7165 (count: 2754, min: 0, max: 28, avg: 2.60)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2754
Number of successful refinements:     2754
Number of failed refinements:         0
Max. size of reached set before ref.: 4737
Max. size of reached set after ref.:  4642
Avg. size of reached set before ref.: 1542.08
Avg. size of reached set after ref.:  1325.42

Total time for CEGAR algorithm:     105.042s
Time for refinements:                41.292s
Average time for refinement:          0.014s
Max time for refinement:              0.053s

Code Coverage
-----------------------------
  Function coverage:      0.313
  Visited lines:          1665
  Total lines:            4105
  Line coverage:          0.406
  Visited conditions:     372
  Total conditions:       1064
  Condition coverage:     0.350

CPAchecker general statistics
-----------------------------
Number of program locations:     5534
Number of CFA edges:             6160
Number of relevant variables:    805
Number of functions:             182
Number of loops:                 37
Size of reached set:             4668
  Number of reached locations:   1040 (19%)
    Avg states per location:     4
    Max states per location:     60 (at node N241)
  Number of reached functions:   57 (31%)
  Number of partitions:          4585
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N4957 (after line 9636), Function main called from node N4843, stack depth 1 [4c2af006], stack [main]])
  Number of target states:       0
  Size of final wait list        12

Time for analysis setup:          6.075s
  Time for loading CPAs:          0.952s
  Time for loading parser:        0.705s
  Time for CFA construction:      4.271s
    Time for parsing file(s):     1.032s
    Time for AST to CFA:          1.526s
    Time for CFA sanity check:    0.448s
    Time for post-processing:     1.063s
      Time for var class.:        0.584s
Time for Analysis:              105.042s
CPU time for analysis:          105.020s
Total time for CPAchecker:      111.120s
Total CPU time for CPAchecker:  111.080s
Time for statistics:              0.170s

Time for Garbage Collector:       2.268s (in 392 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 91MB (    87 MiB) max;     55MB (    52 MiB) avg;     94MB (    89 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8081MB (  7707 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
