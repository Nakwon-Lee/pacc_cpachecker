scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers/diskperf_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_rnft4ale/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3051: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function IoWMIRegistrationControl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedExchange to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function KeQueryPerformanceCounter((void *)0) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function InterlockedDecrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedIncrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function KeQueryPerformanceCounter(&frequency) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function KeQuerySystemTime to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoAllocateErrorLogEntry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoWriteErrorLogEntry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            13643 (8% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  11850 (87%)
  Because of loop head:            1236 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         557 (4%)
  Times precision was empty:       3037 (22%)
  Times precision was {false}:     330 (2%)
  Times result was cached:         8938 (66%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1338 (10%)
  Times result was 'false':        3997 (29%)
Number of strengthen sat checks:   0
Number of coverage checks:         28464
  BDD entailment checks:           7578
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       31
Number of predicates discovered:          59
Number of abstraction locations:          48
Max number of predicates per location:    28
Avg number of predicates per location:    4
Total predicates per abstraction:         31639
Max number of predicates per abstraction: 28
Avg number of predicates per abstraction: 18.97
Number of irrelevant predicates:          6821 (22%)
Number of preds handled by boolean abs:   11073 (35%)
  Total number of models for allsat:      5819
  Max number of models for allsat:        28
  Avg number of models for allsat:        4.35

Time for post operator:                  4.846s
  Time for path formula creation:        4.665s
Time for strengthen operator:            0.267s
Time for prec operator:                  9.462s
  Time for abstraction:                  9.048s (Max:     0.026s, Count: 13643)
    Boolean abstraction:                 3.616s
    Solving time:                        2.474s (Max:     0.018s)
    Model enumeration time:              0.530s
    Time for BDD construction:           0.400s (Max:     0.013s)
Time for merge operator:                 0.301s
Time for coverage check:                 0.051s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):     3.004s

Number of path formula cache hits:   152147 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.076s

Total number of created targets for pointer analysis: 448
   Number of created targets for uf: *signed_long_int is 33
   Number of created targets for uf: *(struct__IO_STACK_LOCATION)* is 4
   Number of created targets for uf: *unsigned_long_int is 5


Number of BDD nodes:                               47030
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       20701 (count: 27878, min: 0, max: 1795, avg: 0.74)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.651s
  Time for transition matches:                         0.211s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.016s
Automaton transfers with branching:                0
Automaton transfer successors:                       170821 (count: 171015, min: 0, max: 1, avg: 1.00) [0 x 194, 1 x 170821]

CPA algorithm statistics
------------------------
Number of iterations:            79236
Max size of waitlist:            16
Average size of waitlist:        8
Number of computed successors:   95630
Max successors for one state:    2
Number of times merged:          10443
Number of times stopped:         11501
Number of times breaked:         557

Total time for CPA algorithm:        20.967s (Max:     0.614s)
  Time for choose from waitlist:      0.118s
  Time for precision adjustment:     10.640s
  Time for transfer relation:         8.119s
  Time for merge operator:            0.672s
  Time for stop operator:             0.301s
  Time for adding to reached set:     0.374s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   557
Avg. length of target path (in blocks):               21810 (count: 557, min: 6, max: 59, avg: 39.16)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.187s
  Counterexample analysis:                            10.217s (Max:     0.054s, Calls: 557)
    Refinement sat check:                              6.576s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.012s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.113s
  Precision update:                                    0.247s
  ARG update:                                          0.292s

Length of refined path (in blocks):                   20398 (count: 557, min: 2, max: 51, avg: 36.62)
Number of affected states:                             2118 (count: 557, min: 1, max: 39, avg: 3.80)
Length (states) of path with itp 'true':              17723 (count: 557, min: 0, max: 47, avg: 31.82)
Length (states) of path with itp non-trivial itp:      2118 (count: 557, min: 1, max: 39, avg: 3.80)
Length (states) of path with itp 'false':               557 (count: 557, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         454 (count: 557, min: 0, max: 26, avg: 0.82)
Equal non-trivial interpolants along paths:            1107 (count: 557, min: 0, max: 38, avg: 1.99)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                557
Number of successful refinements:     557
Number of failed refinements:         0
Max. size of reached set before ref.: 1073
Max. size of reached set after ref.:  990
Avg. size of reached set before ref.: 532.00
Avg. size of reached set after ref.:  389.56

Total time for CEGAR algorithm:      32.858s
Time for refinements:                11.731s
Average time for refinement:          0.021s
Max time for refinement:              0.077s

Code Coverage
-----------------------------
  Function coverage:      0.193
  Visited lines:          1042
  Total lines:            1722
  Line coverage:          0.605
  Visited conditions:     114
  Total conditions:       280
  Condition coverage:     0.407

CPAchecker general statistics
-----------------------------
Number of program locations:     2235
Number of CFA edges:             2388
Number of relevant variables:    245
Number of functions:             88
Number of loops:                 4
Size of reached set:             794
  Number of reached locations:   282 (13%)
    Avg states per location:     2
    Max states per location:     28 (at node N870)
  Number of reached functions:   17 (19%)
  Number of partitions:          763
    Avg size of partitions:      1
    Max size of partitions:      28 (with key [N870 (before lines 3203-3208), Function main called from node N848, stack depth 1 [70abf9b0], stack [main]])
  Number of target states:       0

Time for analysis setup:          5.052s
  Time for loading CPAs:          0.879s
  Time for loading parser:        0.688s
  Time for CFA construction:      3.353s
    Time for parsing file(s):     0.959s
    Time for AST to CFA:          1.162s
    Time for CFA sanity check:    0.219s
    Time for post-processing:     0.827s
      Time for var class.:        0.421s
Time for Analysis:               32.858s
CPU time for analysis:           32.860s
Time for analyzing result:        0.000s
Total time for CPAchecker:       37.916s
Total CPU time for CPAchecker:   37.900s
Time for statistics:              0.110s

Time for Garbage Collector:       0.533s (in 55 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 74MB (    70 MiB) max;     49MB (    47 MiB) avg;     78MB (    74 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     37MB (    35 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     38MB (    37 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8076MB (  7701 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
