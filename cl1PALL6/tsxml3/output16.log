scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-media-video-cx88-cx8802-ko--32_7a--d47b389.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2602uf2w/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5292: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

line 6362: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_sram_channel_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function btcx_riscmem_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_core_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_core_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_risc_stopper to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_sram_channel_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_core_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_print_irqbits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cx88_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5315: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)(buf->vb.queue.next)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_prefetch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_prefetch, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6187: Ignoring function call through function pointer *(drv->remove): err = (*(drv->remove))(drv); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5921: Ignoring function call through function pointer *(drv->advise_release): (*(drv->advise_release))(drv); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 5921: Unsupported feature (recursion): cx8802_request_release(drv); (line was originally pointer call(cx8802_request_release) (*(drv->advise_release))(drv);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            980 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            784 (80%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         196 (20%)
  Times precision was empty:       146 (15%)
  Times precision was {false}:     125 (13%)
  Times result was cached:         421 (43%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      288 (29%)
  Times result was 'false':        181 (18%)
Number of strengthen sat checks:   0
Number of coverage checks:         11468
  BDD entailment checks:           534
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       109
Number of predicates discovered:          6
Number of abstraction locations:          7
Max number of predicates per location:    4
Avg number of predicates per location:    3
Total predicates per abstraction:         1830
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 4.43
Number of irrelevant predicates:          445 (24%)
Number of preds handled by boolean abs:   642 (35%)
  Total number of models for allsat:      284
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.99

Time for post operator:                  2.754s
  Time for path formula creation:        2.601s
Time for strengthen operator:            0.218s
Time for prec operator:                  4.455s
  Time for abstraction:                  4.224s (Max:     0.068s, Count: 980)
    Boolean abstraction:                 1.904s
    Solving time:                        2.234s (Max:     0.054s)
    Model enumeration time:              0.109s
    Time for BDD construction:           0.040s (Max:     0.007s)
Time for merge operator:                 0.325s
Time for coverage check:                 0.023s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     2.343s

Number of path formula cache hits:   89526 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.175s

Total number of created targets for pointer analysis: 375
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *(struct_pci_dev)* is 6
   Number of created targets for uf: *(struct_cx88_core)* is 6


Number of BDD nodes:                               217
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         589 (count: 3134, min: 0, max: 40, avg: 0.19)
Time for BDD node cleanup:                             0.026s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.396s
Automaton transfers with branching:                0
Automaton transfer successors:                        95850 (count: 95850, min: 1, max: 1, avg: 1.00) [1 x 95850]

CPA algorithm statistics
------------------------
Number of iterations:            68506
Max size of waitlist:            25
Average size of waitlist:        12
Number of computed successors:   74743
Max successors for one state:    2
Number of times merged:          5467
Number of times stopped:         5850
Number of times breaked:         29

Total time for CPA algorithm:        13.695s (Max:     1.634s)
  Time for choose from waitlist:      0.163s
  Time for precision adjustment:      5.552s
  Time for transfer relation:         5.771s
  Time for merge operator:            0.563s
  Time for stop operator:             0.262s
  Time for adding to reached set:     0.389s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   29
Avg. length of target path (in blocks):                 107 (count: 29, min: 1, max: 6, avg: 3.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.801s
  Counterexample analysis:                             0.444s (Max:     0.040s, Calls: 29)
    Refinement sat check:                              0.364s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.022s
  Precision update:                                    0.031s
  ARG update:                                          0.286s

Length of refined path (in blocks):                     107 (count: 29, min: 1, max: 6, avg: 3.69)
Number of affected states:                               73 (count: 29, min: 0, max: 5, avg: 2.52)
Length (states) of path with itp 'true':                  5 (count: 29, min: 0, max: 1, avg: 0.17)
Length (states) of path with itp non-trivial itp:        73 (count: 29, min: 0, max: 5, avg: 2.52)
Length (states) of path with itp 'false':                 0 (count: 29, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 29, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              48 (count: 29, min: 0, max: 4, avg: 1.66)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                29
Number of successful refinements:     29
Number of failed refinements:         0
Max. size of reached set before ref.: 5139
Max. size of reached set after ref.:  3000
Avg. size of reached set before ref.: 2805.52
Avg. size of reached set after ref.:  552.66

Total time for CEGAR algorithm:      14.731s
Time for refinements:                 1.013s
Average time for refinement:          0.034s
Max time for refinement:              0.094s

Code Coverage
-----------------------------
  Function coverage:      0.478
  Visited lines:          1340
  Total lines:            1844
  Line coverage:          0.727
  Visited conditions:     182
  Total conditions:       392
  Condition coverage:     0.464

CPAchecker general statistics
-----------------------------
Number of program locations:     2568
Number of CFA edges:             2852
Number of relevant variables:    222
Number of functions:             92
Number of loops:                 11
Size of reached set:             3380
  Number of reached locations:   636 (25%)
    Avg states per location:     5
    Max states per location:     289 (at node N70)
  Number of reached functions:   44 (48%)
  Number of partitions:          3380
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        8

Time for analysis setup:          5.636s
  Time for loading CPAs:          1.015s
  Time for loading parser:        0.781s
  Time for CFA construction:      3.727s
    Time for parsing file(s):     1.052s
    Time for AST to CFA:          1.332s
    Time for CFA sanity check:    0.238s
    Time for post-processing:     0.920s
      Time for var class.:        0.395s
Time for Analysis:               14.732s
CPU time for analysis:           14.730s
Total time for CPAchecker:       20.376s
Total CPU time for CPAchecker:   20.360s
Time for statistics:              0.146s

Time for Garbage Collector:       0.420s (in 32 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 68MB (    65 MiB) max;     44MB (    42 MiB) avg;     71MB (    68 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     32MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8134MB (  7757 MiB) max;   8113MB (  7738 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
