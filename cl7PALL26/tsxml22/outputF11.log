scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mmc--host--sdricoh_cs.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2zetczie/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_resume_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_suspend_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_remove_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_free_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_request_done to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_alloc_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_add_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            470 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            442 (94%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (6%)
  Times precision was empty:       125 (27%)
  Times precision was {false}:     57 (12%)
  Times result was cached:         254 (54%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      34 (7%)
  Times result was 'false':        56 (12%)
Number of strengthen sat checks:   0
Number of coverage checks:         1896
  BDD entailment checks:           250
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       269
Number of predicates discovered:          2
Number of abstraction locations:          11
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         345
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.79
Number of irrelevant predicates:          133 (39%)
Number of preds handled by boolean abs:   34 (10%)
  Total number of models for allsat:      32
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.94

Time for post operator:                  1.515s
  Time for path formula creation:        1.432s
Time for strengthen operator:            0.096s
Time for prec operator:                  1.017s
  Time for abstraction:                  0.945s (Max:     0.068s, Count: 470)
    Boolean abstraction:                 0.261s
    Solving time:                        0.344s (Max:     0.044s)
    Model enumeration time:              0.020s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.180s
Time for coverage check:                 0.026s
  Time for BDD entailment checks:        0.026s
Total time for SMT solver (w/o itp):     0.364s

Number of path formula cache hits:   27922 (71%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.229s

Total number of created targets for pointer analysis: 35
   Number of created targets for uf: *signed_int is 11


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          65 (count: 889, min: 0, max: 22, avg: 0.07)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.213s
Automaton transfers with branching:                0
Automaton transfer successors:                        38225 (count: 38225, min: 1, max: 1, avg: 1.00) [1 x 38225]

CPA algorithm statistics
------------------------
Number of iterations:            15413
Max size of waitlist:            12
Average size of waitlist:        6
Number of computed successors:   16584
Max successors for one state:    2
Number of times merged:          823
Number of times stopped:         1042
Number of times breaked:         10

Total time for CPA algorithm:         4.608s (Max:     0.653s)
  Time for choose from waitlist:      0.036s
  Time for precision adjustment:      1.274s
  Time for transfer relation:         2.579s
  Time for merge operator:            0.267s
  Time for stop operator:             0.119s
  Time for adding to reached set:     0.075s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10
Avg. length of target path (in blocks):                  55 (count: 10, min: 1, max: 10, avg: 5.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.303s
  Counterexample analysis:                             0.183s (Max:     0.032s, Calls: 10)
    Refinement sat check:                              0.127s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.011s
  ARG update:                                          0.094s

Length of refined path (in blocks):                      55 (count: 10, min: 1, max: 10, avg: 5.50)
Number of affected states:                               45 (count: 10, min: 0, max: 9, avg: 4.50)
Length (states) of path with itp 'true':                  0 (count: 10, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        45 (count: 10, min: 0, max: 9, avg: 4.50)
Length (states) of path with itp 'false':                 0 (count: 10, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 10, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              36 (count: 10, min: 0, max: 8, avg: 3.60)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10
Number of successful refinements:     10
Number of failed refinements:         0
Max. size of reached set before ref.: 2192
Max. size of reached set after ref.:  22
Avg. size of reached set before ref.: 1417.80
Avg. size of reached set after ref.:  21.70

Total time for CEGAR algorithm:       4.963s
Time for refinements:                 0.354s
Average time for refinement:          0.035s
Max time for refinement:              0.051s

Code Coverage
-----------------------------
  Function coverage:      0.795
  Visited lines:          2085
  Total lines:            2130
  Line coverage:          0.979
  Visited conditions:     154
  Total conditions:       174
  Condition coverage:     0.885

CPAchecker general statistics
-----------------------------
Number of program locations:     2448
Number of CFA edges:             2587
Number of relevant variables:    445
Number of functions:             39
Number of loops:                 12
Size of reached set:             1526
  Number of reached locations:   682 (28%)
    Avg states per location:     2
    Max states per location:     41 (at node N23)
  Number of reached functions:   31 (79%)
  Number of partitions:          1526
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.594s
  Time for loading CPAs:          0.731s
  Time for loading parser:        0.467s
  Time for CFA construction:      2.285s
    Time for parsing file(s):     0.687s
    Time for AST to CFA:          0.728s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.569s
      Time for var class.:        0.289s
Time for Analysis:                4.963s
CPU time for analysis:            4.970s
Time for analyzing result:        0.000s
Total time for CPAchecker:        8.561s
Total CPU time for CPAchecker:    8.560s
Time for statistics:              0.072s

Time for Garbage Collector:       0.224s (in 15 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     39MB (    37 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     29MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8067MB (  7693 MiB) max;   8041MB (  7669 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
