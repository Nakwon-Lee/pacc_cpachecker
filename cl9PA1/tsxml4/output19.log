scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-acceleration/underapprox_true-unreach-call2_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5h9a3b9m/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            75 (26% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  30 (40%)
  Because of loop head:            37 (49%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (11%)
  Times precision was empty:       11 (15%)
  Times precision was {false}:     28 (37%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      36 (48%)
  Times result was 'false':        22 (29%)
Number of strengthen sat checks:   0
Number of coverage checks:         97
  BDD entailment checks:           97
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       2
Number of predicates discovered:          9
Number of abstraction locations:          3
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         177
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.77
Number of irrelevant predicates:          29 (16%)
Number of preds handled by boolean abs:   148 (84%)
  Total number of models for allsat:      125
  Max number of models for allsat:        7
  Avg number of models for allsat:        3.47

Time for post operator:                  0.058s
  Time for path formula creation:        0.057s
Time for strengthen operator:            0.009s
Time for prec operator:                  0.229s
  Time for abstraction:                  0.226s (Max:     0.050s, Count: 75)
    Boolean abstraction:                 0.097s
    Solving time:                        0.063s (Max:     0.038s)
    Model enumeration time:              0.005s
    Time for BDD construction:           0.019s (Max:     0.008s)
Time for merge operator:                 0.000s
Time for coverage check:                 0.013s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):     0.068s

Number of path formula cache hits:   218 (68%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.056s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               541
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 604, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.017s
Automaton transfers with branching:                0
Automaton transfer successors:                          290 (count: 290, min: 1, max: 1, avg: 1.00) [1 x 290]

CPA algorithm statistics
------------------------
Number of iterations:            162
Max size of waitlist:            2
Average size of waitlist:        1
Number of computed successors:   198
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         8
Number of times breaked:         7

Total time for CPA algorithm:         0.402s (Max:     0.067s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.252s
  Time for transfer relation:         0.122s
  Time for merge operator:            0.002s
  Time for stop operator:             0.017s
  Time for adding to reached set:     0.003s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                  42 (count: 7, min: 3, max: 9, avg: 6.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.054s
  Counterexample analysis:                             0.033s (Max:     0.009s, Calls: 7)
    Refinement sat check:                              0.006s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.011s
  Precision update:                                    0.002s
  ARG update:                                          0.003s

Length of refined path (in blocks):                      36 (count: 7, min: 2, max: 9, avg: 5.14)
Number of affected states:                               23 (count: 7, min: 1, max: 6, avg: 3.29)
Length (states) of path with itp 'true':                  6 (count: 7, min: 0, max: 6, avg: 0.86)
Length (states) of path with itp non-trivial itp:        23 (count: 7, min: 1, max: 6, avg: 3.29)
Length (states) of path with itp 'false':                 6 (count: 7, min: 0, max: 1, avg: 0.86)
Different non-trivial interpolants along paths:          16 (count: 7, min: 0, max: 5, avg: 2.29)
Equal non-trivial interpolants along paths:               0 (count: 7, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 37
Max. size of reached set after ref.:  27
Avg. size of reached set before ref.: 25.00
Avg. size of reached set after ref.:  6.43

Total time for CEGAR algorithm:       0.467s
Time for refinements:                 0.064s
Average time for refinement:          0.009s
Max time for refinement:              0.028s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          9
  Total lines:            9
  Line coverage:          1.000
  Visited conditions:     4
  Total conditions:       4
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     24
Number of CFA edges:             25
Number of relevant variables:    2
Number of functions:             2
Number of loops:                 1
Size of reached set:             39
  Number of reached locations:   15 (63%)
    Avg states per location:     2
    Max states per location:     7 (at node N13)
  Number of reached functions:   2 (100%)
  Number of partitions:          33
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N13 (before line 11), Function main called from node N9, stack depth 1 [54a7079e], stack [main]])
  Number of target states:       0

Time for analysis setup:          1.557s
  Time for loading CPAs:          0.478s
  Time for loading parser:        0.450s
  Time for CFA construction:      0.554s
    Time for parsing file(s):     0.227s
    Time for AST to CFA:          0.113s
    Time for CFA sanity check:    0.007s
    Time for post-processing:     0.100s
      Time for var class.:        0.026s
Time for Analysis:                0.479s
CPU time for analysis:            0.470s
Time for analyzing result:        0.000s
Total time for CPAchecker:        2.039s
Total CPU time for CPAchecker:    2.030s
Time for statistics:              0.046s

Time for Garbage Collector:       0.068s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 45MB (    43 MiB) max;     26MB (    25 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     21MB (    20 MiB) avg;     30MB (    28 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        31MB (    29 MiB) max;     23MB (    22 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   7994MB (  7623 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
