scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--tty--synclinkmp.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1vfdgif4/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5240: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5243: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5246: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9065: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9070: Dead code detected: tmp___9 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9075: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___8 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___8->state): : "memory",
                       "cc");
  goto ldv_42195;
  case 2:
  tmp___9 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___9->state): : "memory",
                       "cc");
  goto ldv_42195;
  case 4:
  tmp___10 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___10->state): : "memory",
                       "cc");
  goto ldv_42195;
  case 8:
  tmp___11 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___11->state): : "memory",
                       "cc");
  goto ldv_42195;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9107: Dead code detected: tmp___15 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9112: Dead code detected: tmp___16 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9117: Dead code detected: tmp___17 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___15 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___15->state): : "memory",
                       "cc");
  goto ldv_42207;
  case 2:
  tmp___16 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___16->state): : "memory",
                       "cc");
  goto ldv_42207;
  case 4:
  tmp___17 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___17->state): : "memory",
                       "cc");
  goto ldv_42207;
  case 8:
  tmp___18 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___18->state): : "memory",
                       "cc");
  goto ldv_42207;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9196: Dead code detected: tmp___28 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9201: Dead code detected: tmp___29 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9206: Dead code detected: tmp___30 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___28 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___28->state): : "memory",
                       "cc");
  goto ldv_42216;
  case 2:
  tmp___29 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___29->state): : "memory",
                       "cc");
  goto ldv_42216;
  case 4:
  tmp___30 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___30->state): : "memory",
                       "cc");
  goto ldv_42216;
  case 8:
  tmp___31 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___31->state): : "memory",
                       "cc");
  goto ldv_42216;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9239: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 9242: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 9248: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx");
    goto ldv_42228;
    case 2:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx");
    goto ldv_42228;
    case 4:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx");
    goto ldv_42228;
    case 8:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx");
    goto ldv_42228;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (mask_ptr): "ebx");
    goto ldv_42228;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 9303: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9308: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9313: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___1 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_42248;
  case 2:
  tmp___2 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_42248;
  case 4:
  tmp___3 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_42248;
  case 8:
  tmp___4 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_42248;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9343: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9348: Dead code detected: tmp___9 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9353: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___8 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___8->state): : "memory",
                       "cc");
  goto ldv_42260;
  case 2:
  tmp___9 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___9->state): : "memory",
                       "cc");
  goto ldv_42260;
  case 4:
  tmp___10 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___10->state): : "memory",
                       "cc");
  goto ldv_42260;
  case 8:
  tmp___11 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___11->state): : "memory",
                       "cc");
  goto ldv_42260;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9386: Dead code detected: tmp___12 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9391: Dead code detected: tmp___13 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9396: Dead code detected: tmp___14 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___12 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___12->state): : "memory",
                       "cc");
  goto ldv_42269;
  case 2:
  tmp___13 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___13->state): : "memory",
                       "cc");
  goto ldv_42269;
  case 4:
  tmp___14 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___14->state): : "memory",
                       "cc");
  goto ldv_42269;
  case 8:
  tmp___15 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___15->state): : "memory",
                       "cc");
  goto ldv_42269;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9627: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9632: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9637: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___2 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_42332;
  case 2:
  tmp___3 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_42332;
  case 4:
  tmp___4 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_42332;
  case 8:
  tmp___5 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_42332;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9689: Dead code detected: tmp___9 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9694: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9699: Dead code detected: tmp___11 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp___9 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___9->state): : "memory",
                       "cc");
  goto ldv_42342;
  case 2:
  tmp___10 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___10->state): : "memory",
                       "cc");
  goto ldv_42342;
  case 4:
  tmp___11 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___11->state): : "memory",
                       "cc");
  goto ldv_42342;
  case 8:
  tmp___12 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___12->state): : "memory",
                       "cc");
  goto ldv_42342;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 13342: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5740: Function pointer *(hdlc->proto->type_trans) with type __be16 (*)(struct sk_buff *, struct net_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5930: Function pointer *(ld->ops->receive_buf) with type void (*)(struct tty_struct *, const unsigned char *, char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_port_ops_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_port_ops_activate_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_port_ops_destruct_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_hdlcdev_ops_ndo_uninit_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_hdlcdev_ops_ndo_init_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hdlc_start_xmit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hdlc_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hdlc_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5417: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hdlc_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tty_alloc_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_set_operations to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ops_setup_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ops_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ops_disconnect_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_close_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_ldisc_flush to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_close_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hung_up_p to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function interruptible_sleep_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3609 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            3459 (96%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         150 (4%)
  Times precision was empty:       745 (21%)
  Times precision was {false}:     535 (15%)
  Times result was cached:         2287 (63%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      42 (1%)
  Times result was 'false':        471 (13%)
Number of strengthen sat checks:   0
Number of coverage checks:         368019
  BDD entailment checks:           2513
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       6257
Number of predicates discovered:          6
Number of abstraction locations:          4
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         5403
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 9.36
Number of irrelevant predicates:          5302 (98%)
Number of preds handled by boolean abs:   59 (1%)
  Total number of models for allsat:      42
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 33.686s
  Time for path formula creation:       32.794s
Time for strengthen operator:            1.282s
Time for prec operator:                802.115s
  Time for abstraction:                800.457s (Max:   377.880s, Count: 3609)
    Boolean abstraction:               424.494s
    Solving time:                      763.943s (Max:   378.580s)
    Model enumeration time:              4.532s
    Time for BDD construction:           0.019s (Max:     0.009s)
Time for merge operator:                 5.326s
Time for coverage check:                 0.053s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):   768.478s

Number of path formula cache hits:   1038221 (80%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    28.474s

Total number of created targets for pointer analysis: 134596
   Number of created targets for uf: *unsigned_short_int is 11
   Number of created targets for uf: *signed_int is 1170
   Number of created targets for uf: *unsigned_char is 324
   Number of created targets for uf: *unsigned_int is 9
   Number of created targets for uf: *unsigned_long_int is 16


Number of BDD nodes:                               224
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         150 (count: 6463, min: 0, max: 25, avg: 0.02)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.128s
  Time for transition matches:                         1.076s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                      1157489 (count: 1157489, min: 1, max: 1, avg: 1.00) [1 x 1157489]

CPA algorithm statistics
------------------------
Number of iterations:            834150
Max size of waitlist:            612
Average size of waitlist:        280
Number of computed successors:   1019885
Max successors for one state:    2
Number of times merged:          182753
Number of times stopped:         184010
Number of times breaked:         6

Total time for CPA algorithm:       884.414s (Max:   470.469s)
  Time for choose from waitlist:      0.602s
  Time for precision adjustment:    810.636s
  Time for transfer relation:        55.170s
  Time for merge operator:            8.437s
  Time for stop operator:             1.423s
  Time for adding to reached set:     4.096s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  14 (count: 6, min: 2, max: 3, avg: 2.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.856s
  Counterexample analysis:                             5.245s (Max:     2.633s, Calls: 6)
    Refinement sat check:                              4.982s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.008s
  ARG update:                                          1.542s

Length of refined path (in blocks):                      12 (count: 6, min: 2, max: 2, avg: 2.00)
Number of affected states:                                6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 6, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 2 (count: 6, min: 0, max: 1, avg: 0.33)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 6, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 172705
Max. size of reached set after ref.:  8
Avg. size of reached set before ref.: 50829.50
Avg. size of reached set after ref.:  8.00

Total time for CEGAR algorithm:     891.754s
Time for refinements:                 7.340s
Average time for refinement:          1.223s
Max time for refinement:              3.455s

Code Coverage
-----------------------------
  Function coverage:      0.507
  Visited lines:          3370
  Total lines:            5642
  Line coverage:          0.597
  Visited conditions:     1084
  Total conditions:       2008
  Condition coverage:     0.540

CPAchecker general statistics
-----------------------------
Number of program locations:     8114
Number of CFA edges:             9637
Number of relevant variables:    1014
Number of functions:             217
Number of loops:                 46
Size of reached set:             530475
  Number of reached locations:   2864 (35%)
    Avg states per location:     185
    Max states per location:     15369 (at node N6273)
  Number of reached functions:   110 (51%)
  Number of partitions:          530473
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N6389 (before line 12312), Function main called from node N6372, stack depth 1 [62ea8931], stack [main]])
  Number of target states:       0
  Size of final wait list        589

Time for analysis setup:          8.764s
  Time for loading CPAs:          1.304s
  Time for loading parser:        0.799s
  Time for CFA construction:      6.481s
    Time for parsing file(s):     1.349s
    Time for AST to CFA:          2.387s
    Time for CFA sanity check:    0.581s
    Time for post-processing:     1.910s
      Time for var class.:        0.978s
Time for Analysis:              891.754s
CPU time for analysis:          891.720s
Total time for CPAchecker:      900.524s
Total CPU time for CPAchecker:  900.470s
Time for statistics:              4.172s

Time for Garbage Collector:      14.119s (in 286 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                648MB (   618 MiB) max;    314MB (   299 MiB) avg;    673MB (   642 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           755MB (   720 MiB) max;    486MB (   464 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8467MB (  8075 MiB) max;   8408MB (  8018 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
