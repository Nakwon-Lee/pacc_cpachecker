scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--uio--uio_sercos3.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3ivf993p/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uio_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __uio_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            23 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            17 (74%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (26%)
  Times precision was empty:       9 (39%)
  Times precision was {false}:     5 (22%)
  Times result was cached:         4 (17%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      5 (22%)
  Times result was 'false':        5 (22%)
Number of strengthen sat checks:   0
Number of coverage checks:         197
  BDD entailment checks:           7
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1421
Number of predicates discovered:          2
Number of abstraction locations:          3
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         14
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.40
Number of irrelevant predicates:          7 (50%)
Number of preds handled by boolean abs:   5 (36%)
  Total number of models for allsat:      5
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.585s
  Time for path formula creation:        0.561s
Time for strengthen operator:            0.022s
Time for prec operator:                  0.319s
  Time for abstraction:                  0.300s (Max:     0.211s, Count: 23)
    Boolean abstraction:                 0.177s
    Solving time:                        0.145s (Max:     0.141s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.008s (Max:     0.008s)
Time for merge operator:                 0.057s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.161s

Number of path formula cache hits:   2174 (45%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.538s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           5 (count: 78, min: 0, max: 5, avg: 0.06)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.041s
Automaton transfers with branching:                0
Automaton transfer successors:                         4761 (count: 4761, min: 1, max: 1, avg: 1.00) [1 x 4761]

CPA algorithm statistics
------------------------
Number of iterations:            799
Max size of waitlist:            17
Average size of waitlist:        8
Number of computed successors:   917
Max successors for one state:    2
Number of times merged:          95
Number of times stopped:         101
Number of times breaked:         2

Total time for CPA algorithm:         1.371s (Max:     0.901s)
  Time for choose from waitlist:      0.008s
  Time for precision adjustment:      0.385s
  Time for transfer relation:         0.864s
  Time for merge operator:            0.063s
  Time for stop operator:             0.011s
  Time for adding to reached set:     0.022s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2
Avg. length of target path (in blocks):                   6 (count: 2, min: 2, max: 4, avg: 3.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.034s
  Counterexample analysis:                             0.007s (Max:     0.006s, Calls: 2)
    Refinement sat check:                              0.003s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.003s
  Precision update:                                    0.001s
  ARG update:                                          0.013s

Length of refined path (in blocks):                       6 (count: 2, min: 2, max: 4, avg: 3.00)
Number of affected states:                                4 (count: 2, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'true':                  0 (count: 2, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         4 (count: 2, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'false':                 0 (count: 2, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               2 (count: 2, min: 0, max: 2, avg: 1.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 396
Max. size of reached set after ref.:  13
Avg. size of reached set before ref.: 231.50
Avg. size of reached set after ref.:  13.00

Total time for CEGAR algorithm:       1.415s
Time for refinements:                 0.044s
Average time for refinement:          0.022s
Max time for refinement:              0.028s

Code Coverage
-----------------------------
  Function coverage:      0.419
  Visited lines:          1009
  Total lines:            1189
  Line coverage:          0.849
  Visited conditions:     58
  Total conditions:       70
  Condition coverage:     0.829

CPAchecker general statistics
-----------------------------
Number of program locations:     1352
Number of CFA edges:             1392
Number of relevant variables:    287
Number of functions:             31
Number of loops:                 3
Size of reached set:             375
  Number of reached locations:   193 (14%)
    Avg states per location:     1
    Max states per location:     5 (at node N32)
  Number of reached functions:   13 (42%)
  Number of partitions:          375
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.633s
  Time for loading CPAs:          0.549s
  Time for loading parser:        0.446s
  Time for CFA construction:      1.523s
    Time for parsing file(s):     0.508s
    Time for AST to CFA:          0.467s
    Time for CFA sanity check:    0.081s
    Time for post-processing:     0.346s
      Time for var class.:        0.158s
Time for Analysis:                1.415s
CPU time for analysis:            1.410s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.050s
Total CPU time for CPAchecker:    4.040s
Time for statistics:              0.057s

Time for Garbage Collector:       0.112s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 55MB (    53 MiB) max;     32MB (    30 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:   8133MB (  7757 MiB) max;   8078MB (  7704 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
