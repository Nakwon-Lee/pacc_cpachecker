scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--usb--cdc_mbim.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7p_w8gi1/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 5513-5514: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5517-5518: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5525-5526: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6112: Function pointer *(info->subdriver->disconnect) with type void (*)(struct usb_interface *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7100: Function pointer *completeFnBulk with type void (*)(struct urb *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7094: Function pointer *completeFnInt with type void (*)(struct urb *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6112: Ignoring function call through function pointer *(info->subdriver->disconnect): (*(info->subdriver->disconnect))(ctx->control); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function cdc_ncm_unbind to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_rx_verify_nth16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_rx_verify_ndp16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_skb_return to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pskb_expand_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_select_altsetting to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_bind_common to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_cdc_wdm_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6474: Ignoring function call through function pointer *(info->subdriver->resume): ret = (*(info->subdriver->resume))(intf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6474: Unsupported feature (recursion): ret = cdc_mbim_resume(intf); (line was originally pointer call(cdc_mbim_resume) ret = (*((info->subdriver)->resume))(intf);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            19375 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  17836 (92%)
  Because of loop head:            1525 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         14 (0%)
  Times precision was empty:       18562 (96%)
  Times precision was {false}:     182 (1%)
  Times result was cached:         558 (3%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      73 (0%)
  Times result was 'false':        146 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         19326
  BDD entailment checks:           4514
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          8
Number of abstraction locations:          17
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         2380
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 9.33
Number of irrelevant predicates:          1890 (79%)
Number of preds handled by boolean abs:   189 (8%)
  Total number of models for allsat:      90
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.23

Time for post operator:                  3.276s
  Time for path formula creation:        3.153s
Time for strengthen operator:            0.234s
Time for prec operator:                  1.495s
  Time for abstraction:                  1.110s (Max:     0.025s, Count: 19375)
    Boolean abstraction:                 0.197s
    Solving time:                        0.158s (Max:     0.016s)
    Model enumeration time:              0.024s
    Time for BDD construction:           0.038s (Max:     0.009s)
Time for merge operator:                 0.175s
Time for coverage check:                 0.036s
  Time for BDD entailment checks:        0.029s
Total time for SMT solver (w/o itp):     0.182s

Number of path formula cache hits:   121359 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.733s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               228
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         278 (count: 24531, min: 0, max: 52, avg: 0.01)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.426s
Automaton transfers with branching:                0
Automaton transfer successors:                       124387 (count: 124387, min: 1, max: 1, avg: 1.00) [1 x 124387]

CPA algorithm statistics
------------------------
Number of iterations:            77589
Max size of waitlist:            133
Average size of waitlist:        70
Number of computed successors:   90401
Max successors for one state:    2
Number of times merged:          7406
Number of times stopped:         11598
Number of times breaked:         14

Total time for CPA algorithm:         9.289s (Max:     1.872s)
  Time for choose from waitlist:      0.096s
  Time for precision adjustment:      2.404s
  Time for transfer relation:         5.376s
  Time for merge operator:            0.382s
  Time for stop operator:             0.196s
  Time for adding to reached set:     0.227s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   14
Avg. length of target path (in blocks):                 179 (count: 14, min: 10, max: 17, avg: 12.79)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.580s
  Counterexample analysis:                             0.148s (Max:     0.023s, Calls: 14)
    Refinement sat check:                              0.094s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.029s
  ARG update:                                          0.377s

Length of refined path (in blocks):                      90 (count: 14, min: 4, max: 9, avg: 6.43)
Number of affected states:                               46 (count: 14, min: 0, max: 8, avg: 3.29)
Length (states) of path with itp 'true':                 30 (count: 14, min: 0, max: 6, avg: 2.14)
Length (states) of path with itp non-trivial itp:        46 (count: 14, min: 0, max: 8, avg: 3.29)
Length (states) of path with itp 'false':                14 (count: 14, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 14, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              35 (count: 14, min: 0, max: 7, avg: 2.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                14
Number of successful refinements:     14
Number of failed refinements:         0
Max. size of reached set before ref.: 7927
Max. size of reached set after ref.:  2792
Avg. size of reached set before ref.: 6044.79
Avg. size of reached set after ref.:  444.36

Total time for CEGAR algorithm:      10.061s
Time for refinements:                 0.752s
Average time for refinement:          0.053s
Max time for refinement:              0.111s

Code Coverage
-----------------------------
  Function coverage:      0.178
  Visited lines:          1099
  Total lines:            1728
  Line coverage:          0.636
  Visited conditions:     130
  Total conditions:       352
  Condition coverage:     0.369

CPAchecker general statistics
-----------------------------
Number of program locations:     2281
Number of CFA edges:             2472
Number of relevant variables:    316
Number of functions:             73
Number of loops:                 4
Size of reached set:             252
  Number of reached locations:   231 (10%)
    Avg states per location:     1
    Max states per location:     5 (at node N120)
  Number of reached functions:   13 (18%)
  Number of partitions:          252
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        6

Time for analysis setup:          3.974s
  Time for loading CPAs:          0.823s
  Time for loading parser:        0.502s
  Time for CFA construction:      2.558s
    Time for parsing file(s):     0.744s
    Time for AST to CFA:          0.877s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.610s
      Time for var class.:        0.237s
Time for Analysis:               10.061s
CPU time for analysis:           10.060s
Total time for CPAchecker:       14.039s
Total CPU time for CPAchecker:   14.020s
Time for statistics:              0.100s

Time for Garbage Collector:       0.517s (in 34 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 89MB (    85 MiB) max;     50MB (    47 MiB) avg;     92MB (    88 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     31MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     33MB (    32 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8065MB (  7691 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
