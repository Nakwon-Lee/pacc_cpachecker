scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--usb--cdc_mbim.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ydv707vz/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 5513-5514: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5517-5518: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5525-5526: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5884;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6112: Function pointer *(info->subdriver->disconnect) with type void (*)(struct usb_interface *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7100: Function pointer *completeFnBulk with type void (*)(struct urb *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7094: Function pointer *completeFnInt with type void (*)(struct urb *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_rx_verify_nth16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_rx_verify_ndp16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usbnet_skb_return to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pskb_expand_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6112: Ignoring function call through function pointer *(info->subdriver->disconnect): (*(info->subdriver->disconnect))(ctx->control); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function cdc_ncm_unbind to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_select_altsetting to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdc_ncm_bind_common to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_cdc_wdm_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6474: Ignoring function call through function pointer *(info->subdriver->resume): ret = (*(info->subdriver->resume))(intf); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6474: Unsupported feature (recursion): ret = cdc_mbim_resume(intf); (line was originally pointer call(cdc_mbim_resume) ret = (*((info->subdriver)->resume))(intf);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            10981 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  10084 (92%)
  Because of loop head:            885 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (0%)
  Times precision was empty:       10429 (95%)
  Times precision was {false}:     228 (2%)
  Times result was cached:         252 (2%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      72 (1%)
  Times result was 'false':        152 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         10770
  BDD entailment checks:           2626
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       45
Number of predicates discovered:          8
Number of abstraction locations:          14
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         839
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.80
Number of irrelevant predicates:          555 (66%)
Number of preds handled by boolean abs:   178 (21%)
  Total number of models for allsat:      88
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.22

Time for post operator:                  4.131s
  Time for path formula creation:        4.071s
Time for strengthen operator:            0.146s
Time for prec operator:                  1.529s
  Time for abstraction:                  1.141s (Max:     0.051s, Count: 10981)
    Boolean abstraction:                 0.158s
    Solving time:                        0.170s (Max:     0.015s)
    Model enumeration time:              0.022s
    Time for BDD construction:           0.015s (Max:     0.006s)
Time for merge operator:                 0.252s
Time for coverage check:                 0.040s
  Time for BDD entailment checks:        0.037s
Total time for SMT solver (w/o itp):     0.192s

Number of path formula cache hits:   52032 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.795s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               231
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         104 (count: 14803, min: 0, max: 28, avg: 0.01)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.198s
Automaton transfers with branching:                0
Automaton transfer successors:                        70592 (count: 70592, min: 1, max: 1, avg: 1.00) [1 x 70592]

CPA algorithm statistics
------------------------
Number of iterations:            43711
Max size of waitlist:            95
Average size of waitlist:        58
Number of computed successors:   50914
Max successors for one state:    2
Number of times merged:          4072
Number of times stopped:         6525
Number of times breaked:         12

Total time for CPA algorithm:         9.540s (Max:     2.432s)
  Time for choose from waitlist:      0.112s
  Time for precision adjustment:      2.188s
  Time for transfer relation:         5.787s
  Time for merge operator:            0.507s
  Time for stop operator:             0.176s
  Time for adding to reached set:     0.193s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 165 (count: 12, min: 10, max: 22, avg: 13.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.425s
  Counterexample analysis:                             0.118s (Max:     0.016s, Calls: 12)
    Refinement sat check:                              0.087s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.006s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.020s
  ARG update:                                          0.259s

Length of refined path (in blocks):                      76 (count: 12, min: 4, max: 9, avg: 6.33)
Number of affected states:                               46 (count: 12, min: 0, max: 8, avg: 3.83)
Length (states) of path with itp 'true':                 18 (count: 12, min: 0, max: 6, avg: 1.50)
Length (states) of path with itp non-trivial itp:        46 (count: 12, min: 0, max: 8, avg: 3.83)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              35 (count: 12, min: 0, max: 7, avg: 2.92)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 7021
Max. size of reached set after ref.:  230
Avg. size of reached set before ref.: 3692.58
Avg. size of reached set after ref.:  26.92

Total time for CEGAR algorithm:      10.077s
Time for refinements:                 0.536s
Average time for refinement:          0.044s
Max time for refinement:              0.088s

Code Coverage
-----------------------------
  Function coverage:      0.178
  Visited lines:          1097
  Total lines:            1728
  Line coverage:          0.635
  Visited conditions:     130
  Total conditions:       352
  Condition coverage:     0.369

CPAchecker general statistics
-----------------------------
Number of program locations:     2281
Number of CFA edges:             2472
Number of relevant variables:    316
Number of functions:             73
Number of loops:                 4
Size of reached set:             250
  Number of reached locations:   230 (10%)
    Avg states per location:     1
    Max states per location:     5 (at node N120)
  Number of reached functions:   13 (18%)
  Number of partitions:          250
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        6

Time for analysis setup:          3.796s
  Time for loading CPAs:          0.763s
  Time for loading parser:        0.463s
  Time for CFA construction:      2.504s
    Time for parsing file(s):     0.750s
    Time for AST to CFA:          0.873s
    Time for CFA sanity check:    0.143s
    Time for post-processing:     0.603s
      Time for var class.:        0.250s
Time for Analysis:               10.077s
CPU time for analysis:           10.080s
Total time for CPAchecker:       13.877s
Total CPU time for CPAchecker:   13.870s
Time for statistics:              0.069s

Time for Garbage Collector:       0.464s (in 24 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 79MB (    75 MiB) max;     48MB (    46 MiB) avg;     89MB (    85 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     32MB (    30 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    37 MiB) max;     33MB (    32 MiB) avg
Total process virtual memory:   8019MB (  7648 MiB) max;   8003MB (  7632 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
