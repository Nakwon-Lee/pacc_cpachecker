scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_mgyl1ndx/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            88320 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  71404 (81%)
  Because of loop head:            16792 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         124 (0%)
  Times precision was empty:       38643 (44%)
  Times precision was {false}:     625 (1%)
  Times result was cached:         47186 (53%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1866 (2%)
  Times result was 'false':        2482 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         72656
  BDD entailment checks:           25486
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          15
Number of abstraction locations:          112
Max number of predicates per location:    12
Avg number of predicates per location:    4
Total predicates per abstraction:         249825
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 100.29
Number of irrelevant predicates:          98378 (39%)
Number of preds handled by boolean abs:   6100 (2%)
  Total number of models for allsat:      3846
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.06

Time for post operator:                  3.468s
  Time for path formula creation:        3.267s
Time for strengthen operator:            0.333s
Time for prec operator:                 11.900s
  Time for abstraction:                 11.115s (Max:     0.027s, Count: 88320)
    Boolean abstraction:                 1.711s
    Solving time:                        1.254s (Max:     0.014s)
    Model enumeration time:              0.428s
    Time for BDD construction:           0.161s (Max:     0.013s)
Time for merge operator:                 0.232s
Time for coverage check:                 0.050s
  Time for BDD entailment checks:        0.035s
Total time for SMT solver (w/o itp):     1.682s

Number of path formula cache hits:   555335 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.221s

Total number of created targets for pointer analysis: 354
   Number of created targets for uf: *signed_int is 3
   Number of created targets for uf: *(struct_usb_device)* is 10
   Number of created targets for uf: *unsigned_char is 15
   Number of created targets for uf: *unsigned_int is 9


Number of BDD nodes:                               7285
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5175 (count: 79482, min: 0, max: 364, avg: 0.07)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.700s
  Time for transition matches:                         0.352s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       479476 (count: 479476, min: 1, max: 1, avg: 1.00) [1 x 479476]

CPA algorithm statistics
------------------------
Number of iterations:            314540
Max size of waitlist:            92
Average size of waitlist:        39
Number of computed successors:   361231
Max successors for one state:    2
Number of times merged:          23585
Number of times stopped:         37851
Number of times breaked:         124

Total time for CPA algorithm:        23.706s (Max:     0.937s)
  Time for choose from waitlist:      0.148s
  Time for precision adjustment:     13.717s
  Time for transfer relation:         7.432s
  Time for merge operator:            0.544s
  Time for stop operator:             0.461s
  Time for adding to reached set:     0.475s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   124
Avg. length of target path (in blocks):                6272 (count: 124, min: 30, max: 68, avg: 50.58)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.593s
  Counterexample analysis:                             1.682s (Max:     0.035s, Calls: 124)
    Refinement sat check:                              1.089s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.081s
  Precision update:                                    0.067s
  ARG update:                                          0.671s

Length of refined path (in blocks):                    5988 (count: 124, min: 24, max: 67, avg: 48.29)
Number of affected states:                             5518 (count: 124, min: 1, max: 66, avg: 44.50)
Length (states) of path with itp 'true':                346 (count: 124, min: 0, max: 46, avg: 2.79)
Length (states) of path with itp non-trivial itp:      5518 (count: 124, min: 1, max: 66, avg: 44.50)
Length (states) of path with itp 'false':               124 (count: 124, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 124, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5394 (count: 124, min: 0, max: 65, avg: 43.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                124
Number of successful refinements:     124
Number of failed refinements:         0
Max. size of reached set before ref.: 5076
Max. size of reached set after ref.:  4358
Avg. size of reached set before ref.: 2623.88
Avg. size of reached set after ref.:  58.13

Total time for CEGAR algorithm:      26.710s
Time for refinements:                 2.989s
Average time for refinement:          0.024s
Max time for refinement:              0.067s

Code Coverage
-----------------------------
  Function coverage:      0.516
  Visited lines:          1451
  Total lines:            2112
  Line coverage:          0.687
  Visited conditions:     158
  Total conditions:       374
  Condition coverage:     0.422

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             2745
  Number of reached locations:   515 (19%)
    Avg states per location:     5
    Max states per location:     49 (at node N129)
  Number of reached functions:   47 (52%)
  Number of partitions:          2739
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [3c2772d1], stack [main]])
  Number of target states:       0
  Size of final wait list        30

Time for analysis setup:          3.652s
  Time for loading CPAs:          0.724s
  Time for loading parser:        0.422s
  Time for CFA construction:      2.436s
    Time for parsing file(s):     0.746s
    Time for AST to CFA:          0.820s
    Time for CFA sanity check:    0.154s
    Time for post-processing:     0.562s
      Time for var class.:        0.234s
Time for Analysis:               26.710s
CPU time for analysis:           26.710s
Total time for CPAchecker:       30.365s
Total CPU time for CPAchecker:   30.350s
Time for statistics:              0.094s

Time for Garbage Collector:       1.090s (in 161 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 76MB (    72 MiB) max;     50MB (    48 MiB) avg;     80MB (    77 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     35MB (    33 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8077MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
