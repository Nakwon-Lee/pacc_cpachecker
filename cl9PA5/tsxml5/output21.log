scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9tb5po3l/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            65518 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  50818 (78%)
  Because of loop head:            14540 (22%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         160 (0%)
  Times precision was empty:       20784 (32%)
  Times precision was {false}:     551 (1%)
  Times result was cached:         42272 (65%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1911 (3%)
  Times result was 'false':        3261 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         55441
  BDD entailment checks:           16309
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          13
Number of abstraction locations:          136
Max number of predicates per location:    11
Avg number of predicates per location:    5
Total predicates per abstraction:         225160
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 91.45
Number of irrelevant predicates:          46465 (21%)
Number of preds handled by boolean abs:   6118 (3%)
  Total number of models for allsat:      3755
  Max number of models for allsat:        48
  Avg number of models for allsat:        1.96

Time for post operator:                  3.086s
  Time for path formula creation:        2.874s
Time for strengthen operator:            0.370s
Time for prec operator:                 12.708s
  Time for abstraction:                 11.912s (Max:     0.064s, Count: 65518)
    Boolean abstraction:                 2.231s
    Solving time:                        1.463s (Max:     0.023s)
    Model enumeration time:              0.633s
    Time for BDD construction:           0.176s (Max:     0.016s)
Time for merge operator:                 0.309s
Time for coverage check:                 0.054s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     2.096s

Number of path formula cache hits:   415171 (94%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.224s

Total number of created targets for pointer analysis: 344
   Number of created targets for uf: *signed_int is 3
   Number of created targets for uf: *(struct_usb_device)* is 3
   Number of created targets for uf: *unsigned_char is 155
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 5
   Number of created targets for uf: *unsigned_int is 3


Number of BDD nodes:                               3668
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4827 (count: 52654, min: 0, max: 286, avg: 0.09)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.565s
  Time for transition matches:                         0.277s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       365052 (count: 365052, min: 1, max: 1, avg: 1.00) [1 x 365052]

CPA algorithm statistics
------------------------
Number of iterations:            237727
Max size of waitlist:            57
Average size of waitlist:        17
Number of computed successors:   276175
Max successors for one state:    2
Number of times merged:          19566
Number of times stopped:         30660
Number of times breaked:         160

Total time for CPA algorithm:        23.122s (Max:     0.934s)
  Time for choose from waitlist:      0.131s
  Time for precision adjustment:     14.185s
  Time for transfer relation:         6.600s
  Time for merge operator:            0.584s
  Time for stop operator:             0.446s
  Time for adding to reached set:     0.361s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   160
Avg. length of target path (in blocks):                9099 (count: 160, min: 30, max: 95, avg: 56.87)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.504s
  Counterexample analysis:                             2.503s (Max:     0.031s, Calls: 160)
    Refinement sat check:                              1.603s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.158s
  Precision update:                                    0.127s
  ARG update:                                          0.584s

Length of refined path (in blocks):                    8820 (count: 160, min: 24, max: 94, avg: 55.13)
Number of affected states:                             8422 (count: 160, min: 1, max: 93, avg: 52.64)
Length (states) of path with itp 'true':                238 (count: 160, min: 0, max: 31, avg: 1.49)
Length (states) of path with itp non-trivial itp:      8422 (count: 160, min: 1, max: 93, avg: 52.64)
Length (states) of path with itp 'false':               160 (count: 160, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 160, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8262 (count: 160, min: 0, max: 92, avg: 51.64)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                160
Number of successful refinements:     160
Number of failed refinements:         0
Max. size of reached set before ref.: 2477
Max. size of reached set after ref.:  339
Avg. size of reached set before ref.: 1503.63
Avg. size of reached set after ref.:  12.70

Total time for CEGAR algorithm:      26.998s
Time for refinements:                 3.854s
Average time for refinement:          0.024s
Max time for refinement:              0.074s

Code Coverage
-----------------------------
  Function coverage:      0.495
  Visited lines:          1448
  Total lines:            2112
  Line coverage:          0.686
  Visited conditions:     160
  Total conditions:       374
  Condition coverage:     0.428

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             3706
  Number of reached locations:   501 (18%)
    Avg states per location:     7
    Max states per location:     56 (at node N129)
  Number of reached functions:   45 (49%)
  Number of partitions:          3699
    Avg size of partitions:      1
    Max size of partitions:      8 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [433e536f], stack [main]])
  Number of target states:       0
  Size of final wait list        43

Time for analysis setup:          3.333s
  Time for loading CPAs:          0.605s
  Time for loading parser:        0.469s
  Time for CFA construction:      2.173s
    Time for parsing file(s):     0.600s
    Time for AST to CFA:          0.725s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.580s
      Time for var class.:        0.254s
Time for Analysis:               26.998s
CPU time for analysis:           26.990s
Total time for CPAchecker:       30.333s
Total CPU time for CPAchecker:   30.310s
Time for statistics:              0.141s

Time for Garbage Collector:       0.889s (in 141 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 74MB (    71 MiB) max;     50MB (    48 MiB) avg;     78MB (    74 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8076MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
