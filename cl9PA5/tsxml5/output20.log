scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_cmdpxpak/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7671: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7671: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            96526 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  85383 (88%)
  Because of loop head:            11037 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         106 (0%)
  Times precision was empty:       54111 (56%)
  Times precision was {false}:     892 (1%)
  Times result was cached:         39522 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2001 (2%)
  Times result was 'false':        2048 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         79597
  BDD entailment checks:           21029
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          15
Number of abstraction locations:          83
Max number of predicates per location:    12
Avg number of predicates per location:    4
Total predicates per abstraction:         206339
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 71.32
Number of irrelevant predicates:          109926 (53%)
Number of preds handled by boolean abs:   6579 (3%)
  Total number of models for allsat:      5750
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.87

Time for post operator:                  4.108s
  Time for path formula creation:        3.921s
Time for strengthen operator:            0.466s
Time for prec operator:                 11.473s
  Time for abstraction:                 10.553s (Max:     0.033s, Count: 96526)
    Boolean abstraction:                 2.063s
    Solving time:                        1.287s (Max:     0.057s)
    Model enumeration time:              0.737s
    Time for BDD construction:           0.180s (Max:     0.010s)
Time for merge operator:                 0.312s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.060s
Total time for SMT solver (w/o itp):     2.029s

Number of path formula cache hits:   615795 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.129s

Total number of created targets for pointer analysis: 753
   Number of created targets for uf: *signed_int is 76
   Number of created targets for uf: *(struct_usb_device)* is 9
   Number of created targets for uf: *unsigned_char is 121
   Number of created targets for uf: *unsigned_int is 6


Number of BDD nodes:                               7279
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5376 (count: 92437, min: 0, max: 198, avg: 0.06)
Time for BDD node cleanup:                             0.023s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.808s
  Time for transition matches:                         0.394s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.016s
Automaton transfers with branching:                0
Automaton transfer successors:                       554041 (count: 554041, min: 1, max: 1, avg: 1.00) [1 x 554041]

CPA algorithm statistics
------------------------
Number of iterations:            366544
Max size of waitlist:            251
Average size of waitlist:        92
Number of computed successors:   419560
Max successors for one state:    2
Number of times merged:          29284
Number of times stopped:         39485
Number of times breaked:         106

Total time for CPA algorithm:        24.694s (Max:     1.207s)
  Time for choose from waitlist:      0.164s
  Time for precision adjustment:     13.399s
  Time for transfer relation:         8.565s
  Time for merge operator:            0.639s
  Time for stop operator:             0.396s
  Time for adding to reached set:     0.477s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   106
Avg. length of target path (in blocks):                5164 (count: 106, min: 30, max: 64, avg: 48.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.162s
  Counterexample analysis:                             1.308s (Max:     0.025s, Calls: 106)
    Refinement sat check:                              0.862s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.054s
  Precision update:                                    0.094s
  ARG update:                                          0.657s

Length of refined path (in blocks):                    4896 (count: 106, min: 24, max: 59, avg: 46.19)
Number of affected states:                             4382 (count: 106, min: 1, max: 58, avg: 41.34)
Length (states) of path with itp 'true':                408 (count: 106, min: 0, max: 46, avg: 3.85)
Length (states) of path with itp non-trivial itp:      4382 (count: 106, min: 1, max: 58, avg: 41.34)
Length (states) of path with itp 'false':               106 (count: 106, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 106, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            4276 (count: 106, min: 0, max: 57, avg: 40.34)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                106
Number of successful refinements:     106
Number of failed refinements:         0
Max. size of reached set before ref.: 7578
Max. size of reached set after ref.:  3174
Avg. size of reached set before ref.: 3601.55
Avg. size of reached set after ref.:  76.98

Total time for CEGAR algorithm:      27.180s
Time for refinements:                 2.478s
Average time for refinement:          0.023s
Max time for refinement:              0.053s

Code Coverage
-----------------------------
  Function coverage:      0.593
  Visited lines:          1543
  Total lines:            2112
  Line coverage:          0.731
  Visited conditions:     186
  Total conditions:       374
  Condition coverage:     0.497

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             4423
  Number of reached locations:   617 (23%)
    Avg states per location:     7
    Max states per location:     70 (at node N129)
  Number of reached functions:   54 (59%)
  Number of partitions:          4405
    Avg size of partitions:      1
    Max size of partitions:      10 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [433e536f], stack [main]])
  Number of target states:       0
  Size of final wait list        151

Time for analysis setup:          3.160s
  Time for loading CPAs:          0.542s
  Time for loading parser:        0.460s
  Time for CFA construction:      2.062s
    Time for parsing file(s):     0.606s
    Time for AST to CFA:          0.662s
    Time for CFA sanity check:    0.140s
    Time for post-processing:     0.521s
      Time for var class.:        0.246s
Time for Analysis:               27.180s
CPU time for analysis:           27.180s
Total time for CPAchecker:       30.342s
Total CPU time for CPAchecker:   30.330s
Time for statistics:              0.135s

Time for Garbage Collector:       1.097s (in 166 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                101MB (    96 MiB) max;     56MB (    54 MiB) avg;    104MB (    99 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8077MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
