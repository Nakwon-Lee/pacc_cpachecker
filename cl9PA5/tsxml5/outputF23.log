scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_n6r0eso7/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7671: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7671: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1539607 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1306485 (85%)
  Because of loop head:            232661 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         461 (0%)
  Times precision was empty:       229322 (15%)
  Times precision was {false}:     1076 (0%)
  Times result was cached:         1214964 (79%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      94245 (6%)
  Times result was 'false':        49837 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         2712343
  BDD entailment checks:           1947441
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          69
Number of abstraction locations:          172
Max number of predicates per location:    28
Avg number of predicates per location:    11
Total predicates per abstraction:         13533299
Max number of predicates per abstraction: 28
Avg number of predicates per abstraction: 141.98
Number of irrelevant predicates:          4867980 (36%)
Number of preds handled by boolean abs:   730312 (5%)
  Total number of models for allsat:      813338
  Max number of models for allsat:        2304
  Avg number of models for allsat:        8.63

Time for post operator:                100.782s
  Time for path formula creation:       98.368s
Time for strengthen operator:            5.222s
Time for prec operator:                621.484s
  Time for abstraction:                606.858s (Max:     6.303s, Count: 1539607)
    Boolean abstraction:               208.327s
    Solving time:                       85.659s (Max:     0.169s)
    Model enumeration time:             95.610s
    Time for BDD construction:          18.751s (Max:     0.224s)
Time for merge operator:                 6.889s
Time for coverage check:                 3.486s
  Time for BDD entailment checks:        3.166s
Total time for SMT solver (w/o itp):   181.269s

Number of path formula cache hits:   5912835 (64%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    81.845s

Total number of created targets for pointer analysis: 135524
   Number of created targets for uf: *signed_int is 2121
   Number of created targets for uf: *(struct_usb_device)* is 2613
   Number of created targets for uf: *unsigned_char is 8634
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 5621
   Number of created targets for uf: *unsigned_int is 1794


Number of BDD nodes:                               260031
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      284973 (count: 2795147, min: 0, max: 6009, avg: 0.10)
Time for BDD node cleanup:                             0.417s
Time for BDD garbage collection:                       0.136s (in 19 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.155s
  Time for transition matches:                         4.549s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                      8016380 (count: 8016380, min: 1, max: 1, avg: 1.00) [1 x 8016380]

CPA algorithm statistics
------------------------
Number of iterations:            5387319
Max size of waitlist:            1960
Average size of waitlist:        498
Number of computed successors:   6129753
Max successors for one state:    2
Number of times merged:          382451
Number of times stopped:         639945
Number of times breaked:         461

Total time for CPA algorithm:       853.838s (Max:    37.766s)
  Time for choose from waitlist:      2.156s
  Time for precision adjustment:    655.489s
  Time for transfer relation:       155.419s
  Time for merge operator:           11.992s
  Time for stop operator:             9.062s
  Time for adding to reached set:     8.654s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   461
Avg. length of target path (in blocks):               56161 (count: 461, min: 30, max: 337, avg: 121.82)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  31.721s
  Counterexample analysis:                            19.430s (Max:     0.172s, Calls: 461)
    Refinement sat check:                              8.746s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.030s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.174s
  Precision update:                                    0.452s
  ARG update:                                         10.986s

Length of refined path (in blocks):                   46614 (count: 461, min: 24, max: 248, avg: 101.11)
Number of affected states:                            26912 (count: 461, min: 1, max: 247, avg: 58.38)
Length (states) of path with itp 'true':              19241 (count: 461, min: 0, max: 169, avg: 41.74)
Length (states) of path with itp non-trivial itp:     26912 (count: 461, min: 1, max: 247, avg: 58.38)
Length (states) of path with itp 'false':               461 (count: 461, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         650 (count: 461, min: 0, max: 6, avg: 1.41)
Equal non-trivial interpolants along paths:           25801 (count: 461, min: 0, max: 246, avg: 55.97)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                461
Number of successful refinements:     461
Number of failed refinements:         0
Max. size of reached set before ref.: 161354
Max. size of reached set after ref.:  82597
Avg. size of reached set before ref.: 21805.76
Avg. size of reached set after ref.:  10239.84

Total time for CEGAR algorithm:     896.433s
Time for refinements:                39.078s
Average time for refinement:          0.084s
Max time for refinement:              0.624s

Code Coverage
-----------------------------
  Function coverage:      0.736
  Visited lines:          1772
  Total lines:            2112
  Line coverage:          0.839
  Visited conditions:     258
  Total conditions:       374
  Condition coverage:     0.690

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             108078
  Number of reached locations:   839 (31%)
    Avg states per location:     128
    Max states per location:     1144 (at node N134)
  Number of reached functions:   67 (74%)
  Number of partitions:          106693
    Avg size of partitions:      1
    Max size of partitions:      108 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [433e536f], stack [main]])
  Number of target states:       0
  Size of final wait list        1348

Time for analysis setup:          3.882s
  Time for loading CPAs:          0.662s
  Time for loading parser:        0.520s
  Time for CFA construction:      2.623s
    Time for parsing file(s):     0.727s
    Time for AST to CFA:          0.942s
    Time for CFA sanity check:    0.145s
    Time for post-processing:     0.632s
      Time for var class.:        0.246s
Time for Analysis:              896.434s
CPU time for analysis:          896.390s
Total time for CPAchecker:      900.318s
Total CPU time for CPAchecker:  900.260s
Time for statistics:              1.238s

Time for Garbage Collector:      81.627s (in 998 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2117MB (  2019 MiB) max;    880MB (   839 MiB) avg;   2365MB (  2255 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          2851MB (  2719 MiB) max;   1298MB (  1238 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:  11188MB ( 10670 MiB) max;   9046MB (  8627 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
