scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_uty003oo/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            79829 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  70569 (88%)
  Because of loop head:            9165 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         95 (0%)
  Times precision was empty:       47167 (59%)
  Times precision was {false}:     687 (1%)
  Times result was cached:         30265 (38%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1710 (2%)
  Times result was 'false':        1766 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         65202
  BDD entailment checks:           17172
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          13
Number of abstraction locations:          75
Max number of predicates per location:    11
Avg number of predicates per location:    5
Total predicates per abstraction:         155915
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 65.05
Number of irrelevant predicates:          79973 (51%)
Number of preds handled by boolean abs:   5330 (3%)
  Total number of models for allsat:      3832
  Max number of models for allsat:        48
  Avg number of models for allsat:        2.24

Time for post operator:                  4.139s
  Time for path formula creation:        3.969s
Time for strengthen operator:            0.429s
Time for prec operator:                 10.316s
  Time for abstraction:                  9.472s (Max:     0.032s, Count: 79829)
    Boolean abstraction:                 1.885s
    Solving time:                        1.191s (Max:     0.018s)
    Model enumeration time:              0.562s
    Time for BDD construction:           0.168s (Max:     0.016s)
Time for merge operator:                 0.304s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     1.753s

Number of path formula cache hits:   514295 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.937s

Total number of created targets for pointer analysis: 541
   Number of created targets for uf: *(struct_usb_device)* is 5
   Number of created targets for uf: *signed_int is 50
   Number of created targets for uf: *unsigned_char is 93
   Number of created targets for uf: *unsigned_int is 6


Number of BDD nodes:                               5130
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4347 (count: 78647, min: 0, max: 214, avg: 0.06)
Time for BDD node cleanup:                             0.017s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.823s
  Time for transition matches:                         0.375s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                       457959 (count: 457959, min: 1, max: 1, avg: 1.00) [1 x 457959]

CPA algorithm statistics
------------------------
Number of iterations:            302860
Max size of waitlist:            251
Average size of waitlist:        86
Number of computed successors:   346507
Max successors for one state:    2
Number of times merged:          24015
Number of times stopped:         32442
Number of times breaked:         95

Total time for CPA algorithm:        23.622s (Max:     1.137s)
  Time for choose from waitlist:      0.152s
  Time for precision adjustment:     12.284s
  Time for transfer relation:         8.588s
  Time for merge operator:            0.677s
  Time for stop operator:             0.500s
  Time for adding to reached set:     0.458s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   95
Avg. length of target path (in blocks):                4583 (count: 95, min: 30, max: 60, avg: 48.24)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.387s
  Counterexample analysis:                             1.492s (Max:     0.031s, Calls: 95)
    Refinement sat check:                              0.997s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.093s
  Precision update:                                    0.059s
  ARG update:                                          0.688s

Length of refined path (in blocks):                    4366 (count: 95, min: 24, max: 59, avg: 45.96)
Number of affected states:                             3940 (count: 95, min: 1, max: 58, avg: 41.47)
Length (states) of path with itp 'true':                331 (count: 95, min: 0, max: 31, avg: 3.48)
Length (states) of path with itp non-trivial itp:      3940 (count: 95, min: 1, max: 58, avg: 41.47)
Length (states) of path with itp 'false':                95 (count: 95, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 95, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3845 (count: 95, min: 0, max: 57, avg: 40.47)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                95
Number of successful refinements:     95
Number of failed refinements:         0
Max. size of reached set before ref.: 7578
Max. size of reached set after ref.:  943
Avg. size of reached set before ref.: 3284.61
Avg. size of reached set after ref.:  48.63

Total time for CEGAR algorithm:      26.412s
Time for refinements:                 2.776s
Average time for refinement:          0.029s
Max time for refinement:              0.067s

Code Coverage
-----------------------------
  Function coverage:      0.505
  Visited lines:          1435
  Total lines:            2112
  Line coverage:          0.679
  Visited conditions:     158
  Total conditions:       374
  Condition coverage:     0.422

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             4882
  Number of reached locations:   503 (18%)
    Avg states per location:     9
    Max states per location:     84 (at node N129)
  Number of reached functions:   46 (51%)
  Number of partitions:          4865
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [433e536f], stack [main]])
  Number of target states:       0
  Size of final wait list        197

Time for analysis setup:          3.930s
  Time for loading CPAs:          0.810s
  Time for loading parser:        0.415s
  Time for CFA construction:      2.610s
    Time for parsing file(s):     0.688s
    Time for AST to CFA:          0.928s
    Time for CFA sanity check:    0.177s
    Time for post-processing:     0.650s
      Time for var class.:        0.275s
Time for Analysis:               26.413s
CPU time for analysis:           26.410s
Total time for CPAchecker:       30.345s
Total CPU time for CPAchecker:   30.330s
Time for statistics:              0.151s

Time for Garbage Collector:       1.091s (in 136 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 89MB (    84 MiB) max;     53MB (    50 MiB) avg;     91MB (    87 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8078MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
