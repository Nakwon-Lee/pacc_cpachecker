scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_haadwjnv/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            58235 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  45162 (78%)
  Because of loop head:            12935 (22%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         138 (0%)
  Times precision was empty:       18832 (32%)
  Times precision was {false}:     728 (1%)
  Times result was cached:         36323 (62%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2352 (4%)
  Times result was 'false':        3223 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         50189
  BDD entailment checks:           14827
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          22
Number of abstraction locations:          124
Max number of predicates per location:    12
Avg number of predicates per location:    5
Total predicates per abstraction:         192243
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 62.42
Number of irrelevant predicates:          35240 (18%)
Number of preds handled by boolean abs:   7940 (4%)
  Total number of models for allsat:      5843
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.48

Time for post operator:                  3.045s
  Time for path formula creation:        2.885s
Time for strengthen operator:            0.309s
Time for prec operator:                 12.933s
  Time for abstraction:                 12.353s (Max:     0.032s, Count: 58235)
    Boolean abstraction:                 2.616s
    Solving time:                        1.647s (Max:     0.015s)
    Model enumeration time:              0.828s
    Time for BDD construction:           0.225s (Max:     0.012s)
Time for merge operator:                 0.265s
Time for coverage check:                 0.065s
  Time for BDD entailment checks:        0.045s
Total time for SMT solver (w/o itp):     2.475s

Number of path formula cache hits:   358958 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.258s

Total number of created targets for pointer analysis: 268
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_char is 19
   Number of created targets for uf: *unsigned_int is 5


Number of BDD nodes:                               8161
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        6505 (count: 52846, min: 0, max: 370, avg: 0.12)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.554s
  Time for transition matches:                         0.283s
  Time for transition assertions:                      0.008s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       325708 (count: 325708, min: 1, max: 1, avg: 1.00) [1 x 325708]

CPA algorithm statistics
------------------------
Number of iterations:            211006
Max size of waitlist:            75
Average size of waitlist:        21
Number of computed successors:   246217
Max successors for one state:    2
Number of times merged:          17681
Number of times stopped:         27638
Number of times breaked:         138

Total time for CPA algorithm:        22.868s (Max:     1.363s)
  Time for choose from waitlist:      0.153s
  Time for precision adjustment:     14.311s
  Time for transfer relation:         6.231s
  Time for merge operator:            0.579s
  Time for stop operator:             0.394s
  Time for adding to reached set:     0.376s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   138
Avg. length of target path (in blocks):                8055 (count: 138, min: 30, max: 86, avg: 58.37)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.144s
  Counterexample analysis:                             2.317s (Max:     0.053s, Calls: 138)
    Refinement sat check:                              1.538s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.005s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.090s
  Precision update:                                    0.147s
  ARG update:                                          0.471s

Length of refined path (in blocks):                    7719 (count: 138, min: 24, max: 85, avg: 55.93)
Number of affected states:                             7114 (count: 138, min: 1, max: 84, avg: 51.55)
Length (states) of path with itp 'true':                467 (count: 138, min: 0, max: 69, avg: 3.38)
Length (states) of path with itp non-trivial itp:      7114 (count: 138, min: 1, max: 84, avg: 51.55)
Length (states) of path with itp 'false':               138 (count: 138, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           7 (count: 138, min: 0, max: 4, avg: 0.05)
Equal non-trivial interpolants along paths:            6969 (count: 138, min: 0, max: 83, avg: 50.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                138
Number of successful refinements:     138
Number of failed refinements:         0
Max. size of reached set before ref.: 5542
Max. size of reached set after ref.:  4796
Avg. size of reached set before ref.: 1695.89
Avg. size of reached set after ref.:  150.69

Total time for CEGAR algorithm:      26.340s
Time for refinements:                 3.437s
Average time for refinement:          0.024s
Max time for refinement:              0.060s

Code Coverage
-----------------------------
  Function coverage:      0.352
  Visited lines:          1306
  Total lines:            2112
  Line coverage:          0.618
  Visited conditions:     122
  Total conditions:       374
  Condition coverage:     0.326

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             2119
  Number of reached locations:   356 (13%)
    Avg states per location:     5
    Max states per location:     49 (at node N129)
  Number of reached functions:   32 (35%)
  Number of partitions:          2109
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [7af1cd63], stack [main]])
  Number of target states:       0
  Size of final wait list        41

Time for analysis setup:          3.955s
  Time for loading CPAs:          0.640s
  Time for loading parser:        0.524s
  Time for CFA construction:      2.715s
    Time for parsing file(s):     0.784s
    Time for AST to CFA:          0.968s
    Time for CFA sanity check:    0.162s
    Time for post-processing:     0.632s
      Time for var class.:        0.242s
Time for Analysis:               26.340s
CPU time for analysis:           26.330s
Total time for CPAchecker:       30.300s
Total CPU time for CPAchecker:   30.280s
Time for statistics:              0.071s

Time for Garbage Collector:       0.878s (in 127 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 86MB (    82 MiB) max;     51MB (    49 MiB) avg;     90MB (    86 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8076MB (  7702 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
