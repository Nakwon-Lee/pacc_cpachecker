scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lg_lwv5e/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7671: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7671: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2000266 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1733599 (87%)
  Because of loop head:            265965 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         702 (0%)
  Times precision was empty:       312871 (16%)
  Times precision was {false}:     1657 (0%)
  Times result was cached:         1648146 (82%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      37592 (2%)
  Times result was 'false':        38755 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         2639742
  BDD entailment checks:           1624402
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          66
Number of abstraction locations:          183
Max number of predicates per location:    30
Avg number of predicates per location:    10
Total predicates per abstraction:         16186385
Max number of predicates per abstraction: 30
Avg number of predicates per abstraction: 412.40
Number of irrelevant predicates:          6452280 (40%)
Number of preds handled by boolean abs:   276277 (2%)
  Total number of models for allsat:      808483
  Max number of models for allsat:        36864
  Avg number of models for allsat:        21.51

Time for post operator:                 97.504s
  Time for path formula creation:       94.138s
Time for strengthen operator:            6.764s
Time for prec operator:                585.681s
  Time for abstraction:                569.400s (Max:     9.263s, Count: 2000266)
    Boolean abstraction:               166.737s
    Solving time:                       27.734s (Max:     0.030s)
    Model enumeration time:            113.211s
    Time for BDD construction:          22.992s (Max:     1.316s)
Time for merge operator:                 5.222s
Time for coverage check:                 1.688s
  Time for BDD entailment checks:        1.344s
Total time for SMT solver (w/o itp):   140.945s

Number of path formula cache hits:   10199874 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    70.933s

Total number of created targets for pointer analysis: 49305
   Number of created targets for uf: *signed_int is 1328
   Number of created targets for uf: *(struct_usb_device)* is 1232
   Number of created targets for uf: *unsigned_char is 2045
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 3181
   Number of created targets for uf: *unsigned_int is 1187


Number of BDD nodes:                               164498
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      127637 (count: 2200321, min: 0, max: 3905, avg: 0.06)
Time for BDD node cleanup:                             0.217s
Time for BDD garbage collection:                       0.189s (in 44 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 10.627s
  Time for transition matches:                         5.952s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                     10669445 (count: 10669445, min: 1, max: 1, avg: 1.00) [1 x 10669445]

CPA algorithm statistics
------------------------
Number of iterations:            7143359
Max size of waitlist:            1323
Average size of waitlist:        349
Number of computed successors:   8107099
Max successors for one state:    2
Number of times merged:          507670
Number of times stopped:         840043
Number of times breaked:         702

Total time for CPA algorithm:       824.334s (Max:    31.192s)
  Time for choose from waitlist:      2.439s
  Time for precision adjustment:    620.273s
  Time for transfer relation:       161.646s
  Time for merge operator:           10.404s
  Time for stop operator:             7.845s
  Time for adding to reached set:     8.805s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   702
Avg. length of target path (in blocks):               75061 (count: 702, min: 30, max: 216, avg: 106.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  43.229s
  Counterexample analysis:                            28.982s (Max:     0.148s, Calls: 702)
    Refinement sat check:                             12.917s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.048s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.237s
  Precision update:                                    0.511s
  ARG update:                                         12.940s

Length of refined path (in blocks):                   67217 (count: 702, min: 24, max: 176, avg: 95.75)
Number of affected states:                            32053 (count: 702, min: 1, max: 170, avg: 45.66)
Length (states) of path with itp 'true':              34462 (count: 702, min: 0, max: 142, avg: 49.09)
Length (states) of path with itp non-trivial itp:     32053 (count: 702, min: 1, max: 170, avg: 45.66)
Length (states) of path with itp 'false':               702 (count: 702, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1634 (count: 702, min: 0, max: 5, avg: 2.33)
Equal non-trivial interpolants along paths:           29717 (count: 702, min: 0, max: 164, avg: 42.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                702
Number of successful refinements:     702
Number of failed refinements:         0
Max. size of reached set before ref.: 99217
Max. size of reached set after ref.:  86402
Avg. size of reached set before ref.: 30672.73
Avg. size of reached set after ref.:  20414.14

Total time for CEGAR algorithm:     896.234s
Time for refinements:                60.392s
Average time for refinement:          0.086s
Max time for refinement:              0.325s

Code Coverage
-----------------------------
  Function coverage:      0.758
  Visited lines:          1813
  Total lines:            2112
  Line coverage:          0.858
  Visited conditions:     266
  Total conditions:       374
  Condition coverage:     0.711

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             26773
  Number of reached locations:   872 (32%)
    Avg states per location:     30
    Max states per location:     182 (at node N129)
  Number of reached functions:   69 (76%)
  Number of partitions:          26341
    Avg size of partitions:      1
    Max size of partitions:      26 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [433e536f], stack [main]])
  Number of target states:       0
  Size of final wait list        122

Time for analysis setup:          4.092s
  Time for loading CPAs:          0.771s
  Time for loading parser:        0.538s
  Time for CFA construction:      2.715s
    Time for parsing file(s):     0.729s
    Time for AST to CFA:          0.922s
    Time for CFA sanity check:    0.166s
    Time for post-processing:     0.750s
      Time for var class.:        0.276s
Time for Analysis:              896.234s
CPU time for analysis:          896.120s
Total time for CPAchecker:      900.330s
Total CPU time for CPAchecker:  900.200s
Time for statistics:              0.400s

Time for Garbage Collector:      70.199s (in 1413 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1674MB (  1596 MiB) max;    723MB (   690 MiB) avg;   1737MB (  1657 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          2019MB (  1925 MiB) max;   1085MB (  1034 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8760MB (  8355 MiB) max;   8364MB (  7976 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
