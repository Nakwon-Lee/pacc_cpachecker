scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_j7gqqvja/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            66193 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  51392 (78%)
  Because of loop head:            14640 (22%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         161 (0%)
  Times precision was empty:       20907 (32%)
  Times precision was {false}:     591 (1%)
  Times result was cached:         42751 (65%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1944 (3%)
  Times result was 'false':        3264 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         55961
  BDD entailment checks:           16485
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          14
Number of abstraction locations:          136
Max number of predicates per location:    12
Avg number of predicates per location:    5
Total predicates per abstraction:         227973
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 89.93
Number of irrelevant predicates:          46967 (21%)
Number of preds handled by boolean abs:   6289 (3%)
  Total number of models for allsat:      3867
  Max number of models for allsat:        48
  Avg number of models for allsat:        1.99

Time for post operator:                  2.854s
  Time for path formula creation:        2.737s
Time for strengthen operator:            0.308s
Time for prec operator:                 12.317s
  Time for abstraction:                 11.604s (Max:     0.061s, Count: 66193)
    Boolean abstraction:                 2.258s
    Solving time:                        1.486s (Max:     0.038s)
    Model enumeration time:              0.650s
    Time for BDD construction:           0.179s (Max:     0.012s)
Time for merge operator:                 0.252s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.061s
Total time for SMT solver (w/o itp):     2.136s

Number of path formula cache hits:   416401 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.151s

Total number of created targets for pointer analysis: 421
   Number of created targets for uf: *signed_int is 9
   Number of created targets for uf: *(struct_usb_device)* is 9
   Number of created targets for uf: *unsigned_char is 155
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 17
   Number of created targets for uf: *unsigned_int is 8


Number of BDD nodes:                               3786
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4833 (count: 53370, min: 0, max: 292, avg: 0.09)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.580s
  Time for transition matches:                         0.287s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       368595 (count: 368595, min: 1, max: 1, avg: 1.00) [1 x 368595]

CPA algorithm statistics
------------------------
Number of iterations:            240217
Max size of waitlist:            63
Average size of waitlist:        17
Number of computed successors:   278967
Max successors for one state:    2
Number of times merged:          19738
Number of times stopped:         30949
Number of times breaked:         161

Total time for CPA algorithm:        22.233s (Max:     1.362s)
  Time for choose from waitlist:      0.157s
  Time for precision adjustment:     13.812s
  Time for transfer relation:         6.179s
  Time for merge operator:            0.507s
  Time for stop operator:             0.362s
  Time for adding to reached set:     0.350s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   161
Avg. length of target path (in blocks):                9162 (count: 161, min: 30, max: 95, avg: 56.91)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.270s
  Counterexample analysis:                             2.402s (Max:     0.059s, Calls: 161)
    Refinement sat check:                              1.508s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.012s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.084s
  Precision update:                                    0.115s
  ARG update:                                          0.544s

Length of refined path (in blocks):                    8857 (count: 161, min: 24, max: 94, avg: 55.01)
Number of affected states:                             8427 (count: 161, min: 1, max: 93, avg: 52.34)
Length (states) of path with itp 'true':                269 (count: 161, min: 0, max: 31, avg: 1.67)
Length (states) of path with itp non-trivial itp:      8427 (count: 161, min: 1, max: 93, avg: 52.34)
Length (states) of path with itp 'false':               161 (count: 161, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 161, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8266 (count: 161, min: 0, max: 92, avg: 51.34)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                161
Number of successful refinements:     161
Number of failed refinements:         0
Max. size of reached set before ref.: 6191
Max. size of reached set after ref.:  339
Avg. size of reached set before ref.: 1532.74
Avg. size of reached set after ref.:  14.73

Total time for CEGAR algorithm:      25.869s
Time for refinements:                 3.619s
Average time for refinement:          0.022s
Max time for refinement:              0.066s

Code Coverage
-----------------------------
  Function coverage:      0.110
  Visited lines:          1110
  Total lines:            2112
  Line coverage:          0.526
  Visited conditions:     96
  Total conditions:       374
  Condition coverage:     0.257

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             355
  Number of reached locations:   216 (8%)
    Avg states per location:     1
    Max states per location:     13 (at node N90)
  Number of reached functions:   10 (11%)
  Number of partitions:          355
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        1

Time for analysis setup:          3.925s
  Time for loading CPAs:          0.862s
  Time for loading parser:        0.539s
  Time for CFA construction:      2.432s
    Time for parsing file(s):     0.767s
    Time for AST to CFA:          0.781s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.592s
      Time for var class.:        0.243s
Time for Analysis:               25.869s
CPU time for analysis:           25.870s
Total time for CPAchecker:       29.807s
Total CPU time for CPAchecker:   29.800s
Time for statistics:              0.043s

Time for Garbage Collector:       0.869s (in 143 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 76MB (    73 MiB) max;     49MB (    47 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8020MB (  7648 MiB) max;   8011MB (  7640 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
