scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1050f36k/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7671: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7671: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7429: Unsupported feature (recursion): tmp = ldv_submit_urb(ldv_func_arg1); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            65745 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  53901 (82%)
  Because of loop head:            11636 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         208 (0%)
  Times precision was empty:       11918 (18%)
  Times precision was {false}:     540 (1%)
  Times result was cached:         45269 (69%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      8018 (12%)
  Times result was 'false':        5201 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         128620
  BDD entailment checks:           83900
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          92
Number of abstraction locations:          147
Max number of predicates per location:    72
Avg number of predicates per location:    7
Total predicates per abstraction:         408697
Max number of predicates per abstraction: 72
Avg number of predicates per abstraction: 47.76
Number of irrelevant predicates:          69153 (17%)
Number of preds handled by boolean abs:   128976 (32%)
  Total number of models for allsat:      54585
  Max number of models for allsat:        65
  Avg number of models for allsat:        6.81

Time for post operator:                  6.097s
  Time for path formula creation:        5.943s
Time for strengthen operator:            0.400s
Time for prec operator:                 39.043s
  Time for abstraction:                 38.130s (Max:     0.051s, Count: 65745)
    Boolean abstraction:                18.044s
    Solving time:                       10.896s (Max:     0.027s)
    Model enumeration time:              3.235s
    Time for BDD construction:           2.889s (Max:     0.017s)
Time for merge operator:                 0.596s
Time for coverage check:                 0.424s
  Time for BDD entailment checks:        0.392s
Total time for SMT solver (w/o itp):    14.131s

Number of path formula cache hits:   348034 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.076s

Total number of created targets for pointer analysis: 4306
   Number of created targets for uf: *signed_int is 498
   Number of created targets for uf: *(struct_usb_device)* is 232
   Number of created targets for uf: *unsigned_char is 21
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 459
   Number of created targets for uf: *unsigned_int is 110


Number of BDD nodes:                               183945
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      295314 (count: 259272, min: 0, max: 3900, avg: 1.14)
Time for BDD node cleanup:                             0.061s
Time for BDD garbage collection:                       0.047s (in 6 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.640s
  Time for transition matches:                         0.287s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       383254 (count: 383254, min: 1, max: 1, avg: 1.00) [1 x 383254]

CPA algorithm statistics
------------------------
Number of iterations:            265756
Max size of waitlist:            173
Average size of waitlist:        53
Number of computed successors:   310091
Max successors for one state:    2
Number of times merged:          22360
Number of times stopped:         30443
Number of times breaked:         208

Total time for CPA algorithm:        54.423s (Max:     1.971s)
  Time for choose from waitlist:      0.138s
  Time for precision adjustment:     40.969s
  Time for transfer relation:        10.122s
  Time for merge operator:            0.950s
  Time for stop operator:             0.762s
  Time for adding to reached set:     0.437s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   208
Avg. length of target path (in blocks):               20767 (count: 208, min: 30, max: 304, avg: 99.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.236s
  Counterexample analysis:                            10.263s (Max:     0.329s, Calls: 208)
    Refinement sat check:                              3.283s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.121s
  Precision update:                                    0.136s
  ARG update:                                          0.514s

Length of refined path (in blocks):                   18654 (count: 208, min: 24, max: 303, avg: 89.68)
Number of affected states:                            12311 (count: 208, min: 1, max: 203, avg: 59.19)
Length (states) of path with itp 'true':               6135 (count: 208, min: 0, max: 272, avg: 29.50)
Length (states) of path with itp non-trivial itp:     12311 (count: 208, min: 1, max: 203, avg: 59.19)
Length (states) of path with itp 'false':               208 (count: 208, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        2043 (count: 208, min: 0, max: 63, avg: 9.82)
Equal non-trivial interpolants along paths:           10060 (count: 208, min: 0, max: 202, avg: 48.37)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                208
Number of successful refinements:     208
Number of failed refinements:         0
Max. size of reached set before ref.: 4483
Max. size of reached set after ref.:  3742
Avg. size of reached set before ref.: 2000.16
Avg. size of reached set after ref.:  699.65

Total time for CEGAR algorithm:      66.277s
Time for refinements:                11.772s
Average time for refinement:          0.056s
Max time for refinement:              0.344s

Code Coverage
-----------------------------
  Function coverage:      0.659
  Visited lines:          1608
  Total lines:            2112
  Line coverage:          0.761
  Visited conditions:     218
  Total conditions:       374
  Condition coverage:     0.583

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             3942
  Number of reached locations:   711 (26%)
    Avg states per location:     5
    Max states per location:     70 (at node N129)
  Number of reached functions:   60 (66%)
  Number of partitions:          3842
    Avg size of partitions:      1
    Max size of partitions:      65 (with key [N762 (before line 6468), Function esd_usb2_start called from node N834, stack depth 3 [f1d1263], stack [main, esd_usb2_open, esd_usb2_start]])
  Number of target states:       0
  Size of final wait list        152

Time for analysis setup:          4.108s
  Time for loading CPAs:          0.809s
  Time for loading parser:        0.628s
  Time for CFA construction:      2.584s
    Time for parsing file(s):     0.722s
    Time for AST to CFA:          0.865s
    Time for CFA sanity check:    0.141s
    Time for post-processing:     0.706s
      Time for var class.:        0.300s
Time for Analysis:               66.277s
CPU time for analysis:           66.270s
Total time for CPAchecker:       70.389s
Total CPU time for CPAchecker:   70.370s
Time for statistics:              0.108s

Time for Garbage Collector:       1.877s (in 261 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                113MB (   107 MiB) max;     68MB (    64 MiB) avg;    116MB (   111 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8297MB (  7913 MiB) max;   8074MB (  7700 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
