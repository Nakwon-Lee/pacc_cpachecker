scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_77if3zn3/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            44282 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  37591 (85%)
  Because of loop head:            6554 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         137 (0%)
  Times precision was empty:       9611 (22%)
  Times precision was {false}:     465 (1%)
  Times result was cached:         31488 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2718 (6%)
  Times result was 'false':        2014 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         43073
  BDD entailment checks:           10469
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          26
Number of abstraction locations:          135
Max number of predicates per location:    15
Avg number of predicates per location:    5
Total predicates per abstraction:         153893
Max number of predicates per abstraction: 15
Avg number of predicates per abstraction: 48.35
Number of irrelevant predicates:          32625 (21%)
Number of preds handled by boolean abs:   8582 (6%)
  Total number of models for allsat:      3153
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.16

Time for post operator:                  4.015s
  Time for path formula creation:        3.891s
Time for strengthen operator:            0.250s
Time for prec operator:                 11.506s
  Time for abstraction:                 10.896s (Max:     0.022s, Count: 44282)
    Boolean abstraction:                 2.243s
    Solving time:                        1.783s (Max:     0.017s)
    Model enumeration time:              0.230s
    Time for BDD construction:           0.201s (Max:     0.010s)
Time for merge operator:                 0.263s
Time for coverage check:                 0.043s
  Time for BDD entailment checks:        0.033s
Total time for SMT solver (w/o itp):     2.013s

Number of path formula cache hits:   278744 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.165s

Total number of created targets for pointer analysis: 1299
   Number of created targets for uf: *signed_int is 42
   Number of created targets for uf: *(struct_usb_device)* is 91
   Number of created targets for uf: *unsigned_char is 11
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 179
   Number of created targets for uf: *unsigned_int is 42


Number of BDD nodes:                               3243
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        7140 (count: 39960, min: 0, max: 524, avg: 0.18)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.522s
  Time for transition matches:                         0.258s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                       262367 (count: 262367, min: 1, max: 1, avg: 1.00) [1 x 262367]

CPA algorithm statistics
------------------------
Number of iterations:            182365
Max size of waitlist:            92
Average size of waitlist:        38
Number of computed successors:   213095
Max successors for one state:    2
Number of times merged:          16302
Number of times stopped:         22061
Number of times breaked:         137

Total time for CPA algorithm:        21.930s (Max:     1.085s)
  Time for choose from waitlist:      0.145s
  Time for precision adjustment:     12.798s
  Time for transfer relation:         7.087s
  Time for merge operator:            0.553s
  Time for stop operator:             0.333s
  Time for adding to reached set:     0.313s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   137
Avg. length of target path (in blocks):                9676 (count: 137, min: 30, max: 113, avg: 70.63)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.672s
  Counterexample analysis:                             2.816s (Max:     0.067s, Calls: 137)
    Refinement sat check:                              1.675s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.012s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.125s
  Precision update:                                    0.076s
  ARG update:                                          0.533s

Length of refined path (in blocks):                    9234 (count: 137, min: 24, max: 101, avg: 67.40)
Number of affected states:                             8320 (count: 137, min: 1, max: 100, avg: 60.73)
Length (states) of path with itp 'true':                777 (count: 137, min: 0, max: 76, avg: 5.67)
Length (states) of path with itp non-trivial itp:      8320 (count: 137, min: 1, max: 100, avg: 60.73)
Length (states) of path with itp 'false':               137 (count: 137, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          34 (count: 137, min: 0, max: 7, avg: 0.25)
Equal non-trivial interpolants along paths:            8149 (count: 137, min: 0, max: 99, avg: 59.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                137
Number of successful refinements:     137
Number of failed refinements:         0
Max. size of reached set before ref.: 2646
Max. size of reached set after ref.:  1958
Avg. size of reached set before ref.: 1498.90
Avg. size of reached set after ref.:  133.86

Total time for CEGAR algorithm:      25.966s
Time for refinements:                 4.022s
Average time for refinement:          0.029s
Max time for refinement:              0.085s

Code Coverage
-----------------------------
  Function coverage:      0.516
  Visited lines:          1485
  Total lines:            2112
  Line coverage:          0.703
  Visited conditions:     164
  Total conditions:       374
  Condition coverage:     0.439

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             2011
  Number of reached locations:   559 (20%)
    Avg states per location:     3
    Max states per location:     42 (at node N129)
  Number of reached functions:   47 (52%)
  Number of partitions:          1998
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N762 (before line 6468), Function esd_usb2_start called from node N834, stack depth 3 [1144f22e], stack [main, esd_usb2_open, esd_usb2_start]])
  Number of target states:       0
  Size of final wait list        71

Time for analysis setup:          4.316s
  Time for loading CPAs:          0.806s
  Time for loading parser:        0.548s
  Time for CFA construction:      2.870s
    Time for parsing file(s):     0.823s
    Time for AST to CFA:          0.989s
    Time for CFA sanity check:    0.153s
    Time for post-processing:     0.720s
      Time for var class.:        0.297s
Time for Analysis:               25.966s
CPU time for analysis:           25.970s
Total time for CPAchecker:       30.285s
Total CPU time for CPAchecker:   30.270s
Time for statistics:              0.085s

Time for Garbage Collector:       0.787s (in 108 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 77MB (    73 MiB) max;     49MB (    46 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
