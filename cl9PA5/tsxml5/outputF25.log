scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.12-rc1/linux-3.12-rc1.tar.xz-144_2a-drivers--net--can--usb--esd_usb2.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_he32os0h/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7158: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7160: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7162: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7164: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7166: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7168: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7170: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7174: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_zalloc(1376UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7176: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7178: Destroying the void* pointer ldv_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_anchored_urbs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_anchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function can_put_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7665: Ignoring call via function pointer completeFnInt for which no suitable target was found in line: (*completeFnInt)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7665: Ignoring function call through function pointer *completeFnInt: (*completeFnInt)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7671: Ignoring call via function pointer completeFnBulk for which no suitable target was found in line: (*completeFnBulk)(usb_urb); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 7671: Ignoring function call through function pointer *completeFnBulk: (*completeFnBulk)(usb_urb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function can_free_echo_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unanchor_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7429: Unsupported feature (recursion): tmp = ldv_submit_urb(ldv_func_arg1); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            398463 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  323006 (81%)
  Because of loop head:            75034 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         423 (0%)
  Times precision was empty:       87637 (22%)
  Times precision was {false}:     1430 (0%)
  Times result was cached:         292457 (73%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      16939 (4%)
  Times result was 'false':        13152 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         445658
  BDD entailment checks:           236436
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          51
Number of abstraction locations:          172
Max number of predicates per location:    25
Avg number of predicates per location:    9
Total predicates per abstraction:         2566540
Max number of predicates per abstraction: 25
Avg number of predicates per abstraction: 139.72
Number of irrelevant predicates:          773476 (30%)
Number of preds handled by boolean abs:   111553 (4%)
  Total number of models for allsat:      133676
  Max number of models for allsat:        2112
  Avg number of models for allsat:        7.89

Time for post operator:                 21.418s
  Time for path formula creation:       20.662s
Time for strengthen operator:            1.502s
Time for prec operator:                116.278s
  Time for abstraction:                112.956s (Max:     0.737s, Count: 398463)
    Boolean abstraction:                35.227s
    Solving time:                       12.683s (Max:     0.020s)
    Model enumeration time:             18.236s
    Time for BDD construction:           3.187s (Max:     0.067s)
Time for merge operator:                 1.404s
Time for coverage check:                 0.534s
  Time for BDD entailment checks:        0.470s
Total time for SMT solver (w/o itp):    30.919s

Number of path formula cache hits:   1985484 (79%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    17.075s

Total number of created targets for pointer analysis: 10720
   Number of created targets for uf: *signed_int is 499
   Number of created targets for uf: *(struct_usb_device)* is 79
   Number of created targets for uf: *unsigned_char is 1295
   Number of created targets for uf: *(struct_esd_usb2_net_priv)* is 165
   Number of created targets for uf: *unsigned_int is 164


Number of BDD nodes:                               269891
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       74344 (count: 450151, min: 0, max: 2340, avg: 0.17)
Time for BDD node cleanup:                             0.087s
Time for BDD garbage collection:                       0.056s (in 2 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.590s
  Time for transition matches:                         1.358s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.005s
Automaton transfers with branching:                0
Automaton transfer successors:                      2143182 (count: 2143182, min: 1, max: 1, avg: 1.00) [1 x 2143182]

CPA algorithm statistics
------------------------
Number of iterations:            1402122
Max size of waitlist:            1358
Average size of waitlist:        184
Number of computed successors:   1615250
Max successors for one state:    2
Number of times merged:          104611
Number of times stopped:         172552
Number of times breaked:         423

Total time for CPA algorithm:       171.298s (Max:     7.227s)
  Time for choose from waitlist:      0.585s
  Time for precision adjustment:    124.017s
  Time for transfer relation:        37.027s
  Time for merge operator:            2.720s
  Time for stop operator:             1.968s
  Time for adding to reached set:     1.844s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   423
Avg. length of target path (in blocks):               49209 (count: 423, min: 30, max: 218, avg: 116.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  22.424s
  Counterexample analysis:                            19.305s (Max:     0.163s, Calls: 423)
    Refinement sat check:                              8.392s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.039s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.152s
  Precision update:                                    0.347s
  ARG update:                                          2.288s

Length of refined path (in blocks):                   46085 (count: 423, min: 24, max: 216, avg: 108.95)
Number of affected states:                            22959 (count: 423, min: 1, max: 143, avg: 54.28)
Length (states) of path with itp 'true':              22703 (count: 423, min: 0, max: 182, avg: 53.67)
Length (states) of path with itp non-trivial itp:     22959 (count: 423, min: 1, max: 143, avg: 54.28)
Length (states) of path with itp 'false':               423 (count: 423, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         788 (count: 423, min: 0, max: 5, avg: 1.86)
Equal non-trivial interpolants along paths:           21748 (count: 423, min: 0, max: 142, avg: 51.41)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                423
Number of successful refinements:     423
Number of failed refinements:         0
Max. size of reached set before ref.: 50575
Max. size of reached set after ref.:  49955
Avg. size of reached set before ref.: 13104.13
Avg. size of reached set after ref.:  9910.95

Total time for CEGAR algorithm:     202.052s
Time for refinements:                27.589s
Average time for refinement:          0.065s
Max time for refinement:              0.210s

Code Coverage
-----------------------------
  Function coverage:      0.769
  Visited lines:          1804
  Total lines:            2112
  Line coverage:          0.854
  Visited conditions:     260
  Total conditions:       374
  Condition coverage:     0.695

CPAchecker general statistics
-----------------------------
Number of program locations:     2738
Number of CFA edges:             2962
Number of relevant variables:    318
Number of functions:             91
Number of loops:                 16
Size of reached set:             78828
  Number of reached locations:   856 (31%)
    Avg states per location:     92
    Max states per location:     1028 (at node N133)
  Number of reached functions:   70 (77%)
  Number of partitions:          77981
    Avg size of partitions:      1
    Max size of partitions:      54 (with key [N1386 (before line 7189), Function main called from node N1325, stack depth 1 [7af1cd63], stack [main]])
  Number of target states:       0
  Size of final wait list        1089

Time for analysis setup:          4.027s
  Time for loading CPAs:          0.710s
  Time for loading parser:        0.614s
  Time for CFA construction:      2.579s
    Time for parsing file(s):     0.661s
    Time for AST to CFA:          0.877s
    Time for CFA sanity check:    0.168s
    Time for post-processing:     0.691s
      Time for var class.:        0.294s
Time for Analysis:              202.052s
CPU time for analysis:          202.030s
Total time for CPAchecker:      206.081s
Total CPU time for CPAchecker:  206.050s
Time for statistics:              0.957s

Time for Garbage Collector:      13.867s (in 737 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                396MB (   378 MiB) max;    170MB (   162 MiB) avg;    415MB (   395 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           437MB (   417 MiB) max;    258MB (   246 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8359MB (  7971 MiB) max;   8181MB (  7802 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
