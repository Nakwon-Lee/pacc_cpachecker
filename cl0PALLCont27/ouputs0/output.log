scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/elevator_spec3_product09_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_95lilkax/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 272: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 508: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 819: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 861: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 900: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 939: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1026: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1175: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1184: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1218: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1227: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1267: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1347: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1360: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1712: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1746: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1802: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1816: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2391: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2406: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2429: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2777: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3283: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3329: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 3120: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            34 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            7 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         27 (79%)
  Times precision was empty:       10 (29%)
  Times precision was {false}:     18 (53%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6 (18%)
  Times result was 'false':        18 (53%)
Number of strengthen sat checks:   0
Number of coverage checks:         21101
  BDD entailment checks:           15
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       3291
Number of predicates discovered:          7
Number of abstraction locations:          2
Max number of predicates per location:    6
Avg number of predicates per location:    3
Total predicates per abstraction:         54
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 2.25
Number of irrelevant predicates:          18 (33%)
Number of preds handled by boolean abs:   36 (67%)
  Total number of models for allsat:      28
  Max number of models for allsat:        7
  Avg number of models for allsat:        4.67

Time for post operator:                  2.689s
  Time for path formula creation:        2.568s
Time for strengthen operator:            0.184s
Time for prec operator:                  7.809s
  Time for abstraction:                  7.698s (Max:     1.364s, Count: 34)
    Boolean abstraction:                 2.132s
    Solving time:                        5.988s (Max:     1.133s)
    Model enumeration time:              0.481s
    Time for BDD construction:           0.007s (Max:     0.002s)
Time for merge operator:                 0.638s
Time for coverage check:                 0.005s
  Time for BDD entailment checks:        0.002s
Total time for SMT solver (w/o itp):     6.469s

Number of path formula cache hits:   6139 (12%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.483s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               366
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         132 (count: 225, min: 0, max: 30, avg: 0.59)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.324s
Automaton transfers with branching:                0
Automaton transfer successors:                        50613 (count: 50613, min: 1, max: 1, avg: 1.00) [1 x 50613]

CPA algorithm statistics
------------------------
Number of iterations:            37589
Max size of waitlist:            20
Average size of waitlist:        9
Number of computed successors:   48154
Max successors for one state:    2
Number of times merged:          10543
Number of times stopped:         10544
Number of times breaked:         9

Total time for CPA algorithm:        14.450s (Max:     7.140s)
  Time for choose from waitlist:      0.085s
  Time for precision adjustment:      8.352s
  Time for transfer relation:         4.138s
  Time for merge operator:            1.118s
  Time for stop operator:             0.101s
  Time for adding to reached set:     0.156s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                  10 (count: 9, min: 1, max: 2, avg: 1.11)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.628s
  Counterexample analysis:                             4.472s (Max:     1.717s, Calls: 9)
    Refinement sat check:                              4.093s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.010s
  ARG update:                                          0.021s

Length of refined path (in blocks):                      10 (count: 9, min: 1, max: 2, avg: 1.11)
Number of affected states:                                1 (count: 9, min: 0, max: 1, avg: 0.11)
Length (states) of path with itp 'true':                  0 (count: 9, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         1 (count: 9, min: 0, max: 1, avg: 0.11)
Length (states) of path with itp 'false':                 0 (count: 9, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 9, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 9, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 18627
Max. size of reached set after ref.:  14850
Avg. size of reached set before ref.: 10325.44
Avg. size of reached set after ref.:  9904.89

Total time for CEGAR algorithm:      19.785s
Time for refinements:                 5.229s
Average time for refinement:          0.581s
Max time for refinement:              1.899s

Code Coverage
-----------------------------
  Function coverage:      0.618
  Visited lines:          1052
  Total lines:            1691
  Line coverage:          0.622
  Visited conditions:     594
  Total conditions:       750
  Condition coverage:     0.792

CPAchecker general statistics
-----------------------------
Number of program locations:     2212
Number of CFA edges:             2705
Number of relevant variables:    286
Number of functions:             68
Number of loops:                 9
Size of reached set:             33808
  Number of reached locations:   1148 (52%)
    Avg states per location:     29
    Max states per location:     214 (at node N120)
  Number of reached functions:   42 (62%)
  Number of partitions:          33804
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N2064 (before lines 2576-2604), Function cleanup called from node N78, stack depth 4 [85cd413], stack [main, runTest, test, cleanup]])
  Number of target states:       0

Time for analysis setup:          3.005s
  Time for loading CPAs:          0.656s
  Time for loading parser:        0.568s
  Time for CFA construction:      1.638s
    Time for parsing file(s):     0.496s
    Time for AST to CFA:          0.442s
    Time for CFA sanity check:    0.163s
    Time for post-processing:     0.357s
      Time for var class.:        0.190s
Time for Analysis:               19.785s
CPU time for analysis:           19.790s
Time for analyzing result:        0.025s
Total time for CPAchecker:       22.793s
Total CPU time for CPAchecker:   22.790s
Time for statistics:              0.429s

Time for Garbage Collector:       0.609s (in 33 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                104MB (    99 MiB) max;     61MB (    59 MiB) avg;    115MB (   110 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     32MB (    31 MiB) avg;     36MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     35MB (    34 MiB) avg
Total process virtual memory:   8137MB (  7760 MiB) max;   8096MB (  7721 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
