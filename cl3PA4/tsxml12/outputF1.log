scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.14__complex_emg__linux-usb-dev__drivers-net-wireless-ath-ath10k-ath10k_pci_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0fds1589/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6751: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 7971: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8026: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8293: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8348: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 12070: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 12937: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13661: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13695: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 14397: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14428: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14447: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14490: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14509: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14539: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 9355: Function pointer *(cb->rx_completion) with type int (*)(struct ath10k *, struct sk_buff *, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9326: Function pointer *(cb->tx_completion) with type int (*)(struct ath10k *, struct sk_buff *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9847: Function pointer *(ar_pci->msg_callbacks_current.tx_completion) with type int (*)(struct ath10k *, struct sk_buff *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7234: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7275: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7043-7044: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7148: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7122: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7082: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13356: Function pointer *arg0 with type int (*)(struct pci_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13367: Function pointer *arg0 with type int (*)(struct pci_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13390: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13402: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13378: Ignoring call via function pointer ldv_pci_instance_shutdown_4_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13378: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13042: Ignoring call via function pointer ldv_interrupt_instance_thread_3_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13042: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13030: Ignoring call via function pointer ldv_interrupt_instance_thread_2_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13030: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13018: Ignoring call via function pointer ldv_interrupt_instance_thread_1_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13018: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13006: Ignoring call via function pointer ldv_interrupt_instance_thread_0_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13006: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ath10k_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_alloc_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13390: Ignoring call via function pointer ldv_pci_instance_suspend_4_8::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13390: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13402: Ignoring call via function pointer ldv_pci_instance_suspend_late_4_7::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13402: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __compiletime_assert_69 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13367: Ignoring call via function pointer ldv_pci_instance_resume_early_4_6::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13367: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13356: Ignoring call via function pointer ldv_pci_instance_resume_4_5::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13356: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmemdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7036: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_unreachable to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7043-7044: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7148: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_after_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __compiletime_assert_1071 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __compiletime_assert_1073 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6800: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7275: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7234: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_msi_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msi to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15357: Ignoring function call through function pointer *(ce_state->recv_cb): (*(ce_state->recv_cb))(ce_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 15364: Ignoring function call through function pointer *(ce_state->send_cb): (*(ce_state->send_cb))(ce_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9326: Ignoring function call through function pointer *(cb->tx_completion): (*(cb->tx_completion))(ar, compl->skb, compl->transfer_id); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7072: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 7082: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7112: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 7122: Ignoring function call through function pointer *(ops->sync_single_for_device): (*(ops->sync_single_for_device))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_sync_single_for_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_dbg_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_trim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9355: Ignoring function call through function pointer *(cb->rx_completion): (*(cb->rx_completion))(ar, skb, __CPAchecker_TMP_6); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9847: Ignoring function call through function pointer *(ar_pci->msg_callbacks_current.tx_completion): (*(ar_pci->msg_callbacks_current.tx_completion))(ar, netbuf, id); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7907: Unsupported feature (recursion): ret = ath10k_pci_diag_read_access(ar, address, (u32 *)data); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            975215 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  856131 (88%)
  Because of loop head:            118756 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         328 (0%)
  Times precision was empty:       669798 (69%)
  Times precision was {false}:     3085 (0%)
  Times result was cached:         280123 (29%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22209 (2%)
  Times result was 'false':        32666 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         732665
  BDD entailment checks:           412643
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       62
Number of predicates discovered:          28
Number of abstraction locations:          36
Max number of predicates per location:    28
Avg number of predicates per location:    18
Total predicates per abstraction:         4044947
Max number of predicates per abstraction: 28
Avg number of predicates per abstraction: 159.92
Number of irrelevant predicates:          2475491 (61%)
Number of preds handled by boolean abs:   230257 (6%)
  Total number of models for allsat:      104543
  Max number of models for allsat:        256
  Avg number of models for allsat:        4.71

Time for post operator:                 62.280s
  Time for path formula creation:       60.167s
Time for strengthen operator:            4.413s
Time for prec operator:                196.429s
  Time for abstraction:                185.783s (Max:     1.248s, Count: 975215)
    Boolean abstraction:                50.770s
    Solving time:                       32.727s (Max:     0.015s)
    Model enumeration time:             12.761s
    Time for BDD construction:           3.847s (Max:     0.049s)
Time for merge operator:                 2.408s
Time for coverage check:                 0.555s
  Time for BDD entailment checks:        0.444s
Total time for SMT solver (w/o itp):    45.488s

Number of path formula cache hits:   4568785 (80%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    47.779s

Total number of created targets for pointer analysis: 9293
   Number of created targets for uf: *(void)* is 325
   Number of created targets for uf: *(struct_list_head)* is 242
   Number of created targets for uf: *_Bool is 13
   Number of created targets for uf: *unsigned_int is 115


Number of BDD nodes:                               187471
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       97264 (count: 1266690, min: 0, max: 1895, avg: 0.08)
Time for BDD node cleanup:                             0.249s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.195s
  Time for transition matches:                         4.089s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                      4818637 (count: 4818637, min: 1, max: 1, avg: 1.00) [1 x 4818637]

CPA algorithm statistics
------------------------
Number of iterations:            3423671
Max size of waitlist:            1607
Average size of waitlist:        560
Number of computed successors:   3949723
Max successors for one state:    2
Number of times merged:          160011
Number of times stopped:         223800
Number of times breaked:         328

Total time for CPA algorithm:       379.791s (Max:    31.100s)
  Time for choose from waitlist:      1.684s
  Time for precision adjustment:    225.434s
  Time for transfer relation:       123.310s
  Time for merge operator:            5.238s
  Time for stop operator:             6.069s
  Time for adding to reached set:     7.263s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   328
Avg. length of target path (in blocks):               10797 (count: 328, min: 15, max: 51, avg: 32.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.167s
  Counterexample analysis:                             4.520s (Max:     0.036s, Calls: 328)
    Refinement sat check:                              2.683s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.021s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.110s
  Precision update:                                    0.151s
  ARG update:                                          6.161s

Length of refined path (in blocks):                    6915 (count: 328, min: 11, max: 36, avg: 21.08)
Number of affected states:                             4443 (count: 328, min: 4, max: 29, avg: 13.55)
Length (states) of path with itp 'true':               2144 (count: 328, min: 6, max: 10, avg: 6.54)
Length (states) of path with itp non-trivial itp:      4443 (count: 328, min: 4, max: 29, avg: 13.55)
Length (states) of path with itp 'false':               328 (count: 328, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          16 (count: 328, min: 0, max: 1, avg: 0.05)
Equal non-trivial interpolants along paths:            4099 (count: 328, min: 3, max: 28, avg: 12.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                328
Number of successful refinements:     328
Number of failed refinements:         0
Max. size of reached set before ref.: 20671
Max. size of reached set after ref.:  11414
Avg. size of reached set before ref.: 11823.05
Avg. size of reached set after ref.:  980.31

Total time for CEGAR algorithm:     393.587s
Time for refinements:                13.554s
Average time for refinement:          0.041s
Max time for refinement:              0.133s

Code Coverage
-----------------------------
  Function coverage:      0.695
  Visited lines:          3728
  Total lines:            5453
  Line coverage:          0.684
  Visited conditions:     630
  Total conditions:       1124
  Condition coverage:     0.560

CPAchecker general statistics
-----------------------------
Number of program locations:     7422
Number of CFA edges:             8480
Number of relevant variables:    1444
Number of functions:             315
Number of loops:                 41
Size of reached set:             136838
  Number of reached locations:   2464 (33%)
    Avg states per location:     55
    Max states per location:     2835 (at node N457)
  Number of reached functions:   219 (70%)
  Number of partitions:          136755
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N4050 (before line 12842), Function main called from node N4036, stack depth 1 [6661d8c0], stack [main]])
  Number of target states:       0
  Size of final wait list        582

Time for analysis setup:          7.677s
  Time for loading CPAs:          1.157s
  Time for loading parser:        0.662s
  Time for CFA construction:      5.721s
    Time for parsing file(s):     1.195s
    Time for AST to CFA:          2.235s
    Time for CFA sanity check:    0.570s
    Time for post-processing:     1.445s
      Time for var class.:        0.669s
Time for Analysis:              393.588s
CPU time for analysis:          393.540s
Total time for CPAchecker:      401.273s
Total CPU time for CPAchecker:  401.200s
Time for statistics:              1.603s

Time for Garbage Collector:      30.326s (in 787 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                772MB (   736 MiB) max;    287MB (   274 MiB) avg;    802MB (   765 MiB) peak
Used non-heap memory:             43MB (    41 MiB) max;     40MB (    38 MiB) avg;     44MB (    42 MiB) peak
Allocated heap memory:          1345MB (  1283 MiB) max;    438MB (   418 MiB) avg
Allocated non-heap memory:        45MB (    43 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8420MB (  8030 MiB) max;   8206MB (  7825 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
