scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.14__complex_emg__linux-kernel-locking-mutex__drivers-net-wireless-ath-ath10k-ath10k_pci_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ap900dfq/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6747: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 6850: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 7985: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8040: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8307: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8362: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 12084: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 12951: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13675: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13709: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 14389: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14420: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14439: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14482: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14501: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14531: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 9369: Function pointer *(cb->rx_completion) with type int (*)(struct ath10k *, struct sk_buff *, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9340: Function pointer *(cb->tx_completion) with type int (*)(struct ath10k *, struct sk_buff *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9861: Function pointer *(ar_pci->msg_callbacks_current.tx_completion) with type int (*)(struct ath10k *, struct sk_buff *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7248: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7289: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7057-7058: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7162: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7136: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7096: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13370: Function pointer *arg0 with type int (*)(struct pci_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13381: Function pointer *arg0 with type int (*)(struct pci_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13404: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13416: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13056: Ignoring call via function pointer ldv_interrupt_instance_thread_3_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13056: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13044: Ignoring call via function pointer ldv_interrupt_instance_thread_2_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13044: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13032: Ignoring call via function pointer ldv_interrupt_instance_thread_1_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13032: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13020: Ignoring call via function pointer ldv_interrupt_instance_thread_0_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 13020: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ath10k_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            38951 (26% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  36570 (94%)
  Because of loop head:            2357 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         24 (0%)
  Times precision was empty:       36038 (93%)
  Times precision was {false}:     187 (0%)
  Times result was cached:         2588 (7%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      138 (0%)
  Times result was 'false':        228 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         13817
  BDD entailment checks:           6341
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          13
Number of abstraction locations:          16
Max number of predicates per location:    12
Avg number of predicates per location:    4
Total predicates per abstraction:         9367
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 28.82
Number of irrelevant predicates:          7705 (82%)
Number of preds handled by boolean abs:   537 (6%)
  Total number of models for allsat:      167
  Max number of models for allsat:        3
  Avg number of models for allsat:        1.21

Time for post operator:                  6.024s
  Time for path formula creation:        5.817s
Time for strengthen operator:            0.428s
Time for prec operator:                  3.680s
  Time for abstraction:                  2.719s (Max:     0.030s, Count: 38951)
    Boolean abstraction:                 0.383s
    Solving time:                        0.296s (Max:     0.013s)
    Model enumeration time:              0.031s
    Time for BDD construction:           0.086s (Max:     0.009s)
Time for merge operator:                 0.202s
Time for coverage check:                 0.094s
  Time for BDD entailment checks:        0.079s
Total time for SMT solver (w/o itp):     0.327s

Number of path formula cache hits:   158428 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.913s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               337
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         728 (count: 44358, min: 0, max: 87, avg: 0.02)
Time for BDD node cleanup:                             0.022s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.726s
  Time for transition matches:                         0.380s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       150102 (count: 150102, min: 1, max: 1, avg: 1.00) [1 x 150102]

CPA algorithm statistics
------------------------
Number of iterations:            114796
Max size of waitlist:            21
Average size of waitlist:        11
Number of computed successors:   124460
Max successors for one state:    2
Number of times merged:          3738
Number of times stopped:         9130
Number of times breaked:         24

Total time for CPA algorithm:        21.257s (Max:     2.656s)
  Time for choose from waitlist:      0.204s
  Time for precision adjustment:      5.795s
  Time for transfer relation:        11.951s
  Time for merge operator:            0.555s
  Time for stop operator:             0.658s
  Time for adding to reached set:     0.573s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   24
Avg. length of target path (in blocks):                 775 (count: 24, min: 15, max: 46, avg: 32.29)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.103s
  Counterexample analysis:                             0.506s (Max:     0.041s, Calls: 24)
    Refinement sat check:                              0.253s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.039s
  Precision update:                                    0.031s
  ARG update:                                          0.505s

Length of refined path (in blocks):                     324 (count: 24, min: 11, max: 16, avg: 13.50)
Number of affected states:                              156 (count: 24, min: 4, max: 9, avg: 6.50)
Length (states) of path with itp 'true':                144 (count: 24, min: 6, max: 6, avg: 6.00)
Length (states) of path with itp non-trivial itp:       156 (count: 24, min: 4, max: 9, avg: 6.50)
Length (states) of path with itp 'false':                24 (count: 24, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 24, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             132 (count: 24, min: 3, max: 8, avg: 5.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                24
Number of successful refinements:     24
Number of failed refinements:         0
Max. size of reached set before ref.: 6394
Max. size of reached set after ref.:  16
Avg. size of reached set before ref.: 4690.21
Avg. size of reached set after ref.:  16.00

Total time for CEGAR algorithm:      22.654s
Time for refinements:                 1.393s
Average time for refinement:          0.058s
Max time for refinement:              0.146s

Code Coverage
-----------------------------
  Function coverage:      0.103
  Visited lines:          1463
  Total lines:            5511
  Line coverage:          0.265
  Visited conditions:     106
  Total conditions:       1138
  Condition coverage:     0.093

CPAchecker general statistics
-----------------------------
Number of program locations:     7477
Number of CFA edges:             8557
Number of relevant variables:    1435
Number of functions:             319
Number of loops:                 41
Size of reached set:             2921
  Number of reached locations:   387 (5%)
    Avg states per location:     7
    Max states per location:     105 (at node N467)
  Number of reached functions:   33 (10%)
  Number of partitions:          2913
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N4061 (before line 12856), Function main called from node N4047, stack depth 1 [5f61371d], stack [main]])
  Number of target states:       0
  Size of final wait list        15

Time for analysis setup:          7.620s
  Time for loading CPAs:          1.265s
  Time for loading parser:        0.634s
  Time for CFA construction:      5.560s
    Time for parsing file(s):     1.192s
    Time for AST to CFA:          2.105s
    Time for CFA sanity check:    0.553s
    Time for post-processing:     1.458s
      Time for var class.:        0.645s
Time for Analysis:               22.654s
CPU time for analysis:           22.650s
Total time for CPAchecker:       30.281s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.185s

Time for Garbage Collector:       0.955s (in 56 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 83MB (    79 MiB) max;     54MB (    52 MiB) avg;     86MB (    82 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
