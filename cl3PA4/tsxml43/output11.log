scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.14__complex_emg__linux-kernel-locking-mutex__drivers-net-ethernet-realtek-r8169_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_pxsb59gp/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6060: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 6191: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 6196: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 6206: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 6210: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8327: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 20153: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20173: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20176: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20178: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20376: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 22280: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 22293: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 22424: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 23854: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 24765: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 24766: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 24811: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 26722: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 26837: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26853: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26869: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26897: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26928: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26957: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26973: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 27003: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6779: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6820: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6549-6550: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6694: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6628: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6668: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6588: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23585: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23597: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23885: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9413: Function pointer *(tp->set_speed) with type int (*)(struct net_device *, u8 , u16 , u8 , u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            12819 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  11262 (88%)
  Because of loop head:            1195 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         362 (3%)
  Times precision was empty:       5391 (42%)
  Times precision was {false}:     175 (1%)
  Times result was cached:         6235 (49%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1018 (8%)
  Times result was 'false':        1103 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         11646
  BDD entailment checks:           1744
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       113
Number of predicates discovered:          12
Number of abstraction locations:          98
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         38586
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 32.34
Number of irrelevant predicates:          12768 (33%)
Number of preds handled by boolean abs:   4123 (11%)
  Total number of models for allsat:      1023
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.00

Time for post operator:                  2.347s
  Time for path formula creation:        2.171s
Time for strengthen operator:            0.192s
Time for prec operator:                  7.013s
  Time for abstraction:                  6.479s (Max:     0.025s, Count: 12819)
    Boolean abstraction:                 1.305s
    Solving time:                        0.886s (Max:     0.017s)
    Model enumeration time:              0.106s
    Time for BDD construction:           0.142s (Max:     0.012s)
Time for merge operator:                 0.122s
Time for coverage check:                 0.060s
  Time for BDD entailment checks:        0.048s
Total time for SMT solver (w/o itp):     0.992s

Number of path formula cache hits:   76006 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.624s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               855
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2587 (count: 14543, min: 0, max: 392, avg: 0.18)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.460s
Automaton transfers with branching:                0
Automaton transfer successors:                        71369 (count: 71369, min: 1, max: 1, avg: 1.00) [1 x 71369]

CPA algorithm statistics
------------------------
Number of iterations:            50447
Max size of waitlist:            198
Average size of waitlist:        86
Number of computed successors:   61977
Max successors for one state:    2
Number of times merged:          4951
Number of times stopped:         5567
Number of times breaked:         62

Total time for CPA algorithm:        15.010s (Max:     1.313s)
  Time for choose from waitlist:      0.123s
  Time for precision adjustment:      8.022s
  Time for transfer relation:         4.943s
  Time for merge operator:            0.422s
  Time for stop operator:             0.357s
  Time for adding to reached set:     0.347s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   62
Avg. length of target path (in blocks):                6490 (count: 62, min: 29, max: 158, avg: 104.68)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.341s
  Counterexample analysis:                             2.747s (Max:     0.070s, Calls: 62)
    Refinement sat check:                              1.394s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.115s
  Precision update:                                    0.099s
  ARG update:                                          0.270s

Length of refined path (in blocks):                    5308 (count: 62, min: 11, max: 112, avg: 85.61)
Number of affected states:                             2456 (count: 62, min: 4, max: 110, avg: 39.61)
Length (states) of path with itp 'true':               2790 (count: 62, min: 1, max: 87, avg: 45.00)
Length (states) of path with itp non-trivial itp:      2456 (count: 62, min: 4, max: 110, avg: 39.61)
Length (states) of path with itp 'false':                41 (count: 62, min: 0, max: 1, avg: 0.66)
Different non-trivial interpolants along paths:          21 (count: 62, min: 0, max: 1, avg: 0.34)
Equal non-trivial interpolants along paths:            2373 (count: 62, min: 3, max: 108, avg: 38.27)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                62
Number of successful refinements:     62
Number of failed refinements:         0
Max. size of reached set before ref.: 2280
Max. size of reached set after ref.:  1508
Avg. size of reached set before ref.: 1422.53
Avg. size of reached set after ref.:  554.84

Total time for CEGAR algorithm:      18.695s
Time for refinements:                 3.642s
Average time for refinement:          0.058s
Max time for refinement:              0.106s

Code Coverage
-----------------------------
  Function coverage:      0.124
  Visited lines:          1973
  Total lines:            11177
  Line coverage:          0.177
  Visited conditions:     200
  Total conditions:       3074
  Condition coverage:     0.065

CPAchecker general statistics
-----------------------------
Number of program locations:     16548
Number of CFA edges:             19650
Number of relevant variables:    2337
Number of functions:             718
Number of loops:                 33
Size of reached set:             1510
  Number of reached locations:   619 (4%)
    Avg states per location:     2
    Max states per location:     17 (at node N15185)
  Number of reached functions:   89 (12%)
  Number of partitions:          1502
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N11297 (before line 22015), Function main called from node N11266, stack depth 1 [560c3758], stack [main]])
  Number of target states:       0
  Size of final wait list        129

Time for analysis setup:         11.545s
  Time for loading CPAs:          1.284s
  Time for loading parser:        0.755s
  Time for CFA construction:      9.347s
    Time for parsing file(s):     1.746s
    Time for AST to CFA:          3.379s
    Time for CFA sanity check:    1.058s
    Time for post-processing:     3.029s
      Time for var class.:        1.316s
Time for Analysis:               18.696s
CPU time for analysis:           18.690s
Total time for CPAchecker:       30.252s
Total CPU time for CPAchecker:   30.220s
Time for statistics:              0.161s

Time for Garbage Collector:       0.809s (in 52 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                104MB (    99 MiB) max;     61MB (    58 MiB) avg;    112MB (   106 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     33MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8085MB (  7710 MiB) max;   8067MB (  7693 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
