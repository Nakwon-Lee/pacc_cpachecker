scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.14__complex_emg__linux-kernel-locking-mutex__drivers-net-ethernet-realtek-r8169_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lvtnh2_5/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6060: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 6191: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 6196: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 6206: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 6210: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8327: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 20153: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20173: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20176: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20178: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 20376: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 22280: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 22293: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 22424: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 23854: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 24765: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 24766: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 24811: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 26722: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 26837: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26853: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26869: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26897: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26928: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26957: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26973: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 27003: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6779: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6820: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6549-6550: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6694: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6628: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6668: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6588: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23585: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23597: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23885: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9413: Function pointer *(tp->set_speed) with type int (*)(struct net_device *, u8 , u16 , u8 , u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __compiletime_assert_1634 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_is_locked to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_ts_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7790: Ignoring function call through function pointer *(c->check): tmp = (*(c->check))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12772: Ignoring function call through function pointer *(tp->phy_reset_pending): tmp = (*(tp->phy_reset_pending))(tp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8429: Ignoring function call through function pointer *(tp->mdio_ops.read): tmp = (*(tp->mdio_ops.read))(tp, location); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7823: Unsupported feature (recursion): tmp = rtl_loop_wait(tp, c, &rtl_udelay, d, n, 1); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            93580 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  84537 (90%)
  Because of loop head:            7248 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1795 (2%)
  Times precision was empty:       31747 (34%)
  Times precision was {false}:     1410 (2%)
  Times result was cached:         56334 (60%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4089 (4%)
  Times result was 'false':        20846 (22%)
Number of strengthen sat checks:   0
Number of coverage checks:         76460
  BDD entailment checks:           11888
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       113
Number of predicates discovered:          29
Number of abstraction locations:          205
Max number of predicates per location:    27
Avg number of predicates per location:    8
Total predicates per abstraction:         599237
Max number of predicates per abstraction: 27
Avg number of predicates per abstraction: 108.97
Number of irrelevant predicates:          120166 (20%)
Number of preds handled by boolean abs:   42729 (7%)
  Total number of models for allsat:      8212
  Max number of models for allsat:        375
  Avg number of models for allsat:        2.01

Time for post operator:                  7.603s
  Time for path formula creation:        7.196s
Time for strengthen operator:            0.635s
Time for prec operator:                 41.653s
  Time for abstraction:                 39.841s (Max:     0.062s, Count: 93580)
    Boolean abstraction:                 5.830s
    Solving time:                        4.329s (Max:     0.014s)
    Model enumeration time:              0.714s
    Time for BDD construction:           0.461s (Max:     0.032s)
Time for merge operator:                 0.549s
Time for coverage check:                 0.061s
  Time for BDD entailment checks:        0.051s
Total time for SMT solver (w/o itp):     5.043s

Number of path formula cache hits:   529616 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.847s

Total number of created targets for pointer analysis: 281
   Number of created targets for uf: *unsigned_long_long_int is 14
   Number of created targets for uf: *unsigned_int is 12


Number of BDD nodes:                               36588
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       18727 (count: 80730, min: 0, max: 713, avg: 0.23)
Time for BDD node cleanup:                             0.029s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.181s
  Time for transition matches:                         0.549s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       519379 (count: 519379, min: 1, max: 1, avg: 1.00) [1 x 519379]

CPA algorithm statistics
------------------------
Number of iterations:            401067
Max size of waitlist:            216
Average size of waitlist:        90
Number of computed successors:   488900
Max successors for one state:    2
Number of times merged:          32286
Number of times stopped:         36260
Number of times breaked:         242

Total time for CPA algorithm:        68.544s (Max:     1.314s)
  Time for choose from waitlist:      0.382s
  Time for precision adjustment:     45.901s
  Time for transfer relation:        16.405s
  Time for merge operator:            1.369s
  Time for stop operator:             1.156s
  Time for adding to reached set:     1.220s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   242
Avg. length of target path (in blocks):               27693 (count: 242, min: 29, max: 171, avg: 114.43)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.193s
  Counterexample analysis:                             9.264s (Max:     0.080s, Calls: 242)
    Refinement sat check:                              4.664s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.015s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.244s
  Precision update:                                    0.307s
  ARG update:                                          1.048s

Length of refined path (in blocks):                   21376 (count: 242, min: 11, max: 120, avg: 88.33)
Number of affected states:                            16519 (count: 242, min: 4, max: 118, avg: 68.26)
Length (states) of path with itp 'true':               4615 (count: 242, min: 1, max: 87, avg: 19.07)
Length (states) of path with itp non-trivial itp:     16519 (count: 242, min: 4, max: 118, avg: 68.26)
Length (states) of path with itp 'false':               204 (count: 242, min: 0, max: 1, avg: 0.84)
Different non-trivial interpolants along paths:          47 (count: 242, min: 0, max: 1, avg: 0.19)
Equal non-trivial interpolants along paths:           16230 (count: 242, min: 3, max: 116, avg: 67.07)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                242
Number of successful refinements:     242
Number of failed refinements:         0
Max. size of reached set before ref.: 3797
Max. size of reached set after ref.:  1508
Avg. size of reached set before ref.: 1965.59
Avg. size of reached set after ref.:  193.85

Total time for CEGAR algorithm:      80.664s
Time for refinements:                12.026s
Average time for refinement:          0.049s
Max time for refinement:              0.109s

Code Coverage
-----------------------------
  Function coverage:      0.203
  Visited lines:          2500
  Total lines:            11177
  Line coverage:          0.224
  Visited conditions:     480
  Total conditions:       3074
  Condition coverage:     0.156

CPAchecker general statistics
-----------------------------
Number of program locations:     16548
Number of CFA edges:             19650
Number of relevant variables:    2337
Number of functions:             718
Number of loops:                 33
Size of reached set:             3034
  Number of reached locations:   1416 (9%)
    Avg states per location:     2
    Max states per location:     26 (at node N15185)
  Number of reached functions:   146 (20%)
  Number of partitions:          3023
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N11297 (before line 22015), Function main called from node N11266, stack depth 1 [560c3758], stack [main]])
  Number of target states:       0
  Size of final wait list        144

Time for analysis setup:         11.486s
  Time for loading CPAs:          1.594s
  Time for loading parser:        0.772s
  Time for CFA construction:      8.948s
    Time for parsing file(s):     1.689s
    Time for AST to CFA:          3.405s
    Time for CFA sanity check:    1.060s
    Time for post-processing:     2.672s
      Time for var class.:        1.242s
Time for Analysis:               80.664s
CPU time for analysis:           80.630s
Total time for CPAchecker:       92.156s
Total CPU time for CPAchecker:   92.080s
Time for statistics:              0.226s

Time for Garbage Collector:       3.060s (in 318 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                118MB (   112 MiB) max;     84MB (    81 MiB) avg;    120MB (   115 MiB) peak
Used non-heap memory:             48MB (    46 MiB) max;     44MB (    42 MiB) avg;     48MB (    46 MiB) peak
Allocated heap memory:           129MB (   123 MiB) max;    128MB (   122 MiB) avg
Allocated non-heap memory:        50MB (    48 MiB) max;     47MB (    44 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8080MB (  7706 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
