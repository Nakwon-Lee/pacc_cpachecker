scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.8-rc1-32_7a-drivers--usb--misc--sisusbvga--sisusbvga.ko-ldv_main0_sequence_infinite_withcheck_stateful_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_sqq0w6_j/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3668: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3671: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3674: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 3718-3719: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3722-3723: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3730-3731: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5319: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5322: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5325: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5354-5355: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5362-5363: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5366-5367: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (2UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5421-5422: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5425-5426: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5433-5434: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 7693: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 7696: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 7699: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7722-7723: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7730-7731: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7734-7735: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (2UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7759-7760: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7763-7764: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7771-7772: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7826-7827: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7830-7831: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7838-7839: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 8193: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 8196: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 8202: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8738: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10710: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10713: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10716: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12652: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_find_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3884: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            326640 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  252815 (77%)
  Because of loop head:            73699 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         126 (0%)
  Times precision was empty:       26445 (8%)
  Times precision was {false}:     8591 (3%)
  Times result was cached:         288818 (88%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2786 (1%)
  Times result was 'false':        3119 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         303534
  BDD entailment checks:           80588
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       160
Number of predicates discovered:          6
Number of abstraction locations:          226
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         641448
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 56.38
Number of irrelevant predicates:          562834 (88%)
Number of preds handled by boolean abs:   3691 (1%)
  Total number of models for allsat:      2778
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 72.154s
  Time for path formula creation:       71.195s
Time for strengthen operator:            2.119s
Time for prec operator:                107.827s
  Time for abstraction:                102.418s (Max:     3.636s, Count: 326640)
    Boolean abstraction:                20.974s
    Solving time:                       48.748s (Max:     3.594s)
    Model enumeration time:              0.697s
    Time for BDD construction:           0.118s (Max:     0.012s)
Time for merge operator:                 4.526s
Time for coverage check:                 0.174s
  Time for BDD entailment checks:        0.125s
Total time for SMT solver (w/o itp):    49.445s

Number of path formula cache hits:   1706353 (71%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    60.114s

Total number of created targets for pointer analysis: 404567
   Number of created targets for uf: *(struct_sisusb_usb_data)* is 21
   Number of created targets for uf: *signed_int is 1798
   Number of created targets for uf: *unsigned_char is 2753
   Number of created targets for uf: *signed_long_int is 475
   Number of created targets for uf: *char is 143
   Number of created targets for uf: *unsigned_int is 4


Number of BDD nodes:                               218
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5608 (count: 166921, min: 0, max: 690, avg: 0.03)
Time for BDD node cleanup:                             0.040s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.088s
  Time for transition matches:                         1.647s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      2098477 (count: 2098477, min: 1, max: 1, avg: 1.00) [1 x 2098477]

CPA algorithm statistics
------------------------
Number of iterations:            1285501
Max size of waitlist:            338
Average size of waitlist:        171
Number of computed successors:   1494152
Max successors for one state:    2
Number of times merged:          111473
Number of times stopped:         183673
Number of times breaked:         126

Total time for CPA algorithm:       230.585s (Max:    14.506s)
  Time for choose from waitlist:      0.863s
  Time for precision adjustment:    119.263s
  Time for transfer relation:        94.946s
  Time for merge operator:            6.204s
  Time for stop operator:             2.011s
  Time for adding to reached set:     3.022s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   126
Avg. length of target path (in blocks):              146833 (count: 126, min: 10, max: 1603, avg: 1165.34)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 651.734s
  Counterexample analysis:                           648.010s (Max:     7.559s, Calls: 126)
    Refinement sat check:                            360.518s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.099s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.340s
  Precision update:                                    0.163s
  ARG update:                                          2.428s

Length of refined path (in blocks):                   79588 (count: 125, min: 9, max: 1590, avg: 636.70)
Number of affected states:                            38942 (count: 125, min: 4, max: 1588, avg: 311.54)
Length (states) of path with itp 'true':              40521 (count: 125, min: 1, max: 717, avg: 324.17)
Length (states) of path with itp non-trivial itp:     38942 (count: 125, min: 4, max: 1588, avg: 311.54)
Length (states) of path with itp 'false':               125 (count: 125, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 125, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           38817 (count: 125, min: 3, max: 1587, avg: 310.54)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                126
Number of successful refinements:     125
Number of failed refinements:         0
Max. size of reached set before ref.: 18762
Max. size of reached set after ref.:  9890
Avg. size of reached set before ref.: 12970.73
Avg. size of reached set after ref.:  2615.61

Total time for CEGAR algorithm:     892.217s
Time for refinements:               661.373s
Average time for refinement:          5.248s
Max time for refinement:              8.753s

Code Coverage
-----------------------------
  Function coverage:      0.220
  Visited lines:          1867
  Total lines:            6075
  Line coverage:          0.307
  Visited conditions:     286
  Total conditions:       1530
  Condition coverage:     0.187

CPAchecker general statistics
-----------------------------
Number of program locations:     8157
Number of CFA edges:             9543
Number of relevant variables:    1551
Number of functions:             277
Number of loops:                 82
Size of reached set:             17799
  Number of reached locations:   918 (11%)
    Avg states per location:     19
    Max states per location:     256 (at node N1)
  Number of reached functions:   61 (22%)
  Number of partitions:          17759
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N795 (before line 4669), Function sisusb_recv_bulk_msg called from node N824, stack depth 8 [e3d2391], stack [main, sisusb_open, sisusb_init_gfxdevice, sisusb_set_default_mode, sisusb_setidxreg, sisusb_write_memio_byte, sisusb_send_packet, sisusb_recv_bulk_msg]])
  Number of target states:       1
  Size of final wait list        334

Time for analysis setup:          8.155s
  Time for loading CPAs:          1.161s
  Time for loading parser:        0.752s
  Time for CFA construction:      6.077s
    Time for parsing file(s):     1.274s
    Time for AST to CFA:          2.307s
    Time for CFA sanity check:    0.536s
    Time for post-processing:     1.752s
      Time for var class.:        0.964s
Time for Analysis:              892.217s
CPU time for analysis:          892.110s
Total time for CPAchecker:      900.377s
Total CPU time for CPAchecker:  900.250s
Time for statistics:              0.504s

Time for Garbage Collector:      16.528s (in 351 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                584MB (   557 MiB) max;    336MB (   321 MiB) avg;    596MB (   568 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           663MB (   633 MiB) max;    496MB (   473 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8424MB (  8034 MiB) max;   8357MB (  7970 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
