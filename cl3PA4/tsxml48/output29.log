scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-challenges/linux-3.8-rc1-32_7a-drivers--usb--misc--sisusbvga--sisusbvga.ko-ldv_main0_sequence_infinite_withcheck_stateful_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_fiv5etdp/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3668: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3671: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3674: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 3718-3719: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3722-3723: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3730-3731: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5319: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5322: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5325: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)userbuffer): "ebx");
      goto ldv_29773;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5354-5355: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5362-5363: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5366-5367: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (2UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)userbuffer): "ebx");
      goto ldv_29783;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5421-5422: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5425-5426: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5433-5434: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)userbuffer): "ebx");
      goto ldv_29794;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 7693: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 7696: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 7699: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((u8 *)buffer): "ebx");
      goto ldv_30185;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7722-7723: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7730-7731: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7734-7735: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (2UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" ((u16 *)buffer): "ebx");
      goto ldv_30196;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7759-7760: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7763-7764: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7771-7772: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30206;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7826-7827: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7830-7831: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7838-7839: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                           "c" ((u32 *)buffer): "ebx");
      goto ldv_30216;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 8193: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 8196: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 8202: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_30302;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8738: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10710: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10713: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10716: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6421;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12652: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_find_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3884: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            5195 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4334 (83%)
  Because of loop head:            826 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         35 (1%)
  Times precision was empty:       2103 (40%)
  Times precision was {false}:     477 (9%)
  Times result was cached:         1869 (36%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      746 (14%)
  Times result was 'false':        216 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         3252
  BDD entailment checks:           856
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       160
Number of predicates discovered:          5
Number of abstraction locations:          82
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         7901
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 6.46
Number of irrelevant predicates:          2473 (31%)
Number of preds handled by boolean abs:   1482 (19%)
  Total number of models for allsat:      740
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.99

Time for post operator:                  5.562s
  Time for path formula creation:        5.497s
Time for strengthen operator:            0.065s
Time for prec operator:                  9.434s
  Time for abstraction:                  9.125s (Max:     1.437s, Count: 5195)
    Boolean abstraction:                 5.057s
    Solving time:                        5.482s (Max:     1.336s)
    Model enumeration time:              0.170s
    Time for BDD construction:           0.035s (Max:     0.005s)
Time for merge operator:                 0.329s
Time for coverage check:                 0.025s
  Time for BDD entailment checks:        0.023s
Total time for SMT solver (w/o itp):     5.652s

Number of path formula cache hits:   17300 (53%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.204s

Total number of created targets for pointer analysis: 27750
   Number of created targets for uf: *(struct_sisusb_usb_data)* is 21
   Number of created targets for uf: *signed_int is 21
   Number of created targets for uf: *unsigned_char is 513
   Number of created targets for uf: *signed_long_int is 21
   Number of created targets for uf: *char is 143
   Number of created targets for uf: *unsigned_int is 403


Number of BDD nodes:                               215
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1526 (count: 9854, min: 0, max: 640, avg: 0.15)
Time for BDD node cleanup:                             0.013s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.221s
Automaton transfers with branching:                0
Automaton transfer successors:                        29653 (count: 29653, min: 1, max: 1, avg: 1.00) [1 x 29653]

CPA algorithm statistics
------------------------
Number of iterations:            18198
Max size of waitlist:            166
Average size of waitlist:        65
Number of computed successors:   21091
Max successors for one state:    2
Number of times merged:          1198
Number of times stopped:         1977
Number of times breaked:         35

Total time for CPA algorithm:        18.384s (Max:     7.274s)
  Time for choose from waitlist:      0.059s
  Time for precision adjustment:     10.000s
  Time for transfer relation:         7.068s
  Time for merge operator:            0.478s
  Time for stop operator:             0.198s
  Time for adding to reached set:     0.180s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   35
Avg. length of target path (in blocks):                1875 (count: 35, min: 10, max: 202, avg: 53.57)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.411s
  Counterexample analysis:                             3.170s (Max:     0.567s, Calls: 35)
    Refinement sat check:                              2.571s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.051s
  Precision update:                                    0.033s
  ARG update:                                          0.111s

Length of refined path (in blocks):                    1840 (count: 35, min: 9, max: 201, avg: 52.57)
Number of affected states:                             1434 (count: 35, min: 4, max: 199, avg: 40.97)
Length (states) of path with itp 'true':                371 (count: 35, min: 1, max: 191, avg: 10.60)
Length (states) of path with itp non-trivial itp:      1434 (count: 35, min: 4, max: 199, avg: 40.97)
Length (states) of path with itp 'false':                35 (count: 35, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 35, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1399 (count: 35, min: 3, max: 198, avg: 39.97)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                35
Number of successful refinements:     35
Number of failed refinements:         0
Max. size of reached set before ref.: 1189
Max. size of reached set after ref.:  1071
Avg. size of reached set before ref.: 374.74
Avg. size of reached set after ref.:  83.23

Total time for CEGAR algorithm:      21.928s
Time for refinements:                 3.541s
Average time for refinement:          0.101s
Max time for refinement:              0.589s

Code Coverage
-----------------------------
  Function coverage:      0.209
  Visited lines:          1755
  Total lines:            6075
  Line coverage:          0.289
  Visited conditions:     260
  Total conditions:       1530
  Condition coverage:     0.170

CPAchecker general statistics
-----------------------------
Number of program locations:     8157
Number of CFA edges:             9543
Number of relevant variables:    1551
Number of functions:             277
Number of loops:                 82
Size of reached set:             8695
  Number of reached locations:   808 (10%)
    Avg states per location:     10
    Max states per location:     120 (at node N1)
  Number of reached functions:   58 (21%)
  Number of partitions:          8695
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        161

Time for analysis setup:          8.332s
  Time for loading CPAs:          1.226s
  Time for loading parser:        0.716s
  Time for CFA construction:      6.229s
    Time for parsing file(s):     1.256s
    Time for AST to CFA:          2.330s
    Time for CFA sanity check:    0.582s
    Time for post-processing:     1.847s
      Time for var class.:        0.920s
Time for Analysis:               21.929s
CPU time for analysis:           21.920s
Total time for CPAchecker:       30.270s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.319s

Time for Garbage Collector:       0.611s (in 30 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 82MB (    78 MiB) max;     51MB (    49 MiB) avg;     86MB (    82 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    40 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8069MB (  7695 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
