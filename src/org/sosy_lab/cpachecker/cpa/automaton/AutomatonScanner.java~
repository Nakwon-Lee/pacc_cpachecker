/* The following code was generated by JFlex 1.6.1 */

package org.sosy_lab.cpachecker.cpa.automaton;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import org.sosy_lab.common.io.IO;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.sosy_lab.common.log.LogManager;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

@javax.annotation.Generated("JFlex")
@SuppressWarnings(value = { "all", "cast", "FallThrough" })
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = {"DLS_DEAD_LOCAL_STORE"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/nwlee8g/git/pacc_cpachecker/src/org/sosy_lab/cpachecker/cpa/automaton/Scanner.jflex</tt>
 */
class AutomatonScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CURLYEXPR = 4;
  public static final int SQUAREEXPR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\5\1\2\1\1\1\1\1\3\16\11\4\0\1\5\1\73"+
    "\1\70\1\14\1\10\1\0\1\75\1\0\1\26\1\27\1\7\1\77"+
    "\1\67\1\32\1\0\1\6\1\12\11\13\1\25\1\24\1\30\1\74"+
    "\1\31\2\0\1\33\1\43\1\47\1\42\1\41\1\57\1\60\1\56"+
    "\1\51\1\10\1\53\1\50\1\37\1\40\1\36\1\52\1\10\1\45"+
    "\1\44\1\35\1\34\1\46\1\10\1\54\1\55\1\10\1\72\1\100"+
    "\1\102\1\0\1\66\1\0\1\64\1\10\1\17\1\22\1\23\1\63"+
    "\2\10\1\15\2\10\1\20\1\10\1\16\3\10\1\62\1\65\1\61"+
    "\1\21\5\10\1\71\1\76\1\101\1\0\6\11\1\4\32\11\2\0"+
    "\4\10\4\0\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0"+
    "\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0"+
    "\1\10\1\0\1\10\21\0\160\11\5\10\1\0\2\10\2\0\4\10"+
    "\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10"+
    "\1\0\213\10\1\0\5\11\2\0\236\10\11\0\46\10\2\0\1\10"+
    "\7\0\47\10\7\0\1\10\1\0\55\11\1\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\11\10\0\33\10\5\0\3\10\15\0\5\11"+
    "\6\0\1\10\4\0\13\11\5\0\53\10\37\11\4\0\2\10\1\11"+
    "\143\10\1\0\1\10\10\11\1\0\6\11\2\10\2\11\1\0\4\11"+
    "\2\10\12\11\3\10\2\0\1\10\17\0\1\11\1\10\1\11\36\10"+
    "\33\11\2\0\131\10\13\11\1\10\16\0\12\11\41\10\11\11\2\10"+
    "\4\0\1\10\5\0\26\10\4\11\1\10\11\11\1\10\3\11\1\10"+
    "\5\11\22\0\31\10\3\11\104\0\1\10\1\0\13\10\67\0\33\11"+
    "\1\0\4\11\66\10\3\11\1\10\22\11\1\10\7\11\12\10\2\11"+
    "\2\0\12\11\1\0\7\10\1\0\7\10\1\0\3\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10"+
    "\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\1\10\10\0"+
    "\1\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10\7\0"+
    "\1\10\5\0\3\11\1\0\6\10\4\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0"+
    "\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\10\1\0"+
    "\1\10\7\0\14\11\3\10\1\11\13\0\3\11\1\0\11\10\1\0"+
    "\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0"+
    "\1\11\1\10\10\11\1\0\3\11\1\0\3\11\2\0\1\10\17\0"+
    "\2\10\2\11\2\0\12\11\1\0\1\10\17\0\3\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\10\0\2\11"+
    "\4\0\2\10\1\0\3\10\2\11\2\0\12\11\1\0\1\10\20\0"+
    "\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10"+
    "\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\10\6\0\1\11"+
    "\16\0\12\11\11\0\1\10\7\0\3\11\1\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\3\0\1\10\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\1\0\2\10\6\0\2\10\2\11"+
    "\2\0\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10"+
    "\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0\3\11"+
    "\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10\2\11\2\0"+
    "\12\11\1\0\2\10\17\0\2\11\1\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\1\10\7\11\1\0\3\11\1\0\4\11\1\10\10\0"+
    "\1\11\10\0\2\10\2\11\2\0\12\11\12\0\6\10\2\0\2\11"+
    "\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11"+
    "\15\0\60\10\1\11\2\10\7\11\4\0\10\10\10\11\1\0\12\11"+
    "\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10"+
    "\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10"+
    "\2\0\2\10\1\0\4\10\1\11\2\10\6\11\1\0\2\11\1\10"+
    "\2\0\5\10\1\0\1\10\1\0\6\11\2\0\12\11\2\0\4\10"+
    "\40\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\2\11\10\10\1\0\44\10\4\0\24\11\1\0"+
    "\2\11\5\10\13\11\1\0\44\11\11\0\1\11\71\0\53\10\24\11"+
    "\1\10\12\11\6\0\6\10\4\11\4\10\3\11\1\10\3\11\2\10"+
    "\7\11\3\10\4\11\15\10\14\11\1\10\17\11\2\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0"+
    "\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0"+
    "\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0"+
    "\113\10\3\0\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10"+
    "\3\11\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11"+
    "\14\0\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11"+
    "\41\0\3\11\2\0\12\11\6\0\130\10\10\0\51\10\1\11\1\10"+
    "\5\0\106\10\12\0\35\10\3\0\14\11\4\0\14\11\12\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\21\11\7\10\2\11\6\0"+
    "\12\11\46\0\27\10\5\11\4\0\65\10\12\11\1\0\35\11\2\0"+
    "\13\11\6\0\12\11\15\0\1\10\130\0\5\11\57\10\21\11\7\10"+
    "\4\0\12\11\21\0\11\11\14\0\3\11\36\10\15\11\2\10\12\11"+
    "\54\10\16\11\14\0\44\10\24\11\10\0\12\11\3\0\3\10\12\11"+
    "\44\10\122\0\3\11\1\0\25\11\4\10\1\11\4\10\3\11\2\10"+
    "\11\0\300\10\47\11\25\0\4\11\u0116\10\2\0\6\10\2\0\46\10"+
    "\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10"+
    "\1\0\7\10\16\0\5\11\30\0\1\1\1\1\5\11\20\0\2\10"+
    "\23\0\1\10\13\0\5\11\5\0\6\11\1\0\1\10\15\0\1\10"+
    "\20\0\15\10\3\0\33\10\25\0\15\11\4\0\1\11\3\0\14\11"+
    "\21\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10"+
    "\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0\57\10"+
    "\1\0\57\10\1\0\205\10\6\0\4\10\3\11\2\10\14\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\70\10\7\0\1\10\17\0\1\11"+
    "\27\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\40\11\57\0"+
    "\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0\5\10\2\0\5\10"+
    "\4\0\126\10\2\0\2\11\2\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\11\2\10\24\0\57\10\1\11\4\0\12\11\1\0\31\10\7\0"+
    "\1\11\120\10\2\11\45\0\11\10\2\0\147\10\2\0\4\10\1\0"+
    "\4\10\14\0\13\10\115\0\12\10\1\11\3\10\1\11\4\10\1\11"+
    "\27\10\5\11\20\0\1\10\7\0\64\10\14\0\2\11\62\10\21\11"+
    "\13\0\12\11\6\0\22\11\6\10\3\0\1\10\4\0\12\11\34\10"+
    "\10\11\2\0\27\10\15\11\14\0\35\10\3\0\4\11\57\10\16\11"+
    "\16\0\1\10\12\11\46\0\51\10\16\11\11\0\3\10\1\11\10\10"+
    "\2\11\2\0\12\11\6\0\27\10\3\0\1\10\1\11\4\0\60\10"+
    "\1\11\1\10\3\11\2\10\2\11\5\10\2\11\1\10\1\11\1\10"+
    "\30\0\3\10\2\0\13\10\5\11\2\0\3\10\2\11\12\0\6\10"+
    "\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0\43\10"+
    "\10\11\1\0\2\11\2\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0"+
    "\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0"+
    "\1\10\1\11\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0"+
    "\66\10\50\0\15\10\3\0\20\11\20\0\7\11\14\0\2\10\30\0"+
    "\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\11\4\0"+
    "\1\10\13\0\12\11\7\0\32\10\4\0\1\10\1\0\32\10\13\0"+
    "\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\3\0"+
    "\2\10\3\0\2\10\22\0\3\11\4\0\14\10\1\0\32\10\1\0"+
    "\23\10\1\0\2\10\1\0\17\10\2\0\16\10\42\0\173\10\105\0"+
    "\65\10\210\0\1\11\202\0\35\10\3\0\61\10\57\0\37\10\21\0"+
    "\33\10\65\0\36\10\2\0\44\10\4\0\10\10\1\0\5\10\52\0"+
    "\236\10\2\0\12\11\u0356\0\6\10\2\0\1\10\1\0\54\10\1\0"+
    "\2\10\3\0\1\10\2\0\27\10\252\0\26\10\12\0\32\10\106\0"+
    "\70\10\6\0\2\10\100\0\1\10\3\11\1\0\2\11\5\0\4\11"+
    "\4\10\1\0\3\10\1\0\33\10\4\0\3\11\4\0\1\11\40\0"+
    "\35\10\203\0\66\10\12\0\26\10\12\0\23\10\215\0\111\10\u03b7\0"+
    "\3\11\65\10\17\11\37\0\12\11\20\0\3\11\55\10\13\11\2\0"+
    "\1\11\22\0\31\10\7\0\12\11\6\0\3\11\44\10\16\11\1\0"+
    "\12\11\100\0\3\11\60\10\16\11\4\10\13\0\12\11\u04a6\0\53\10"+
    "\15\11\10\0\12\11\u0936\0\u036f\10\221\0\143\10\u0b9d\0\u042f\10\u33d1\0"+
    "\u0239\10\u04c7\0\105\10\13\0\1\10\56\11\20\0\4\11\15\10\u4060\0"+
    "\2\10\u2163\0\5\11\3\0\26\11\2\0\7\11\36\0\4\11\224\0"+
    "\3\11\u01bb\0\125\10\1\0\107\10\1\0\2\10\2\0\1\10\2\0"+
    "\2\10\2\0\4\10\1\0\14\10\1\0\1\10\1\0\7\10\1\0"+
    "\101\10\1\0\4\10\2\0\10\10\1\0\7\10\1\0\34\10\1\0"+
    "\4\10\1\0\5\10\1\0\1\10\3\0\7\10\1\0\u0154\10\2\0"+
    "\31\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0"+
    "\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0"+
    "\10\10\2\0\62\11\u1600\0\4\10\1\0\33\10\1\0\2\10\1\0"+
    "\1\10\2\0\1\10\1\0\12\10\1\0\4\10\1\0\1\10\1\0"+
    "\1\10\6\0\1\10\4\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\1\0\1\10\2\0"+
    "\4\10\1\0\7\10\1\0\4\10\1\0\4\10\1\0\1\10\1\0"+
    "\12\10\1\0\21\10\5\0\3\10\1\0\5\10\1\0\21\10\u1144\0"+
    "\ua6d7\10\51\0\u1035\10\13\0\336\10\u3fe2\0\u021e\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\1\1\3\2\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\21\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\1\1\22\1\23"+
    "\1\24\1\1\1\23\1\25\1\26\1\1\1\27\1\23"+
    "\1\1\1\30\3\0\1\31\14\3\1\32\15\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\3\0\11\3\1\44\22\3\2\0\6\3\1\45\5\3"+
    "\1\46\1\47\2\3\1\50\11\3\1\51\1\3\1\0"+
    "\7\3\1\52\1\3\1\53\1\54\1\55\1\56\2\3"+
    "\1\57\1\60\1\61\2\3\1\62\1\63\1\0\1\3"+
    "\1\64\1\65\1\66\1\3\1\67\1\3\1\70\5\3"+
    "\1\0\3\3\1\71\1\3\1\72\2\3\1\0\1\3"+
    "\1\73\1\74\3\3\1\75\1\76\2\3\1\77\4\3"+
    "\1\100\3\3\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u010c\0\u0218\0\u025b\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u010c\0\u0860\0\u010c\0\u08a3"+
    "\0\u08e6\0\u010c\0\u010c\0\u0929\0\u010c\0\u096c\0\u09af\0\u010c"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u010c\0\u0abb\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u01d5\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u010c\0\u010c"+
    "\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u01d5\0\u146a\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u01d5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u01d5\0\u01d5\0\u1c87\0\u1cca"+
    "\0\u01d5\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u01d5\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u01d5\0\u21c3\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u2206\0\u2249\0\u01d5\0\u01d5\0\u01d5\0\u228c"+
    "\0\u22cf\0\u2312\0\u01d5\0\u2355\0\u2398\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u23db\0\u01d5\0\u241e\0\u01d5\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u01d5\0\u26bc\0\u01d5"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u01d5\0\u01d5\0\u280b\0\u284e"+
    "\0\u2891\0\u2785\0\u01d5\0\u28d4\0\u2917\0\u01d5\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u01d5\0\u2a66\0\u2aa9\0\u2aec\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\2\6\1\10\1\5\1\11\1\5"+
    "\1\12\1\13\1\14\7\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\11\1\31\1\32\1\33\1\34\2\11\1\35\1\36"+
    "\1\37\1\40\4\11\1\41\1\42\1\43\1\11\1\44"+
    "\3\11\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\3\5\2\56\2\5\64\56\1\57\7\56"+
    "\1\60\2\56\2\61\1\62\1\63\74\61\1\64\1\65"+
    "\1\61\2\66\2\5\74\66\1\67\1\66\1\70\105\0"+
    "\1\6\106\0\1\71\1\72\77\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\34\11\26\0\2\13\104\0\1\73"+
    "\116\0\1\74\55\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\1\11\1\75\7\11\1\76\22\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\11\11\1\77\22\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\1\100"+
    "\11\11\1\101\21\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\10\11\1\102\23\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\1\103\2\11\1\104\30\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\5\11"+
    "\1\105\4\11\1\106\1\107\5\11\1\110\12\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\3\11\1\111"+
    "\30\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\12\11\1\112\21\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\2\11\1\113\31\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\3\11\1\114\17\11\1\115"+
    "\10\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\1\116\2\11\1\117\30\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\5\11\1\120\3\11\1\121\22\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\12\11"+
    "\1\122\21\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\1\123\33\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\3\11\1\124\30\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\27\11\1\125\4\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\31\11\1\126"+
    "\2\11\110\0\1\127\102\0\1\130\103\0\1\131\103\0"+
    "\1\132\4\0\2\56\2\0\64\56\1\0\7\56\1\0"+
    "\2\56\16\0\1\62\42\0\1\133\1\63\5\0\1\134"+
    "\7\0\1\135\2\0\2\61\2\0\74\61\2\0\1\61"+
    "\16\0\1\62\42\0\1\133\1\63\15\0\1\135\1\136"+
    "\1\0\2\66\2\0\74\66\1\0\1\66\17\0\1\62"+
    "\42\0\1\133\1\63\15\0\1\135\1\0\1\137\1\71"+
    "\2\6\1\7\1\6\76\71\7\140\1\141\73\140\16\0"+
    "\1\142\70\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\2\11\1\143\31\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\11\11\1\144\22\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\6\11\1\145\25\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\12\11\1\146"+
    "\21\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\1\11\1\147\32\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\11\11\1\150\22\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\2\11\1\151\31\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\7\11\1\152"+
    "\24\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\2\11\1\153\4\11\1\154\24\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\12\11\1\155\21\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\1\156\33\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\16\11"+
    "\1\157\15\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\6\11\1\160\25\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\1\161\2\11\1\162\30\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\5\11\1\163"+
    "\5\11\1\164\20\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\6\11\1\165\25\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\10\11\1\166\23\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\14\11\1\167"+
    "\17\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\16\11\1\170\15\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\33\11\1\171\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\16\11\1\172\15\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\15\11\1\173\16\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\2\11"+
    "\1\174\31\11\20\0\1\11\3\0\4\11\1\0\4\11"+
    "\1\175\2\11\7\0\34\11\20\0\1\11\3\0\4\11"+
    "\1\0\3\11\1\176\3\11\7\0\34\11\14\0\7\140"+
    "\1\177\73\140\6\0\1\6\1\141\112\0\1\200\67\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\3\11\1\201"+
    "\30\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\1\11\1\202\4\11\1\203\25\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\1\204\23\11\1\205\7\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\25\11"+
    "\1\206\6\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\6\11\1\207\25\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\6\11\1\210\25\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\14\11\1\211\17\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\16\11"+
    "\1\212\15\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\12\11\1\213\21\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\3\11\1\214\30\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\15\11\1\215\16\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\2\11"+
    "\1\216\31\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\1\217\33\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\2\11\1\220\31\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\17\11\1\221\14\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\2\11\1\222"+
    "\31\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\6\11\1\223\25\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\14\11\1\224\17\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\6\11\1\225\25\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\1\226\33\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\2\11"+
    "\1\227\31\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\2\11\1\230\31\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\5\11\1\231\26\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\11\11\1\232\22\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\3\11"+
    "\1\233\30\11\20\0\1\11\3\0\4\11\1\0\6\11"+
    "\1\207\7\0\34\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\32\11\1\234\1\11\14\0\6\140\1\6"+
    "\1\177\73\140\20\0\1\235\66\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\4\11\1\236\27\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\4\11\1\237\27\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\12\11"+
    "\1\240\21\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\15\11\1\241\16\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\16\11\1\242\15\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\6\11\1\243\25\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\12\11"+
    "\1\244\21\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\23\11\1\245\10\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\24\11\1\246\7\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\22\11\1\247\11\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\12\11"+
    "\1\250\21\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\20\11\1\251\13\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\6\11\1\252\25\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\12\11\1\253\21\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\12\11"+
    "\1\254\21\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\20\11\1\255\13\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\15\11\1\256\16\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\15\11\1\257\16\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\16\11"+
    "\1\260\15\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\1\261\33\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\2\11\1\262\31\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\6\11\1\263\25\11\20\0"+
    "\1\11\3\0\4\11\1\0\6\11\1\263\7\0\34\11"+
    "\35\0\1\264\65\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\1\265\33\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\6\11\1\266\25\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\2\11\1\267\31\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\15\11\1\270"+
    "\16\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\12\11\1\271\21\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\2\11\1\272\31\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\13\11\1\273\20\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\22\11\1\274"+
    "\11\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\3\11\1\275\30\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\11\11\1\276\22\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\1\277\33\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\12\11\1\300\21\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\3\11"+
    "\1\301\30\11\36\0\1\302\64\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\2\11\1\303\31\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\11\11\1\304\22\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\6\11"+
    "\1\305\25\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\15\11\1\306\16\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\33\11\1\307\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\15\11\1\310\16\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\25\11\1\311"+
    "\6\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\5\11\1\312\26\11\37\0\1\313\63\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\3\11\1\314\30\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\2\11\1\315"+
    "\31\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\12\11\1\316\21\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\15\11\1\317\16\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\6\11\1\320\25\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\14\11\1\321"+
    "\17\11\14\0\1\322\4\0\76\322\4\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\5\11\1\323\26\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\16\11\1\324"+
    "\15\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\2\11\1\325\31\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\6\11\1\326\25\11\20\0\1\11\3\0"+
    "\4\11\1\0\7\11\7\0\5\11\1\327\26\11\20\0"+
    "\1\11\3\0\4\11\1\0\7\11\7\0\33\11\1\330"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\6\11"+
    "\1\331\25\11\20\0\1\11\3\0\4\11\1\0\7\11"+
    "\7\0\11\11\1\332\22\11\20\0\1\11\3\0\4\11"+
    "\1\0\7\11\7\0\11\11\1\333\22\11\20\0\1\11"+
    "\3\0\4\11\1\0\7\11\7\0\2\11\1\334\31\11"+
    "\20\0\1\11\3\0\4\11\1\0\7\11\7\0\1\335"+
    "\33\11\20\0\1\11\3\0\4\11\1\0\7\11\7\0"+
    "\2\11\1\336\31\11\20\0\1\11\3\0\4\11\1\0"+
    "\7\11\7\0\6\11\1\337\25\11\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11055];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\3\1\1\11\2\1\6\11\22\1\4\11"+
    "\4\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\2\1\1\11\3\0\1\11\32\1\11\11\3\0\34\1"+
    "\2\0\34\1\1\0\26\1\1\0\15\1\1\0\10\1"+
    "\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack<ZzFlexStreamInfo> zzStreams
    = new java.util.Stack<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer, 
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, int yychar, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
  private StringBuilder string = new StringBuilder();
  private ComplexSymbolFactory sf;
  private LogManager logger;
  private final List<Path> scannedFiles = new ArrayList<>();
  private final Deque<Path> filesStack = new ArrayDeque<>();

  public AutomatonScanner(java.io.Reader r, Path file, LogManager logger, ComplexSymbolFactory sf) {
    this(r);
    filesStack.push(file);
    this.sf = sf;
    this.logger = logger;
  }
   
  private Path getFile(String pYytext) throws FileNotFoundException {
    assert pYytext.startsWith("#include ");
    String fileName = pYytext.replaceFirst("#include ", "").trim();
    
    Path file = Paths.get(fileName);
    Path currentFile = filesStack.peek();
    file = currentFile.resolveSibling(file);

    if (scannedFiles.contains(file)) {
      logger.log(Level.WARNING, "File \"" + file + "\" was referenced multiple times. Redundant or cyclic references were ignored.");
      return null;
    }

    IO.checkReadableFile(file);
    scannedFiles.add(file);
    filesStack.push(file);
    return file;
  }
  
  private Location getStartLocation() {
    return new Location(filesStack.peek().toString(), yyline+1,yycolumn+1-yylength());
  }

  private Location getEndLocation() {
    return new Location(filesStack.peek().toString(), yyline+1,yycolumn+1);
  }
  
  private Symbol symbol(String name, int sym) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation());
  }

  private Symbol symbol(String name, int sym, String val) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation(), val);
  }
  
  private void error() throws IOException {
    Location start = getStartLocation();
    StringBuilder msg = new StringBuilder();
    msg.append(filesStack.getLast().toString());
    msg.append(" (Illegal character <");
    msg.append(yytext());
    msg.append("> at column ");
    msg.append(start.getColumn());
    msg.append(" in line ");
    msg.append(start.getLine());
    if (filesStack.size() != 1) {
      msg.append(" of ");
      msg.append(start.getUnit());
    }
    msg.append(")");
    throw new IOException(msg.toString());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AutomatonScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2894) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {      
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (yymoreStreams()) { yypopStream(); filesStack.pop(); } else return symbol("EOF", AutomatonSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error();
            }
          case 66: break;
          case 2: 
            { /* ignore */
            }
          case 67: break;
          case 3: 
            { return symbol("ID", AutomatonSym.IDENTIFIER, yytext());
            }
          case 68: break;
          case 4: 
            { return symbol("INT", AutomatonSym.INTEGER_LITERAL, yytext());
            }
          case 69: break;
          case 5: 
            { return symbol(";", AutomatonSym.SEMICOLON);
            }
          case 70: break;
          case 6: 
            { return symbol(":", AutomatonSym.COLON);
            }
          case 71: break;
          case 7: 
            { return symbol("(", AutomatonSym.OPEN_BRACKETS);
            }
          case 72: break;
          case 8: 
            { return symbol(")", AutomatonSym.CLOSE_BRACKETS);
            }
          case 73: break;
          case 9: 
            { return symbol("<", AutomatonSym.OPEN_ANGLE_BRACKETS);
            }
          case 74: break;
          case 10: 
            { return symbol(">", AutomatonSym.CLOSE_ANGLE_BRACKETS);
            }
          case 75: break;
          case 11: 
            { return symbol("-", AutomatonSym.MINUS);
            }
          case 76: break;
          case 12: 
            { return symbol("COMMA", AutomatonSym.COMMA);
            }
          case 77: break;
          case 13: 
            { string.setLength(0); yybegin(STRING);
            }
          case 78: break;
          case 14: 
            { string.setLength(0); yybegin(CURLYEXPR);
            }
          case 79: break;
          case 15: 
            { string.setLength(0); yybegin(SQUAREEXPR);
            }
          case 80: break;
          case 16: 
            { return symbol("!", AutomatonSym.EXCLAMATION);
            }
          case 81: break;
          case 17: 
            { return symbol("=", AutomatonSym.EQ);
            }
          case 82: break;
          case 18: 
            { return symbol("+", AutomatonSym.PLUS);
            }
          case 83: break;
          case 19: 
            { string.append( yytext() );
            }
          case 84: break;
          case 20: 
            { yybegin(YYINITIAL); 
                                   return symbol("STRING", AutomatonSym.STRING_LITERAL, 
                                   string.toString());
            }
          case 85: break;
          case 21: 
            { string.append('\n');
            }
          case 86: break;
          case 22: 
            { string.append('\r');
            }
          case 87: break;
          case 23: 
            { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.CURLYEXPR, 
                                   string.toString());
            }
          case 88: break;
          case 24: 
            { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.SQUAREEXPR, 
                                   string.toString());
            }
          case 89: break;
          case 25: 
            { return symbol("->", AutomatonSym.ARROW);
            }
          case 90: break;
          case 26: 
            { return symbol("DO", AutomatonSym.DO);
            }
          case 91: break;
          case 27: 
            { return symbol("!=", AutomatonSym.NEQ);
            }
          case 92: break;
          case 28: 
            { return symbol("==", AutomatonSym.EQEQ);
            }
          case 93: break;
          case 29: 
            { return symbol("&&", AutomatonSym.AND);
            }
          case 94: break;
          case 30: 
            { return symbol("||", AutomatonSym.OR);
            }
          case 95: break;
          case 31: 
            { string.append('\t');
            }
          case 96: break;
          case 32: 
            { string.append('"');
            }
          case 97: break;
          case 33: 
            { string.append('\\');
            }
          case 98: break;
          case 34: 
            { string.append('}');
            }
          case 99: break;
          case 35: 
            { string.append(']');
            }
          case 100: break;
          case 36: 
            { return symbol("LABEL", AutomatonSym.END);
            }
          case 101: break;
          case 37: 
            { return symbol("TRUE", AutomatonSym.TRUE);
            }
          case 102: break;
          case 38: 
            { return symbol("EVAL", AutomatonSym.EVAL);
            }
          case 103: break;
          case 39: 
            { return symbol("EXIT", AutomatonSym.EXIT);
            }
          case 104: break;
          case 40: 
            { return symbol("STOP", AutomatonSym.STOP);
            }
          case 105: break;
          case 41: 
            { return symbol("GOTO", AutomatonSym.GOTO);
            }
          case 106: break;
          case 42: 
            { return symbol("MATCH", AutomatonSym.MATCH);
            }
          case 107: break;
          case 43: 
            { return symbol("ENTRY", AutomatonSym.ENTRY);
            }
          case 108: break;
          case 44: 
            { return symbol("ERROR", AutomatonSym.ERROR);
            }
          case 109: break;
          case 45: 
            { return symbol("BREAK", AutomatonSym.BREAK);
            }
          case 110: break;
          case 46: 
            { return symbol("STATE", AutomatonSym.STATE);
            }
          case 111: break;
          case 47: 
            { return symbol("EVAL", AutomatonSym.CHECK);
            }
          case 112: break;
          case 48: 
            { return symbol("LABEL", AutomatonSym.LABEL);
            }
          case 113: break;
          case 49: 
            { return symbol("LOCAL", AutomatonSym.LOCAL);
            }
          case 114: break;
          case 50: 
            { return symbol("PRINT", AutomatonSym.PRINT);
            }
          case 115: break;
          case 51: 
            { return symbol("FALSE", AutomatonSym.FALSE);
            }
          case 116: break;
          case 52: 
            { return symbol("ASSUME", AutomatonSym.ASSUME);
            }
          case 117: break;
          case 53: 
            { return symbol("ASSERT", AutomatonSym.ASSERT);
            }
          case 118: break;
          case 54: 
            { return symbol("USEALL", AutomatonSym.USEALL);
            }
          case 119: break;
          case 55: 
            { return symbol("TARGET", AutomatonSym.TARGET);
            }
          case 120: break;
          case 56: 
            { return symbol("MODIFY", AutomatonSym.MODIFY);
            }
          case 121: break;
          case 57: 
            { return symbol("CONTROL", AutomatonSym.CONTROL);
            }
          case 122: break;
          case 58: 
            { return symbol("INITIAL", AutomatonSym.INITIAL);
            }
          case 123: break;
          case 59: 
            { return symbol("USEFIRST", AutomatonSym.USEFIRST);
            }
          case 124: break;
          case 60: 
            { return symbol("OBSERVER", AutomatonSym.OBSERVER);
            }
          case 125: break;
          case 61: 
            { Path file = getFile(yytext()); 
          if (file != null) {
            yypushStream(Files.newBufferedReader(file, StandardCharsets.US_ASCII));
          }
            }
          case 126: break;
          case 62: 
            { return symbol("AUTOMATON", AutomatonSym.AUTOMATON);
            }
          case 127: break;
          case 63: 
            { return symbol("PRINTONCE", AutomatonSym.PRINTONCE);
            }
          case 128: break;
          case 64: 
            { return symbol("COVERS_LINES", AutomatonSym.COVERS_LINES);
            }
          case 129: break;
          case 65: 
            { return symbol("IS_TARGET_STATE", AutomatonSym.IS_TARGET_STATE);
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
