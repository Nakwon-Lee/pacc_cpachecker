// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/org/sosy_lab/cpachecker/cpa/automaton/Scanner.jflex

// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

package org.sosy_lab.cpachecker.cpa.automaton;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.logging.Level;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import org.sosy_lab.common.io.IO;
import org.sosy_lab.common.log.LogManager;

@javax.annotation.processing.Generated("JFlex")
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings({"FallThrough", "all", "cast"})
final class AutomatonScanner implements java_cup.runtime.Scanner {
// This sekeleton code was taken from JFlex.
// According to https://jflex.de/copying.html, the generated code inherits the license only from
// the specification (the .jflex file), so the license of this file does not apply to it.
//
// SPDX-FileCopyrightText: Gerwin Klein, Steve Rowe, Regis Decamp, Google LLC
//
// SPDX-License-Identifier: BSD-3-Clause

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;
  private static final int STRING = 2;
  private static final int CURLYEXPR = 4;
  private static final int SQUAREEXPR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\5\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\5\1\21\1\22"+
    "\11\23\1\24\1\25\1\26\1\27\1\30\2\5\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\11\1\42\1\43\1\44\1\45\1\46\1\47\1\11"+
    "\1\50\1\51\1\52\1\53\1\54\1\11\1\55\1\56"+
    "\1\11\1\57\1\60\1\61\1\5\1\62\1\5\1\63"+
    "\1\11\1\64\1\65\1\66\1\67\2\11\1\70\2\11"+
    "\1\71\1\11\1\72\3\11\1\73\1\74\1\75\1\76"+
    "\5\11\1\77\1\100\1\101\1\5\6\0\1\102\32\0"+
    "\2\5\4\11\4\5\1\11\2\5\1\0\7\5\1\11"+
    "\4\5\1\11\5\5\27\11\1\5\37\11\1\5\u01ca\11"+
    "\4\5\14\11\16\5\5\11\7\5\1\11\1\5\1\11"+
    "\21\5\160\0\5\11\1\5\2\11\2\5\4\11\1\5"+
    "\1\11\6\5\1\11\1\5\3\11\1\5\1\11\1\5"+
    "\24\11\1\5\123\11\1\5\213\11\1\5\5\0\2\5"+
    "\246\11\1\5\46\11\2\5\1\11\6\5\51\11\6\5"+
    "\1\11\1\5\55\0\1\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\0\10\5\33\11\4\5\4\11\15\5"+
    "\6\0\5\5\1\11\4\5\13\0\1\5\1\0\3\5"+
    "\53\11\37\0\4\5\2\11\1\0\143\11\1\5\1\11"+
    "\10\0\1\5\6\0\2\11\2\0\1\5\4\0\2\11"+
    "\12\0\3\11\2\5\1\11\17\5\1\0\1\11\1\0"+
    "\36\11\33\0\2\5\131\11\13\0\1\11\16\5\12\0"+
    "\41\11\11\0\2\11\4\5\1\11\2\5\1\0\30\11"+
    "\4\0\1\11\11\0\1\11\3\0\1\11\5\0\22\5"+
    "\31\11\3\0\4\5\13\11\65\5\25\11\1\5\22\11"+
    "\13\5\61\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\2\0\2\5\12\0\1\5\20\11\3\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\1\11\3\5\4\11\2\5\1\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\1\11\10\5\1\0\4\5\2\11"+
    "\1\5\3\11\2\0\2\5\12\0\4\11\7\5\2\11"+
    "\1\5\1\0\2\5\3\0\1\5\6\11\4\5\2\11"+
    "\2\5\26\11\1\5\7\11\1\5\2\11\1\5\2\11"+
    "\1\5\2\11\2\5\1\0\1\5\5\0\4\5\2\0"+
    "\2\5\3\0\3\5\1\0\7\5\4\11\1\5\1\11"+
    "\7\5\14\0\3\11\1\0\13\5\3\0\1\5\11\11"+
    "\1\5\3\11\1\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\5\11\2\5\1\0\1\11\10\0\1\5\3\0"+
    "\1\5\3\0\2\5\1\11\17\5\2\11\2\0\2\5"+
    "\12\0\1\5\1\11\7\5\1\11\6\0\1\5\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\2\11\1\5\5\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\7\5\3\0\4\5\2\11"+
    "\1\5\3\11\2\0\2\5\12\0\1\5\1\11\20\5"+
    "\1\0\1\11\1\5\6\11\3\5\3\11\1\5\4\11"+
    "\3\5\2\11\1\5\1\11\1\5\2\11\3\5\2\11"+
    "\3\5\3\11\3\5\14\11\4\5\5\0\3\5\3\0"+
    "\1\5\4\0\2\5\1\11\6\5\1\0\16\5\12\0"+
    "\11\5\1\11\6\5\5\0\10\11\1\5\3\11\1\5"+
    "\27\11\1\5\20\11\3\5\1\11\7\0\1\5\3\0"+
    "\1\5\4\0\7\5\2\0\1\5\3\11\5\5\2\11"+
    "\2\0\2\5\12\0\20\5\1\11\3\0\1\5\10\11"+
    "\1\5\3\11\1\5\27\11\1\5\12\11\1\5\5\11"+
    "\2\5\1\0\1\11\7\0\1\5\3\0\1\5\4\0"+
    "\7\5\2\0\7\5\1\11\1\5\2\11\2\0\2\5"+
    "\12\0\1\5\2\11\15\5\4\0\11\11\1\5\3\11"+
    "\1\5\51\11\2\0\1\11\7\0\1\5\3\0\1\5"+
    "\4\0\1\11\5\5\3\11\1\0\7\5\3\11\2\0"+
    "\2\5\12\0\12\5\6\11\1\5\3\0\1\5\22\11"+
    "\3\5\30\11\1\5\11\11\1\5\1\11\2\5\7\11"+
    "\3\5\1\0\4\5\6\0\1\5\1\0\1\5\10\0"+
    "\6\5\12\0\2\5\2\0\15\5\60\11\1\0\2\11"+
    "\7\0\4\5\10\11\10\0\1\5\12\0\47\5\2\11"+
    "\1\5\1\11\1\5\5\11\1\5\30\11\1\5\1\11"+
    "\1\5\12\11\1\0\2\11\11\0\1\11\2\5\5\11"+
    "\1\5\1\11\1\5\6\0\2\5\12\0\2\5\4\11"+
    "\40\5\1\11\27\5\2\0\6\5\12\0\13\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\2\0\10\11\1\5"+
    "\44\11\4\5\24\0\1\5\2\0\5\11\13\0\1\5"+
    "\44\0\11\5\1\0\71\5\53\11\24\0\1\11\12\0"+
    "\6\5\6\11\4\0\4\11\3\0\1\11\3\0\2\11"+
    "\7\0\3\11\4\0\15\11\14\0\1\11\17\0\2\5"+
    "\46\11\1\5\1\11\5\5\1\11\2\5\53\11\1\5"+
    "\115\11\1\5\4\11\2\5\7\11\1\5\1\11\1\5"+
    "\4\11\2\5\51\11\1\5\4\11\2\5\41\11\1\5"+
    "\4\11\2\5\7\11\1\5\1\11\1\5\4\11\2\5"+
    "\17\11\1\5\71\11\1\5\4\11\2\5\103\11\2\5"+
    "\3\0\40\5\20\11\20\5\126\11\2\5\6\11\3\5"+
    "\u016c\11\2\5\21\11\1\5\32\11\5\5\113\11\3\5"+
    "\13\11\7\5\15\11\1\5\4\11\3\0\13\5\22\11"+
    "\3\0\13\5\22\11\2\0\14\5\15\11\1\5\3\11"+
    "\1\5\2\0\14\5\64\11\40\0\3\5\1\11\3\5"+
    "\2\11\1\0\2\5\12\0\41\5\4\0\1\5\12\0"+
    "\6\5\131\11\7\5\5\11\2\0\42\11\1\0\1\11"+
    "\5\5\106\11\12\5\37\11\1\5\14\0\4\5\14\0"+
    "\12\5\12\0\36\11\2\5\5\11\13\5\54\11\4\5"+
    "\32\11\6\5\12\0\46\5\27\11\5\0\4\5\65\11"+
    "\12\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
    "\1\11\10\5\16\0\1\5\2\0\77\5\5\0\57\11"+
    "\21\0\7\11\4\5\12\0\21\5\11\0\14\5\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\5\44\11"+
    "\24\0\10\5\12\0\3\5\3\11\12\0\44\11\2\5"+
    "\11\11\7\5\53\11\2\5\3\11\20\5\3\0\1\5"+
    "\25\0\4\11\1\0\6\11\1\0\2\11\3\0\1\11"+
    "\5\5\300\11\72\0\1\5\5\0\26\11\2\5\6\11"+
    "\2\5\46\11\2\5\6\11\2\5\10\11\1\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\37\11\2\5\65\11"+
    "\1\5\7\11\1\5\1\11\3\5\3\11\1\5\7\11"+
    "\3\5\4\11\2\5\6\11\4\5\15\11\5\5\3\11"+
    "\1\5\7\11\16\5\5\0\30\5\2\3\5\0\20\5"+
    "\2\11\23\5\1\11\13\5\5\0\1\5\12\0\1\5"+
    "\1\11\15\5\1\11\20\5\15\11\3\5\40\11\20\5"+
    "\15\0\4\5\1\0\3\5\14\0\21\5\1\11\4\5"+
    "\1\11\2\5\12\11\1\5\1\11\3\5\5\11\6\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\4\11\1\5"+
    "\13\11\2\5\4\11\5\5\5\11\4\5\1\11\21\5"+
    "\51\11\u0177\5\57\11\1\5\57\11\1\5\205\11\6\5"+
    "\4\11\3\0\2\11\14\5\46\11\1\5\1\11\5\5"+
    "\1\11\2\5\70\11\7\5\1\11\17\5\1\0\27\11"+
    "\11\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\40\0\57\5\1\11\325\5\3\11\31\5\11\11"+
    "\6\0\1\5\5\11\2\5\5\11\4\5\126\11\2\5"+
    "\2\0\2\5\3\11\1\5\132\11\1\5\4\11\5\5"+
    "\53\11\1\5\136\11\21\5\40\11\60\5\320\11\100\5"+
    "\375\11\3\5\215\11\103\5\56\11\2\5\15\11\3\5"+
    "\20\11\12\0\2\11\24\5\57\11\1\0\4\5\12\0"+
    "\1\5\37\11\2\0\120\11\2\0\45\5\11\11\2\5"+
    "\147\11\2\5\65\11\2\5\11\11\52\5\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\5\1\0"+
    "\13\5\1\11\7\5\64\11\14\5\2\0\62\11\22\0"+
    "\12\5\12\0\6\5\22\0\6\11\3\5\1\11\1\5"+
    "\2\11\13\0\34\11\10\0\2\5\27\11\15\0\14\5"+
    "\35\11\3\5\4\0\57\11\16\0\16\5\1\11\12\0"+
    "\6\5\5\11\1\0\12\11\12\0\5\11\1\5\51\11"+
    "\16\0\11\5\3\11\1\0\10\11\2\0\2\5\12\0"+
    "\6\5\27\11\3\5\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\5\3\11\2\5\13\11\5\0\2\5\3\11\2\0"+
    "\12\5\6\11\2\5\6\11\2\5\6\11\11\5\7\11"+
    "\1\5\7\11\1\5\53\11\1\5\16\11\6\5\163\11"+
    "\10\0\1\5\2\0\2\5\12\0\6\5\244\11\14\5"+
    "\27\11\4\5\61\11\4\5\u0100\103\156\11\2\5\152\11"+
    "\46\5\7\11\14\5\5\11\5\5\1\11\1\0\12\11"+
    "\1\5\15\11\1\5\5\11\1\5\1\11\1\5\2\11"+
    "\1\5\2\11\1\5\154\11\41\5\153\11\22\5\100\11"+
    "\2\5\66\11\50\5\15\11\3\5\20\0\20\5\20\0"+
    "\3\5\2\11\30\5\3\11\31\5\1\11\6\5\5\11"+
    "\1\5\207\11\2\5\1\0\4\5\1\11\13\5\12\0"+
    "\7\5\32\11\4\5\1\11\1\5\32\11\13\5\131\11"+
    "\3\5\6\11\2\5\6\11\2\5\6\11\2\5\3\11"+
    "\3\5\2\11\3\5\2\11\22\5\3\0\4\5\14\11"+
    "\1\5\32\11\1\5\23\11\1\5\2\11\1\5\17\11"+
    "\2\5\16\11\42\5\173\11\105\5\65\11\210\5\1\0"+
    "\202\5\35\11\3\5\61\11\17\5\1\0\37\5\40\11"+
    "\15\5\36\11\5\5\46\11\5\0\5\5\36\11\2\5"+
    "\44\11\4\5\10\11\1\5\5\11\52\5\236\11\2\5"+
    "\12\0\6\5\44\11\4\5\44\11\4\5\50\11\10\5"+
    "\64\11\234\5\67\11\11\5\26\11\12\5\10\11\230\5"+
    "\6\11\2\5\1\11\1\5\54\11\1\5\2\11\3\5"+
    "\1\11\2\5\27\11\12\5\27\11\11\5\37\11\101\5"+
    "\23\11\1\5\2\11\12\5\26\11\12\5\32\11\106\5"+
    "\70\11\6\5\2\11\100\5\1\11\3\0\1\5\2\0"+
    "\5\5\4\0\4\11\1\5\3\11\1\5\35\11\2\5"+
    "\3\0\4\5\1\0\40\5\35\11\3\5\35\11\43\5"+
    "\10\11\1\5\34\11\2\0\31\5\66\11\12\5\26\11"+
    "\12\5\23\11\15\5\22\11\156\5\111\11\67\5\63\11"+
    "\15\5\63\11\15\5\44\11\4\0\10\5\12\0\u0146\5"+
    "\52\11\1\5\2\0\3\5\2\11\116\5\35\11\12\5"+
    "\1\11\10\5\26\11\13\0\137\5\25\11\33\5\27\11"+
    "\11\5\3\0\65\11\17\0\37\5\12\0\17\5\4\0"+
    "\55\11\13\0\2\5\1\0\17\5\1\0\2\5\31\11"+
    "\7\5\12\0\6\5\3\0\44\11\16\0\1\5\12\0"+
    "\4\5\1\11\2\0\1\11\10\5\43\11\1\0\2\5"+
    "\1\11\11\5\3\0\60\11\16\0\4\11\4\5\4\0"+
    "\1\5\14\0\1\11\1\5\1\11\43\5\22\11\1\5"+
    "\31\11\14\0\6\5\1\0\101\5\7\11\1\5\1\11"+
    "\1\5\4\11\1\5\17\11\1\5\12\11\7\5\57\11"+
    "\14\0\5\5\12\0\6\5\4\0\1\5\10\11\2\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\1\5\2\0\1\11\7\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\11\6\5\1\0\5\5\5\11\2\0"+
    "\2\5\7\0\3\5\5\0\213\5\65\11\22\0\4\11"+
    "\5\5\12\0\4\5\1\0\3\11\36\5\60\11\24\0"+
    "\2\11\1\5\1\11\10\5\12\0\246\5\57\11\7\0"+
    "\2\5\11\0\27\5\4\11\2\0\42\5\60\11\21\0"+
    "\3\5\1\11\13\5\12\0\46\5\53\11\15\0\1\11"+
    "\7\5\12\0\66\5\33\11\2\5\17\0\4\5\12\0"+
    "\306\5\54\11\17\0\145\5\100\11\12\0\25\5\10\11"+
    "\2\5\1\11\2\5\10\11\1\5\2\11\1\5\30\11"+
    "\6\0\1\5\2\0\2\5\4\0\1\11\1\0\1\11"+
    "\2\0\14\5\12\0\106\5\10\11\2\5\47\11\7\0"+
    "\2\5\7\0\1\11\1\5\1\11\1\0\33\5\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\5\1\0\10\5"+
    "\1\11\13\0\56\11\20\0\3\5\1\11\42\5\71\11"+
    "\7\5\11\11\1\5\45\11\10\0\1\5\10\0\1\11"+
    "\17\5\12\0\30\5\36\11\2\5\26\0\1\5\16\0"+
    "\111\5\7\11\1\5\2\11\1\5\46\11\6\0\3\5"+
    "\1\0\1\5\2\0\1\5\7\0\1\11\1\0\10\5"+
    "\12\0\6\5\6\11\1\5\2\11\1\5\40\11\5\0"+
    "\1\5\2\0\1\5\5\0\1\11\7\5\12\0\u0136\5"+
    "\23\11\4\0\271\5\1\11\54\5\4\11\37\5\232\11"+
    "\146\5\157\11\21\5\304\11\274\5\57\11\1\5\11\0"+
    "\307\5\107\11\271\5\71\11\7\5\37\11\1\5\12\0"+
    "\146\5\36\11\2\5\5\0\13\5\60\11\7\0\11\5"+
    "\4\11\14\5\12\0\11\5\25\11\5\5\23\11\260\5"+
    "\100\11\200\5\113\11\4\5\1\0\1\11\67\0\7\5"+
    "\4\0\15\11\100\5\2\11\1\5\1\11\1\0\13\5"+
    "\2\0\16\5\370\11\10\5\326\11\52\5\11\11\367\5"+
    "\37\11\61\5\3\11\21\5\4\11\10\5\u018c\11\4\5"+
    "\153\11\5\5\15\11\3\5\11\11\7\5\12\11\3\5"+
    "\2\0\1\5\4\0\301\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\11\1\5"+
    "\107\11\1\5\2\11\2\5\1\11\2\5\2\11\2\5"+
    "\4\11\1\5\14\11\1\5\1\11\1\5\7\11\1\5"+
    "\101\11\1\5\4\11\2\5\10\11\1\5\7\11\1\5"+
    "\34\11\1\5\4\11\1\5\5\11\1\5\1\11\3\5"+
    "\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\10\11\2\5\151\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\7\0\1\5"+
    "\21\0\2\5\7\0\1\5\2\0\1\5\5\0\325\5"+
    "\55\11\3\5\7\0\7\11\2\5\12\0\4\5\1\11"+
    "\u0171\5\54\11\16\0\5\5\306\11\13\5\7\0\51\5"+
    "\104\11\7\0\1\11\4\5\12\0\u0156\5\1\11\117\5"+
    "\4\11\1\5\33\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\12\11\1\5\4\11\1\5\1\11\1\5"+
    "\1\11\6\5\1\11\4\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\3\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\2\11\1\5\1\11\2\5\4\11\1\5"+
    "\7\11\1\5\4\11\1\5\4\11\1\5\1\11\1\5"+
    "\12\11\1\5\21\11\5\5\3\11\1\5\5\11\1\5"+
    "\21\11\u0134\5\12\0\6\5\336\11\42\5\65\11\13\5"+
    "\336\11\2\5\u0182\11\16\5\u0131\11\37\5\36\11\342\5"+
    "\113\11\266\5\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\2\13\1\14"+
    "\1\15\1\16\1\17\1\20\17\5\1\21\2\5\1\22"+
    "\1\1\1\23\1\24\1\1\1\23\1\25\1\26\1\1"+
    "\1\27\1\23\1\1\1\30\1\31\1\0\1\32\1\33"+
    "\2\0\1\34\5\5\1\35\25\5\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\3\0\6\5\1\44\26\5\2\0"+
    "\11\5\1\45\1\46\2\5\1\47\11\5\1\50\1\5"+
    "\1\51\3\5\1\0\3\5\1\52\1\53\2\5\1\54"+
    "\1\55\1\56\3\5\1\57\1\60\1\61\2\5\1\62"+
    "\1\63\3\5\1\0\1\64\1\65\6\5\1\66\2\5"+
    "\1\67\1\70\1\5\1\0\1\5\1\71\2\5\1\72"+
    "\4\5\1\0\4\5\1\73\1\5\1\74\1\75\1\76"+
    "\3\5\1\77\6\5\1\100\1\101\3\5\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0110\0\u0154\0\u0198"+
    "\0\u0110\0\u01dc\0\u0220\0\u0264\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u02a8\0\u02ec\0\u0110\0\u0330\0\u0110\0\u0110\0\u0110\0\u0374"+
    "\0\u0110\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u0110\0\u07b4\0\u07f8\0\u0110\0\u083c\0\u0880\0\u0110\0\u08c4"+
    "\0\u0908\0\u0110\0\u0110\0\u094c\0\u0110\0\u0990\0\u09d4\0\u0110"+
    "\0\u0110\0\u0a18\0\u0110\0\u0110\0\u0a5c\0\u0aa0\0\u0110\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0220\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u0220\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u0220\0\u0220\0\u1cf4\0\u1d38\0\u0220"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u0220\0\u1fe0\0\u0220\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u0220\0\u0220\0\u2200\0\u2244\0\u0220"+
    "\0\u0220\0\u0220\0\u2288\0\u22cc\0\u2310\0\u0220\0\u0220\0\u0220"+
    "\0\u2354\0\u2398\0\u23dc\0\u0220\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u0220\0\u0220\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u0220\0\u26c8\0\u270c\0\u0220\0\u0220\0\u2750\0\u2794\0\u27d8"+
    "\0\u0220\0\u281c\0\u2860\0\u0220\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u0220\0\u2b08\0\u0220"+
    "\0\u29b4\0\u0220\0\u2b4c\0\u2b90\0\u2bd4\0\u0220\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u0220\0\u0220\0\u2db0\0\u2df4"+
    "\0\u2e38\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\5\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\13\1\41"+
    "\1\13\1\42\1\43\1\13\1\44\1\45\1\13\1\46"+
    "\1\47\1\50\3\13\1\51\2\5\5\13\1\52\5\13"+
    "\1\53\1\13\1\54\1\55\1\5\1\6\1\5\2\56"+
    "\1\5\1\56\1\5\2\56\1\57\50\56\1\60\23\56"+
    "\2\61\1\62\1\61\1\63\53\61\1\64\20\61\1\65"+
    "\2\61\2\66\1\5\1\66\1\5\53\66\1\67\1\70"+
    "\22\66\106\0\1\6\130\0\1\71\144\0\1\72\13\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\26\13\3\0"+
    "\15\13\3\0\1\13\13\0\1\73\121\0\1\74\70\0"+
    "\1\75\3\0\1\76\104\0\2\24\107\0\1\77\54\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\20\13\1\100"+
    "\1\13\1\101\3\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\17\13\1\102"+
    "\6\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\7\13\1\103\5\13\1\104"+
    "\10\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\15\13\1\105\10\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\14\13\1\106\2\13\1\107\3\13\1\110"+
    "\1\111\1\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\1\112\21\13\1\113"+
    "\3\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\15\13\1\114\10\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\14\13\1\115\3\13\1\116\5\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\1\117\14\13\1\120\10\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\1\121\14\13\1\122\10\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\1\13\1\123\24\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\17\13\1\124"+
    "\6\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\21\13\1\125\4\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\1\126\16\13\1\127\6\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\20\13\1\130\5\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\26\13"+
    "\3\0\1\13\1\131\13\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\26\13\3\0\11\13"+
    "\1\132\3\13\3\0\1\13\101\0\1\133\3\0\2\56"+
    "\1\0\1\56\1\0\2\56\1\0\50\56\1\0\23\56"+
    "\7\0\1\134\50\0\1\135\11\0\1\62\1\63\1\0"+
    "\1\136\6\0\2\61\1\0\1\61\1\0\53\61\1\0"+
    "\20\61\1\0\2\61\60\0\1\135\11\0\1\62\1\63"+
    "\1\0\1\136\3\0\1\137\2\0\2\66\1\0\1\66"+
    "\1\0\53\66\2\0\22\66\60\0\1\135\1\140\10\0"+
    "\1\62\1\63\1\0\1\136\100\0\1\141\11\0\15\142"+
    "\1\143\66\142\2\76\2\6\1\7\75\76\1\6\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\20\13\1\144"+
    "\5\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\21\13\1\145\4\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\4\13\1\146\21\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\4\13\1\147\21\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\14\13\1\150"+
    "\6\13\1\151\2\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\3\13\1\152"+
    "\15\13\1\153\4\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\17\13\1\154"+
    "\6\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\1\155\25\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\10\13\1\156\15\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\12\13"+
    "\1\157\13\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\14\13\1\160\11\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\21\13\1\161\4\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\10\13\1\162\15\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\26\13"+
    "\3\0\1\163\14\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\1\13\1\164\24\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\2\13\1\165\23\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\21\13\1\166\4\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\3\13\1\167"+
    "\22\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\20\13\1\170\5\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\10\13\1\171\15\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\1\172\14\13\1\173\10\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\17\13"+
    "\1\174\6\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\22\13\1\175\3\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\4\13\1\176\21\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\26\13\3\0\7\13\1\177\5\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\26\13"+
    "\3\0\14\13\1\200\3\0\1\13\65\0\1\201\17\0"+
    "\15\142\1\202\66\142\15\0\1\143\3\0\1\6\62\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\4\13\1\203"+
    "\15\13\1\204\3\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\15\13\1\205"+
    "\10\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\1\206\25\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\2\13\1\207\23\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\21\13"+
    "\1\210\4\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\4\13\1\211\21\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\17\13\1\212\6\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\15\13\1\213\10\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\12\13"+
    "\1\214\13\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\21\13\1\215\4\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\20\13\1\216\5\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\2\13\1\217\23\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\15\13"+
    "\1\220\10\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\21\13\1\221\4\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\21\13\1\222\4\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\4\13\1\223\21\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\1\224"+
    "\25\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\2\13\1\225\23\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\10\13\1\226\15\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\4\13\1\227\21\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\14\13\1\230"+
    "\11\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\21\13\1\231\4\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\16\13\1\232\7\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\6\13\1\233\17\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\4\13\1\234"+
    "\21\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\1\235\4\13\1\236\20\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\26\13\3\0\12\13\1\237\2\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\26\13\3\0\4\13\1\234\10\13\3\0\1\13"+
    "\72\0\1\240\12\0\15\142\1\202\3\142\1\6\62\142"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\17\13\1\241"+
    "\6\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\13\13\1\242\12\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\13\13\1\243\12\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\11\13\1\244\14\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\11\13\1\245"+
    "\14\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\17\13\1\246\6\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\17\13\1\247\6\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\25\13\1\250\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\17\13\1\251\6\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\4\13\1\252\21\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\21\13\1\253\4\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\10\13"+
    "\1\254\15\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\1\255\25\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\12\13\1\256\13\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\12\13\1\257\13\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\7\13\1\260"+
    "\16\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\5\13\1\261\20\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\17\13\1\262\6\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\21\13\1\263\4\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\4\13\1\264"+
    "\21\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\4\13\1\265\21\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\12\13\1\266\13\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\10\13\1\267\15\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\26\13\3\0"+
    "\4\13\1\252\10\13\3\0\1\13\77\0\1\270\5\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\21\13\1\271"+
    "\4\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\4\13\1\272\21\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\1\273\25\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\15\13"+
    "\1\274\10\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\20\13\1\275\5\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\10\13\1\276\15\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\1\277\25\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\17\13\1\300"+
    "\6\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\25\13\1\301\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\23\13\1\302\2\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\15\13"+
    "\1\303\10\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\21\13\1\304\4\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\12\13\1\305\13\13\3\0\15\13"+
    "\3\0\1\13\1\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\17\13\1\306\6\13\3\0\15\13\3\0\1\13"+
    "\66\0\1\307\16\0\1\13\10\0\1\13\10\0\2\13"+
    "\5\0\21\13\1\310\4\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\12\13"+
    "\1\311\13\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\26\13\3\0\1\312"+
    "\14\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\15\13\1\313\10\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\12\13\1\314\13\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\6\13\1\315"+
    "\17\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\4\13\1\316\21\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\14\13\1\317\11\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\20\13\1\320\5\13\3\0\15\13\3\0\1\13\67\0"+
    "\1\321\15\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\15\13\1\322\10\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\12\13\1\323"+
    "\13\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\14\13\1\324\11\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\4\13\1\325\21\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\17\13\1\326\6\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\2\13\1\327"+
    "\23\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\21\13\1\330\4\13\3\0"+
    "\15\13\3\0\1\13\1\0\2\331\3\0\75\331\2\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\14\13\1\332"+
    "\11\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\10\13\1\333\15\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\2\13\1\334\23\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\21\13\1\335\4\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\4\13\1\336"+
    "\21\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\14\13\1\337\11\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\1\340\25\13\3\0\15\13\3\0\1\13"+
    "\1\0\1\13\10\0\1\13\10\0\2\13\5\0\26\13"+
    "\3\0\1\341\14\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\4\13\1\342\21\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\12\13\1\343\13\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\20\13\1\344\5\13\3\0\15\13\3\0\1\13\1\0"+
    "\1\13\10\0\1\13\10\0\2\13\5\0\20\13\1\345"+
    "\5\13\3\0\15\13\3\0\1\13\1\0\1\13\10\0"+
    "\1\13\10\0\2\13\5\0\12\13\1\346\13\13\3\0"+
    "\15\13\3\0\1\13\1\0\1\13\10\0\1\13\10\0"+
    "\2\13\5\0\21\13\1\347\4\13\3\0\15\13\3\0"+
    "\1\13\1\0\1\13\10\0\1\13\10\0\2\13\5\0"+
    "\1\350\25\13\3\0\15\13\3\0\1\13\1\0\1\13"+
    "\10\0\1\13\10\0\2\13\5\0\21\13\1\351\4\13"+
    "\3\0\15\13\3\0\1\13\1\0\1\13\10\0\1\13"+
    "\10\0\2\13\5\0\4\13\1\352\21\13\3\0\15\13"+
    "\3\0\1\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\1\11\3\1\4\11\2\1\1\11"+
    "\1\1\3\11\1\1\1\11\17\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\2\11\1\1\1\11\2\1\2\11"+
    "\1\0\2\11\2\0\1\11\33\1\6\11\3\0\35\1"+
    "\2\0\35\1\1\0\27\1\1\0\16\1\1\0\11\1"+
    "\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Deque<ZzFlexStreamInfo> zzStreams
    = new java.util.ArrayDeque<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    long yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer,
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, long yychar,
                  int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private final StringBuilder string = new StringBuilder();
  private final ComplexSymbolFactory sf;
  private final LogManager logger;
  private final List<Path> scannedFiles = new ArrayList<>();
  private final Deque<Path> filesStack = new ArrayDeque<>();

  private Path getFile(String pYytext) throws FileNotFoundException {
    assert pYytext.startsWith("#include ");
    String fileName = pYytext.replaceFirst("#include ", "").trim();

    Path file = Paths.get(fileName);
    Path currentFile = filesStack.peek();
    file = currentFile.resolveSibling(file);

    if (scannedFiles.contains(file)) {
      logger.logf(
          Level.WARNING,
          "File \"%s\" was referenced multiple times. Redundant or cyclic references were ignored.",
          file);
      return null;
    }

    IO.checkReadableFile(file);
    scannedFiles.add(file);
    filesStack.push(file);
    return file;
  }
  
  private Location getStartLocation() {
    return new Location(filesStack.peek().toString(), yyline+1,yycolumn+1-yylength());
  }

  private Location getEndLocation() {
    return new Location(filesStack.peek().toString(), yyline+1,yycolumn+1);
  }
  
  private Symbol symbol(String name, int sym) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation());
  }

  private Symbol symbol(String name, int sym, String val) {
    return sf.newSymbol(name, sym, getStartLocation(), getEndLocation(), val);
  }
  
  private void error() throws IOException {
    Location start = getStartLocation();
    StringBuilder msg = new StringBuilder();
    msg.append(filesStack.getLast().toString());
    msg.append(" (Illegal character <");
    msg.append(yytext());
    msg.append("> at column ");
    msg.append(start.getColumn());
    msg.append(" in line ");
    msg.append(start.getLine());
    if (filesStack.size() != 1) {
      msg.append(" of ");
      msg.append(start.getUnit());
    }
    msg.append(")");
    throw new IOException(msg.toString());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AutomatonScanner(java.io.Reader in, Path file, LogManager logger, ComplexSymbolFactory sf) {
    filesStack.push(file);
    this.sf = sf;
    this.logger = logger;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;           // indicate end of file
    zzEndRead = zzStartRead;  // invalidate buffer

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an {@code <<EOF>>} action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  private final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    yyResetPosition();
  }


  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack.
   *
   * @throws java.util.NoSuchElementException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  private final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left
   * to read from on the stream stack.
   */
  private final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  private final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (yymoreStreams()) { yypopStream(); filesStack.pop(); } else return symbol("EOF", AutomatonSym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
            // fall through
          case 67: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 68: break;
          case 3:
            { return symbol("!", AutomatonSym.EXCLAMATION);
            }
            // fall through
          case 69: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 70: break;
          case 5:
            { return symbol("ID", AutomatonSym.IDENTIFIER, yytext());
            }
            // fall through
          case 71: break;
          case 6:
            { return symbol("(", AutomatonSym.OPEN_BRACKETS);
            }
            // fall through
          case 72: break;
          case 7:
            { return symbol(")", AutomatonSym.CLOSE_BRACKETS);
            }
            // fall through
          case 73: break;
          case 8:
            { return symbol("+", AutomatonSym.PLUS);
            }
            // fall through
          case 74: break;
          case 9:
            { return symbol("COMMA", AutomatonSym.COMMA);
            }
            // fall through
          case 75: break;
          case 10:
            { return symbol("-", AutomatonSym.MINUS);
            }
            // fall through
          case 76: break;
          case 11:
            { return symbol("INT", AutomatonSym.INTEGER_LITERAL, yytext());
            }
            // fall through
          case 77: break;
          case 12:
            { return symbol(":", AutomatonSym.COLON);
            }
            // fall through
          case 78: break;
          case 13:
            { return symbol(";", AutomatonSym.SEMICOLON);
            }
            // fall through
          case 79: break;
          case 14:
            { return symbol("<", AutomatonSym.OPEN_ANGLE_BRACKETS);
            }
            // fall through
          case 80: break;
          case 15:
            { return symbol("=", AutomatonSym.EQ);
            }
            // fall through
          case 81: break;
          case 16:
            { return symbol(">", AutomatonSym.CLOSE_ANGLE_BRACKETS);
            }
            // fall through
          case 82: break;
          case 17:
            { string.setLength(0); yybegin(SQUAREEXPR);
            }
            // fall through
          case 83: break;
          case 18:
            { string.setLength(0); yybegin(CURLYEXPR);
            }
            // fall through
          case 84: break;
          case 19:
            { string.append( yytext() );
            }
            // fall through
          case 85: break;
          case 20:
            { yybegin(YYINITIAL); 
                                   return symbol("STRING", AutomatonSym.STRING_LITERAL, 
                                   string.toString());
            }
            // fall through
          case 86: break;
          case 21:
            { string.append('\n');
            }
            // fall through
          case 87: break;
          case 22:
            { string.append('\r');
            }
            // fall through
          case 88: break;
          case 23:
            { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.CURLYEXPR, 
                                   string.toString());
            }
            // fall through
          case 89: break;
          case 24:
            { yybegin(YYINITIAL); 
                                   return symbol("CURLYEXPR", AutomatonSym.SQUAREEXPR, 
                                   string.toString());
            }
            // fall through
          case 90: break;
          case 25:
            { return symbol("!=", AutomatonSym.NEQ);
            }
            // fall through
          case 91: break;
          case 26:
            { return symbol("&&", AutomatonSym.AND);
            }
            // fall through
          case 92: break;
          case 27:
            { return symbol("->", AutomatonSym.ARROW);
            }
            // fall through
          case 93: break;
          case 28:
            { return symbol("==", AutomatonSym.EQEQ);
            }
            // fall through
          case 94: break;
          case 29:
            { return symbol("DO", AutomatonSym.DO);
            }
            // fall through
          case 95: break;
          case 30:
            { return symbol("||", AutomatonSym.OR);
            }
            // fall through
          case 96: break;
          case 31:
            { string.append('"');
            }
            // fall through
          case 97: break;
          case 32:
            { string.append('\\');
            }
            // fall through
          case 98: break;
          case 33:
            { string.append('\t');
            }
            // fall through
          case 99: break;
          case 34:
            { string.append('}');
            }
            // fall through
          case 100: break;
          case 35:
            { string.append(']');
            }
            // fall through
          case 101: break;
          case 36:
            { return symbol("LABEL", AutomatonSym.END);
            }
            // fall through
          case 102: break;
          case 37:
            { return symbol("EVAL", AutomatonSym.EVAL);
            }
            // fall through
          case 103: break;
          case 38:
            { return symbol("EXIT", AutomatonSym.EXIT);
            }
            // fall through
          case 104: break;
          case 39:
            { return symbol("GOTO", AutomatonSym.GOTO);
            }
            // fall through
          case 105: break;
          case 40:
            { return symbol("STOP", AutomatonSym.STOP);
            }
            // fall through
          case 106: break;
          case 41:
            { return symbol("TRUE", AutomatonSym.TRUE);
            }
            // fall through
          case 107: break;
          case 42:
            { return symbol("BREAK", AutomatonSym.BREAK);
            }
            // fall through
          case 108: break;
          case 43:
            { return symbol("EVAL", AutomatonSym.CHECK);
            }
            // fall through
          case 109: break;
          case 44:
            { return symbol("ENTRY", AutomatonSym.ENTRY);
            }
            // fall through
          case 110: break;
          case 45:
            { return symbol("ERROR", AutomatonSym.ERROR);
            }
            // fall through
          case 111: break;
          case 46:
            { return symbol("FALSE", AutomatonSym.FALSE);
            }
            // fall through
          case 112: break;
          case 47:
            { return symbol("LABEL", AutomatonSym.LABEL);
            }
            // fall through
          case 113: break;
          case 48:
            { return symbol("LOCAL", AutomatonSym.LOCAL);
            }
            // fall through
          case 114: break;
          case 49:
            { return symbol("MATCH", AutomatonSym.MATCH);
            }
            // fall through
          case 115: break;
          case 50:
            { return symbol("PRINT", AutomatonSym.PRINT);
            }
            // fall through
          case 116: break;
          case 51:
            { return symbol("STATE", AutomatonSym.STATE);
            }
            // fall through
          case 117: break;
          case 52:
            { return symbol("ASSERT", AutomatonSym.ASSERT);
            }
            // fall through
          case 118: break;
          case 53:
            { return symbol("ASSUME", AutomatonSym.ASSUME);
            }
            // fall through
          case 119: break;
          case 54:
            { return symbol("MODIFY", AutomatonSym.MODIFY);
            }
            // fall through
          case 120: break;
          case 55:
            { return symbol("TARGET", AutomatonSym.TARGET);
            }
            // fall through
          case 121: break;
          case 56:
            { return symbol("USEALL", AutomatonSym.USEALL);
            }
            // fall through
          case 122: break;
          case 57:
            { return symbol("CONTROL", AutomatonSym.CONTROL);
            }
            // fall through
          case 123: break;
          case 58:
            { return symbol("INITIAL", AutomatonSym.INITIAL);
            }
            // fall through
          case 124: break;
          case 59:
            { return symbol("OBSERVER", AutomatonSym.OBSERVER);
            }
            // fall through
          case 125: break;
          case 60:
            { return symbol("USEFIRST", AutomatonSym.USEFIRST);
            }
            // fall through
          case 126: break;
          case 61:
            { Path file = getFile(yytext()); 
          if (file != null) {
            yypushStream(Files.newBufferedReader(file, StandardCharsets.US_ASCII));
          }
            }
            // fall through
          case 127: break;
          case 62:
            { return symbol("AUTOMATON", AutomatonSym.AUTOMATON);
            }
            // fall through
          case 128: break;
          case 63:
            { return symbol("PRINTONCE", AutomatonSym.PRINTONCE);
            }
            // fall through
          case 129: break;
          case 64:
            { return symbol("COVERS_LINES", AutomatonSym.COVERS_LINES);
            }
            // fall through
          case 130: break;
          case 65:
            { return symbol("FUNCTIONCALL", AutomatonSym.FUNCTIONCALL);
            }
            // fall through
          case 131: break;
          case 66:
            { return symbol("IS_TARGET_STATE", AutomatonSym.IS_TARGET_STATE);
            }
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
