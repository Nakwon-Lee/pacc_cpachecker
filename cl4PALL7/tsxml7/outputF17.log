scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--staging--speakup--speakup.ko-ldv_main4_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_01z4waxe/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4300: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4456-4457: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4460-4461: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4468-4469: Dead code detected: __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4679: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5216: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5369: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5372: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5375: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5480: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5483: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5486: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24716;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24716;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5494-5509: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5499: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5502: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5505: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24726;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24726;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5513-5528: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5518: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5521: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5524: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24735;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24735;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5532-5547: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5537: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5540: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5543: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24744;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24744;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24716;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24716;
  default:
  __bad_percpu_size();
  }
  ldv_24716: ;
  goto ldv_24721;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24726;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24726;
  default:
  __bad_percpu_size();
  }
  ldv_24726: ;
  goto ldv_24721;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24735;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24735;
  default:
  __bad_percpu_size();
  }
  ldv_24735: ;
  goto ldv_24721;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24744;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24744;
  default:
  __bad_percpu_size();
  }
  ldv_24744: ;
  goto ldv_24721;
  default:
  __bad_size_call_parameter();
  goto ldv_24721;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5565: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5568: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5571: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24755;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24755;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5579-5594: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5584: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5587: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5590: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24765;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24765;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5598-5613: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5603: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5606: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5609: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24774;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24774;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5617-5632: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5622: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5625: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5628: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24783;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24783;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24755;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24755;
  default:
  __bad_percpu_size();
  }
  ldv_24755: ;
  goto ldv_24760;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24765;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24765;
  default:
  __bad_percpu_size();
  }
  ldv_24765: ;
  goto ldv_24760;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24774;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24774;
  default:
  __bad_percpu_size();
  }
  ldv_24774: ;
  goto ldv_24760;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24783;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24783;
  default:
  __bad_percpu_size();
  }
  ldv_24783: ;
  goto ldv_24760;
  default:
  __bad_size_call_parameter();
  goto ldv_24760;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5673: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5676: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5679: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5688-5703: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5693: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5696: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5699: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5708-5723: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5713: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5716: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5719: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5728-5743: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5733: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5736: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5739: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  default:
  __bad_percpu_size();
  }
  ldv_24807:
  pscr_ret__ = pfo_ret__;
  goto ldv_24813;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  default:
  __bad_percpu_size();
  }
  ldv_24817:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_24813;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  default:
  __bad_percpu_size();
  }
  ldv_24826:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_24813;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  default:
  __bad_percpu_size();
  }
  ldv_24835:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_24813;
  default:
  __bad_size_call_parameter();
  goto ldv_24813;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5796: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9270: Dereferencing of non-pointer type spkup_hand  in expression *(spkup_handler[(int )value]) (ASTConverter.convert, WARNING)

line 9937: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10447: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11897: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11926: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11929: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11932: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11959: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11962: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11965: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12199: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12204: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12209: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 2UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 4UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 8UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_28331;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12316: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12480: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 12750: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12830: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 12930: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12935: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12940: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 2UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 4UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 8UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_28258;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12990: Dead code detected: tmp___13 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12995: Dead code detected: tmp___14 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 13000: Dead code detected: tmp___15 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___13 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___13->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 2UL:
  tmp___14 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___14->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 4UL:
  tmp___15 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___15->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 8UL:
  tmp___16 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___16->state): : "memory",
                       "cc");
  goto ldv_28269;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 13695: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13972: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14922: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13305: Function pointer *(synth->get_index) with type unsigned char (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13254: Function pointer *(synth->get_index) with type unsigned char (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12335: Function pointer *(pv_cpu_ops.io_delay) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9462: Function pointer *special_handler with type int (*)(struct vc_data *, u_char , u_char , u_short ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12239-12240: Function pointer *(tty___0->ldisc->ops->receive_buf) with type void (*)(struct tty_struct *, const unsigned char *, char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13900: Function pointer *(synth->catch_up) with type void (*)(struct spk_synth *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12913: Function pointer *(synth___0->flush) with type void (*)(struct spk_synth *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13510: Function pointer *(synth->release) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14464: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", cp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function vsnprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13219: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14443: Ignoring function call through function pointer *(synth->synth_adjust): tmp___0 = (*(synth->synth_adjust))(var); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_create_and_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_keyboard_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_vt_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_create_on_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function set_user_nice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_vt_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_keyboard_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function stop_tty to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_should_stop to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13421: Ignoring function call through function pointer *(synth->probe): tmp = (*(synth->probe))(synth); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13510: Ignoring function call through function pointer *(synth->release): (*(synth->release))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function kthread_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            29556 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            24583 (83%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4973 (17%)
  Times precision was empty:       4171 (14%)
  Times precision was {false}:     2958 (10%)
  Times result was cached:         15008 (51%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7419 (25%)
  Times result was 'false':        17847 (60%)
Number of strengthen sat checks:   0
Number of coverage checks:         335052
  BDD entailment checks:           66380
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       200
Number of predicates discovered:          93
Number of abstraction locations:          12
Max number of predicates per location:    47
Avg number of predicates per location:    9
Total predicates per abstraction:         223051
Max number of predicates per abstraction: 47
Avg number of predicates per abstraction: 21.49
Number of irrelevant predicates:          17066 (8%)
Number of preds handled by boolean abs:   87486 (39%)
  Total number of models for allsat:      43681
  Max number of models for allsat:        82
  Avg number of models for allsat:        5.89

Time for post operator:                138.522s
  Time for path formula creation:      137.425s
Time for strengthen operator:            1.376s
Time for prec operator:                301.385s
  Time for abstraction:                299.152s (Max:     0.588s, Count: 29556)
    Boolean abstraction:               207.384s
    Solving time:                      107.635s (Max:     0.341s)
    Model enumeration time:             99.740s
    Time for BDD construction:           3.670s (Max:     0.022s)
Time for merge operator:                77.227s
Time for coverage check:                 0.484s
  Time for BDD entailment checks:        0.457s
Total time for SMT solver (w/o itp):   207.375s

Number of path formula cache hits:   387967 (32%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   120.104s

Total number of created targets for pointer analysis: 2043215
   Number of created targets for uf: *(void)* is 10241
   Number of created targets for uf: *unsigned_short_int is 7397
   Number of created targets for uf: *signed_int is 288045
   Number of created targets for uf: *(char)* is 48
   Number of created targets for uf: *unsigned_char is 52877
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *(unsigned_char)* is 1654
   Number of created targets for uf: *(struct_st_var_header)* is 42161
   Number of created targets for uf: *char is 17
   Number of created targets for uf: *signed_short_int is 6
   Number of created targets for uf: *unsigned_long_int is 1555
   Number of created targets for uf: *(struct_st_spk_t)* is 5201


Number of BDD nodes:                               141823
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      167874 (count: 195636, min: 0, max: 5652, avg: 0.86)
Time for BDD node cleanup:                             0.063s
Time for BDD garbage collection:                       0.099s (in 2 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.750s
  Time for transition matches:                         1.453s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.044s
Automaton transfers with branching:                0
Automaton transfer successors:                      1172615 (count: 1172615, min: 1, max: 1, avg: 1.00) [1 x 1172615]

CPA algorithm statistics
------------------------
Number of iterations:            743643
Max size of waitlist:            41
Average size of waitlist:        10
Number of computed successors:   901363
Max successors for one state:    2
Number of times merged:          134336
Number of times stopped:         137745
Number of times breaked:         352

Total time for CPA algorithm:       552.136s (Max:    12.492s)
  Time for choose from waitlist:      0.534s
  Time for precision adjustment:    308.144s
  Time for transfer relation:       155.898s
  Time for merge operator:           79.933s
  Time for stop operator:             2.023s
  Time for adding to reached set:     2.293s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   352
Avg. length of target path (in blocks):               17700 (count: 352, min: 4, max: 94, avg: 50.28)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 334.875s
  Counterexample analysis:                           333.052s (Max:     1.777s, Calls: 352)
    Refinement sat check:                            311.336s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.020s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.094s
  Precision update:                                    0.105s
  ARG update:                                          1.320s

Length of refined path (in blocks):                   15227 (count: 352, min: 2, max: 94, avg: 43.26)
Number of affected states:                             2012 (count: 352, min: 1, max: 41, avg: 5.72)
Length (states) of path with itp 'true':              12863 (count: 352, min: 0, max: 92, avg: 36.54)
Length (states) of path with itp non-trivial itp:      2012 (count: 352, min: 1, max: 41, avg: 5.72)
Length (states) of path with itp 'false':                87 (count: 352, min: 0, max: 1, avg: 0.25)
Different non-trivial interpolants along paths:        1603 (count: 352, min: 0, max: 40, avg: 4.55)
Equal non-trivial interpolants along paths:              57 (count: 352, min: 0, max: 7, avg: 0.16)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                352
Number of successful refinements:     352
Number of failed refinements:         0
Max. size of reached set before ref.: 11642
Max. size of reached set after ref.:  11590
Avg. size of reached set before ref.: 8348.03
Avg. size of reached set after ref.:  6240.04

Total time for CEGAR algorithm:     891.271s
Time for refinements:               337.702s
Average time for refinement:          0.959s
Max time for refinement:              1.793s

Code Coverage
-----------------------------
  Function coverage:      0.046
  Visited lines:          1060
  Total lines:            6398
  Line coverage:          0.166
  Visited conditions:     98
  Total conditions:       2080
  Condition coverage:     0.047

CPAchecker general statistics
-----------------------------
Number of program locations:     9513
Number of CFA edges:             11030
Number of relevant variables:    1705
Number of functions:             345
Number of loops:                 126
Size of reached set:             3759
  Number of reached locations:   251 (3%)
    Avg states per location:     14
    Max states per location:     42 (at node N3112)
  Number of reached functions:   16 (5%)
  Number of partitions:          3706
    Avg size of partitions:      1
    Max size of partitions:      42 (with key [N3128 (before line 7969), Function reset_default_chars called from node N4886, stack depth 3 [71eff6a3], stack [main, speakup_init, reset_default_chars]])
  Number of target states:       0
  Size of final wait list        13

Time for analysis setup:          8.960s
  Time for loading CPAs:          1.169s
  Time for loading parser:        0.765s
  Time for CFA construction:      6.891s
    Time for parsing file(s):     1.416s
    Time for AST to CFA:          2.739s
    Time for CFA sanity check:    0.591s
    Time for post-processing:     1.905s
      Time for var class.:        0.998s
Time for Analysis:              891.271s
CPU time for analysis:          891.200s
Total time for CPAchecker:      900.238s
Total CPU time for CPAchecker:  900.140s
Time for statistics:              0.172s

Time for Garbage Collector:      20.592s (in 696 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                685MB (   653 MiB) max;    241MB (   230 MiB) avg;    707MB (   674 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     42MB (    40 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           874MB (   833 MiB) max;    360MB (   343 MiB) avg
Allocated non-heap memory:        45MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8754MB (  8348 MiB) max;   8415MB (  8025 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
