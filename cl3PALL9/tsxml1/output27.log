scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---drivers--xen--xen-pciback--xen-pciback.ko_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hoc6joz4/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 8206: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8231: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8244: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8717: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8894: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8925: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 8972: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 8978: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 8979: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 8986: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 8987: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 8988: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 9060: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9078: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9110: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9128: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9160: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9178: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9210: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9228: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9260: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9278: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9310: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9328: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9360: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9380: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9417: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9437: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9474: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9494: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9531: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9551: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9588: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9608: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9645: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9665: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9702: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9722: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9759: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9779: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9816: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9836: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9873: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9897: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9913: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9932: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9992: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10011: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10071: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10090: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10150: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10490: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10518: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10534: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10655: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 11619: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11675: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11708: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 11727: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 13336: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 13429: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13534: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13605: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13637: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13654: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13667: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13773: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 17400: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 17435: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 17528: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8840: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8852: Function pointer *arg0 with type int (*)(struct pci_dev *, struct pm_message ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8890: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function driver_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __ldv_linux_kernel_locking_spinlock_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8483: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function xenbus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1172 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            402 (34%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         770 (66%)
  Times precision was empty:       644 (55%)
  Times precision was {false}:     508 (43%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      20 (2%)
  Times result was 'false':        506 (43%)
Number of strengthen sat checks:   0
Number of coverage checks:         480
  BDD entailment checks:           6
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       290
Number of predicates discovered:          21
Number of abstraction locations:          23
Max number of predicates per location:    20
Avg number of predicates per location:    1
Total predicates per abstraction:         718
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 1.36
Number of irrelevant predicates:          508 (71%)
Number of preds handled by boolean abs:   210 (29%)
  Total number of models for allsat:      20
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.974s
  Time for path formula creation:        1.888s
Time for strengthen operator:            0.068s
Time for prec operator:                  5.232s
  Time for abstraction:                  5.112s (Max:     0.152s, Count: 1172)
    Boolean abstraction:                 1.584s
    Solving time:                        3.124s (Max:     0.119s)
    Model enumeration time:              0.055s
    Time for BDD construction:           0.019s (Max:     0.007s)
Time for merge operator:                 0.090s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     3.179s

Number of path formula cache hits:   15990 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.462s

Total number of created targets for pointer analysis: 75
   Number of created targets for uf: *(struct_list_head)* is 5
   Number of created targets for uf: *(struct_pci_driver)* is 2


Number of BDD nodes:                               392
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         950 (count: 4235, min: 0, max: 185, avg: 0.22)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.340s
Automaton transfers with branching:                0
Automaton transfer successors:                        19119 (count: 19119, min: 1, max: 1, avg: 1.00) [1 x 19119]

CPA algorithm statistics
------------------------
Number of iterations:            13514
Max size of waitlist:            43
Average size of waitlist:        34
Number of computed successors:   14663
Max successors for one state:    2
Number of times merged:          237
Number of times stopped:         243
Number of times breaked:         263

Total time for CPA algorithm:         9.584s (Max:     1.673s)
  Time for choose from waitlist:      0.022s
  Time for precision adjustment:      5.576s
  Time for transfer relation:         3.405s
  Time for merge operator:            0.117s
  Time for stop operator:             0.074s
  Time for adding to reached set:     0.127s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   263
Avg. length of target path (in blocks):                 483 (count: 263, min: 1, max: 2, avg: 1.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   9.336s
  Counterexample analysis:                             8.915s (Max:     0.067s, Calls: 263)
    Refinement sat check:                              7.707s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.020s
  Precision update:                                    0.071s
  ARG update:                                          0.077s

Length of refined path (in blocks):                     483 (count: 263, min: 1, max: 2, avg: 1.84)
Number of affected states:                               20 (count: 263, min: 0, max: 1, avg: 0.08)
Length (states) of path with itp 'true':                200 (count: 263, min: 0, max: 1, avg: 0.76)
Length (states) of path with itp non-trivial itp:        20 (count: 263, min: 0, max: 1, avg: 0.08)
Length (states) of path with itp 'false':                 0 (count: 263, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 263, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 263, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                263
Number of successful refinements:     263
Number of failed refinements:         0
Max. size of reached set before ref.: 1737
Max. size of reached set after ref.:  1523
Avg. size of reached set before ref.: 1354.32
Avg. size of reached set after ref.:  1307.47

Total time for CEGAR algorithm:      20.178s
Time for refinements:                10.253s
Average time for refinement:          0.038s
Max time for refinement:              0.112s

Code Coverage
-----------------------------
  Function coverage:      0.126
  Visited lines:          1312
  Total lines:            7954
  Line coverage:          0.165
  Visited conditions:     92
  Total conditions:       2058
  Condition coverage:     0.045

CPAchecker general statistics
-----------------------------
Number of program locations:     12023
Number of CFA edges:             13813
Number of relevant variables:    2297
Number of functions:             755
Number of loops:                 80
Size of reached set:             1593
  Number of reached locations:   569 (5%)
    Avg states per location:     2
    Max states per location:     37 (at node N9614)
  Number of reached functions:   95 (13%)
  Number of partitions:          1593
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        42

Time for analysis setup:         10.030s
  Time for loading CPAs:          1.424s
  Time for loading parser:        0.817s
  Time for CFA construction:      7.606s
    Time for parsing file(s):     1.429s
    Time for AST to CFA:          3.287s
    Time for CFA sanity check:    0.793s
    Time for post-processing:     1.921s
      Time for var class.:        1.096s
Time for Analysis:               20.179s
CPU time for analysis:           20.170s
Total time for CPAchecker:       30.220s
Total CPU time for CPAchecker:   30.190s
Time for statistics:              0.164s

Time for Garbage Collector:       0.689s (in 31 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 78MB (    74 MiB) max;     53MB (    51 MiB) avg;     81MB (    77 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     33MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8131MB (  7754 MiB) max;   8114MB (  7738 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
