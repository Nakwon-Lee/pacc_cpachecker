scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_stack_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_k5ojussx/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1017: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1020: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1092: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1212: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1218: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

What!
Error: Refinement failed: Interpolation failed (msat_get_model failed with "non-integer model value", probably the actual problem is interpolation) (InterpolationManager.fallbackWithoutInterpolation, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            38602 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  35978 (93%)
  Because of loop head:            2426 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         198 (1%)
  Times precision was empty:       20658 (54%)
  Times precision was {false}:     656 (2%)
  Times result was cached:         15852 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1436 (4%)
  Times result was 'false':        1877 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         61124
  BDD entailment checks:           15304
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          63
Number of abstraction locations:          43
Max number of predicates per location:    27
Avg number of predicates per location:    6
Total predicates per abstraction:         96523
Max number of predicates per abstraction: 27
Avg number of predicates per abstraction: 46.14
Number of irrelevant predicates:          72008 (75%)
Number of preds handled by boolean abs:   6759 (7%)
  Total number of models for allsat:      89108
  Max number of models for allsat:        13104
  Avg number of models for allsat:        62.05

Time for post operator:                 10.491s
  Time for path formula creation:       10.173s
Time for strengthen operator:            0.424s
Time for prec operator:                112.459s
  Time for abstraction:                111.558s (Max:    17.160s, Count: 38602)
    Boolean abstraction:                97.310s
    Solving time:                       10.072s (Max:     0.192s)
    Model enumeration time:             86.435s
    Time for BDD construction:           3.024s (Max:     0.487s)
Time for merge operator:                 1.309s
Time for coverage check:                 0.116s
  Time for BDD entailment checks:        0.088s
Total time for SMT solver (w/o itp):    96.507s

Number of path formula cache hits:   239706 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.029s

Total number of created targets for pointer analysis: 23209
   Number of created targets for uf: *signed_int is 477
   Number of created targets for uf: *unsigned_char is 15
   Number of created targets for uf: *(unsigned_char)* is 133
   Number of created targets for uf: *_Bool is 45
   Number of created targets for uf: *unsigned_int is 221
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 7


Number of BDD nodes:                               266399
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9552 (count: 50954, min: 0, max: 702, avg: 0.19)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.804s
  Time for transition matches:                         0.366s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       287014 (count: 287014, min: 1, max: 1, avg: 1.00) [1 x 287014]

CPA algorithm statistics
------------------------
Number of iterations:            193939
Max size of waitlist:            123
Average size of waitlist:        49
Number of computed successors:   228969
Max successors for one state:    2
Number of times merged:          22910
Number of times stopped:         31483
Number of times breaked:         79

Total time for CPA algorithm:       135.863s (Max:    47.878s)
  Time for choose from waitlist:      0.259s
  Time for precision adjustment:    114.611s
  Time for transfer relation:        16.248s
  Time for merge operator:            1.968s
  Time for stop operator:             0.583s
  Time for adding to reached set:     0.691s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   79
Avg. length of target path (in blocks):                2022 (count: 79, min: 3, max: 53, avg: 25.59)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  45.160s
  Counterexample analysis:                            44.368s (Max:    36.525s, Calls: 79)
    Refinement sat check:                              7.360s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.059s
  Precision update:                                    0.045s
  ARG update:                                          0.644s

Length of refined path (in blocks):                    1662 (count: 78, min: 2, max: 48, avg: 21.31)
Number of affected states:                             1018 (count: 78, min: 0, max: 47, avg: 13.05)
Length (states) of path with itp 'true':                566 (count: 78, min: 0, max: 42, avg: 7.26)
Length (states) of path with itp non-trivial itp:      1018 (count: 78, min: 0, max: 47, avg: 13.05)
Length (states) of path with itp 'false':                60 (count: 78, min: 0, max: 1, avg: 0.77)
Different non-trivial interpolants along paths:          78 (count: 78, min: 0, max: 12, avg: 1.00)
Equal non-trivial interpolants along paths:             889 (count: 78, min: 0, max: 39, avg: 11.40)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                79
Number of successful refinements:     78
Number of failed refinements:         1
Max. size of reached set before ref.: 8897
Max. size of reached set after ref.:  4746
Avg. size of reached set before ref.: 3893.46
Avg. size of reached set after ref.:  1435.55

Total time for CEGAR algorithm:     181.583s
Time for refinements:                45.620s
Average time for refinement:          0.577s
Max time for refinement:             36.530s

Code Coverage
-----------------------------
  Function coverage:      0.640
  Visited lines:          352
  Total lines:            400
  Line coverage:          0.880
  Visited conditions:     159
  Total conditions:       212
  Condition coverage:     0.750

CPAchecker general statistics
-----------------------------
Number of program locations:     940
Number of CFA edges:             1075
Number of relevant variables:    63
Number of functions:             25
Number of loops:                 7
Size of reached set:             7592
  Number of reached locations:   302 (32%)
    Avg states per location:     25
    Max states per location:     375 (at node N8)
  Number of reached functions:   16 (64%)
  Number of partitions:          7511
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N506 (before line 1179), Function main called from node N482, stack depth 1 [6ad3381f], stack [main]])
  Number of target states:       1
  Size of final wait list        93

Time for analysis setup:          3.714s
  Time for loading CPAs:          0.780s
  Time for loading parser:        0.732s
  Time for CFA construction:      2.015s
    Time for parsing file(s):     0.671s
    Time for AST to CFA:          0.627s
    Time for CFA sanity check:    0.135s
    Time for post-processing:     0.440s
      Time for var class.:        0.151s
Time for Analysis:              181.583s
CPU time for analysis:          181.560s
Total time for CPAchecker:      185.302s
Total CPU time for CPAchecker:  185.260s
Time for statistics:              0.199s

Time for Garbage Collector:       1.626s (in 146 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                111MB (   106 MiB) max;     83MB (    79 MiB) avg;    116MB (   111 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     37MB (    36 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8083MB (  7709 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
