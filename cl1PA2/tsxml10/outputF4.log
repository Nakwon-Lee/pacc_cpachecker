scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_stack_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_59vrd16m/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1017: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1020: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1092: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1212: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1218: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

What!
Error: Refinement failed: Interpolation failed (msat_get_model failed with "non-integer model value", probably the actual problem is interpolation) (InterpolationManager.fallbackWithoutInterpolation, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            41157 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  38328 (93%)
  Because of loop head:            2616 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         213 (1%)
  Times precision was empty:       20316 (49%)
  Times precision was {false}:     699 (2%)
  Times result was cached:         18645 (45%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1497 (4%)
  Times result was 'false':        2127 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         66524
  BDD entailment checks:           16792
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          63
Number of abstraction locations:          52
Max number of predicates per location:    27
Avg number of predicates per location:    5
Total predicates per abstraction:         105763
Max number of predicates per abstraction: 27
Avg number of predicates per abstraction: 48.16
Number of irrelevant predicates:          77923 (74%)
Number of preds handled by boolean abs:   6839 (6%)
  Total number of models for allsat:      89170
  Max number of models for allsat:        13104
  Avg number of models for allsat:        59.57

Time for post operator:                 11.450s
  Time for path formula creation:       11.061s
Time for strengthen operator:            0.394s
Time for prec operator:                113.393s
  Time for abstraction:                112.353s (Max:    17.049s, Count: 41157)
    Boolean abstraction:                96.848s
    Solving time:                       10.205s (Max:     0.174s)
    Model enumeration time:             85.793s
    Time for BDD construction:           3.037s (Max:     0.459s)
Time for merge operator:                 1.488s
Time for coverage check:                 0.110s
  Time for BDD entailment checks:        0.083s
Total time for SMT solver (w/o itp):    95.998s

Number of path formula cache hits:   258465 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.802s

Total number of created targets for pointer analysis: 23297
   Number of created targets for uf: *signed_int is 477
   Number of created targets for uf: *unsigned_char is 15
   Number of created targets for uf: *(unsigned_char)* is 133
   Number of created targets for uf: *_Bool is 45
   Number of created targets for uf: *unsigned_int is 221
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 7


Number of BDD nodes:                               266401
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9676 (count: 52726, min: 0, max: 1024, avg: 0.18)
Time for BDD node cleanup:                             0.037s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.936s
  Time for transition matches:                         0.441s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       308629 (count: 308629, min: 1, max: 1, avg: 1.00) [1 x 308629]

CPA algorithm statistics
------------------------
Number of iterations:            208608
Max size of waitlist:            123
Average size of waitlist:        48
Number of computed successors:   246098
Max successors for one state:    2
Number of times merged:          24866
Number of times stopped:         34062
Number of times breaked:         82

Total time for CPA algorithm:       138.841s (Max:    48.293s)
  Time for choose from waitlist:      0.299s
  Time for precision adjustment:    115.690s
  Time for transfer relation:        17.584s
  Time for merge operator:            2.279s
  Time for stop operator:             0.588s
  Time for adding to reached set:     0.721s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   82
Avg. length of target path (in blocks):                2190 (count: 82, min: 3, max: 56, avg: 26.71)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  44.613s
  Counterexample analysis:                            43.792s (Max:    35.402s, Calls: 82)
    Refinement sat check:                              7.897s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.065s
  Precision update:                                    0.074s
  ARG update:                                          0.630s

Length of refined path (in blocks):                    1834 (count: 81, min: 2, max: 56, avg: 22.64)
Number of affected states:                             1217 (count: 81, min: 0, max: 55, avg: 15.02)
Length (states) of path with itp 'true':                536 (count: 81, min: 0, max: 42, avg: 6.62)
Length (states) of path with itp non-trivial itp:      1217 (count: 81, min: 0, max: 55, avg: 15.02)
Length (states) of path with itp 'false':                59 (count: 81, min: 0, max: 1, avg: 0.73)
Different non-trivial interpolants along paths:          82 (count: 81, min: 0, max: 12, avg: 1.01)
Equal non-trivial interpolants along paths:            1081 (count: 81, min: 0, max: 53, avg: 13.35)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                82
Number of successful refinements:     81
Number of failed refinements:         1
Max. size of reached set before ref.: 9275
Max. size of reached set after ref.:  5034
Avg. size of reached set before ref.: 3985.63
Avg. size of reached set after ref.:  1443.36

Total time for CEGAR algorithm:     184.116s
Time for refinements:                45.148s
Average time for refinement:          0.550s
Max time for refinement:             35.406s

Code Coverage
-----------------------------
  Function coverage:      0.640
  Visited lines:          353
  Total lines:            400
  Line coverage:          0.883
  Visited conditions:     161
  Total conditions:       212
  Condition coverage:     0.759

CPAchecker general statistics
-----------------------------
Number of program locations:     940
Number of CFA edges:             1075
Number of relevant variables:    63
Number of functions:             25
Number of loops:                 7
Size of reached set:             7880
  Number of reached locations:   308 (33%)
    Avg states per location:     25
    Max states per location:     392 (at node N8)
  Number of reached functions:   16 (64%)
  Number of partitions:          7793
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N506 (before line 1179), Function main called from node N482, stack depth 1 [6ad3381f], stack [main]])
  Number of target states:       1
  Size of final wait list        82

Time for analysis setup:          3.779s
  Time for loading CPAs:          0.831s
  Time for loading parser:        0.739s
  Time for CFA construction:      2.092s
    Time for parsing file(s):     0.631s
    Time for AST to CFA:          0.717s
    Time for CFA sanity check:    0.147s
    Time for post-processing:     0.471s
      Time for var class.:        0.195s
Time for Analysis:              184.117s
CPU time for analysis:          184.090s
Total time for CPAchecker:      187.900s
Total CPU time for CPAchecker:  187.860s
Time for statistics:              0.205s

Time for Garbage Collector:       1.936s (in 158 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                124MB (   118 MiB) max;     81MB (    77 MiB) avg;    127MB (   122 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     37MB (    35 MiB) avg;     39MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8083MB (  7709 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
