scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_stack_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_z614c758/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1017: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1020: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1092: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1212: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1218: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

What!
Error: Refinement failed: Interpolation failed (msat_get_model failed with "non-integer model value", probably the actual problem is interpolation) (InterpolationManager.fallbackWithoutInterpolation, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            22931 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  19787 (86%)
  Because of loop head:            2870 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         274 (1%)
  Times precision was empty:       7650 (33%)
  Times precision was {false}:     390 (2%)
  Times result was cached:         11771 (51%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3120 (14%)
  Times result was 'false':        3312 (14%)
Number of strengthen sat checks:   0
Number of coverage checks:         43257
  BDD entailment checks:           14985
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          69
Number of abstraction locations:          51
Max number of predicates per location:    33
Avg number of predicates per location:    9
Total predicates per abstraction:         156441
Max number of predicates per abstraction: 33
Avg number of predicates per abstraction: 44.57
Number of irrelevant predicates:          73868 (47%)
Number of preds handled by boolean abs:   19742 (13%)
  Total number of models for allsat:      676252
  Max number of models for allsat:        81432
  Avg number of models for allsat:        216.75

Time for post operator:                  6.307s
  Time for path formula creation:        6.073s
Time for strengthen operator:            0.222s
Time for prec operator:                242.962s
  Time for abstraction:                242.379s (Max:    27.401s, Count: 22931)
    Boolean abstraction:               222.512s
    Solving time:                       15.331s (Max:     0.178s)
    Model enumeration time:            176.143s
    Time for BDD construction:          31.985s (Max:     4.578s)
Time for merge operator:                 0.676s
Time for coverage check:                 0.063s
  Time for BDD entailment checks:        0.054s
Total time for SMT solver (w/o itp):   191.474s

Number of path formula cache hits:   155602 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.351s

Total number of created targets for pointer analysis: 18103
   Number of created targets for uf: *signed_int is 261
   Number of created targets for uf: *unsigned_char is 15
   Number of created targets for uf: *(unsigned_char)* is 133
   Number of created targets for uf: *_Bool is 45
   Number of created targets for uf: *unsigned_int is 221
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 163


Number of BDD nodes:                               227392
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       35402 (count: 55612, min: 0, max: 2162, avg: 0.64)
Time for BDD node cleanup:                             0.039s
Time for BDD garbage collection:                       0.289s (in 63 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.588s
  Time for transition matches:                         0.251s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       175487 (count: 175487, min: 1, max: 1, avg: 1.00) [1 x 175487]

CPA algorithm statistics
------------------------
Number of iterations:            118486
Max size of waitlist:            26
Average size of waitlist:        8
Number of computed successors:   140290
Max successors for one state:    2
Number of times merged:          14136
Number of times stopped:         17981
Number of times breaked:         85

Total time for CPA algorithm:       257.213s (Max:    52.218s)
  Time for choose from waitlist:      0.147s
  Time for precision adjustment:    244.328s
  Time for transfer relation:         9.810s
  Time for merge operator:            1.116s
  Time for stop operator:             0.410s
  Time for adding to reached set:     0.435s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   85
Avg. length of target path (in blocks):                3711 (count: 85, min: 3, max: 89, avg: 43.66)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  39.420s
  Counterexample analysis:                            38.812s (Max:    24.352s, Calls: 85)
    Refinement sat check:                             12.571s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.005s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.088s
  Precision update:                                    0.061s
  ARG update:                                          0.392s

Length of refined path (in blocks):                    2870 (count: 84, min: 2, max: 73, avg: 34.17)
Number of affected states:                             2631 (count: 84, min: 0, max: 72, avg: 31.32)
Length (states) of path with itp 'true':                155 (count: 84, min: 0, max: 42, avg: 1.85)
Length (states) of path with itp non-trivial itp:      2631 (count: 84, min: 0, max: 72, avg: 31.32)
Length (states) of path with itp 'false':                62 (count: 84, min: 0, max: 1, avg: 0.74)
Different non-trivial interpolants along paths:         213 (count: 84, min: 0, max: 18, avg: 2.54)
Equal non-trivial interpolants along paths:            2346 (count: 84, min: 0, max: 61, avg: 27.93)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                85
Number of successful refinements:     84
Number of failed refinements:         1
Max. size of reached set before ref.: 2820
Max. size of reached set after ref.:  1636
Avg. size of reached set before ref.: 1523.32
Avg. size of reached set after ref.:  124.81

Total time for CEGAR algorithm:     296.955s
Time for refinements:                39.717s
Average time for refinement:          0.467s
Max time for refinement:             24.354s

Code Coverage
-----------------------------
  Function coverage:      0.600
  Visited lines:          338
  Total lines:            400
  Line coverage:          0.845
  Visited conditions:     141
  Total conditions:       212
  Condition coverage:     0.665

CPAchecker general statistics
-----------------------------
Number of program locations:     940
Number of CFA edges:             1075
Number of relevant variables:    63
Number of functions:             25
Number of loops:                 7
Size of reached set:             1346
  Number of reached locations:   265 (28%)
    Avg states per location:     5
    Max states per location:     45 (at node N8)
  Number of reached functions:   15 (60%)
  Number of partitions:          1310
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N506 (before line 1179), Function main called from node N482, stack depth 1 [6ad3381f], stack [main]])
  Number of target states:       1
  Size of final wait list        8

Time for analysis setup:          3.829s
  Time for loading CPAs:          0.822s
  Time for loading parser:        0.673s
  Time for CFA construction:      2.177s
    Time for parsing file(s):     0.687s
    Time for AST to CFA:          0.740s
    Time for CFA sanity check:    0.138s
    Time for post-processing:     0.496s
      Time for var class.:        0.181s
Time for Analysis:              296.955s
CPU time for analysis:          296.890s
Total time for CPAchecker:      300.789s
Total CPU time for CPAchecker:  300.710s
Time for statistics:              0.106s

Time for Garbage Collector:       1.787s (in 334 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 80MB (    77 MiB) max;     58MB (    55 MiB) avg;     84MB (    80 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     38MB (    36 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8152MB (  7775 MiB) max;   8139MB (  7762 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
