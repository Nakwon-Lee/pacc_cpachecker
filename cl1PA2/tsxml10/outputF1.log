scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_stack_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_o1037_qi/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1017: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1020: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1092: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1212: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1218: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            34101 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  32231 (95%)
  Because of loop head:            1764 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         106 (0%)
  Times precision was empty:       17825 (52%)
  Times precision was {false}:     720 (2%)
  Times result was cached:         13490 (40%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2066 (6%)
  Times result was 'false':        1399 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         60428
  BDD entailment checks:           13172
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          50
Number of abstraction locations:          53
Max number of predicates per location:    25
Avg number of predicates per location:    5
Total predicates per abstraction:         173669
Max number of predicates per abstraction: 25
Avg number of predicates per abstraction: 62.34
Number of irrelevant predicates:          127970 (74%)
Number of preds handled by boolean abs:   9583 (6%)
  Total number of models for allsat:      192105
  Max number of models for allsat:        9552
  Avg number of models for allsat:        92.98

Time for post operator:                 10.718s
  Time for path formula creation:       10.428s
Time for strengthen operator:            0.338s
Time for prec operator:                105.662s
  Time for abstraction:                104.776s (Max:     3.497s, Count: 34101)
    Boolean abstraction:                86.528s
    Solving time:                       10.890s (Max:     0.171s)
    Model enumeration time:             68.697s
    Time for BDD construction:           8.708s (Max:     0.595s)
Time for merge operator:                 1.240s
Time for coverage check:                 0.102s
  Time for BDD entailment checks:        0.076s
Total time for SMT solver (w/o itp):    79.587s

Number of path formula cache hits:   211533 (71%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.320s

Total number of created targets for pointer analysis: 32319
   Number of created targets for uf: *signed_int is 317
   Number of created targets for uf: *unsigned_char is 15
   Number of created targets for uf: *(unsigned_char)* is 145
   Number of created targets for uf: *_Bool is 53
   Number of created targets for uf: *unsigned_int is 241
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 370


Number of BDD nodes:                               134903
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       12009 (count: 50491, min: 0, max: 929, avg: 0.24)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.160s (in 13 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.945s
  Time for transition matches:                         0.393s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.018s
Automaton transfers with branching:                0
Automaton transfer successors:                       260089 (count: 260089, min: 1, max: 1, avg: 1.00) [1 x 260089]

CPA algorithm statistics
------------------------
Number of iterations:            173070
Max size of waitlist:            30
Average size of waitlist:        13
Number of computed successors:   205742
Max successors for one state:    2
Number of times merged:          23628
Number of times stopped:         31020
Number of times breaked:         59

Total time for CPA algorithm:       128.444s (Max:    25.605s)
  Time for choose from waitlist:      0.243s
  Time for precision adjustment:    107.520s
  Time for transfer relation:        16.274s
  Time for merge operator:            1.945s
  Time for stop operator:             0.529s
  Time for adding to reached set:     0.514s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   59
Avg. length of target path (in blocks):                1707 (count: 59, min: 3, max: 74, avg: 28.93)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  10.942s
  Counterexample analysis:                             8.442s (Max:     0.971s, Calls: 59)
    Refinement sat check:                              7.096s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.023s
  Error path post-processing:                          1.677s
  Predicate creation:                                  0.083s
  Precision update:                                    0.072s
  ARG update:                                          0.596s

Length of refined path (in blocks):                    1444 (count: 58, min: 2, max: 74, avg: 24.90)
Number of affected states:                             1109 (count: 58, min: 0, max: 73, avg: 19.12)
Length (states) of path with itp 'true':                277 (count: 58, min: 0, max: 50, avg: 4.78)
Length (states) of path with itp non-trivial itp:      1109 (count: 58, min: 0, max: 73, avg: 19.12)
Length (states) of path with itp 'false':                40 (count: 58, min: 0, max: 1, avg: 0.69)
Different non-trivial interpolants along paths:          68 (count: 58, min: 0, max: 10, avg: 1.17)
Equal non-trivial interpolants along paths:            1004 (count: 58, min: 0, max: 71, avg: 17.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                59
Number of successful refinements:     58
Number of failed refinements:         0
Max. size of reached set before ref.: 7583
Max. size of reached set after ref.:  4943
Avg. size of reached set before ref.: 3463.22
Avg. size of reached set after ref.:  534.59

Total time for CEGAR algorithm:     139.665s
Time for refinements:                11.176s
Average time for refinement:          0.189s
Max time for refinement:              2.663s

Code Coverage
-----------------------------
  Function coverage:      0.680
  Visited lines:          367
  Total lines:            400
  Line coverage:          0.918
  Visited conditions:     181
  Total conditions:       212
  Condition coverage:     0.854

CPAchecker general statistics
-----------------------------
Number of program locations:     940
Number of CFA edges:             1075
Number of relevant variables:    63
Number of functions:             25
Number of loops:                 7
Size of reached set:             7583
  Number of reached locations:   345 (37%)
    Avg states per location:     21
    Max states per location:     380 (at node N8)
  Number of reached functions:   17 (68%)
  Number of partitions:          7486
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N506 (before line 1179), Function main called from node N482, stack depth 1 [6ad3381f], stack [main]])
  Number of target states:       1
  Size of final wait list        9

Time for analysis setup:          3.568s
  Time for loading CPAs:          0.718s
  Time for loading parser:        0.707s
  Time for CFA construction:      1.938s
    Time for parsing file(s):     0.577s
    Time for AST to CFA:          0.690s
    Time for CFA sanity check:    0.118s
    Time for post-processing:     0.422s
      Time for var class.:        0.169s
Time for Analysis:              139.666s
CPU time for analysis:          139.640s
Time for analyzing result:        0.005s
Total time for CPAchecker:      143.245s
Total CPU time for CPAchecker:  143.220s
Time for statistics:              0.219s

Time for Garbage Collector:       1.932s (in 192 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                120MB (   114 MiB) max;     70MB (    66 MiB) avg;    126MB (   120 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     37MB (    35 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8156MB (  7778 MiB) max;   8091MB (  7716 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 864) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
