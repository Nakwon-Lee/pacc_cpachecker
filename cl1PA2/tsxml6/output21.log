scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_queue_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_h8ba5jxc/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1046: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1046: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1046: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1051: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1051: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1051: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1062: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1062: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1062: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1067: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1067: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1067: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1090: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1090: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1090: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1111: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1111: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1111: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1143: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1143: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1143: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1164: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1164: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1164: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1166: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1166: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1166: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1168: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1168: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1168: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1183: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1183: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1183: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1200: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1200: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1200: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1202: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1202: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1202: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1204: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1204: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1204: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1315: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1321: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3601 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3511 (98%)
  Because of loop head:            86 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (0%)
  Times precision was empty:       3581 (99%)
  Times precision was {false}:     5 (0%)
  Times result was cached:         4 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11 (0%)
  Times result was 'false':        4 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         5888
  BDD entailment checks:           1018
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       131
Number of predicates discovered:          4
Number of abstraction locations:          4
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         21
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 1.31
Number of irrelevant predicates:          7 (33%)
Number of preds handled by boolean abs:   12 (57%)
  Total number of models for allsat:      15
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.36

Time for post operator:                  4.999s
  Time for path formula creation:        4.892s
Time for strengthen operator:            0.156s
Time for prec operator:                 15.259s
  Time for abstraction:                 15.003s (Max:     3.095s, Count: 3601)
    Boolean abstraction:                13.947s
    Solving time:                       13.584s (Max:     2.820s)
    Model enumeration time:              0.777s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.268s
Time for coverage check:                 0.039s
  Time for BDD entailment checks:        0.036s
Total time for SMT solver (w/o itp):    14.362s

Number of path formula cache hits:   20223 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.640s

Total number of created targets for pointer analysis: 37158
   Number of created targets for uf: *signed_int is 345
   Number of created targets for uf: *unsigned_char is 243
   Number of created targets for uf: *(unsigned_char)* is 13
   Number of created targets for uf: *_Bool is 7
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 5


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          19 (count: 4694, min: 0, max: 16, avg: 0.00)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.283s
Automaton transfers with branching:                0
Automaton transfer successors:                        30538 (count: 30538, min: 1, max: 1, avg: 1.00) [1 x 30538]

CPA algorithm statistics
------------------------
Number of iterations:            20309
Max size of waitlist:            118
Average size of waitlist:        56
Number of computed successors:   23816
Max successors for one state:    2
Number of times merged:          2435
Number of times stopped:         3452
Number of times breaked:         4

Total time for CPA algorithm:        24.168s (Max:    14.180s)
  Time for choose from waitlist:      0.069s
  Time for precision adjustment:     15.816s
  Time for transfer relation:         6.903s
  Time for merge operator:            0.488s
  Time for stop operator:             0.238s
  Time for adding to reached set:     0.202s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  24 (count: 4, min: 3, max: 7, avg: 6.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.885s
  Counterexample analysis:                             1.696s (Max:     0.769s, Calls: 4)
    Refinement sat check:                              1.554s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.001s
  ARG update:                                          0.166s

Length of refined path (in blocks):                       9 (count: 4, min: 2, max: 3, avg: 2.25)
Number of affected states:                                3 (count: 4, min: 0, max: 2, avg: 0.75)
Length (states) of path with itp 'true':                  2 (count: 4, min: 0, max: 1, avg: 0.50)
Length (states) of path with itp non-trivial itp:         3 (count: 4, min: 0, max: 2, avg: 0.75)
Length (states) of path with itp 'false':                 3 (count: 4, min: 0, max: 1, avg: 0.75)
Different non-trivial interpolants along paths:           1 (count: 4, min: 0, max: 1, avg: 0.25)
Equal non-trivial interpolants along paths:               0 (count: 4, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 10750
Max. size of reached set after ref.:  9774
Avg. size of reached set before ref.: 9827.75
Avg. size of reached set after ref.:  4738.50

Total time for CEGAR algorithm:      26.246s
Time for refinements:                 2.037s
Average time for refinement:          0.509s
Max time for refinement:              0.919s

Code Coverage
-----------------------------
  Function coverage:      0.043
  Visited lines:          204
  Total lines:            548
  Line coverage:          0.372
  Visited conditions:     0
  Total conditions:       334
  Condition coverage:     0.000

CPAchecker general statistics
-----------------------------
Number of program locations:     1166
Number of CFA edges:             1348
Number of relevant variables:    79
Number of functions:             23
Number of loops:                 8
Size of reached set:             3
  Number of reached locations:   3 (0%)
    Avg states per location:     1
    Max states per location:     1 (at node N601)
  Number of reached functions:   1 (4%)
  Number of partitions:          3
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        1

Time for analysis setup:          4.007s
  Time for loading CPAs:          0.731s
  Time for loading parser:        0.690s
  Time for CFA construction:      2.477s
    Time for parsing file(s):     0.722s
    Time for AST to CFA:          0.839s
    Time for CFA sanity check:    0.169s
    Time for post-processing:     0.565s
      Time for var class.:        0.272s
Time for Analysis:               26.246s
CPU time for analysis:           26.250s
Total time for CPAchecker:       30.257s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.063s

Time for Garbage Collector:       0.344s (in 18 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 71MB (    68 MiB) max;     52MB (    49 MiB) avg;     77MB (    73 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     33MB (    32 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    37 MiB) max;     35MB (    34 MiB) avg
Total process virtual memory:   8152MB (  7775 MiB) max;   8076MB (  7702 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
