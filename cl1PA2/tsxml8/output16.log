scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_time_var_mutex_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2_kbtki_/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 810: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 810: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 810: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 811: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 819: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 819: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 819: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 835: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 835: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 835: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 836: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 846: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 846: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 846: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 931: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 937: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3373 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2734 (81%)
  Because of loop head:            582 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         57 (2%)
  Times precision was empty:       1353 (40%)
  Times precision was {false}:     73 (2%)
  Times result was cached:         1405 (42%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      542 (16%)
  Times result was 'false':        546 (16%)
Number of strengthen sat checks:   0
Number of coverage checks:         7230
  BDD entailment checks:           2598
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       67
Number of predicates discovered:          17
Number of abstraction locations:          23
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         8366
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 13.60
Number of irrelevant predicates:          1851 (22%)
Number of preds handled by boolean abs:   1733 (21%)
  Total number of models for allsat:      976
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.80

Time for post operator:                  3.314s
  Time for path formula creation:        3.222s
Time for strengthen operator:            0.067s
Time for prec operator:                 16.212s
  Time for abstraction:                 16.020s (Max:     0.327s, Count: 3373)
    Boolean abstraction:                 9.939s
    Solving time:                        8.392s (Max:     0.273s)
    Model enumeration time:              2.666s
    Time for BDD construction:           0.120s (Max:     0.013s)
Time for merge operator:                 0.315s
Time for coverage check:                 0.030s
  Time for BDD entailment checks:        0.029s
Total time for SMT solver (w/o itp):    11.059s

Number of path formula cache hits:   26582 (74%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.044s

Total number of created targets for pointer analysis: 18355
   Number of created targets for uf: *signed_int is 16
   Number of created targets for uf: *unsigned_char is 289
   Number of created targets for uf: *(unsigned_char)* is 145
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 112


Number of BDD nodes:                               1438
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1771 (count: 7963, min: 0, max: 285, avg: 0.22)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.216s
Automaton transfers with branching:                0
Automaton transfer successors:                        32614 (count: 32614, min: 1, max: 1, avg: 1.00) [1 x 32614]

CPA algorithm statistics
------------------------
Number of iterations:            21982
Max size of waitlist:            27
Average size of waitlist:        6
Number of computed successors:   25410
Max successors for one state:    2
Number of times merged:          2316
Number of times stopped:         2799
Number of times breaked:         26

Total time for CPA algorithm:        22.340s (Max:     2.135s)
  Time for choose from waitlist:      0.061s
  Time for precision adjustment:     16.637s
  Time for transfer relation:         4.524s
  Time for merge operator:            0.492s
  Time for stop operator:             0.144s
  Time for adding to reached set:     0.176s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   26
Avg. length of target path (in blocks):                 704 (count: 26, min: 3, max: 66, avg: 27.08)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.791s
  Counterexample analysis:                             3.610s (Max:     0.263s, Calls: 26)
    Refinement sat check:                              3.114s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.032s
  Precision update:                                    0.009s
  ARG update:                                          0.093s

Length of refined path (in blocks):                     604 (count: 26, min: 2, max: 62, avg: 23.23)
Number of affected states:                              573 (count: 26, min: 0, max: 61, avg: 22.04)
Length (states) of path with itp 'true':                  5 (count: 26, min: 0, max: 1, avg: 0.19)
Length (states) of path with itp non-trivial itp:       573 (count: 26, min: 0, max: 61, avg: 22.04)
Length (states) of path with itp 'false':                17 (count: 26, min: 0, max: 1, avg: 0.65)
Different non-trivial interpolants along paths:          28 (count: 26, min: 0, max: 3, avg: 1.08)
Equal non-trivial interpolants along paths:             521 (count: 26, min: 0, max: 59, avg: 20.04)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                26
Number of successful refinements:     26
Number of failed refinements:         0
Max. size of reached set before ref.: 1322
Max. size of reached set after ref.:  556
Avg. size of reached set before ref.: 850.00
Avg. size of reached set after ref.:  44.58

Total time for CEGAR algorithm:      26.248s
Time for refinements:                 3.890s
Average time for refinement:          0.149s
Max time for refinement:              0.272s

Code Coverage
-----------------------------
  Function coverage:      0.500
  Visited lines:          292
  Total lines:            365
  Line coverage:          0.800
  Visited conditions:     113
  Total conditions:       184
  Condition coverage:     0.614

CPAchecker general statistics
-----------------------------
Number of program locations:     714
Number of CFA edges:             815
Number of relevant variables:    54
Number of functions:             18
Number of loops:                 4
Size of reached set:             1124
  Number of reached locations:   188 (26%)
    Avg states per location:     5
    Max states per location:     24 (at node N8)
  Number of reached functions:   9 (50%)
  Number of partitions:          1106
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N377 (before line 889), Function main called from node N355, stack depth 1 [1458ed9c], stack [main]])
  Number of target states:       0
  Size of final wait list        5

Time for analysis setup:          3.537s
  Time for loading CPAs:          0.767s
  Time for loading parser:        0.712s
  Time for CFA construction:      1.912s
    Time for parsing file(s):     0.603s
    Time for AST to CFA:          0.630s
    Time for CFA sanity check:    0.097s
    Time for post-processing:     0.427s
      Time for var class.:        0.166s
Time for Analysis:               26.248s
CPU time for analysis:           26.240s
Total time for CPAchecker:       29.789s
Total CPU time for CPAchecker:   29.770s
Time for statistics:              0.112s

Time for Garbage Collector:       0.283s (in 36 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     40MB (    38 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     34MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8074MB (  7700 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
