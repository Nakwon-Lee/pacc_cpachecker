scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-sets/test_add_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ywr1m801/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            77 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  55 (71%)
  Because of loop head:            17 (22%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5 (6%)
  Times precision was empty:       27 (35%)
  Times precision was {false}:     3 (4%)
  Times result was cached:         4 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      43 (56%)
  Times result was 'false':        9 (12%)
Number of strengthen sat checks:   0
Number of coverage checks:         25
  BDD entailment checks:           7
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       6
Number of predicates discovered:          27
Number of abstraction locations:          14
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         135
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.93
Number of irrelevant predicates:          29 (21%)
Number of preds handled by boolean abs:   103 (76%)
  Total number of models for allsat:      51
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.19

Time for post operator:                  0.201s
  Time for path formula creation:        0.198s
Time for strengthen operator:            0.005s
Time for prec operator:                  0.281s
  Time for abstraction:                  0.256s (Max:     0.018s, Count: 77)
    Boolean abstraction:                 0.087s
    Solving time:                        0.040s (Max:     0.005s)
    Model enumeration time:              0.010s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.014s
Time for coverage check:                 0.006s
  Time for BDD entailment checks:        0.006s
Total time for SMT solver (w/o itp):     0.050s

Number of path formula cache hits:   251 (38%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.189s

Total number of created targets for pointer analysis: 18
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *(struct_ldv_list_head)* is 5


Number of BDD nodes:                               300
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 437, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                          612 (count: 612, min: 1, max: 1, avg: 1.00) [1 x 612]

CPA algorithm statistics
------------------------
Number of iterations:            204
Max size of waitlist:            4
Average size of waitlist:        1
Number of computed successors:   230
Max successors for one state:    2
Number of times merged:          9
Number of times stopped:         13
Number of times breaked:         3

Total time for CPA algorithm:         0.759s (Max:     0.309s)
  Time for choose from waitlist:      0.000s
  Time for precision adjustment:      0.342s
  Time for transfer relation:         0.344s
  Time for merge operator:            0.016s
  Time for stop operator:             0.007s
  Time for adding to reached set:     0.022s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                  43 (count: 3, min: 10, max: 17, avg: 14.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.106s
  Counterexample analysis:                             0.054s (Max:     0.027s, Calls: 3)
    Refinement sat check:                              0.024s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.026s
  Precision update:                                    0.003s
  ARG update:                                          0.015s

Length of refined path (in blocks):                      37 (count: 3, min: 6, max: 16, avg: 12.33)
Number of affected states:                               32 (count: 3, min: 5, max: 14, avg: 10.67)
Length (states) of path with itp 'true':                  2 (count: 3, min: 0, max: 1, avg: 0.67)
Length (states) of path with itp non-trivial itp:        32 (count: 3, min: 5, max: 14, avg: 10.67)
Length (states) of path with itp 'false':                 2 (count: 3, min: 0, max: 1, avg: 0.67)
Different non-trivial interpolants along paths:          18 (count: 3, min: 4, max: 9, avg: 6.00)
Equal non-trivial interpolants along paths:              11 (count: 3, min: 0, max: 7, avg: 3.67)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 65
Max. size of reached set after ref.:  5
Avg. size of reached set before ref.: 55.67
Avg. size of reached set after ref.:  4.33

Total time for CEGAR algorithm:       0.883s
Time for refinements:                 0.124s
Average time for refinement:          0.041s
Max time for refinement:              0.056s

Code Coverage
-----------------------------
  Function coverage:      0.389
  Visited lines:          163
  Total lines:            183
  Line coverage:          0.891
  Visited conditions:     10
  Total conditions:       16
  Condition coverage:     0.625

CPAchecker general statistics
-----------------------------
Number of program locations:     419
Number of CFA edges:             420
Number of relevant variables:    43
Number of functions:             18
Number of loops:                 2
Size of reached set:             55
  Number of reached locations:   44 (11%)
    Avg states per location:     1
    Max states per location:     2 (at node N68)
  Number of reached functions:   7 (39%)
  Number of partitions:          55
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.049s
  Time for loading CPAs:          0.827s
  Time for loading parser:        0.637s
  Time for CFA construction:      1.449s
    Time for parsing file(s):     0.565s
    Time for AST to CFA:          0.378s
    Time for CFA sanity check:    0.067s
    Time for post-processing:     0.284s
      Time for var class.:        0.111s
Time for Analysis:                0.883s
CPU time for analysis:            0.890s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.936s
Total CPU time for CPAchecker:    3.930s
Time for statistics:              0.062s

Time for Garbage Collector:       0.088s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 44MB (    42 MiB) max;     27MB (    26 MiB) avg;     62MB (    60 MiB) peak
Used non-heap memory:             30MB (    29 MiB) max;     23MB (    22 MiB) avg;     32MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        33MB (    32 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8013MB (  7642 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
