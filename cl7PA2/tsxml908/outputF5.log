scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--tty--serial--altera_jtaguart.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_on9431d5/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_copy_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_insert_char to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_add_one_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_write_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            5464 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4446 (81%)
  Because of loop head:            990 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         28 (1%)
  Times precision was empty:       1942 (36%)
  Times precision was {false}:     90 (2%)
  Times result was cached:         3355 (61%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      77 (1%)
  Times result was 'false':        29 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         3492
  BDD entailment checks:           2034
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          2
Number of abstraction locations:          78
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         3522
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 21.09
Number of irrelevant predicates:          1673 (48%)
Number of preds handled by boolean abs:   77 (2%)
  Total number of models for allsat:      77
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.433s
  Time for path formula creation:        1.378s
Time for strengthen operator:            0.070s
Time for prec operator:                  1.387s
  Time for abstraction:                  1.188s (Max:     0.021s, Count: 5464)
    Boolean abstraction:                 0.107s
    Solving time:                        0.123s (Max:     0.009s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.027s (Max:     0.007s)
Time for merge operator:                 0.053s
Time for coverage check:                 0.025s
  Time for BDD entailment checks:        0.025s
Total time for SMT solver (w/o itp):     0.127s

Number of path formula cache hits:   37125 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.246s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         153 (count: 4893, min: 0, max: 26, avg: 0.03)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.225s
Automaton transfers with branching:                0
Automaton transfer successors:                        50741 (count: 50741, min: 1, max: 1, avg: 1.00) [1 x 50741]

CPA algorithm statistics
------------------------
Number of iterations:            20939
Max size of waitlist:            26
Average size of waitlist:        13
Number of computed successors:   23111
Max successors for one state:    2
Number of times merged:          729
Number of times stopped:         1960
Number of times breaked:         28

Total time for CPA algorithm:         4.863s (Max:     0.647s)
  Time for choose from waitlist:      0.069s
  Time for precision adjustment:      1.701s
  Time for transfer relation:         2.545s
  Time for merge operator:            0.131s
  Time for stop operator:             0.125s
  Time for adding to reached set:     0.111s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   28
Avg. length of target path (in blocks):                 411 (count: 28, min: 8, max: 25, avg: 14.68)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.396s
  Counterexample analysis:                             0.221s (Max:     0.025s, Calls: 28)
    Refinement sat check:                              0.164s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.025s
  ARG update:                                          0.118s

Length of refined path (in blocks):                     383 (count: 28, min: 7, max: 24, avg: 13.68)
Number of affected states:                              355 (count: 28, min: 6, max: 23, avg: 12.68)
Length (states) of path with itp 'true':                  0 (count: 28, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       355 (count: 28, min: 6, max: 23, avg: 12.68)
Length (states) of path with itp 'false':                28 (count: 28, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 28, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             327 (count: 28, min: 5, max: 22, avg: 11.68)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                28
Number of successful refinements:     28
Number of failed refinements:         0
Max. size of reached set before ref.: 888
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 736.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       5.329s
Time for refinements:                 0.459s
Average time for refinement:          0.016s
Max time for refinement:              0.064s

Code Coverage
-----------------------------
  Function coverage:      0.744
  Visited lines:          1496
  Total lines:            1560
  Line coverage:          0.959
  Visited conditions:     102
  Total conditions:       124
  Condition coverage:     0.823

CPAchecker general statistics
-----------------------------
Number of program locations:     1791
Number of CFA edges:             1863
Number of relevant variables:    258
Number of functions:             43
Number of loops:                 3
Size of reached set:             599
  Number of reached locations:   394 (22%)
    Avg states per location:     1
    Max states per location:     19 (at node N1063)
  Number of reached functions:   32 (74%)
  Number of partitions:          599
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.242s
  Time for loading CPAs:          0.681s
  Time for loading parser:        0.527s
  Time for CFA construction:      1.953s
    Time for parsing file(s):     0.623s
    Time for AST to CFA:          0.666s
    Time for CFA sanity check:    0.091s
    Time for post-processing:     0.436s
      Time for var class.:        0.200s
Time for Analysis:                5.330s
CPU time for analysis:            5.330s
Time for analyzing result:        0.000s
Total time for CPAchecker:        8.576s
Total CPU time for CPAchecker:    8.570s
Time for statistics:              0.070s

Time for Garbage Collector:       0.193s (in 16 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 66MB (    63 MiB) max;     39MB (    38 MiB) avg;     69MB (    65 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     29MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8057MB (  7684 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
