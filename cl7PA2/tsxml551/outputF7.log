scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--wireless--orinoco--orinoco_nortel.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_le5sfi0d/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_orinocodev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hermes_struct_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_orinocodev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function orinoco_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function orinoco_if_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            344 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  280 (81%)
  Because of loop head:            56 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (2%)
  Times precision was empty:       84 (24%)
  Times precision was {false}:     21 (6%)
  Times result was cached:         208 (60%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      31 (9%)
  Times result was 'false':        15 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         398
  BDD entailment checks:           122
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       56
Number of predicates discovered:          2
Number of abstraction locations:          21
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         260
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 5.00
Number of irrelevant predicates:          97 (37%)
Number of preds handled by boolean abs:   31 (12%)
  Total number of models for allsat:      31
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.667s
  Time for path formula creation:        0.639s
Time for strengthen operator:            0.045s
Time for prec operator:                  0.304s
  Time for abstraction:                  0.254s (Max:     0.018s, Count: 344)
    Boolean abstraction:                 0.062s
    Solving time:                        0.084s (Max:     0.014s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.003s (Max:     0.001s)
Time for merge operator:                 0.024s
Time for coverage check:                 0.009s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):     0.086s

Number of path formula cache hits:   3158 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.622s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          39 (count: 502, min: 0, max: 39, avg: 0.08)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.038s
Automaton transfers with branching:                0
Automaton transfer successors:                         5496 (count: 5496, min: 1, max: 1, avg: 1.00) [1 x 5496]

CPA algorithm statistics
------------------------
Number of iterations:            2055
Max size of waitlist:            10
Average size of waitlist:        3
Number of computed successors:   2308
Max successors for one state:    2
Number of times merged:          138
Number of times stopped:         220
Number of times breaked:         8

Total time for CPA algorithm:         1.605s (Max:     0.549s)
  Time for choose from waitlist:      0.011s
  Time for precision adjustment:      0.414s
  Time for transfer relation:         1.003s
  Time for merge operator:            0.050s
  Time for stop operator:             0.029s
  Time for adding to reached set:     0.045s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                 114 (count: 8, min: 5, max: 20, avg: 14.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.122s
  Counterexample analysis:                             0.077s (Max:     0.021s, Calls: 8)
    Refinement sat check:                              0.052s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.003s
  ARG update:                                          0.013s

Length of refined path (in blocks):                     106 (count: 8, min: 4, max: 19, avg: 13.25)
Number of affected states:                               98 (count: 8, min: 3, max: 18, avg: 12.25)
Length (states) of path with itp 'true':                  0 (count: 8, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        98 (count: 8, min: 3, max: 18, avg: 12.25)
Length (states) of path with itp 'false':                 8 (count: 8, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 8, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              90 (count: 8, min: 2, max: 17, avg: 11.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 368
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 230.88
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.749s
Time for refinements:                 0.142s
Average time for refinement:          0.017s
Max time for refinement:              0.034s

Code Coverage
-----------------------------
  Function coverage:      0.391
  Visited lines:          1233
  Total lines:            1423
  Line coverage:          0.866
  Visited conditions:     56
  Total conditions:       80
  Condition coverage:     0.700

CPAchecker general statistics
-----------------------------
Number of program locations:     1594
Number of CFA edges:             1634
Number of relevant variables:    129
Number of functions:             23
Number of loops:                 4
Size of reached set:             251
  Number of reached locations:   186 (12%)
    Avg states per location:     1
    Max states per location:     4 (at node N14)
  Number of reached functions:   9 (39%)
  Number of partitions:          251
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.312s
  Time for loading CPAs:          0.655s
  Time for loading parser:        0.537s
  Time for CFA construction:      1.996s
    Time for parsing file(s):     0.603s
    Time for AST to CFA:          0.736s
    Time for CFA sanity check:    0.093s
    Time for post-processing:     0.422s
      Time for var class.:        0.151s
Time for Analysis:                1.749s
CPU time for analysis:            1.760s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.064s
Total CPU time for CPAchecker:    5.060s
Time for statistics:              0.054s

Time for Garbage Collector:       0.125s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     34MB (    32 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             33MB (    31 MiB) max;     25MB (    24 MiB) avg;     34MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    33 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:   8017MB (  7646 MiB) max;   7975MB (  7606 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
