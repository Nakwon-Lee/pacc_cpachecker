scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mmc--host--sdricoh_cs.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_qze7xtao/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_suspend_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_remove_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_free_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_alloc_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_resume_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_add_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_request_done to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            11950 (9% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  10750 (90%)
  Because of loop head:            1160 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         40 (0%)
  Times precision was empty:       1992 (17%)
  Times precision was {false}:     314 (3%)
  Times result was cached:         9431 (79%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      213 (2%)
  Times result was 'false':        55 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         6186
  BDD entailment checks:           2444
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       158
Number of predicates discovered:          3
Number of abstraction locations:          121
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         12042
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 22.85
Number of irrelevant predicates:          5373 (45%)
Number of preds handled by boolean abs:   231 (2%)
  Total number of models for allsat:      219
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  2.781s
  Time for path formula creation:        2.664s
Time for strengthen operator:            0.128s
Time for prec operator:                  2.817s
  Time for abstraction:                  2.522s (Max:     0.023s, Count: 11950)
    Boolean abstraction:                 0.230s
    Solving time:                        0.465s (Max:     0.016s)
    Model enumeration time:              0.017s
    Time for BDD construction:           0.035s (Max:     0.013s)
Time for merge operator:                 0.186s
Time for coverage check:                 0.045s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):     0.482s

Number of path formula cache hits:   107509 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.168s

Total number of created targets for pointer analysis: 38
   Number of created targets for uf: *signed_int is 11


Number of BDD nodes:                               205
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         430 (count: 7293, min: 0, max: 62, avg: 0.06)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.492s
Automaton transfers with branching:                0
Automaton transfer successors:                       132719 (count: 132719, min: 1, max: 1, avg: 1.00) [1 x 132719]

CPA algorithm statistics
------------------------
Number of iterations:            47781
Max size of waitlist:            25
Average size of waitlist:        10
Number of computed successors:   51859
Max successors for one state:    2
Number of times merged:          1871
Number of times stopped:         3498
Number of times breaked:         40

Total time for CPA algorithm:         9.072s (Max:     0.716s)
  Time for choose from waitlist:      0.040s
  Time for precision adjustment:      3.333s
  Time for transfer relation:         4.684s
  Time for merge operator:            0.255s
  Time for stop operator:             0.160s
  Time for adding to reached set:     0.142s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   40
Avg. length of target path (in blocks):                1690 (count: 40, min: 8, max: 87, avg: 42.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.980s
  Counterexample analysis:                             0.659s (Max:     0.044s, Calls: 40)
    Refinement sat check:                              0.451s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.050s
  Precision update:                                    0.092s
  ARG update:                                          0.148s

Length of refined path (in blocks):                    1481 (count: 40, min: 7, max: 86, avg: 37.03)
Number of affected states:                             1371 (count: 40, min: 6, max: 85, avg: 34.28)
Length (states) of path with itp 'true':                 70 (count: 40, min: 0, max: 14, avg: 1.75)
Length (states) of path with itp non-trivial itp:      1371 (count: 40, min: 6, max: 85, avg: 34.28)
Length (states) of path with itp 'false':                40 (count: 40, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 40, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1331 (count: 40, min: 5, max: 84, avg: 33.28)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                40
Number of successful refinements:     40
Number of failed refinements:         0
Max. size of reached set before ref.: 2013
Max. size of reached set after ref.:  853
Avg. size of reached set before ref.: 1274.08
Avg. size of reached set after ref.:  104.60

Total time for CEGAR algorithm:      10.242s
Time for refinements:                 1.156s
Average time for refinement:          0.028s
Max time for refinement:              0.074s

Code Coverage
-----------------------------
  Function coverage:      0.769
  Visited lines:          2083
  Total lines:            2130
  Line coverage:          0.978
  Visited conditions:     154
  Total conditions:       174
  Condition coverage:     0.885

CPAchecker general statistics
-----------------------------
Number of program locations:     2448
Number of CFA edges:             2587
Number of relevant variables:    445
Number of functions:             39
Number of loops:                 12
Size of reached set:             1528
  Number of reached locations:   679 (28%)
    Avg states per location:     2
    Max states per location:     38 (at node N23)
  Number of reached functions:   30 (77%)
  Number of partitions:          1523
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N309 (before lines 3860-3877), Function sdricoh_mmc_cmd called from node N792, stack depth 3 [1f402d1], stack [main, sdricoh_request, sdricoh_mmc_cmd]])
  Number of target states:       0

Time for analysis setup:          3.438s
  Time for loading CPAs:          0.638s
  Time for loading parser:        0.481s
  Time for CFA construction:      2.219s
    Time for parsing file(s):     0.665s
    Time for AST to CFA:          0.693s
    Time for CFA sanity check:    0.132s
    Time for post-processing:     0.576s
      Time for var class.:        0.279s
Time for Analysis:               10.243s
CPU time for analysis:           10.240s
Time for analyzing result:        0.001s
Total time for CPAchecker:       13.684s
Total CPU time for CPAchecker:   13.670s
Time for statistics:              0.090s

Time for Garbage Collector:       0.376s (in 33 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 77MB (    73 MiB) max;     46MB (    44 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     32MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8020MB (  7649 MiB) max;   8003MB (  7632 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
