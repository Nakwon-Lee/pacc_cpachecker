scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--pci--hotplug--cpcihp_generic.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_023515z9/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3169: Function pointer *__cil_tmp2 with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_find_bus to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_slot to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_register_controller to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_register_bus to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_start to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_unregister_bus to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_unregister_controller to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cpci_hp_stop to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            27 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  22 (81%)
  Because of loop head:            4 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1 (4%)
  Times precision was empty:       15 (56%)
  Times precision was {false}:     1 (4%)
  Times result was cached:         3 (11%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      8 (30%)
  Times result was 'false':        2 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         115
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       107
Number of predicates discovered:          2
Number of abstraction locations:          9
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         12
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.33
Number of irrelevant predicates:          2 (17%)
Number of preds handled by boolean abs:   8 (67%)
  Total number of models for allsat:      8
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.386s
  Time for path formula creation:        0.376s
Time for strengthen operator:            0.022s
Time for prec operator:                  0.078s
  Time for abstraction:                  0.070s (Max:     0.027s, Count: 27)
    Boolean abstraction:                 0.019s
    Solving time:                        0.014s (Max:     0.009s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.066s
Time for coverage check:                 0.007s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.017s

Number of path formula cache hits:   686 (35%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.364s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 76, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                         1919 (count: 1919, min: 1, max: 1, avg: 1.00) [1 x 1919]

CPA algorithm statistics
------------------------
Number of iterations:            381
Max size of waitlist:            12
Average size of waitlist:        6
Number of computed successors:   443
Max successors for one state:    2
Number of times merged:          56
Number of times stopped:         59
Number of times breaked:         1

Total time for CPA algorithm:         0.787s (Max:     0.640s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.133s
  Time for transfer relation:         0.542s
  Time for merge operator:            0.072s
  Time for stop operator:             0.022s
  Time for adding to reached set:     0.003s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1
Avg. length of target path (in blocks):                  10 (count: 1, min: 10, max: 10, avg: 10.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.037s
  Counterexample analysis:                             0.028s (Max:     0.028s, Calls: 1)
    Refinement sat check:                              0.011s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.001s
  ARG update:                                          0.002s

Length of refined path (in blocks):                       9 (count: 1, min: 9, max: 9, avg: 9.00)
Number of affected states:                                8 (count: 1, min: 8, max: 8, avg: 8.00)
Length (states) of path with itp 'true':                  0 (count: 1, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         8 (count: 1, min: 8, max: 8, avg: 8.00)
Length (states) of path with itp 'false':                 1 (count: 1, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               7 (count: 1, min: 7, max: 7, avg: 7.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 192
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 192.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       0.832s
Time for refinements:                 0.045s
Average time for refinement:          0.045s
Max time for refinement:              0.045s

Code Coverage
-----------------------------
  Function coverage:      0.263
  Visited lines:          1135
  Total lines:            1215
  Line coverage:          0.934
  Visited conditions:     62
  Total conditions:       82
  Condition coverage:     0.756

CPAchecker general statistics
-----------------------------
Number of program locations:     1355
Number of CFA edges:             1393
Number of relevant variables:    96
Number of functions:             19
Number of loops:                 1
Size of reached set:             194
  Number of reached locations:   187 (14%)
    Avg states per location:     1
    Max states per location:     2 (at node N720)
  Number of reached functions:   5 (26%)
  Number of partitions:          194
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.190s
  Time for loading CPAs:          0.672s
  Time for loading parser:        0.508s
  Time for CFA construction:      1.906s
    Time for parsing file(s):     0.596s
    Time for AST to CFA:          0.626s
    Time for CFA sanity check:    0.077s
    Time for post-processing:     0.411s
      Time for var class.:        0.198s
Time for Analysis:                0.832s
CPU time for analysis:            0.830s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.025s
Total CPU time for CPAchecker:    4.020s
Time for statistics:              0.054s

Time for Garbage Collector:       0.114s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 49MB (    46 MiB) max;     30MB (    28 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             32MB (    30 MiB) max;     24MB (    23 MiB) avg;     33MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    33 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8017MB (  7646 MiB) max;   7969MB (  7600 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
