scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--rtc--rtc-wm831x.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_feazjcq6/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_bulk_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_time_to_tm to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_valid_tm to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_tm_to_time to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_set_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq_byname to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_init_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_update_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2696 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2044 (76%)
  Because of loop head:            629 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         23 (1%)
  Times precision was empty:       721 (27%)
  Times precision was {false}:     202 (7%)
  Times result was cached:         1704 (63%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      69 (3%)
  Times result was 'false':        11 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         3726
  BDD entailment checks:           1354
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       58
Number of predicates discovered:          2
Number of abstraction locations:          44
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1975
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 7.29
Number of irrelevant predicates:          1005 (51%)
Number of preds handled by boolean abs:   69 (3%)
  Total number of models for allsat:      69
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.016s
  Time for path formula creation:        1.970s
Time for strengthen operator:            0.058s
Time for prec operator:                  1.247s
  Time for abstraction:                  1.139s (Max:     0.020s, Count: 2696)
    Boolean abstraction:                 0.112s
    Solving time:                        0.259s (Max:     0.013s)
    Model enumeration time:              0.010s
    Time for BDD construction:           0.027s (Max:     0.009s)
Time for merge operator:                 0.184s
Time for coverage check:                 0.028s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):     0.269s

Number of path formula cache hits:   18417 (44%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.885s

Total number of created targets for pointer analysis: 148
   Number of created targets for uf: *unsigned_short_int is 113


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         139 (count: 3504, min: 0, max: 22, avg: 0.04)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.190s
Automaton transfers with branching:                0
Automaton transfer successors:                        39966 (count: 39966, min: 1, max: 1, avg: 1.00) [1 x 39966]

CPA algorithm statistics
------------------------
Number of iterations:            15083
Max size of waitlist:            27
Average size of waitlist:        13
Number of computed successors:   17373
Max successors for one state:    2
Number of times merged:          1186
Number of times stopped:         2092
Number of times breaked:         23

Total time for CPA algorithm:         5.279s (Max:     0.779s)
  Time for choose from waitlist:      0.032s
  Time for precision adjustment:      1.558s
  Time for transfer relation:         3.006s
  Time for merge operator:            0.264s
  Time for stop operator:             0.145s
  Time for adding to reached set:     0.072s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   23
Avg. length of target path (in blocks):                 195 (count: 23, min: 4, max: 15, avg: 8.48)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.231s
  Counterexample analysis:                             0.128s (Max:     0.015s, Calls: 23)
    Refinement sat check:                              0.072s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.032s
  Precision update:                                    0.003s
  ARG update:                                          0.060s

Length of refined path (in blocks):                     172 (count: 23, min: 3, max: 14, avg: 7.48)
Number of affected states:                              149 (count: 23, min: 2, max: 13, avg: 6.48)
Length (states) of path with itp 'true':                  0 (count: 23, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       149 (count: 23, min: 2, max: 13, avg: 6.48)
Length (states) of path with itp 'false':                23 (count: 23, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 23, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             126 (count: 23, min: 1, max: 12, avg: 5.48)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                23
Number of successful refinements:     23
Number of failed refinements:         0
Max. size of reached set before ref.: 818
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 647.74
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       5.556s
Time for refinements:                 0.276s
Average time for refinement:          0.012s
Max time for refinement:              0.045s

Code Coverage
-----------------------------
  Function coverage:      0.594
  Visited lines:          1127
  Total lines:            1211
  Line coverage:          0.931
  Visited conditions:     108
  Total conditions:       128
  Condition coverage:     0.844

CPAchecker general statistics
-----------------------------
Number of program locations:     1424
Number of CFA edges:             1489
Number of relevant variables:    265
Number of functions:             32
Number of loops:                 3
Size of reached set:             442
  Number of reached locations:   330 (23%)
    Avg states per location:     1
    Max states per location:     11 (at node N937)
  Number of reached functions:   19 (59%)
  Number of partitions:          442
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.885s
  Time for loading CPAs:          0.603s
  Time for loading parser:        0.487s
  Time for CFA construction:      1.692s
    Time for parsing file(s):     0.573s
    Time for AST to CFA:          0.489s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.354s
      Time for var class.:        0.168s
Time for Analysis:                5.556s
CPU time for analysis:            5.560s
Time for analyzing result:        0.001s
Total time for CPAchecker:        8.443s
Total CPU time for CPAchecker:    8.440s
Time for statistics:              0.064s

Time for Garbage Collector:       0.200s (in 16 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 68MB (    65 MiB) max;     40MB (    38 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     30MB (    29 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     32MB (    31 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8057MB (  7684 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
