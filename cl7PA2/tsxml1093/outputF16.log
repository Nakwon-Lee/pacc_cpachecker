scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--regulator--max8649.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_834dtf2f/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rdev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_update_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_del_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_init_i2c to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_exit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1820 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1472 (81%)
  Because of loop head:            331 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         17 (1%)
  Times precision was empty:       700 (38%)
  Times precision was {false}:     108 (6%)
  Times result was cached:         962 (53%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      50 (3%)
  Times result was 'false':        17 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1954
  BDD entailment checks:           798
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       87
Number of predicates discovered:          2
Number of abstraction locations:          40
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1120
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 7.09
Number of irrelevant predicates:          556 (50%)
Number of preds handled by boolean abs:   50 (4%)
  Total number of models for allsat:      51
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  1.273s
  Time for path formula creation:        1.255s
Time for strengthen operator:            0.059s
Time for prec operator:                  0.682s
  Time for abstraction:                  0.603s (Max:     0.016s, Count: 1820)
    Boolean abstraction:                 0.050s
    Solving time:                        0.146s (Max:     0.009s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.007s (Max:     0.005s)
Time for merge operator:                 0.042s
Time for coverage check:                 0.014s
  Time for BDD entailment checks:        0.014s
Total time for SMT solver (w/o itp):     0.148s

Number of path formula cache hits:   16680 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.138s

Total number of created targets for pointer analysis: 33
   Number of created targets for uf: *unsigned_int is 10


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          99 (count: 2343, min: 0, max: 24, avg: 0.04)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.170s
Automaton transfers with branching:                0
Automaton transfer successors:                        26562 (count: 26562, min: 1, max: 1, avg: 1.00) [1 x 26562]

CPA algorithm statistics
------------------------
Number of iterations:            8036
Max size of waitlist:            15
Average size of waitlist:        6
Number of computed successors:   9162
Max successors for one state:    2
Number of times merged:          578
Number of times stopped:         1076
Number of times breaked:         17

Total time for CPA algorithm:         3.442s (Max:     0.597s)
  Time for choose from waitlist:      0.033s
  Time for precision adjustment:      0.890s
  Time for transfer relation:         2.147s
  Time for merge operator:            0.106s
  Time for stop operator:             0.080s
  Time for adding to reached set:     0.053s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   17
Avg. length of target path (in blocks):                 232 (count: 17, min: 8, max: 23, avg: 13.65)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.223s
  Counterexample analysis:                             0.172s (Max:     0.019s, Calls: 17)
    Refinement sat check:                              0.111s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.004s
  ARG update:                                          0.026s

Length of refined path (in blocks):                     215 (count: 17, min: 7, max: 22, avg: 12.65)
Number of affected states:                              198 (count: 17, min: 6, max: 21, avg: 11.65)
Length (states) of path with itp 'true':                  0 (count: 17, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       198 (count: 17, min: 6, max: 21, avg: 11.65)
Length (states) of path with itp 'false':                17 (count: 17, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 17, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             181 (count: 17, min: 5, max: 20, avg: 10.65)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                17
Number of successful refinements:     17
Number of failed refinements:         0
Max. size of reached set before ref.: 491
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 460.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.711s
Time for refinements:                 0.257s
Average time for refinement:          0.015s
Max time for refinement:              0.042s

Code Coverage
-----------------------------
  Function coverage:      0.679
  Visited lines:          1195
  Total lines:            1264
  Line coverage:          0.945
  Visited conditions:     82
  Total conditions:       94
  Condition coverage:     0.872

CPAchecker general statistics
-----------------------------
Number of program locations:     1411
Number of CFA edges:             1457
Number of relevant variables:    212
Number of functions:             28
Number of loops:                 1
Size of reached set:             301
  Number of reached locations:   259 (18%)
    Avg states per location:     1
    Max states per location:     11 (at node N967)
  Number of reached functions:   19 (68%)
  Number of partitions:          301
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.860s
  Time for loading CPAs:          0.660s
  Time for loading parser:        0.529s
  Time for CFA construction:      1.591s
    Time for parsing file(s):     0.518s
    Time for AST to CFA:          0.483s
    Time for CFA sanity check:    0.124s
    Time for post-processing:     0.340s
      Time for var class.:        0.174s
Time for Analysis:                3.711s
CPU time for analysis:            3.700s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.574s
Total CPU time for CPAchecker:    6.570s
Time for statistics:              0.058s

Time for Garbage Collector:       0.135s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 64MB (    61 MiB) max;     37MB (    35 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     29MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     31MB (    29 MiB) avg
Total process virtual memory:   8020MB (  7648 MiB) max;   7989MB (  7619 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
