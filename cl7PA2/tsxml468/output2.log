scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--firmware--google--gsmi_true-termination.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_nm1mazs0/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_efivars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_files to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_get_system_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_create_and_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_files to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_efivars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1880 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1721 (92%)
  Because of loop head:            152 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7 (0%)
  Times precision was empty:       1559 (83%)
  Times precision was {false}:     29 (2%)
  Times result was cached:         237 (13%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      55 (3%)
  Times result was 'false':        29 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         3656
  BDD entailment checks:           266
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       195
Number of predicates discovered:          2
Number of abstraction locations:          28
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         321
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.82
Number of irrelevant predicates:          85 (26%)
Number of preds handled by boolean abs:   55 (17%)
  Total number of models for allsat:      57
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  1.038s
  Time for path formula creation:        0.996s
Time for strengthen operator:            0.066s
Time for prec operator:                  0.575s
  Time for abstraction:                  0.429s (Max:     0.015s, Count: 1880)
    Boolean abstraction:                 0.056s
    Solving time:                        0.059s (Max:     0.013s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.039s
Time for coverage check:                 0.035s
  Time for BDD entailment checks:        0.033s
Total time for SMT solver (w/o itp):     0.061s

Number of path formula cache hits:   37633 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.886s

Total number of created targets for pointer analysis: 2
   Number of created targets for uf: *unsigned_long_long_int is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         113 (count: 2308, min: 0, max: 42, avg: 0.05)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.187s
Automaton transfers with branching:                0
Automaton transfer successors:                        40692 (count: 40692, min: 1, max: 1, avg: 1.00) [1 x 40692]

CPA algorithm statistics
------------------------
Number of iterations:            12688
Max size of waitlist:            28
Average size of waitlist:        14
Number of computed successors:   14691
Max successors for one state:    2
Number of times merged:          1695
Number of times stopped:         1949
Number of times breaked:         7

Total time for CPA algorithm:         3.310s (Max:     1.526s)
  Time for choose from waitlist:      0.026s
  Time for precision adjustment:      0.870s
  Time for transfer relation:         1.981s
  Time for merge operator:            0.140s
  Time for stop operator:             0.096s
  Time for adding to reached set:     0.052s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                 160 (count: 7, min: 16, max: 28, avg: 22.86)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.205s
  Counterexample analysis:                             0.095s (Max:     0.020s, Calls: 7)
    Refinement sat check:                              0.063s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.006s
  ARG update:                                          0.074s

Length of refined path (in blocks):                     153 (count: 7, min: 15, max: 27, avg: 21.86)
Number of affected states:                              146 (count: 7, min: 14, max: 26, avg: 20.86)
Length (states) of path with itp 'true':                  0 (count: 7, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       146 (count: 7, min: 14, max: 26, avg: 20.86)
Length (states) of path with itp 'false':                 7 (count: 7, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 7, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             139 (count: 7, min: 13, max: 25, avg: 19.86)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 1782
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 1567.71
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.553s
Time for refinements:                 0.243s
Average time for refinement:          0.034s
Max time for refinement:              0.086s

Code Coverage
-----------------------------
  Function coverage:      0.872
  Visited lines:          2846
  Total lines:            2866
  Line coverage:          0.993
  Visited conditions:     178
  Total conditions:       186
  Condition coverage:     0.957

CPAchecker general statistics
-----------------------------
Number of program locations:     3127
Number of CFA edges:             3252
Number of relevant variables:    565
Number of functions:             39
Number of loops:                 2
Size of reached set:             1761
  Number of reached locations:   630 (20%)
    Avg states per location:     2
    Max states per location:     11 (at node N28)
  Number of reached functions:   34 (87%)
  Number of partitions:          1761
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.675s
  Time for loading CPAs:          0.788s
  Time for loading parser:        0.439s
  Time for CFA construction:      2.353s
    Time for parsing file(s):     0.673s
    Time for AST to CFA:          0.776s
    Time for CFA sanity check:    0.197s
    Time for post-processing:     0.622s
      Time for var class.:        0.326s
Time for Analysis:                3.553s
CPU time for analysis:            3.550s
Time for analyzing result:        0.001s
Total time for CPAchecker:        7.231s
Total CPU time for CPAchecker:    7.220s
Time for statistics:              0.085s

Time for Garbage Collector:       0.204s (in 14 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 66MB (    63 MiB) max;     38MB (    36 MiB) avg;     70MB (    67 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     28MB (    27 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8054MB (  7681 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
