scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--arcnet--com20020_cs.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_uj5h8aml/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_arcdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_request_io to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function com20020_check to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function com20020_found to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1078 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  948 (88%)
  Because of loop head:            117 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         13 (1%)
  Times precision was empty:       225 (21%)
  Times precision was {false}:     81 (8%)
  Times result was cached:         686 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      86 (8%)
  Times result was 'false':        23 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         687
  BDD entailment checks:           253
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       124
Number of predicates discovered:          2
Number of abstraction locations:          52
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         853
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 5.11
Number of irrelevant predicates:          255 (30%)
Number of preds handled by boolean abs:   86 (10%)
  Total number of models for allsat:      86
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.029s
  Time for path formula creation:        1.003s
Time for strengthen operator:            0.065s
Time for prec operator:                  0.691s
  Time for abstraction:                  0.629s (Max:     0.029s, Count: 1078)
    Boolean abstraction:                 0.096s
    Solving time:                        0.138s (Max:     0.016s)
    Model enumeration time:              0.011s
    Time for BDD construction:           0.003s (Max:     0.001s)
Time for merge operator:                 0.034s
Time for coverage check:                 0.017s
  Time for BDD entailment checks:        0.016s
Total time for SMT solver (w/o itp):     0.149s

Number of path formula cache hits:   11291 (64%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.930s

Total number of created targets for pointer analysis: 5
   Number of created targets for uf: *signed_int is 6


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         163 (count: 1404, min: 0, max: 68, avg: 0.12)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.113s
Automaton transfers with branching:                0
Automaton transfer successors:                        16619 (count: 16619, min: 1, max: 1, avg: 1.00) [1 x 16619]

CPA algorithm statistics
------------------------
Number of iterations:            5434
Max size of waitlist:            14
Average size of waitlist:        4
Number of computed successors:   5911
Max successors for one state:    2
Number of times merged:          217
Number of times stopped:         387
Number of times breaked:         13

Total time for CPA algorithm:         2.881s (Max:     0.602s)
  Time for choose from waitlist:      0.018s
  Time for precision adjustment:      0.868s
  Time for transfer relation:         1.696s
  Time for merge operator:            0.070s
  Time for stop operator:             0.067s
  Time for adding to reached set:     0.056s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   13
Avg. length of target path (in blocks):                 296 (count: 13, min: 5, max: 40, avg: 22.77)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.252s
  Counterexample analysis:                             0.181s (Max:     0.030s, Calls: 13)
    Refinement sat check:                              0.144s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.034s
  Precision update:                                    0.005s
  ARG update:                                          0.020s

Length of refined path (in blocks):                     283 (count: 13, min: 4, max: 39, avg: 21.77)
Number of affected states:                              270 (count: 13, min: 3, max: 38, avg: 20.77)
Length (states) of path with itp 'true':                  0 (count: 13, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       270 (count: 13, min: 3, max: 38, avg: 20.77)
Length (states) of path with itp 'false':                13 (count: 13, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 13, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             257 (count: 13, min: 2, max: 37, avg: 19.77)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13
Number of successful refinements:     13
Number of failed refinements:         0
Max. size of reached set before ref.: 706
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 382.08
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.182s
Time for refinements:                 0.301s
Average time for refinement:          0.023s
Max time for refinement:              0.050s

Code Coverage
-----------------------------
  Function coverage:      0.640
  Visited lines:          1849
  Total lines:            1896
  Line coverage:          0.975
  Visited conditions:     84
  Total conditions:       104
  Condition coverage:     0.808

CPAchecker general statistics
-----------------------------
Number of program locations:     2111
Number of CFA edges:             2182
Number of relevant variables:    317
Number of functions:             25
Number of loops:                 2
Size of reached set:             574
  Number of reached locations:   408 (19%)
    Avg states per location:     1
    Max states per location:     25 (at node N1383)
  Number of reached functions:   16 (64%)
  Number of partitions:          574
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.107s
  Time for loading CPAs:          0.607s
  Time for loading parser:        0.460s
  Time for CFA construction:      1.977s
    Time for parsing file(s):     0.633s
    Time for AST to CFA:          0.613s
    Time for CFA sanity check:    0.118s
    Time for post-processing:     0.411s
      Time for var class.:        0.190s
Time for Analysis:                3.182s
CPU time for analysis:            3.180s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.291s
Total CPU time for CPAchecker:    6.270s
Time for statistics:              0.070s

Time for Garbage Collector:       0.134s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     37MB (    35 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     28MB (    26 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8048MB (  7675 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
