scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--rtc--rtc-v3020.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u141xh38/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_output to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_input to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_set_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_get_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2455: Ignoring call via function pointer v3020_set_reg::__cil_tmp11 for which no suitable target was found in line: (*__cil_tmp11)(chip, __cil_tmp14); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2455: Ignoring function call through function pointer *__cil_tmp11: (*__cil_tmp11)(chip, __cil_tmp14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 2544: Ignoring call via function pointer v3020_get_reg::__cil_tmp11 for which no suitable target was found in line: (*__cil_tmp11)(chip, __cil_tmp14); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2544: Ignoring function call through function pointer *__cil_tmp11: (*__cil_tmp11)(chip, __cil_tmp14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 2569: Ignoring call via function pointer v3020_get_reg::__cil_tmp22 for which no suitable target was found in line: tmp = (*__cil_tmp22)(chip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2569: Ignoring function call through function pointer *__cil_tmp22: tmp = (*__cil_tmp22)(chip); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function bcd2bin to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2485: Ignoring call via function pointer v3020_set_reg::__cil_tmp23 for which no suitable target was found in line: (*__cil_tmp23)(chip, __cil_tmp26); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2485: Ignoring function call through function pointer *__cil_tmp23: (*__cil_tmp23)(chip, __cil_tmp26); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3664: Ignoring call via function pointer rtc_probe::__cil_tmp30 for which no suitable target was found in line: retval = (*__cil_tmp30)(chip, pdev, pdata); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3664: Ignoring function call through function pointer *__cil_tmp30: retval = (*__cil_tmp30)(chip, pdev, pdata); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3681: Ignoring call via function pointer rtc_probe::__cil_tmp36 for which no suitable target was found in line: tmp___0 = (*__cil_tmp36)(chip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3805: Ignoring call via function pointer rtc_probe::__cil_tmp103 for which no suitable target was found in line: (*__cil_tmp103)(chip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3805: Ignoring function call through function pointer *__cil_tmp103: (*__cil_tmp103)(chip); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3861: Ignoring call via function pointer rtc_remove::__cil_tmp16 for which no suitable target was found in line: (*__cil_tmp16)(chip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3861: Ignoring function call through function pointer *__cil_tmp16: (*__cil_tmp16)(chip); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            44852 (9% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  35445 (79%)
  Because of loop head:            9374 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         33 (0%)
  Times precision was empty:       10663 (24%)
  Times precision was {false}:     2050 (5%)
  Times result was cached:         31832 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      307 (1%)
  Times result was 'false':        12 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         14471
  BDD entailment checks:           8897
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       224
Number of predicates discovered:          2
Number of abstraction locations:          98
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         34189
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 14.51
Number of irrelevant predicates:          22303 (65%)
Number of preds handled by boolean abs:   307 (1%)
  Total number of models for allsat:      309
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  9.758s
  Time for path formula creation:        9.541s
Time for strengthen operator:            0.583s
Time for prec operator:                  7.371s
  Time for abstraction:                  6.666s (Max:     0.041s, Count: 44852)
    Boolean abstraction:                 0.269s
    Solving time:                        1.722s (Max:     0.024s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.032s (Max:     0.013s)
Time for merge operator:                 0.250s
Time for coverage check:                 0.055s
  Time for BDD entailment checks:        0.052s
Total time for SMT solver (w/o itp):     1.738s

Number of path formula cache hits:   171553 (34%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.449s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         617 (count: 31654, min: 0, max: 202, avg: 0.02)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.710s
  Time for transition matches:                         0.390s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       473204 (count: 473204, min: 1, max: 1, avg: 1.00) [1 x 473204]

CPA algorithm statistics
------------------------
Number of iterations:            137836
Max size of waitlist:            27
Average size of waitlist:        10
Number of computed successors:   148898
Max successors for one state:    2
Number of times merged:          2787
Number of times stopped:         10816
Number of times breaked:         33

Total time for CPA algorithm:        25.664s (Max:     1.794s)
  Time for choose from waitlist:      0.106s
  Time for precision adjustment:      9.058s
  Time for transfer relation:        14.591s
  Time for merge operator:            0.372s
  Time for stop operator:             0.330s
  Time for adding to reached set:     0.351s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   33
Avg. length of target path (in blocks):                 867 (count: 33, min: 6, max: 53, avg: 26.27)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.914s
  Counterexample analysis:                             0.453s (Max:     0.037s, Calls: 33)
    Refinement sat check:                              0.288s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.020s
  Precision update:                                    0.026s
  ARG update:                                          0.389s

Length of refined path (in blocks):                     834 (count: 33, min: 5, max: 52, avg: 25.27)
Number of affected states:                              801 (count: 33, min: 4, max: 51, avg: 24.27)
Length (states) of path with itp 'true':                  0 (count: 33, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       801 (count: 33, min: 4, max: 51, avg: 24.27)
Length (states) of path with itp 'false':                33 (count: 33, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 33, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             768 (count: 33, min: 3, max: 50, avg: 23.27)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                33
Number of successful refinements:     33
Number of failed refinements:         0
Max. size of reached set before ref.: 5409
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 4066.21
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      26.707s
Time for refinements:                 1.035s
Average time for refinement:          0.031s
Max time for refinement:              0.068s

Code Coverage
-----------------------------
  Function coverage:      0.788
  Visited lines:          2109
  Total lines:            2133
  Line coverage:          0.989
  Visited conditions:     142
  Total conditions:       150
  Condition coverage:     0.947

CPAchecker general statistics
-----------------------------
Number of program locations:     2372
Number of CFA edges:             2483
Number of relevant variables:    491
Number of functions:             33
Number of loops:                 9
Size of reached set:             3984
  Number of reached locations:   489 (21%)
    Avg states per location:     8
    Max states per location:     236 (at node N66)
  Number of reached functions:   26 (79%)
  Number of partitions:          3973
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1960 (before line 4031), Function main called from node N1812, stack depth 1 [54ec8cc9], stack [main]])
  Number of target states:       0
  Size of final wait list        4

Time for analysis setup:          3.149s
  Time for loading CPAs:          0.620s
  Time for loading parser:        0.519s
  Time for CFA construction:      1.923s
    Time for parsing file(s):     0.624s
    Time for AST to CFA:          0.575s
    Time for CFA sanity check:    0.138s
    Time for post-processing:     0.437s
      Time for var class.:        0.256s
Time for Analysis:               26.707s
CPU time for analysis:           26.710s
Total time for CPAchecker:       29.858s
Total CPU time for CPAchecker:   29.850s
Time for statistics:              0.106s

Time for Garbage Collector:       1.853s (in 83 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                148MB (   141 MiB) max;     78MB (    74 MiB) avg;    154MB (   147 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           181MB (   172 MiB) max;    141MB (   134 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   8011MB (  7640 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
