scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--phy--spi_ks8995.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_uab19ok1/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            4652 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4265 (92%)
  Because of loop head:            233 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         154 (3%)
  Times precision was empty:       781 (17%)
  Times precision was {false}:     119 (3%)
  Times result was cached:         3639 (78%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      113 (2%)
  Times result was 'false':        139 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         2146
  BDD entailment checks:           1008
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       43
Number of predicates discovered:          3
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         3871
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 16.69
Number of irrelevant predicates:          2606 (67%)
Number of preds handled by boolean abs:   113 (3%)
  Total number of models for allsat:      113
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.851s
  Time for path formula creation:        0.829s
Time for strengthen operator:            0.051s
Time for prec operator:                  1.125s
  Time for abstraction:                  0.995s (Max:     0.019s, Count: 4652)
    Boolean abstraction:                 0.110s
    Solving time:                        0.137s (Max:     0.009s)
    Model enumeration time:              0.008s
    Time for BDD construction:           0.016s (Max:     0.010s)
Time for merge operator:                 0.032s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.004s
Total time for SMT solver (w/o itp):     0.145s

Number of path formula cache hits:   35708 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.752s

Total number of created targets for pointer analysis: 190
   Number of created targets for uf: *unsigned_char is 25
   Number of created targets for uf: *char is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         232 (count: 3069, min: 0, max: 70, avg: 0.08)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.231s
Automaton transfers with branching:                0
Automaton transfer successors:                        36501 (count: 36501, min: 1, max: 1, avg: 1.00) [1 x 36501]

CPA algorithm statistics
------------------------
Number of iterations:            15375
Max size of waitlist:            14
Average size of waitlist:        6
Number of computed successors:   16874
Max successors for one state:    2
Number of times merged:          569
Number of times stopped:         1035
Number of times breaked:         154

Total time for CPA algorithm:         3.564s (Max:     0.283s)
  Time for choose from waitlist:      0.047s
  Time for precision adjustment:      1.423s
  Time for transfer relation:         1.789s
  Time for merge operator:            0.094s
  Time for stop operator:             0.041s
  Time for adding to reached set:     0.044s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   154
Avg. length of target path (in blocks):                9733 (count: 154, min: 5, max: 99, avg: 63.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.700s
  Counterexample analysis:                             3.283s (Max:     0.061s, Calls: 154)
    Refinement sat check:                              2.184s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.084s
  Precision update:                                    0.110s
  ARG update:                                          0.083s

Length of refined path (in blocks):                    9579 (count: 154, min: 4, max: 98, avg: 62.20)
Number of affected states:                             2204 (count: 154, min: 2, max: 31, avg: 14.31)
Length (states) of path with itp 'true':               7221 (count: 154, min: 0, max: 95, avg: 46.89)
Length (states) of path with itp non-trivial itp:      2204 (count: 154, min: 2, max: 31, avg: 14.31)
Length (states) of path with itp 'false':               154 (count: 154, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 154, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2050 (count: 154, min: 1, max: 30, avg: 13.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                154
Number of successful refinements:     154
Number of failed refinements:         0
Max. size of reached set before ref.: 660
Max. size of reached set after ref.:  638
Avg. size of reached set before ref.: 447.94
Avg. size of reached set after ref.:  349.31

Total time for CEGAR algorithm:       7.486s
Time for refinements:                 3.877s
Average time for refinement:          0.025s
Max time for refinement:              0.065s

Code Coverage
-----------------------------
  Function coverage:      0.765
  Visited lines:          1033
  Total lines:            1102
  Line coverage:          0.937
  Visited conditions:     58
  Total conditions:       74
  Condition coverage:     0.784

CPAchecker general statistics
-----------------------------
Number of program locations:     1281
Number of CFA edges:             1330
Number of relevant variables:    225
Number of functions:             34
Number of loops:                 1
Size of reached set:             512
  Number of reached locations:   262 (20%)
    Avg states per location:     1
    Max states per location:     10 (at node N10)
  Number of reached functions:   26 (76%)
  Number of partitions:          512
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.802s
  Time for loading CPAs:          0.712s
  Time for loading parser:        0.470s
  Time for CFA construction:      1.527s
    Time for parsing file(s):     0.500s
    Time for AST to CFA:          0.421s
    Time for CFA sanity check:    0.121s
    Time for post-processing:     0.330s
      Time for var class.:        0.167s
Time for Analysis:                7.487s
CPU time for analysis:            7.480s
Time for analyzing result:        0.000s
Total time for CPAchecker:       10.292s
Total CPU time for CPAchecker:   10.270s
Time for statistics:              0.047s

Time for Garbage Collector:       0.143s (in 14 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     39MB (    38 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     31MB (    30 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     33MB (    32 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8063MB (  7689 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
