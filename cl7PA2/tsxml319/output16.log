scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--phy--spi_ks8995.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8sgve6d9/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1659 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1483 (89%)
  Because of loop head:            138 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         38 (2%)
  Times precision was empty:       391 (24%)
  Times precision was {false}:     94 (6%)
  Times result was cached:         1072 (65%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      102 (6%)
  Times result was 'false':        32 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         999
  BDD entailment checks:           445
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       43
Number of predicates discovered:          3
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1268
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 6.47
Number of irrelevant predicates:          789 (62%)
Number of preds handled by boolean abs:   102 (8%)
  Total number of models for allsat:      102
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.785s
  Time for path formula creation:        0.757s
Time for strengthen operator:            0.041s
Time for prec operator:                  0.783s
  Time for abstraction:                  0.666s (Max:     0.013s, Count: 1659)
    Boolean abstraction:                 0.081s
    Solving time:                        0.120s (Max:     0.010s)
    Model enumeration time:              0.010s
    Time for BDD construction:           0.007s (Max:     0.004s)
Time for merge operator:                 0.048s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):     0.130s

Number of path formula cache hits:   12987 (70%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.711s

Total number of created targets for pointer analysis: 80
   Number of created targets for uf: *unsigned_char is 21
   Number of created targets for uf: *char is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         126 (count: 1925, min: 0, max: 54, avg: 0.07)
Time for BDD node cleanup:                             0.013s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.102s
Automaton transfers with branching:                0
Automaton transfer successors:                        17177 (count: 17177, min: 1, max: 1, avg: 1.00) [1 x 17177]

CPA algorithm statistics
------------------------
Number of iterations:            6018
Max size of waitlist:            14
Average size of waitlist:        5
Number of computed successors:   6677
Max successors for one state:    2
Number of times merged:          277
Number of times stopped:         498
Number of times breaked:         38

Total time for CPA algorithm:         2.438s (Max:     0.335s)
  Time for choose from waitlist:      0.029s
  Time for precision adjustment:      0.923s
  Time for transfer relation:         1.252s
  Time for merge operator:            0.069s
  Time for stop operator:             0.061s
  Time for adding to reached set:     0.046s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   38
Avg. length of target path (in blocks):                1427 (count: 38, min: 5, max: 82, avg: 37.55)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.606s
  Counterexample analysis:                             0.439s (Max:     0.030s, Calls: 38)
    Refinement sat check:                              0.284s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.058s
  Precision update:                                    0.021s
  ARG update:                                          0.055s

Length of refined path (in blocks):                    1389 (count: 38, min: 4, max: 81, avg: 36.55)
Number of affected states:                              403 (count: 38, min: 2, max: 22, avg: 10.61)
Length (states) of path with itp 'true':                948 (count: 38, min: 0, max: 69, avg: 24.95)
Length (states) of path with itp non-trivial itp:       403 (count: 38, min: 2, max: 22, avg: 10.61)
Length (states) of path with itp 'false':                38 (count: 38, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 38, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             365 (count: 38, min: 1, max: 21, avg: 9.61)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                38
Number of successful refinements:     38
Number of failed refinements:         0
Max. size of reached set before ref.: 654
Max. size of reached set after ref.:  500
Avg. size of reached set before ref.: 417.95
Avg. size of reached set after ref.:  269.63

Total time for CEGAR algorithm:       3.098s
Time for refinements:                 0.652s
Average time for refinement:          0.017s
Max time for refinement:              0.042s

Code Coverage
-----------------------------
  Function coverage:      0.765
  Visited lines:          1033
  Total lines:            1102
  Line coverage:          0.937
  Visited conditions:     58
  Total conditions:       74
  Condition coverage:     0.784

CPAchecker general statistics
-----------------------------
Number of program locations:     1281
Number of CFA edges:             1330
Number of relevant variables:    225
Number of functions:             34
Number of loops:                 1
Size of reached set:             512
  Number of reached locations:   262 (20%)
    Avg states per location:     1
    Max states per location:     10 (at node N10)
  Number of reached functions:   26 (76%)
  Number of partitions:          512
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.472s
  Time for loading CPAs:          0.520s
  Time for loading parser:        0.402s
  Time for CFA construction:      1.450s
    Time for parsing file(s):     0.509s
    Time for AST to CFA:          0.421s
    Time for CFA sanity check:    0.094s
    Time for post-processing:     0.314s
      Time for var class.:        0.126s
Time for Analysis:                3.098s
CPU time for analysis:            3.100s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.572s
Total CPU time for CPAchecker:    5.560s
Time for statistics:              0.048s

Time for Garbage Collector:       0.115s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     37MB (    35 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     28MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   7989MB (  7619 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
