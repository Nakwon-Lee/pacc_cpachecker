scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--phy--spi_ks8995.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_s1cl_cgl/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            944 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  847 (90%)
  Because of loop head:            65 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         32 (3%)
  Times precision was empty:       219 (23%)
  Times precision was {false}:     54 (6%)
  Times result was cached:         571 (60%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      100 (11%)
  Times result was 'false':        39 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         405
  BDD entailment checks:           157
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       43
Number of predicates discovered:          3
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         725
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.71
Number of irrelevant predicates:          271 (37%)
Number of preds handled by boolean abs:   100 (14%)
  Total number of models for allsat:      100
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.461s
  Time for path formula creation:        0.418s
Time for strengthen operator:            0.032s
Time for prec operator:                  0.559s
  Time for abstraction:                  0.508s (Max:     0.025s, Count: 944)
    Boolean abstraction:                 0.117s
    Solving time:                        0.110s (Max:     0.014s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.012s (Max:     0.008s)
Time for merge operator:                 0.016s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.113s

Number of path formula cache hits:   5481 (68%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.374s

Total number of created targets for pointer analysis: 60
   Number of created targets for uf: *unsigned_char is 3
   Number of created targets for uf: *char is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         174 (count: 1253, min: 0, max: 98, avg: 0.14)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.158s
Automaton transfers with branching:                0
Automaton transfer successors:                         7377 (count: 7377, min: 1, max: 1, avg: 1.00) [1 x 7377]

CPA algorithm statistics
------------------------
Number of iterations:            3253
Max size of waitlist:            9
Average size of waitlist:        3
Number of computed successors:   3590
Max successors for one state:    2
Number of times merged:          124
Number of times stopped:         220
Number of times breaked:         32

Total time for CPA algorithm:         1.917s (Max:     0.166s)
  Time for choose from waitlist:      0.011s
  Time for precision adjustment:      0.715s
  Time for transfer relation:         0.975s
  Time for merge operator:            0.038s
  Time for stop operator:             0.044s
  Time for adding to reached set:     0.032s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   32
Avg. length of target path (in blocks):                1023 (count: 32, min: 5, max: 82, avg: 31.97)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.460s
  Counterexample analysis:                             0.338s (Max:     0.030s, Calls: 32)
    Refinement sat check:                              0.199s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.040s
  ARG update:                                          0.019s

Length of refined path (in blocks):                     991 (count: 32, min: 4, max: 81, avg: 30.97)
Number of affected states:                              306 (count: 32, min: 2, max: 22, avg: 9.56)
Length (states) of path with itp 'true':                653 (count: 32, min: 0, max: 69, avg: 20.41)
Length (states) of path with itp non-trivial itp:       306 (count: 32, min: 2, max: 22, avg: 9.56)
Length (states) of path with itp 'false':                32 (count: 32, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 32, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             274 (count: 32, min: 1, max: 21, avg: 8.56)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                32
Number of successful refinements:     32
Number of failed refinements:         0
Max. size of reached set before ref.: 560
Max. size of reached set after ref.:  499
Avg. size of reached set before ref.: 269.63
Avg. size of reached set after ref.:  181.50

Total time for CEGAR algorithm:       2.433s
Time for refinements:                 0.516s
Average time for refinement:          0.016s
Max time for refinement:              0.035s

Code Coverage
-----------------------------
  Function coverage:      0.765
  Visited lines:          1033
  Total lines:            1102
  Line coverage:          0.937
  Visited conditions:     58
  Total conditions:       74
  Condition coverage:     0.784

CPAchecker general statistics
-----------------------------
Number of program locations:     1281
Number of CFA edges:             1330
Number of relevant variables:    225
Number of functions:             34
Number of loops:                 1
Size of reached set:             512
  Number of reached locations:   262 (20%)
    Avg states per location:     1
    Max states per location:     10 (at node N10)
  Number of reached functions:   26 (76%)
  Number of partitions:          512
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.413s
  Time for loading CPAs:          0.561s
  Time for loading parser:        0.390s
  Time for CFA construction:      1.376s
    Time for parsing file(s):     0.437s
    Time for AST to CFA:          0.434s
    Time for CFA sanity check:    0.092s
    Time for post-processing:     0.307s
      Time for var class.:        0.123s
Time for Analysis:                2.435s
CPU time for analysis:            2.430s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.850s
Total CPU time for CPAchecker:    4.840s
Time for statistics:              0.046s

Time for Garbage Collector:       0.095s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    58 MiB) max;     36MB (    34 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     28MB (    26 MiB) avg;     36MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     30MB (    28 MiB) avg
Total process virtual memory:   8018MB (  7647 MiB) max;   7985MB (  7615 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
