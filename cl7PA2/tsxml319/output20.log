scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--phy--spi_ks8995.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_wnrokqtq/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2496 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2376 (95%)
  Because of loop head:            59 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         61 (2%)
  Times precision was empty:       476 (19%)
  Times precision was {false}:     113 (5%)
  Times result was cached:         1805 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      102 (4%)
  Times result was 'false':        84 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         753
  BDD entailment checks:           269
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       43
Number of predicates discovered:          3
Number of abstraction locations:          63
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         2020
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 9.40
Number of irrelevant predicates:          941 (47%)
Number of preds handled by boolean abs:   102 (5%)
  Total number of models for allsat:      102
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.773s
  Time for path formula creation:        0.740s
Time for strengthen operator:            0.033s
Time for prec operator:                  0.907s
  Time for abstraction:                  0.826s (Max:     0.021s, Count: 2496)
    Boolean abstraction:                 0.079s
    Solving time:                        0.174s (Max:     0.021s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                 0.032s
Time for coverage check:                 0.020s
  Time for BDD entailment checks:        0.019s
Total time for SMT solver (w/o itp):     0.175s

Number of path formula cache hits:   20201 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.693s

Total number of created targets for pointer analysis: 312
   Number of created targets for uf: *unsigned_char is 19
   Number of created targets for uf: *char is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         204 (count: 1929, min: 0, max: 118, avg: 0.11)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.148s
Automaton transfers with branching:                0
Automaton transfer successors:                        22846 (count: 22846, min: 1, max: 1, avg: 1.00) [1 x 22846]

CPA algorithm statistics
------------------------
Number of iterations:            7933
Max size of waitlist:            13
Average size of waitlist:        7
Number of computed successors:   8580
Max successors for one state:    2
Number of times merged:          242
Number of times stopped:         401
Number of times breaked:         61

Total time for CPA algorithm:         2.828s (Max:     0.443s)
  Time for choose from waitlist:      0.036s
  Time for precision adjustment:      1.093s
  Time for transfer relation:         1.427s
  Time for merge operator:            0.074s
  Time for stop operator:             0.060s
  Time for adding to reached set:     0.053s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   61
Avg. length of target path (in blocks):                2997 (count: 61, min: 10, max: 99, avg: 49.13)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.207s
  Counterexample analysis:                             0.999s (Max:     0.045s, Calls: 61)
    Refinement sat check:                              0.663s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.057s
  Precision update:                                    0.050s
  ARG update:                                          0.056s

Length of refined path (in blocks):                    2936 (count: 61, min: 9, max: 98, avg: 48.13)
Number of affected states:                              915 (count: 61, min: 2, max: 32, avg: 15.00)
Length (states) of path with itp 'true':               1960 (count: 61, min: 0, max: 69, avg: 32.13)
Length (states) of path with itp non-trivial itp:       915 (count: 61, min: 2, max: 32, avg: 15.00)
Length (states) of path with itp 'false':                61 (count: 61, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 61, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             854 (count: 61, min: 1, max: 31, avg: 14.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                61
Number of successful refinements:     61
Number of failed refinements:         0
Max. size of reached set before ref.: 650
Max. size of reached set after ref.:  498
Avg. size of reached set before ref.: 384.59
Avg. size of reached set after ref.:  260.26

Total time for CEGAR algorithm:       4.142s
Time for refinements:                 1.300s
Average time for refinement:          0.021s
Max time for refinement:              0.063s

Code Coverage
-----------------------------
  Function coverage:      0.765
  Visited lines:          1033
  Total lines:            1102
  Line coverage:          0.937
  Visited conditions:     58
  Total conditions:       74
  Condition coverage:     0.784

CPAchecker general statistics
-----------------------------
Number of program locations:     1281
Number of CFA edges:             1330
Number of relevant variables:    225
Number of functions:             34
Number of loops:                 1
Size of reached set:             512
  Number of reached locations:   262 (20%)
    Avg states per location:     1
    Max states per location:     10 (at node N10)
  Number of reached functions:   26 (76%)
  Number of partitions:          512
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.540s
  Time for loading CPAs:          0.589s
  Time for loading parser:        0.440s
  Time for CFA construction:      1.438s
    Time for parsing file(s):     0.430s
    Time for AST to CFA:          0.457s
    Time for CFA sanity check:    0.099s
    Time for post-processing:     0.308s
      Time for var class.:        0.142s
Time for Analysis:                4.143s
CPU time for analysis:            4.140s
Time for analyzing result:        0.001s
Total time for CPAchecker:        6.685s
Total CPU time for CPAchecker:    6.670s
Time for statistics:              0.061s

Time for Garbage Collector:       0.124s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     36MB (    35 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     29MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    36 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8053MB (  7680 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
