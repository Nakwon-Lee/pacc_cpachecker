scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--media--dvb--frontends--dib3000mb.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zytayjic/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4396: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 4UL, 4UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 4450: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 26UL, 26UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 4520: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 4UL, 4UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 4574: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 26UL, 26UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 4644: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 4UL, 4UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 4698: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 26UL, 26UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 6141: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 16UL, 16UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 6238: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 16UL, 16UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 6920: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 4UL, 4UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 6973: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 10UL, 10UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7026: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 28UL, 28UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7088: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 10UL, 10UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7137: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 4UL, 4UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7186: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 16UL, 16UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7301: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 26UL, 26UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 7545: Dead code detected: printk("<3>dib3000: sizeof: %zu %zu is different\n", 44UL, 44UL); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4320: Ignoring call via function pointer dib3000mb_set_frontend::__cil_tmp86 for which no suitable target was found in line: (*__cil_tmp86)(fe); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 4320: Ignoring function call through function pointer *__cil_tmp86: (*__cil_tmp86)(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 4320: Unsupported feature (recursion): dib3000mb_set_frontend_and_tuner(fe); (line was originally pointer call(dib3000mb_set_frontend_and_tuner) (*__cil_tmp86)(fe);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            30 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  26 (87%)
  Because of loop head:            4 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       30 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         9
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       433
Number of predicates discovered:          0

Time for post operator:                  0.521s
  Time for path formula creation:        0.515s
Time for strengthen operator:            0.002s
Time for prec operator:                  0.008s
  Time for abstraction:                  0.001s (Max:     0.001s, Count: 30)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.017s
Time for coverage check:                 0.013s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   0 (0%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.489s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 34, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.053s
Automaton transfers with branching:                0
Automaton transfer successors:                         1612 (count: 1612, min: 1, max: 1, avg: 1.00) [1 x 1612]

CPA algorithm statistics
------------------------
Number of iterations:            127
Max size of waitlist:            16
Average size of waitlist:        10
Number of computed successors:   147
Max successors for one state:    2
Number of times merged:          3
Number of times stopped:         6
Number of times breaked:         0

Total time for CPA algorithm:         0.722s (Max:     0.722s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.027s
  Time for transfer relation:         0.648s
  Time for merge operator:            0.018s
  Time for stop operator:             0.022s
  Time for adding to reached set:     0.003s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.545
  Visited lines:          1507
  Total lines:            4662
  Line coverage:          0.323
  Visited conditions:     44
  Total conditions:       662
  Condition coverage:     0.066

CPAchecker general statistics
-----------------------------
Number of program locations:     5295
Number of CFA edges:             5768
Number of relevant variables:    1146
Number of functions:             33
Number of loops:                 18
Size of reached set:             142
  Number of reached locations:   131 (2%)
    Avg states per location:     1
    Max states per location:     6 (at node N15)
  Number of reached functions:   18 (55%)
  Number of partitions:          142
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        16

Time for analysis setup:          3.840s
  Time for loading CPAs:          0.630s
  Time for loading parser:        0.476s
  Time for CFA construction:      2.639s
    Time for parsing file(s):     0.665s
    Time for AST to CFA:          0.841s
    Time for CFA sanity check:    0.252s
    Time for post-processing:     0.762s
      Time for var class.:        0.338s
Time for Analysis:                0.722s
CPU time for analysis:            0.720s
Total time for CPAchecker:        4.566s
Total CPU time for CPAchecker:    4.550s
Time for statistics:              0.049s

Time for Garbage Collector:       0.153s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     33MB (    31 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     25MB (    24 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     27MB (    25 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8029MB (  7657 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
