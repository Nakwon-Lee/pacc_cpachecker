scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--net--arcnet--com90xx_true-termination.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xy99blkx/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function probe_irq_on to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_arcdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function probe_irq_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            461 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  315 (68%)
  Because of loop head:            144 (31%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2 (0%)
  Times precision was empty:       442 (96%)
  Times precision was {false}:     5 (1%)
  Times result was cached:         5 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9 (2%)
  Times result was 'false':        3 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         714
  BDD entailment checks:           150
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       229
Number of predicates discovered:          2
Number of abstraction locations:          7
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         19
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.36
Number of irrelevant predicates:          6 (32%)
Number of preds handled by boolean abs:   9 (47%)
  Total number of models for allsat:      9
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.747s
  Time for path formula creation:        0.725s
Time for strengthen operator:            0.027s
Time for prec operator:                  0.132s
  Time for abstraction:                  0.106s (Max:     0.019s, Count: 461)
    Boolean abstraction:                 0.016s
    Solving time:                        0.014s (Max:     0.006s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.059s
Time for coverage check:                 0.016s
  Time for BDD entailment checks:        0.016s
Total time for SMT solver (w/o itp):     0.014s

Number of path formula cache hits:   5302 (62%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.704s

Total number of created targets for pointer analysis: 264
   Number of created targets for uf: *(struct_net_device)* is 17
   Number of created targets for uf: *signed_int is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 677, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.089s
Automaton transfers with branching:                0
Automaton transfer successors:                         8016 (count: 8016, min: 1, max: 1, avg: 1.00) [1 x 8016]

CPA algorithm statistics
------------------------
Number of iterations:            3110
Max size of waitlist:            12
Average size of waitlist:        5
Number of computed successors:   3545
Max successors for one state:    2
Number of times merged:          282
Number of times stopped:         432
Number of times breaked:         2

Total time for CPA algorithm:         1.792s (Max:     1.323s)
  Time for choose from waitlist:      0.023s
  Time for precision adjustment:      0.264s
  Time for transfer relation:         1.201s
  Time for merge operator:            0.111s
  Time for stop operator:             0.059s
  Time for adding to reached set:     0.027s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2
Avg. length of target path (in blocks):                  16 (count: 2, min: 6, max: 10, avg: 8.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.074s
  Counterexample analysis:                             0.039s (Max:     0.020s, Calls: 2)
    Refinement sat check:                              0.023s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.002s
  ARG update:                                          0.018s

Length of refined path (in blocks):                      14 (count: 2, min: 5, max: 9, avg: 7.00)
Number of affected states:                               12 (count: 2, min: 4, max: 8, avg: 6.00)
Length (states) of path with itp 'true':                  0 (count: 2, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        12 (count: 2, min: 4, max: 8, avg: 6.00)
Length (states) of path with itp 'false':                 2 (count: 2, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              10 (count: 2, min: 3, max: 7, avg: 5.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 1041
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 1040.50
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.891s
Time for refinements:                 0.098s
Average time for refinement:          0.049s
Max time for refinement:              0.074s

Code Coverage
-----------------------------
  Function coverage:      0.429
  Visited lines:          2227
  Total lines:            2482
  Line coverage:          0.897
  Visited conditions:     254
  Total conditions:       274
  Condition coverage:     0.927

CPAchecker general statistics
-----------------------------
Number of program locations:     2830
Number of CFA edges:             2990
Number of relevant variables:    416
Number of functions:             35
Number of loops:                 17
Size of reached set:             1036
  Number of reached locations:   749 (26%)
    Avg states per location:     1
    Max states per location:     12 (at node N1193)
  Number of reached functions:   15 (43%)
  Number of partitions:          1036
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.104s
  Time for loading CPAs:          0.567s
  Time for loading parser:        0.468s
  Time for CFA construction:      1.993s
    Time for parsing file(s):     0.641s
    Time for AST to CFA:          0.626s
    Time for CFA sanity check:    0.125s
    Time for post-processing:     0.463s
      Time for var class.:        0.205s
Time for Analysis:                1.891s
CPU time for analysis:            1.890s
Time for analyzing result:        0.001s
Total time for CPAchecker:        4.998s
Total CPU time for CPAchecker:    4.990s
Time for statistics:              0.071s

Time for Garbage Collector:       0.127s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    57 MiB) max;     35MB (    33 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    27 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8038MB (  7666 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
