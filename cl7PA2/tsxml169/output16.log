scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--wireless--orinoco--orinoco_pci.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_cv6shs_b/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_orinocodev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hermes_struct_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_orinocodev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function orinoco_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function orinoco_if_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            236 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  176 (75%)
  Because of loop head:            55 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5 (2%)
  Times precision was empty:       81 (34%)
  Times precision was {false}:     17 (7%)
  Times result was cached:         112 (47%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      26 (11%)
  Times result was 'false':        6 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         214
  BDD entailment checks:           82
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          2
Number of abstraction locations:          19
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         155
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.60
Number of irrelevant predicates:          56 (36%)
Number of preds handled by boolean abs:   26 (17%)
  Total number of models for allsat:      26
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.395s
  Time for path formula creation:        0.390s
Time for strengthen operator:            0.012s
Time for prec operator:                  0.234s
  Time for abstraction:                  0.206s (Max:     0.018s, Count: 236)
    Boolean abstraction:                 0.032s
    Solving time:                        0.024s (Max:     0.007s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.007s (Max:     0.006s)
Time for merge operator:                 0.013s
Time for coverage check:                 0.013s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):     0.025s

Number of path formula cache hits:   1881 (50%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.382s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          53 (count: 409, min: 0, max: 53, avg: 0.13)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.046s
Automaton transfers with branching:                0
Automaton transfer successors:                         3578 (count: 3578, min: 1, max: 1, avg: 1.00) [1 x 3578]

CPA algorithm statistics
------------------------
Number of iterations:            1225
Max size of waitlist:            11
Average size of waitlist:        4
Number of computed successors:   1366
Max successors for one state:    2
Number of times merged:          66
Number of times stopped:         123
Number of times breaked:         5

Total time for CPA algorithm:         1.023s (Max:     0.457s)
  Time for choose from waitlist:      0.003s
  Time for precision adjustment:      0.300s
  Time for transfer relation:         0.616s
  Time for merge operator:            0.025s
  Time for stop operator:             0.030s
  Time for adding to reached set:     0.012s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  70 (count: 5, min: 8, max: 19, avg: 14.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.083s
  Counterexample analysis:                             0.063s (Max:     0.020s, Calls: 5)
    Refinement sat check:                              0.055s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.007s
  Precision update:                                    0.002s
  ARG update:                                          0.010s

Length of refined path (in blocks):                      65 (count: 5, min: 7, max: 18, avg: 13.00)
Number of affected states:                               60 (count: 5, min: 6, max: 17, avg: 12.00)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        60 (count: 5, min: 6, max: 17, avg: 12.00)
Length (states) of path with itp 'false':                 5 (count: 5, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              55 (count: 5, min: 5, max: 16, avg: 11.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 262
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 215.20
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.119s
Time for refinements:                 0.096s
Average time for refinement:          0.019s
Max time for refinement:              0.033s

Code Coverage
-----------------------------
  Function coverage:      0.364
  Visited lines:          1080
  Total lines:            1249
  Line coverage:          0.865
  Visited conditions:     40
  Total conditions:       64
  Condition coverage:     0.625

CPAchecker general statistics
-----------------------------
Number of program locations:     1409
Number of CFA edges:             1441
Number of relevant variables:    114
Number of functions:             22
Number of loops:                 4
Size of reached set:             177
  Number of reached locations:   147 (10%)
    Avg states per location:     1
    Max states per location:     3 (at node N14)
  Number of reached functions:   8 (36%)
  Number of partitions:          177
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.376s
  Time for loading CPAs:          0.700s
  Time for loading parser:        0.488s
  Time for CFA construction:      2.076s
    Time for parsing file(s):     0.684s
    Time for AST to CFA:          0.699s
    Time for CFA sanity check:    0.104s
    Time for post-processing:     0.444s
      Time for var class.:        0.147s
Time for Analysis:                1.119s
CPU time for analysis:            1.120s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.498s
Total CPU time for CPAchecker:    4.490s
Time for statistics:              0.044s

Time for Garbage Collector:       0.132s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    58 MiB) max;     34MB (    32 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             32MB (    31 MiB) max;     25MB (    24 MiB) avg;     34MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    33 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8031MB (  7659 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
