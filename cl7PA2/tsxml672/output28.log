scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--char--hw_random--virtio-rng.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u2znts25/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 1130: Function pointer *__cil_tmp19 with type int (*)(struct virtio_device *, unsigned int nvqs, struct virtqueue **vqs, vq_callback_t **callbacks, const char **names) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_virtio_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 1130: Ignoring call via function pointer virtio_find_single_vq::__cil_tmp19 for which no suitable target was found in line: tmp = (*__cil_tmp19)(vdev, 1U, &vq__1, __cil_tmp22, __cil_tmp25); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 1130: Ignoring function call through function pointer *__cil_tmp19: tmp = (*__cil_tmp19)(vdev, 1U, &vq__1, __cil_tmp22, __cil_tmp25); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function unregister_virtio_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_init_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function virtqueue_add_buf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function virtqueue_kick to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwrng_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 1309: Ignoring call via function pointer virtrng_probe::__cil_tmp12 for which no suitable target was found in line: (*__cil_tmp12)(vdev); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 1309: Ignoring function call through function pointer *__cil_tmp12: (*__cil_tmp12)(vdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1342: Ignoring call via function pointer virtrng_remove::__cil_tmp7 for which no suitable target was found in line: (*__cil_tmp7)(vdev); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 1342: Ignoring function call through function pointer *__cil_tmp7: (*__cil_tmp7)(vdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 1342: Unsupported feature (recursion): virtrng_remove(vdev); (line was originally pointer call(virtrng_remove) (*__cil_tmp7)(vdev);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            40 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  34 (85%)
  Because of loop head:            5 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1 (3%)
  Times precision was empty:       36 (90%)
  Times precision was {false}:     1 (3%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3 (8%)
  Times result was 'false':        1 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         13
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       48
Number of predicates discovered:          2
Number of abstraction locations:          4
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         4
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.00
Number of irrelevant predicates:          1 (25%)
Number of preds handled by boolean abs:   3 (75%)
  Total number of models for allsat:      3
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.208s
  Time for path formula creation:        0.198s
Time for strengthen operator:            0.013s
Time for prec operator:                  0.023s
  Time for abstraction:                  0.022s (Max:     0.013s, Count: 40)
    Boolean abstraction:                 0.010s
    Solving time:                        0.002s (Max:     0.001s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.004s (Max:     0.004s)
Time for merge operator:                 0.018s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.003s

Number of path formula cache hits:   25 (4%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.195s

Total number of created targets for pointer analysis: 2
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_virtqueue)*],_VarArgs:_false)* is 2
   Number of created targets for uf: *(char)* is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 67, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.019s
Automaton transfers with branching:                0
Automaton transfer successors:                          578 (count: 578, min: 1, max: 1, avg: 1.00) [1 x 578]

CPA algorithm statistics
------------------------
Number of iterations:            155
Max size of waitlist:            9
Average size of waitlist:        5
Number of computed successors:   173
Max successors for one state:    2
Number of times merged:          5
Number of times stopped:         8
Number of times breaked:         1

Total time for CPA algorithm:         0.390s (Max:     0.202s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.045s
  Time for transfer relation:         0.319s
  Time for merge operator:            0.021s
  Time for stop operator:             0.002s
  Time for adding to reached set:     0.000s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1
Avg. length of target path (in blocks):                   5 (count: 1, min: 5, max: 5, avg: 5.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.025s
  Counterexample analysis:                             0.008s (Max:     0.008s, Calls: 1)
    Refinement sat check:                              0.002s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.009s
  ARG update:                                          0.001s

Length of refined path (in blocks):                       4 (count: 1, min: 4, max: 4, avg: 4.00)
Number of affected states:                                3 (count: 1, min: 3, max: 3, avg: 3.00)
Length (states) of path with itp 'true':                  0 (count: 1, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         3 (count: 1, min: 3, max: 3, avg: 3.00)
Length (states) of path with itp 'false':                 1 (count: 1, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               2 (count: 1, min: 2, max: 2, avg: 2.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     1
Number of failed refinements:         0
Max. size of reached set before ref.: 23
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 23.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       0.423s
Time for refinements:                 0.033s
Average time for refinement:          0.033s
Max time for refinement:              0.033s

Code Coverage
-----------------------------
  Function coverage:      0.600
  Visited lines:          441
  Total lines:            512
  Line coverage:          0.861
  Visited conditions:     34
  Total conditions:       60
  Condition coverage:     0.567

CPAchecker general statistics
-----------------------------
Number of program locations:     656
Number of CFA edges:             686
Number of relevant variables:    109
Number of functions:             25
Number of loops:                 2
Size of reached set:             145
  Number of reached locations:   144 (22%)
    Avg states per location:     1
    Max states per location:     2 (at node N43)
  Number of reached functions:   15 (60%)
  Number of partitions:          145
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        9

Time for analysis setup:          2.069s
  Time for loading CPAs:          0.523s
  Time for loading parser:        0.427s
  Time for CFA construction:      1.000s
    Time for parsing file(s):     0.362s
    Time for AST to CFA:          0.269s
    Time for CFA sanity check:    0.058s
    Time for post-processing:     0.195s
      Time for var class.:        0.078s
Time for Analysis:                0.423s
CPU time for analysis:            0.430s
Total time for CPAchecker:        2.502s
Total CPU time for CPAchecker:    2.500s
Time for statistics:              0.053s

Time for Garbage Collector:       0.071s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 46MB (    44 MiB) max;     26MB (    25 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             31MB (    29 MiB) max;     23MB (    22 MiB) avg;     32MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        33MB (    32 MiB) max;     24MB (    23 MiB) avg
Total process virtual memory:   8018MB (  7647 MiB) max;   7958MB (  7589 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
