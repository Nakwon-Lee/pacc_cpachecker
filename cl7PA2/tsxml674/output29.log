scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--rtc--rtc-da9052.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_o_6eihbi/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_raw_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_bulk_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_update_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq_byname to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regmap_update_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtc_valid_tm to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1969 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1743 (89%)
  Because of loop head:            208 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18 (1%)
  Times precision was empty:       585 (30%)
  Times precision was {false}:     88 (4%)
  Times result was cached:         1225 (62%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      71 (4%)
  Times result was 'false':        35 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1208
  BDD entailment checks:           494
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          2
Number of abstraction locations:          50
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1384
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 8.70
Number of irrelevant predicates:          494 (36%)
Number of preds handled by boolean abs:   71 (5%)
  Total number of models for allsat:      71
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.206s
  Time for path formula creation:        1.162s
Time for strengthen operator:            0.042s
Time for prec operator:                  0.951s
  Time for abstraction:                  0.841s (Max:     0.022s, Count: 1969)
    Boolean abstraction:                 0.111s
    Solving time:                        0.116s (Max:     0.013s)
    Model enumeration time:              0.030s
    Time for BDD construction:           0.017s (Max:     0.009s)
Time for merge operator:                 0.060s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):     0.146s

Number of path formula cache hits:   23395 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.098s

Total number of created targets for pointer analysis: 742
   Number of created targets for uf: *unsigned_char is 113


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         137 (count: 1950, min: 0, max: 40, avg: 0.07)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.190s
Automaton transfers with branching:                0
Automaton transfer successors:                        28676 (count: 28676, min: 1, max: 1, avg: 1.00) [1 x 28676]

CPA algorithm statistics
------------------------
Number of iterations:            7442
Max size of waitlist:            21
Average size of waitlist:        9
Number of computed successors:   8382
Max successors for one state:    2
Number of times merged:          357
Number of times stopped:         709
Number of times breaked:         18

Total time for CPA algorithm:         3.359s (Max:     0.526s)
  Time for choose from waitlist:      0.012s
  Time for precision adjustment:      1.182s
  Time for transfer relation:         1.840s
  Time for merge operator:            0.088s
  Time for stop operator:             0.072s
  Time for adding to reached set:     0.056s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   18
Avg. length of target path (in blocks):                 213 (count: 18, min: 4, max: 19, avg: 11.83)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.218s
  Counterexample analysis:                             0.126s (Max:     0.013s, Calls: 18)
    Refinement sat check:                              0.083s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.020s
  Precision update:                                    0.017s
  ARG update:                                          0.043s

Length of refined path (in blocks):                     195 (count: 18, min: 3, max: 18, avg: 10.83)
Number of affected states:                              177 (count: 18, min: 2, max: 17, avg: 9.83)
Length (states) of path with itp 'true':                  0 (count: 18, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       177 (count: 18, min: 2, max: 17, avg: 9.83)
Length (states) of path with itp 'false':                18 (count: 18, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 18, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             159 (count: 18, min: 1, max: 16, avg: 8.83)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                18
Number of successful refinements:     18
Number of failed refinements:         0
Max. size of reached set before ref.: 496
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 407.28
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.604s
Time for refinements:                 0.242s
Average time for refinement:          0.013s
Max time for refinement:              0.041s

Code Coverage
-----------------------------
  Function coverage:      0.636
  Visited lines:          1172
  Total lines:            1261
  Line coverage:          0.929
  Visited conditions:     66
  Total conditions:       86
  Condition coverage:     0.767

CPAchecker general statistics
-----------------------------
Number of program locations:     1440
Number of CFA edges:             1489
Number of relevant variables:    361
Number of functions:             33
Number of loops:                 1
Size of reached set:             362
  Number of reached locations:   236 (16%)
    Avg states per location:     1
    Max states per location:     10 (at node N90)
  Number of reached functions:   21 (64%)
  Number of partitions:          362
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.797s
  Time for loading CPAs:          0.731s
  Time for loading parser:        0.416s
  Time for CFA construction:      1.578s
    Time for parsing file(s):     0.557s
    Time for AST to CFA:          0.420s
    Time for CFA sanity check:    0.097s
    Time for post-processing:     0.369s
      Time for var class.:        0.220s
Time for Analysis:                3.604s
CPU time for analysis:            3.590s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.403s
Total CPU time for CPAchecker:    6.400s
Time for statistics:              0.058s

Time for Garbage Collector:       0.133s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 62MB (    59 MiB) max;     37MB (    35 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     29MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8019MB (  7648 MiB) max;   7992MB (  7622 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
