scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--regulator--wm831x-isink.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_sth56g73/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rdev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_set_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_notifier_call_chain to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            775 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  562 (73%)
  Because of loop head:            201 (26%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (2%)
  Times precision was empty:       235 (30%)
  Times precision was {false}:     43 (6%)
  Times result was cached:         460 (59%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      37 (5%)
  Times result was 'false':        23 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         950
  BDD entailment checks:           332
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       142
Number of predicates discovered:          2
Number of abstraction locations:          31
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         540
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 6.75
Number of irrelevant predicates:          244 (45%)
Number of preds handled by boolean abs:   37 (7%)
  Total number of models for allsat:      37
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.789s
  Time for path formula creation:        0.735s
Time for strengthen operator:            0.063s
Time for prec operator:                  0.481s
  Time for abstraction:                  0.400s (Max:     0.015s, Count: 775)
    Boolean abstraction:                 0.059s
    Solving time:                        0.103s (Max:     0.013s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.043s
Time for coverage check:                 0.025s
  Time for BDD entailment checks:        0.025s
Total time for SMT solver (w/o itp):     0.104s

Number of path formula cache hits:   7853 (55%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.720s

Total number of created targets for pointer analysis: 40
   Number of created targets for uf: *signed_int is 21


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          45 (count: 1009, min: 0, max: 29, avg: 0.04)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.075s
Automaton transfers with branching:                0
Automaton transfer successors:                        13527 (count: 13527, min: 1, max: 1, avg: 1.00) [1 x 13527]

CPA algorithm statistics
------------------------
Number of iterations:            3918
Max size of waitlist:            18
Average size of waitlist:        8
Number of computed successors:   4490
Max successors for one state:    2
Number of times merged:          309
Number of times stopped:         518
Number of times breaked:         12

Total time for CPA algorithm:         2.174s (Max:     0.507s)
  Time for choose from waitlist:      0.012s
  Time for precision adjustment:      0.616s
  Time for transfer relation:         1.290s
  Time for merge operator:            0.076s
  Time for stop operator:             0.062s
  Time for adding to reached set:     0.042s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 144 (count: 12, min: 5, max: 18, avg: 12.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.160s
  Counterexample analysis:                             0.107s (Max:     0.018s, Calls: 12)
    Refinement sat check:                              0.090s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.016s
  Precision update:                                    0.013s
  ARG update:                                          0.018s

Length of refined path (in blocks):                     132 (count: 12, min: 4, max: 17, avg: 11.00)
Number of affected states:                              120 (count: 12, min: 3, max: 16, avg: 10.00)
Length (states) of path with itp 'true':                  0 (count: 12, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       120 (count: 12, min: 3, max: 16, avg: 10.00)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             108 (count: 12, min: 2, max: 15, avg: 9.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 401
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 312.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.363s
Time for refinements:                 0.184s
Average time for refinement:          0.015s
Max time for refinement:              0.052s

Code Coverage
-----------------------------
  Function coverage:      0.577
  Visited lines:          1046
  Total lines:            1126
  Line coverage:          0.929
  Visited conditions:     64
  Total conditions:       84
  Condition coverage:     0.762

CPAchecker general statistics
-----------------------------
Number of program locations:     1286
Number of CFA edges:             1328
Number of relevant variables:    227
Number of functions:             26
Number of loops:                 2
Size of reached set:             242
  Number of reached locations:   208 (16%)
    Avg states per location:     1
    Max states per location:     8 (at node N731)
  Number of reached functions:   15 (58%)
  Number of partitions:          242
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.836s
  Time for loading CPAs:          0.606s
  Time for loading parser:        0.495s
  Time for CFA construction:      1.644s
    Time for parsing file(s):     0.553s
    Time for AST to CFA:          0.490s
    Time for CFA sanity check:    0.093s
    Time for post-processing:     0.332s
      Time for var class.:        0.156s
Time for Analysis:                2.363s
CPU time for analysis:            2.370s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.202s
Total CPU time for CPAchecker:    5.200s
Time for statistics:              0.069s

Time for Garbage Collector:       0.130s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    57 MiB) max;     35MB (    33 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     29MB (    27 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8041MB (  7668 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
