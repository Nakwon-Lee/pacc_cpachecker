scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--regulator--wm831x-isink.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_mtz1u3ie/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rdev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_set_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_notifier_call_chain to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            684 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  493 (72%)
  Because of loop head:            179 (26%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (2%)
  Times precision was empty:       177 (26%)
  Times precision was {false}:     42 (6%)
  Times result was cached:         428 (63%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      37 (5%)
  Times result was 'false':        18 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         843
  BDD entailment checks:           281
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       142
Number of predicates discovered:          2
Number of abstraction locations:          31
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         507
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 6.42
Number of irrelevant predicates:          219 (43%)
Number of preds handled by boolean abs:   37 (7%)
  Total number of models for allsat:      37
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.726s
  Time for path formula creation:        0.695s
Time for strengthen operator:            0.017s
Time for prec operator:                  0.420s
  Time for abstraction:                  0.377s (Max:     0.023s, Count: 684)
    Boolean abstraction:                 0.097s
    Solving time:                        0.096s (Max:     0.017s)
    Model enumeration time:              0.012s
    Time for BDD construction:           0.019s (Max:     0.011s)
Time for merge operator:                 0.023s
Time for coverage check:                 0.005s
  Time for BDD entailment checks:        0.005s
Total time for SMT solver (w/o itp):     0.108s

Number of path formula cache hits:   5675 (57%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.662s

Total number of created targets for pointer analysis: 40
   Number of created targets for uf: *signed_int is 21


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          67 (count: 895, min: 0, max: 37, avg: 0.07)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.086s
Automaton transfers with branching:                0
Automaton transfer successors:                         9501 (count: 9501, min: 1, max: 1, avg: 1.00) [1 x 9501]

CPA algorithm statistics
------------------------
Number of iterations:            3465
Max size of waitlist:            17
Average size of waitlist:        7
Number of computed successors:   3996
Max successors for one state:    2
Number of times merged:          281
Number of times stopped:         454
Number of times breaked:         12

Total time for CPA algorithm:         1.864s (Max:     0.230s)
  Time for choose from waitlist:      0.012s
  Time for precision adjustment:      0.559s
  Time for transfer relation:         1.068s
  Time for merge operator:            0.051s
  Time for stop operator:             0.042s
  Time for adding to reached set:     0.043s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 148 (count: 12, min: 5, max: 19, avg: 12.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.170s
  Counterexample analysis:                             0.094s (Max:     0.016s, Calls: 12)
    Refinement sat check:                              0.071s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.022s
  Precision update:                                    0.002s
  ARG update:                                          0.028s

Length of refined path (in blocks):                     136 (count: 12, min: 4, max: 18, avg: 11.33)
Number of affected states:                              124 (count: 12, min: 3, max: 17, avg: 10.33)
Length (states) of path with itp 'true':                  0 (count: 12, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       124 (count: 12, min: 3, max: 17, avg: 10.33)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             112 (count: 12, min: 2, max: 16, avg: 9.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 385
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 276.58
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.053s
Time for refinements:                 0.189s
Average time for refinement:          0.015s
Max time for refinement:              0.040s

Code Coverage
-----------------------------
  Function coverage:      0.577
  Visited lines:          1046
  Total lines:            1126
  Line coverage:          0.929
  Visited conditions:     64
  Total conditions:       84
  Condition coverage:     0.762

CPAchecker general statistics
-----------------------------
Number of program locations:     1286
Number of CFA edges:             1328
Number of relevant variables:    227
Number of functions:             26
Number of loops:                 2
Size of reached set:             242
  Number of reached locations:   208 (16%)
    Avg states per location:     1
    Max states per location:     8 (at node N731)
  Number of reached functions:   15 (58%)
  Number of partitions:          242
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.597s
  Time for loading CPAs:          0.544s
  Time for loading parser:        0.416s
  Time for CFA construction:      1.564s
    Time for parsing file(s):     0.582s
    Time for AST to CFA:          0.451s
    Time for CFA sanity check:    0.067s
    Time for post-processing:     0.331s
      Time for var class.:        0.138s
Time for Analysis:                2.053s
CPU time for analysis:            2.050s
Time for analyzing result:        0.001s
Total time for CPAchecker:        4.653s
Total CPU time for CPAchecker:    4.650s
Time for statistics:              0.058s

Time for Garbage Collector:       0.108s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     33MB (    31 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     27MB (    25 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     28MB (    27 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8043MB (  7670 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
