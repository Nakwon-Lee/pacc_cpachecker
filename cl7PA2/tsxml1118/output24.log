scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_f8mk8tac/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function subdev_8255_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 1828: Destroying the void* pointer alloc_private::__cil_tmp4 produces garbage or the memory pointed by it is unused: tmp = alloc_private(dev, __cil_tmp25); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function subdev_8255_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            406 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  317 (78%)
  Because of loop head:            80 (20%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         9 (2%)
  Times precision was empty:       91 (22%)
  Times precision was {false}:     15 (4%)
  Times result was cached:         261 (64%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      39 (10%)
  Times result was 'false':        10 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         281
  BDD entailment checks:           107
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       109
Number of predicates discovered:          2
Number of abstraction locations:          32
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         315
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 5.83
Number of irrelevant predicates:          79 (25%)
Number of preds handled by boolean abs:   39 (12%)
  Total number of models for allsat:      39
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.398s
  Time for path formula creation:        0.380s
Time for strengthen operator:            0.041s
Time for prec operator:                  0.360s
  Time for abstraction:                  0.329s (Max:     0.018s, Count: 406)
    Boolean abstraction:                 0.065s
    Solving time:                        0.064s (Max:     0.012s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.008s (Max:     0.005s)
Time for merge operator:                 0.021s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     0.067s

Number of path formula cache hits:   4305 (74%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.360s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          63 (count: 512, min: 0, max: 63, avg: 0.12)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.064s
Automaton transfers with branching:                0
Automaton transfer successors:                         5431 (count: 5431, min: 1, max: 1, avg: 1.00) [1 x 5431]

CPA algorithm statistics
------------------------
Number of iterations:            1742
Max size of waitlist:            7
Average size of waitlist:        3
Number of computed successors:   1949
Max successors for one state:    2
Number of times merged:          87
Number of times stopped:         161
Number of times breaked:         9

Total time for CPA algorithm:         1.302s (Max:     0.236s)
  Time for choose from waitlist:      0.006s
  Time for precision adjustment:      0.461s
  Time for transfer relation:         0.683s
  Time for merge operator:            0.040s
  Time for stop operator:             0.044s
  Time for adding to reached set:     0.009s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                 175 (count: 9, min: 8, max: 27, avg: 19.44)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.139s
  Counterexample analysis:                             0.099s (Max:     0.028s, Calls: 9)
    Refinement sat check:                              0.073s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.011s
  ARG update:                                          0.013s

Length of refined path (in blocks):                     166 (count: 9, min: 7, max: 26, avg: 18.44)
Number of affected states:                              157 (count: 9, min: 6, max: 25, avg: 17.44)
Length (states) of path with itp 'true':                  0 (count: 9, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       157 (count: 9, min: 6, max: 25, avg: 17.44)
Length (states) of path with itp 'false':                 9 (count: 9, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 9, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             148 (count: 9, min: 5, max: 24, avg: 16.44)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 259
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 175.89
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.466s
Time for refinements:                 0.159s
Average time for refinement:          0.017s
Max time for refinement:              0.037s

Code Coverage
-----------------------------
  Function coverage:      0.556
  Visited lines:          846
  Total lines:            903
  Line coverage:          0.937
  Visited conditions:     60
  Total conditions:       80
  Condition coverage:     0.750

CPAchecker general statistics
-----------------------------
Number of program locations:     1070
Number of CFA edges:             1106
Number of relevant variables:    202
Number of functions:             27
Number of loops:                 3
Size of reached set:             223
  Number of reached locations:   198 (19%)
    Avg states per location:     1
    Max states per location:     4 (at node N209)
  Number of reached functions:   15 (56%)
  Number of partitions:          223
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.840s
  Time for loading CPAs:          0.633s
  Time for loading parser:        0.550s
  Time for CFA construction:      1.569s
    Time for parsing file(s):     0.524s
    Time for AST to CFA:          0.453s
    Time for CFA sanity check:    0.102s
    Time for post-processing:     0.361s
      Time for var class.:        0.141s
Time for Analysis:                1.466s
CPU time for analysis:            1.460s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.308s
Total CPU time for CPAchecker:    4.300s
Time for statistics:              0.061s

Time for Garbage Collector:       0.094s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     30MB (    29 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     26MB (    25 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8026MB (  7654 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
