scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--w1--slaves--w1_ds2760.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hmrg_af4/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_register_family to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_simple_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_simple_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_unregister_family to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_reset_select_slave to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_write_8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            302 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  250 (83%)
  Because of loop head:            40 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (4%)
  Times precision was empty:       126 (42%)
  Times precision was {false}:     23 (8%)
  Times result was cached:         130 (43%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      23 (8%)
  Times result was 'false':        19 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         311
  BDD entailment checks:           63
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       34
Number of predicates discovered:          3
Number of abstraction locations:          21
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         176
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.83
Number of irrelevant predicates:          83 (47%)
Number of preds handled by boolean abs:   23 (13%)
  Total number of models for allsat:      23
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.439s
  Time for path formula creation:        0.422s
Time for strengthen operator:            0.041s
Time for prec operator:                  0.197s
  Time for abstraction:                  0.164s (Max:     0.015s, Count: 302)
    Boolean abstraction:                 0.038s
    Solving time:                        0.018s (Max:     0.006s)
    Model enumeration time:              0.013s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.031s
Time for coverage check:                 0.007s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.031s

Number of path formula cache hits:   2762 (59%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.407s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          38 (count: 449, min: 0, max: 38, avg: 0.08)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.029s
Automaton transfers with branching:                0
Automaton transfer successors:                         4464 (count: 4464, min: 1, max: 1, avg: 1.00) [1 x 4464]

CPA algorithm statistics
------------------------
Number of iterations:            1495
Max size of waitlist:            12
Average size of waitlist:        5
Number of computed successors:   1716
Max successors for one state:    2
Number of times merged:          124
Number of times stopped:         163
Number of times breaked:         12

Total time for CPA algorithm:         1.106s (Max:     0.299s)
  Time for choose from waitlist:      0.003s
  Time for precision adjustment:      0.290s
  Time for transfer relation:         0.660s
  Time for merge operator:            0.051s
  Time for stop operator:             0.039s
  Time for adding to reached set:     0.024s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 137 (count: 12, min: 5, max: 20, avg: 11.42)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.093s
  Counterexample analysis:                             0.070s (Max:     0.015s, Calls: 12)
    Refinement sat check:                              0.051s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.004s
  ARG update:                                          0.006s

Length of refined path (in blocks):                     125 (count: 12, min: 4, max: 19, avg: 10.42)
Number of affected states:                               69 (count: 12, min: 2, max: 14, avg: 5.75)
Length (states) of path with itp 'true':                 44 (count: 12, min: 0, max: 9, avg: 3.67)
Length (states) of path with itp non-trivial itp:        69 (count: 12, min: 2, max: 14, avg: 5.75)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              57 (count: 12, min: 1, max: 13, avg: 4.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 260
Max. size of reached set after ref.:  202
Avg. size of reached set before ref.: 186.67
Avg. size of reached set after ref.:  70.50

Total time for CEGAR algorithm:       1.221s
Time for refinements:                 0.115s
Average time for refinement:          0.009s
Max time for refinement:              0.030s

Code Coverage
-----------------------------
  Function coverage:      0.478
  Visited lines:          493
  Total lines:            612
  Line coverage:          0.806
  Visited conditions:     36
  Total conditions:       56
  Condition coverage:     0.643

CPAchecker general statistics
-----------------------------
Number of program locations:     741
Number of CFA edges:             770
Number of relevant variables:    99
Number of functions:             23
Number of loops:                 1
Size of reached set:             141
  Number of reached locations:   127 (17%)
    Avg states per location:     1
    Max states per location:     4 (at node N426)
  Number of reached functions:   11 (48%)
  Number of partitions:          141
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.374s
  Time for loading CPAs:          0.504s
  Time for loading parser:        0.567s
  Time for CFA construction:      1.200s
    Time for parsing file(s):     0.432s
    Time for AST to CFA:          0.325s
    Time for CFA sanity check:    0.046s
    Time for post-processing:     0.264s
      Time for var class.:        0.161s
Time for Analysis:                1.221s
CPU time for analysis:            1.220s
Time for analyzing result:        0.001s
Total time for CPAchecker:        3.597s
Total CPU time for CPAchecker:    3.590s
Time for statistics:              0.081s

Time for Garbage Collector:       0.099s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 56MB (    53 MiB) max;     29MB (    27 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     25MB (    24 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8017MB (  7645 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
