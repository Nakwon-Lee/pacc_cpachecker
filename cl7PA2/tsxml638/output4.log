scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--net--arcnet--com20020_cs.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_sc7z7ipu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_arcdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_request_io to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pcmcia_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function com20020_check to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function com20020_found to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            779 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  654 (84%)
  Because of loop head:            115 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (1%)
  Times precision was empty:       291 (37%)
  Times precision was {false}:     68 (9%)
  Times result was cached:         375 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      45 (6%)
  Times result was 'false':        10 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1258
  BDD entailment checks:           256
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       323
Number of predicates discovered:          2
Number of abstraction locations:          31
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         488
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.32
Number of irrelevant predicates:          204 (42%)
Number of preds handled by boolean abs:   45 (9%)
  Total number of models for allsat:      47
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  1.308s
  Time for path formula creation:        1.267s
Time for strengthen operator:            0.045s
Time for prec operator:                  0.876s
  Time for abstraction:                  0.831s (Max:     0.044s, Count: 779)
    Boolean abstraction:                 0.210s
    Solving time:                        0.363s (Max:     0.032s)
    Model enumeration time:              0.042s
    Time for BDD construction:           0.012s (Max:     0.006s)
Time for merge operator:                 0.050s
Time for coverage check:                 0.023s
  Time for BDD entailment checks:        0.022s
Total time for SMT solver (w/o itp):     0.405s

Number of path formula cache hits:   14854 (64%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.221s

Total number of created targets for pointer analysis: 10
   Number of created targets for uf: *signed_int is 11


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          85 (count: 1162, min: 0, max: 36, avg: 0.07)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.133s
Automaton transfers with branching:                0
Automaton transfer successors:                        22490 (count: 22490, min: 1, max: 1, avg: 1.00) [1 x 22490]

CPA algorithm statistics
------------------------
Number of iterations:            4744
Max size of waitlist:            14
Average size of waitlist:        5
Number of computed successors:   5453
Max successors for one state:    2
Number of times merged:          501
Number of times stopped:         671
Number of times breaked:         10

Total time for CPA algorithm:         3.214s (Max:     0.642s)
  Time for choose from waitlist:      0.016s
  Time for precision adjustment:      1.008s
  Time for transfer relation:         1.910s
  Time for merge operator:            0.083s
  Time for stop operator:             0.075s
  Time for adding to reached set:     0.030s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10
Avg. length of target path (in blocks):                 162 (count: 10, min: 8, max: 23, avg: 16.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.254s
  Counterexample analysis:                             0.191s (Max:     0.031s, Calls: 10)
    Refinement sat check:                              0.155s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.014s
  Precision update:                                    0.002s
  ARG update:                                          0.033s

Length of refined path (in blocks):                     152 (count: 10, min: 7, max: 22, avg: 15.20)
Number of affected states:                              142 (count: 10, min: 6, max: 21, avg: 14.20)
Length (states) of path with itp 'true':                  0 (count: 10, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       142 (count: 10, min: 6, max: 21, avg: 14.20)
Length (states) of path with itp 'false':                10 (count: 10, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 10, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             132 (count: 10, min: 5, max: 20, avg: 13.20)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10
Number of successful refinements:     10
Number of failed refinements:         0
Max. size of reached set before ref.: 557
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 442.90
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.487s
Time for refinements:                 0.273s
Average time for refinement:          0.027s
Max time for refinement:              0.048s

Code Coverage
-----------------------------
  Function coverage:      0.538
  Visited lines:          1971
  Total lines:            2015
  Line coverage:          0.978
  Visited conditions:     86
  Total conditions:       94
  Condition coverage:     0.915

CPAchecker general statistics
-----------------------------
Number of program locations:     2193
Number of CFA edges:             2240
Number of relevant variables:    395
Number of functions:             26
Number of loops:                 2
Size of reached set:             374
  Number of reached locations:   260 (12%)
    Avg states per location:     1
    Max states per location:     5 (at node N1090)
  Number of reached functions:   14 (54%)
  Number of partitions:          374
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.227s
  Time for loading CPAs:          0.653s
  Time for loading parser:        0.540s
  Time for CFA construction:      1.928s
    Time for parsing file(s):     0.585s
    Time for AST to CFA:          0.646s
    Time for CFA sanity check:    0.130s
    Time for post-processing:     0.441s
      Time for var class.:        0.201s
Time for Analysis:                3.487s
CPU time for analysis:            3.490s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.717s
Total CPU time for CPAchecker:    6.710s
Time for statistics:              0.064s

Time for Garbage Collector:       0.151s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 64MB (    61 MiB) max;     39MB (    37 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     28MB (    27 MiB) avg;     36MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    36 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   7986MB (  7616 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
