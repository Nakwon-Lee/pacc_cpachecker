scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--w1--slaves--w1_ds2780.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jt1eihrm/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_register_family to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_simple_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_simple_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_unregister_family to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ida_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_reset_select_slave to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_write_8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function w1_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            265 (8% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  217 (82%)
  Because of loop head:            40 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (3%)
  Times precision was empty:       105 (40%)
  Times precision was {false}:     20 (8%)
  Times result was cached:         118 (45%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22 (8%)
  Times result was 'false':        11 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         215
  BDD entailment checks:           77
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       48
Number of predicates discovered:          3
Number of abstraction locations:          21
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         160
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.81
Number of irrelevant predicates:          82 (51%)
Number of preds handled by boolean abs:   22 (14%)
  Total number of models for allsat:      22
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.345s
  Time for path formula creation:        0.342s
Time for strengthen operator:            0.014s
Time for prec operator:                  0.203s
  Time for abstraction:                  0.188s (Max:     0.019s, Count: 265)
    Boolean abstraction:                 0.030s
    Solving time:                        0.044s (Max:     0.017s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.036s
Time for coverage check:                 0.005s
  Time for BDD entailment checks:        0.005s
Total time for SMT solver (w/o itp):     0.047s

Number of path formula cache hits:   2095 (57%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.326s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 421, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.045s
Automaton transfers with branching:                0
Automaton transfer successors:                         3474 (count: 3474, min: 1, max: 1, avg: 1.00) [1 x 3474]

CPA algorithm statistics
------------------------
Number of iterations:            1155
Max size of waitlist:            12
Average size of waitlist:        5
Number of computed successors:   1304
Max successors for one state:    2
Number of times merged:          69
Number of times stopped:         114
Number of times breaked:         8

Total time for CPA algorithm:         1.017s (Max:     0.294s)
  Time for choose from waitlist:      0.015s
  Time for precision adjustment:      0.287s
  Time for transfer relation:         0.571s
  Time for merge operator:            0.056s
  Time for stop operator:             0.032s
  Time for adding to reached set:     0.011s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                  94 (count: 8, min: 8, max: 19, avg: 11.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.097s
  Counterexample analysis:                             0.062s (Max:     0.014s, Calls: 8)
    Refinement sat check:                              0.044s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.009s
  Precision update:                                    0.008s
  ARG update:                                          0.006s

Length of refined path (in blocks):                      86 (count: 8, min: 7, max: 18, avg: 10.75)
Number of affected states:                               56 (count: 8, min: 4, max: 11, avg: 7.00)
Length (states) of path with itp 'true':                 22 (count: 8, min: 0, max: 10, avg: 2.75)
Length (states) of path with itp non-trivial itp:        56 (count: 8, min: 4, max: 11, avg: 7.00)
Length (states) of path with itp 'false':                 8 (count: 8, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 8, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              48 (count: 8, min: 3, max: 10, avg: 6.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 230
Max. size of reached set after ref.:  173
Avg. size of reached set before ref.: 182.75
Avg. size of reached set after ref.:  52.75

Total time for CEGAR algorithm:       1.153s
Time for refinements:                 0.117s
Average time for refinement:          0.014s
Max time for refinement:              0.038s

Code Coverage
-----------------------------
  Function coverage:      0.524
  Visited lines:          504
  Total lines:            619
  Line coverage:          0.814
  Visited conditions:     36
  Total conditions:       58
  Condition coverage:     0.621

CPAchecker general statistics
-----------------------------
Number of program locations:     743
Number of CFA edges:             773
Number of relevant variables:    99
Number of functions:             21
Number of loops:                 1
Size of reached set:             140
  Number of reached locations:   126 (17%)
    Avg states per location:     1
    Max states per location:     4 (at node N433)
  Number of reached functions:   11 (52%)
  Number of partitions:          140
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.707s
  Time for loading CPAs:          0.562s
  Time for loading parser:        0.558s
  Time for CFA construction:      1.401s
    Time for parsing file(s):     0.530s
    Time for AST to CFA:          0.357s
    Time for CFA sanity check:    0.060s
    Time for post-processing:     0.317s
      Time for var class.:        0.161s
Time for Analysis:                1.153s
CPU time for analysis:            1.160s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.864s
Total CPU time for CPAchecker:    3.860s
Time for statistics:              0.053s

Time for Garbage Collector:       0.086s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 55MB (    52 MiB) max;     29MB (    28 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     25MB (    24 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8020MB (  7649 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
