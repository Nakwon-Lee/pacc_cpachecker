scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--input--keyboard--gpio_keys_polled_false-termination.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1ul5a4l8/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 2172: Function pointer *__cil_tmp15 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 2123: Function pointer *__cil_tmp15 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_allocate_polled_device to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_input to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_capability to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_get_value_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_get_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            640 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  473 (74%)
  Because of loop head:            156 (24%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (2%)
  Times precision was empty:       215 (34%)
  Times precision was {false}:     57 (9%)
  Times result was cached:         334 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      34 (5%)
  Times result was 'false':        11 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         671
  BDD entailment checks:           299
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       141
Number of predicates discovered:          2
Number of abstraction locations:          22
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         425
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.67
Number of irrelevant predicates:          193 (45%)
Number of preds handled by boolean abs:   34 (8%)
  Total number of models for allsat:      35
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  0.710s
  Time for path formula creation:        0.685s
Time for strengthen operator:            0.050s
Time for prec operator:                  0.504s
  Time for abstraction:                  0.427s (Max:     0.018s, Count: 640)
    Boolean abstraction:                 0.043s
    Solving time:                        0.074s (Max:     0.011s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.014s
Time for coverage check:                 0.022s
  Time for BDD entailment checks:        0.022s
Total time for SMT solver (w/o itp):     0.074s

Number of path formula cache hits:   7766 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.628s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          57 (count: 1008, min: 0, max: 35, avg: 0.06)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.106s
Automaton transfers with branching:                0
Automaton transfer successors:                        11352 (count: 11352, min: 1, max: 1, avg: 1.00) [1 x 11352]

CPA algorithm statistics
------------------------
Number of iterations:            3394
Max size of waitlist:            6
Average size of waitlist:        3
Number of computed successors:   3795
Max successors for one state:    2
Number of times merged:          186
Number of times stopped:         379
Number of times breaked:         11

Total time for CPA algorithm:         2.141s (Max:     0.381s)
  Time for choose from waitlist:      0.008s
  Time for precision adjustment:      0.651s
  Time for transfer relation:         1.228s
  Time for merge operator:            0.073s
  Time for stop operator:             0.047s
  Time for adding to reached set:     0.041s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                 180 (count: 11, min: 6, max: 22, avg: 16.36)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.194s
  Counterexample analysis:                             0.139s (Max:     0.019s, Calls: 11)
    Refinement sat check:                              0.103s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.025s
  Precision update:                                    0.004s
  ARG update:                                          0.022s

Length of refined path (in blocks):                     169 (count: 11, min: 5, max: 21, avg: 15.36)
Number of affected states:                              158 (count: 11, min: 4, max: 20, avg: 14.36)
Length (states) of path with itp 'true':                  0 (count: 11, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       158 (count: 11, min: 4, max: 20, avg: 14.36)
Length (states) of path with itp 'false':                11 (count: 11, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 11, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             147 (count: 11, min: 3, max: 19, avg: 13.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 384
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 294.64
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.364s
Time for refinements:                 0.222s
Average time for refinement:          0.020s
Max time for refinement:              0.045s

Code Coverage
-----------------------------
  Function coverage:      0.474
  Visited lines:          845
  Total lines:            1025
  Line coverage:          0.824
  Visited conditions:     46
  Total conditions:       62
  Condition coverage:     0.742

CPAchecker general statistics
-----------------------------
Number of program locations:     1143
Number of CFA edges:             1169
Number of relevant variables:    235
Number of functions:             19
Number of loops:                 5
Size of reached set:             198
  Number of reached locations:   162 (14%)
    Avg states per location:     1
    Max states per location:     4 (at node N280)
  Number of reached functions:   9 (47%)
  Number of partitions:          198
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.766s
  Time for loading CPAs:          0.621s
  Time for loading parser:        0.432s
  Time for CFA construction:      1.511s
    Time for parsing file(s):     0.478s
    Time for AST to CFA:          0.455s
    Time for CFA sanity check:    0.122s
    Time for post-processing:     0.353s
      Time for var class.:        0.135s
Time for Analysis:                2.364s
CPU time for analysis:            2.360s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.137s
Total CPU time for CPAchecker:    5.130s
Time for statistics:              0.056s

Time for Garbage Collector:       0.125s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     33MB (    32 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     27MB (    26 MiB) avg;     35MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8018MB (  7647 MiB) max;   7986MB (  7616 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
