scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--input--keyboard--gpio_keys_polled_false-termination.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_qkzutsb2/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 2172: Function pointer *__cil_tmp15 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 2123: Function pointer *__cil_tmp15 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_allocate_polled_device to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_input to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_capability to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_get_value_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_get_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            711 (6% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  514 (72%)
  Because of loop head:            186 (26%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (2%)
  Times precision was empty:       239 (34%)
  Times precision was {false}:     90 (13%)
  Times result was cached:         348 (49%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      34 (5%)
  Times result was 'false':        10 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         688
  BDD entailment checks:           298
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       141
Number of predicates discovered:          2
Number of abstraction locations:          22
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         472
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.81
Number of irrelevant predicates:          241 (51%)
Number of preds handled by boolean abs:   34 (7%)
  Total number of models for allsat:      35
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.03

Time for post operator:                  0.973s
  Time for path formula creation:        0.960s
Time for strengthen operator:            0.054s
Time for prec operator:                  0.593s
  Time for abstraction:                  0.525s (Max:     0.015s, Count: 711)
    Boolean abstraction:                 0.042s
    Solving time:                        0.125s (Max:     0.011s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                 0.036s
Time for coverage check:                 0.020s
  Time for BDD entailment checks:        0.020s
Total time for SMT solver (w/o itp):     0.127s

Number of path formula cache hits:   5551 (42%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.910s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          49 (count: 1196, min: 0, max: 25, avg: 0.04)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.156s
Automaton transfers with branching:                0
Automaton transfer successors:                        12741 (count: 12741, min: 1, max: 1, avg: 1.00) [1 x 12741]

CPA algorithm statistics
------------------------
Number of iterations:            3722
Max size of waitlist:            9
Average size of waitlist:        3
Number of computed successors:   4164
Max successors for one state:    2
Number of times merged:          195
Number of times stopped:         415
Number of times breaked:         11

Total time for CPA algorithm:         2.603s (Max:     0.659s)
  Time for choose from waitlist:      0.008s
  Time for precision adjustment:      0.733s
  Time for transfer relation:         1.588s
  Time for merge operator:            0.049s
  Time for stop operator:             0.052s
  Time for adding to reached set:     0.071s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                 180 (count: 11, min: 6, max: 22, avg: 16.36)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.151s
  Counterexample analysis:                             0.096s (Max:     0.020s, Calls: 11)
    Refinement sat check:                              0.079s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.017s
  Precision update:                                    0.010s
  ARG update:                                          0.019s

Length of refined path (in blocks):                     169 (count: 11, min: 5, max: 21, avg: 15.36)
Number of affected states:                              158 (count: 11, min: 4, max: 20, avg: 14.36)
Length (states) of path with itp 'true':                  0 (count: 11, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       158 (count: 11, min: 4, max: 20, avg: 14.36)
Length (states) of path with itp 'false':                11 (count: 11, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 11, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             147 (count: 11, min: 3, max: 19, avg: 13.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 407
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 325.00
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.787s
Time for refinements:                 0.183s
Average time for refinement:          0.016s
Max time for refinement:              0.044s

Code Coverage
-----------------------------
  Function coverage:      0.474
  Visited lines:          845
  Total lines:            1025
  Line coverage:          0.824
  Visited conditions:     46
  Total conditions:       62
  Condition coverage:     0.742

CPAchecker general statistics
-----------------------------
Number of program locations:     1143
Number of CFA edges:             1169
Number of relevant variables:    235
Number of functions:             19
Number of loops:                 5
Size of reached set:             198
  Number of reached locations:   162 (14%)
    Avg states per location:     1
    Max states per location:     4 (at node N280)
  Number of reached functions:   9 (47%)
  Number of partitions:          198
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.711s
  Time for loading CPAs:          0.607s
  Time for loading parser:        0.450s
  Time for CFA construction:      1.499s
    Time for parsing file(s):     0.471s
    Time for AST to CFA:          0.448s
    Time for CFA sanity check:    0.118s
    Time for post-processing:     0.347s
      Time for var class.:        0.145s
Time for Analysis:                2.787s
CPU time for analysis:            2.780s
Time for analyzing result:        0.000s
Total time for CPAchecker:        5.501s
Total CPU time for CPAchecker:    5.490s
Time for statistics:              0.091s

Time for Garbage Collector:       0.119s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    57 MiB) max;     35MB (    34 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     28MB (    26 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    28 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8044MB (  7671 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
