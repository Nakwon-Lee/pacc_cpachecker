scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--hwmon--asus_atk0110.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xcbmwd3c/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_resources_are_enforced to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_read_from_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object_typed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_get_handle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_x32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            33200 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  30263 (91%)
  Because of loop head:            2883 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         54 (0%)
  Times precision was empty:       6268 (19%)
  Times precision was {false}:     1267 (4%)
  Times result was cached:         25303 (76%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      362 (1%)
  Times result was 'false':        259 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         98662
  BDD entailment checks:           8144
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       378
Number of predicates discovered:          2
Number of abstraction locations:          136
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         26932
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 16.53
Number of irrelevant predicates:          10310 (38%)
Number of preds handled by boolean abs:   362 (1%)
  Total number of models for allsat:      365
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  7.553s
  Time for path formula creation:        7.279s
Time for strengthen operator:            0.683s
Time for prec operator:                  7.241s
  Time for abstraction:                  6.638s (Max:     0.202s, Count: 33200)
    Boolean abstraction:                 0.444s
    Solving time:                        1.590s (Max:     0.052s)
    Model enumeration time:              0.035s
    Time for BDD construction:           0.015s (Max:     0.001s)
Time for merge operator:                 0.864s
Time for coverage check:                 0.047s
  Time for BDD entailment checks:        0.030s
Total time for SMT solver (w/o itp):     1.625s

Number of path formula cache hits:   752128 (84%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.920s

Total number of created targets for pointer analysis: 161
   Number of created targets for uf: *(void)* is 2
   Number of created targets for uf: *_Bool is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         721 (count: 22925, min: 0, max: 80, avg: 0.03)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.075s
  Time for transition matches:                         0.588s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       833285 (count: 833285, min: 1, max: 1, avg: 1.00) [1 x 833285]

CPA algorithm statistics
------------------------
Number of iterations:            318899
Max size of waitlist:            80
Average size of waitlist:        41
Number of computed successors:   373781
Max successors for one state:    2
Number of times merged:          45259
Number of times stopped:         51626
Number of times breaked:         54

Total time for CPA algorithm:        26.777s (Max:     1.628s)
  Time for choose from waitlist:      0.156s
  Time for precision adjustment:      9.655s
  Time for transfer relation:        13.957s
  Time for merge operator:            1.277s
  Time for stop operator:             0.384s
  Time for adding to reached set:     0.464s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   54
Avg. length of target path (in blocks):                1680 (count: 54, min: 8, max: 59, avg: 31.11)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.901s
  Counterexample analysis:                             2.102s (Max:     0.126s, Calls: 54)
    Refinement sat check:                              1.633s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.048s
  Precision update:                                    0.041s
  ARG update:                                          0.649s

Length of refined path (in blocks):                    1626 (count: 54, min: 7, max: 58, avg: 30.11)
Number of affected states:                             1572 (count: 54, min: 6, max: 57, avg: 29.11)
Length (states) of path with itp 'true':                  0 (count: 54, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1572 (count: 54, min: 6, max: 57, avg: 29.11)
Length (states) of path with itp 'false':                54 (count: 54, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 54, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1518 (count: 54, min: 5, max: 56, avg: 28.11)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                54
Number of successful refinements:     54
Number of failed refinements:         0
Max. size of reached set before ref.: 8564
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 5872.72
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      29.969s
Time for refinements:                 3.184s
Average time for refinement:          0.058s
Max time for refinement:              0.151s

Code Coverage
-----------------------------
  Function coverage:      0.679
  Visited lines:          3982
  Total lines:            4407
  Line coverage:          0.904
  Visited conditions:     318
  Total conditions:       360
  Condition coverage:     0.883

CPAchecker general statistics
-----------------------------
Number of program locations:     4826
Number of CFA edges:             5053
Number of relevant variables:    1274
Number of functions:             56
Number of loops:                 11
Size of reached set:             4932
  Number of reached locations:   955 (20%)
    Avg states per location:     5
    Max states per location:     64 (at node N190)
  Number of reached functions:   38 (68%)
  Number of partitions:          4932
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.950s
  Time for loading CPAs:          0.835s
  Time for loading parser:        0.434s
  Time for CFA construction:      2.573s
    Time for parsing file(s):     0.653s
    Time for AST to CFA:          0.807s
    Time for CFA sanity check:    0.305s
    Time for post-processing:     0.706s
      Time for var class.:        0.372s
Time for Analysis:               29.969s
CPU time for analysis:           29.970s
Time for analyzing result:        0.007s
Total time for CPAchecker:       33.923s
Total CPU time for CPAchecker:   33.920s
Time for statistics:              0.128s

Time for Garbage Collector:       2.358s (in 142 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                143MB (   136 MiB) max;     78MB (    74 MiB) avg;    154MB (   147 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     35MB (    34 MiB) avg;     38MB (    37 MiB) peak
Allocated heap memory:           198MB (   189 MiB) max;    138MB (   132 MiB) avg
Allocated non-heap memory:        40MB (    39 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8076MB (  7702 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
