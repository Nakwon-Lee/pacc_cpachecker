scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--hwmon--asus_atk0110.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_wf67as0b/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_resources_are_enforced to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_read_from_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object_typed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_get_handle to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_x32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            23344 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  20030 (86%)
  Because of loop head:            3267 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         47 (0%)
  Times precision was empty:       6997 (30%)
  Times precision was {false}:     1393 (6%)
  Times result was cached:         14688 (63%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      266 (1%)
  Times result was 'false':        89 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         24923
  BDD entailment checks:           8361
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       378
Number of predicates discovered:          2
Number of abstraction locations:          108
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         16347
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 9.85
Number of irrelevant predicates:          9556 (58%)
Number of preds handled by boolean abs:   266 (2%)
  Total number of models for allsat:      268
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  9.775s
  Time for path formula creation:        9.587s
Time for strengthen operator:            0.459s
Time for prec operator:                  6.897s
  Time for abstraction:                  6.466s (Max:     0.530s, Count: 23344)
    Boolean abstraction:                 0.377s
    Solving time:                        2.299s (Max:     0.067s)
    Model enumeration time:              0.026s
    Time for BDD construction:           0.030s (Max:     0.009s)
Time for merge operator:                 0.600s
Time for coverage check:                 0.050s
  Time for BDD entailment checks:        0.042s
Total time for SMT solver (w/o itp):     2.325s

Number of path formula cache hits:   257317 (53%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.756s

Total number of created targets for pointer analysis: 904
   Number of created targets for uf: *(void)* is 48
   Number of created targets for uf: *_Bool is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         535 (count: 23924, min: 0, max: 52, avg: 0.02)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.695s
  Time for transition matches:                         0.340s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       465751 (count: 465751, min: 1, max: 1, avg: 1.00) [1 x 465751]

CPA algorithm statistics
------------------------
Number of iterations:            109949
Max size of waitlist:            44
Average size of waitlist:        19
Number of computed successors:   125330
Max successors for one state:    2
Number of times merged:          8281
Number of times stopped:         14708
Number of times breaked:         47

Total time for CPA algorithm:        24.119s (Max:     1.548s)
  Time for choose from waitlist:      0.088s
  Time for precision adjustment:      7.802s
  Time for transfer relation:        14.175s
  Time for merge operator:            0.804s
  Time for stop operator:             0.285s
  Time for adding to reached set:     0.273s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   47
Avg. length of target path (in blocks):                1209 (count: 47, min: 8, max: 40, avg: 25.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.637s
  Counterexample analysis:                             1.197s (Max:     0.068s, Calls: 47)
    Refinement sat check:                              0.960s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.032s
  Precision update:                                    0.022s
  ARG update:                                          0.359s

Length of refined path (in blocks):                    1162 (count: 47, min: 7, max: 39, avg: 24.72)
Number of affected states:                             1115 (count: 47, min: 6, max: 38, avg: 23.72)
Length (states) of path with itp 'true':                  0 (count: 47, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      1115 (count: 47, min: 6, max: 38, avg: 23.72)
Length (states) of path with itp 'false':                47 (count: 47, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 47, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1068 (count: 47, min: 5, max: 37, avg: 22.72)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                47
Number of successful refinements:     47
Number of failed refinements:         0
Max. size of reached set before ref.: 3986
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 2339.30
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:      25.919s
Time for refinements:                 1.798s
Average time for refinement:          0.038s
Max time for refinement:              0.100s

Code Coverage
-----------------------------
  Function coverage:      0.536
  Visited lines:          2702
  Total lines:            4407
  Line coverage:          0.613
  Visited conditions:     196
  Total conditions:       360
  Condition coverage:     0.544

CPAchecker general statistics
-----------------------------
Number of program locations:     4826
Number of CFA edges:             5053
Number of relevant variables:    1274
Number of functions:             56
Number of loops:                 11
Size of reached set:             727
  Number of reached locations:   569 (12%)
    Avg states per location:     1
    Max states per location:     7 (at node N25)
  Number of reached functions:   30 (54%)
  Number of partitions:          727
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          3.944s
  Time for loading CPAs:          0.712s
  Time for loading parser:        0.502s
  Time for CFA construction:      2.631s
    Time for parsing file(s):     0.702s
    Time for AST to CFA:          0.794s
    Time for CFA sanity check:    0.276s
    Time for post-processing:     0.729s
      Time for var class.:        0.384s
Time for Analysis:               25.919s
CPU time for analysis:           25.910s
Total time for CPAchecker:       29.865s
Total CPU time for CPAchecker:   29.860s
Time for statistics:              0.060s

Time for Garbage Collector:       2.291s (in 80 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                189MB (   181 MiB) max;     90MB (    86 MiB) avg;    199MB (   189 MiB) peak
Used non-heap memory:             45MB (    43 MiB) max;     39MB (    37 MiB) avg;     45MB (    43 MiB) peak
Allocated heap memory:           332MB (   317 MiB) max;    151MB (   144 MiB) avg
Allocated non-heap memory:        46MB (    44 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8077MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
