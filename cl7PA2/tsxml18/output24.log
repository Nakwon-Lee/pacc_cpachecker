scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--devices--docprobe.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4j2u5jar/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 2437: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 2472: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 2838: Function pointer *initroutine with type void (*)(struct mtd_info *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_module to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2838: Ignoring call via function pointer DoC_Probe::initroutine for which no suitable target was found in line: (*initroutine)(mtd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2838: Ignoring function call through function pointer *initroutine: (*initroutine)(mtd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function symbol_put_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1650 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1581 (96%)
  Because of loop head:            57 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (1%)
  Times precision was empty:       336 (20%)
  Times precision was {false}:     124 (8%)
  Times result was cached:         1129 (68%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      61 (4%)
  Times result was 'false':        7 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         799
  BDD entailment checks:           277
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          2
Number of abstraction locations:          44
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         1314
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 7.10
Number of irrelevant predicates:          428 (33%)
Number of preds handled by boolean abs:   61 (5%)
  Total number of models for allsat:      61
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.734s
  Time for path formula creation:        0.699s
Time for strengthen operator:            0.045s
Time for prec operator:                  0.748s
  Time for abstraction:                  0.669s (Max:     0.023s, Count: 1650)
    Boolean abstraction:                 0.100s
    Solving time:                        0.093s (Max:     0.019s)
    Model enumeration time:              0.011s
    Time for BDD construction:           0.035s (Max:     0.013s)
Time for merge operator:                 0.047s
Time for coverage check:                 0.048s
  Time for BDD entailment checks:        0.038s
Total time for SMT solver (w/o itp):     0.104s

Number of path formula cache hits:   13243 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.605s

Total number of created targets for pointer analysis: 42
   Number of created targets for uf: *unsigned_long_int is 43


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         119 (count: 1604, min: 0, max: 58, avg: 0.07)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.125s
Automaton transfers with branching:                0
Automaton transfer successors:                        15772 (count: 15772, min: 1, max: 1, avg: 1.00) [1 x 15772]

CPA algorithm statistics
------------------------
Number of iterations:            5918
Max size of waitlist:            10
Average size of waitlist:        5
Number of computed successors:   6450
Max successors for one state:    2
Number of times merged:          261
Number of times stopped:         484
Number of times breaked:         12

Total time for CPA algorithm:         2.744s (Max:     0.666s)
  Time for choose from waitlist:      0.025s
  Time for precision adjustment:      0.950s
  Time for transfer relation:         1.422s
  Time for merge operator:            0.076s
  Time for stop operator:             0.075s
  Time for adding to reached set:     0.062s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 339 (count: 12, min: 12, max: 43, avg: 28.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.228s
  Counterexample analysis:                             0.118s (Max:     0.020s, Calls: 12)
    Refinement sat check:                              0.089s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.028s
  ARG update:                                          0.052s

Length of refined path (in blocks):                     327 (count: 12, min: 11, max: 42, avg: 27.25)
Number of affected states:                              315 (count: 12, min: 10, max: 41, avg: 26.25)
Length (states) of path with itp 'true':                  0 (count: 12, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       315 (count: 12, min: 10, max: 41, avg: 26.25)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             303 (count: 12, min: 9, max: 40, avg: 25.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 979
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 440.42
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       3.008s
Time for refinements:                 0.261s
Average time for refinement:          0.021s
Max time for refinement:              0.057s

Code Coverage
-----------------------------
  Function coverage:      0.563
  Visited lines:          996
  Total lines:            1020
  Line coverage:          0.976
  Visited conditions:     76
  Total conditions:       84
  Condition coverage:     0.905

CPAchecker general statistics
-----------------------------
Number of program locations:     1131
Number of CFA edges:             1196
Number of relevant variables:    140
Number of functions:             16
Number of loops:                 3
Size of reached set:             711
  Number of reached locations:   268 (24%)
    Avg states per location:     2
    Max states per location:     36 (at node N0)
  Number of reached functions:   9 (56%)
  Number of partitions:          711
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.853s
  Time for loading CPAs:          0.644s
  Time for loading parser:        0.488s
  Time for CFA construction:      1.592s
    Time for parsing file(s):     0.534s
    Time for AST to CFA:          0.471s
    Time for CFA sanity check:    0.111s
    Time for post-processing:     0.357s
      Time for var class.:        0.151s
Time for Analysis:                3.008s
CPU time for analysis:            3.000s
Time for analyzing result:        0.001s
Total time for CPAchecker:        5.863s
Total CPU time for CPAchecker:    5.860s
Time for statistics:              0.067s

Time for Garbage Collector:       0.115s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 60MB (    57 MiB) max;     35MB (    33 MiB) avg;     66MB (    62 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     27MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    28 MiB) avg
Total process virtual memory:   8017MB (  7646 MiB) max;   7985MB (  7615 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
