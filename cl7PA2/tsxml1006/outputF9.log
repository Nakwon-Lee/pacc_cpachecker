scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_false-termination.4-32_1-drivers--input--keyboard--gpio_keys_polled.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9e62nh64/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 2232: Function pointer *__cil_tmp11 with type void (*)(struct device *dev) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 2191: Function pointer *__cil_tmp11 with type int (*)(struct device *dev) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_allocate_polled_device to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_direction_input to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_capability to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_polled_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_get_value_cansleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_get_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            439 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  326 (74%)
  Because of loop head:            102 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         11 (3%)
  Times precision was empty:       108 (25%)
  Times precision was {false}:     27 (6%)
  Times result was cached:         269 (61%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      35 (8%)
  Times result was 'false':        21 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         332
  BDD entailment checks:           150
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       131
Number of predicates discovered:          2
Number of abstraction locations:          23
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         331
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 5.34
Number of irrelevant predicates:          91 (27%)
Number of preds handled by boolean abs:   35 (11%)
  Total number of models for allsat:      35
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.379s
  Time for path formula creation:        0.375s
Time for strengthen operator:            0.027s
Time for prec operator:                  0.412s
  Time for abstraction:                  0.385s (Max:     0.014s, Count: 439)
    Boolean abstraction:                 0.080s
    Solving time:                        0.055s (Max:     0.013s)
    Model enumeration time:              0.015s
    Time for BDD construction:           0.014s (Max:     0.007s)
Time for merge operator:                 0.008s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.010s
Total time for SMT solver (w/o itp):     0.070s

Number of path formula cache hits:   5099 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.362s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          49 (count: 608, min: 0, max: 49, avg: 0.08)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.041s
Automaton transfers with branching:                0
Automaton transfer successors:                         6163 (count: 6163, min: 1, max: 1, avg: 1.00) [1 x 6163]

CPA algorithm statistics
------------------------
Number of iterations:            2063
Max size of waitlist:            6
Average size of waitlist:        2
Number of computed successors:   2309
Max successors for one state:    2
Number of times merged:          91
Number of times stopped:         199
Number of times breaked:         11

Total time for CPA algorithm:         1.264s (Max:     0.200s)
  Time for choose from waitlist:      0.005s
  Time for precision adjustment:      0.490s
  Time for transfer relation:         0.658s
  Time for merge operator:            0.033s
  Time for stop operator:             0.035s
  Time for adding to reached set:     0.011s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                 148 (count: 11, min: 4, max: 19, avg: 13.45)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.153s
  Counterexample analysis:                             0.106s (Max:     0.016s, Calls: 11)
    Refinement sat check:                              0.059s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.017s
  Precision update:                                    0.014s
  ARG update:                                          0.015s

Length of refined path (in blocks):                     137 (count: 11, min: 3, max: 18, avg: 12.45)
Number of affected states:                              126 (count: 11, min: 2, max: 17, avg: 11.45)
Length (states) of path with itp 'true':                  0 (count: 11, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       126 (count: 11, min: 2, max: 17, avg: 11.45)
Length (states) of path with itp 'false':                11 (count: 11, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 11, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             115 (count: 11, min: 1, max: 16, avg: 10.45)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 294
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 173.27
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.429s
Time for refinements:                 0.165s
Average time for refinement:          0.015s
Max time for refinement:              0.032s

Code Coverage
-----------------------------
  Function coverage:      0.370
  Visited lines:          803
  Total lines:            1051
  Line coverage:          0.764
  Visited conditions:     48
  Total conditions:       78
  Condition coverage:     0.615

CPAchecker general statistics
-----------------------------
Number of program locations:     1223
Number of CFA edges:             1257
Number of relevant variables:    239
Number of functions:             27
Number of loops:                 6
Size of reached set:             217
  Number of reached locations:   177 (14%)
    Avg states per location:     1
    Max states per location:     4 (at node N293)
  Number of reached functions:   10 (37%)
  Number of partitions:          217
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.729s
  Time for loading CPAs:          0.680s
  Time for loading parser:        0.448s
  Time for CFA construction:      1.506s
    Time for parsing file(s):     0.461s
    Time for AST to CFA:          0.476s
    Time for CFA sanity check:    0.079s
    Time for post-processing:     0.341s
      Time for var class.:        0.165s
Time for Analysis:                1.429s
CPU time for analysis:            1.440s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.161s
Total CPU time for CPAchecker:    4.160s
Time for statistics:              0.049s

Time for Garbage Collector:       0.102s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     32MB (    31 MiB) avg;     63MB (    61 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    24 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     27MB (    26 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8030MB (  7658 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
