scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3_true-termination.4-32_1-drivers--acpi--apei--einj.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ivygok6v/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_get_table to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_get_debugfs_dir to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_os_unmap_memory to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_exec_ctx_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_exec_post_unmap_gars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_resources_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_resources_fini to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_exec_collect_resources to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_resources_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function apei_exec_pre_map_gars to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_os_map_memory to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_x64 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_x32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            314 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  268 (85%)
  Because of loop head:            39 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7 (2%)
  Times precision was empty:       111 (35%)
  Times precision was {false}:     23 (7%)
  Times result was cached:         150 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      30 (10%)
  Times result was 'false':        12 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         614
  BDD entailment checks:           76
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       67
Number of predicates discovered:          2
Number of abstraction locations:          24
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         203
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.83
Number of irrelevant predicates:          61 (30%)
Number of preds handled by boolean abs:   30 (15%)
  Total number of models for allsat:      30
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.490s
  Time for path formula creation:        0.487s
Time for strengthen operator:            0.041s
Time for prec operator:                  0.397s
  Time for abstraction:                  0.341s (Max:     0.034s, Count: 314)
    Boolean abstraction:                 0.050s
    Solving time:                        0.079s (Max:     0.016s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.068s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     0.082s

Number of path formula cache hits:   4411 (70%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.444s

Total number of created targets for pointer analysis: 3
   Number of created targets for uf: *unsigned_long_long_int is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          37 (count: 487, min: 0, max: 37, avg: 0.08)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.099s
Automaton transfers with branching:                0
Automaton transfer successors:                         5882 (count: 5882, min: 1, max: 1, avg: 1.00) [1 x 5882]

CPA algorithm statistics
------------------------
Number of iterations:            2109
Max size of waitlist:            10
Average size of waitlist:        4
Number of computed successors:   2462
Max successors for one state:    2
Number of times merged:          269
Number of times stopped:         325
Number of times breaked:         7

Total time for CPA algorithm:         1.548s (Max:     0.547s)
  Time for choose from waitlist:      0.005s
  Time for precision adjustment:      0.482s
  Time for transfer relation:         0.845s
  Time for merge operator:            0.098s
  Time for stop operator:             0.026s
  Time for adding to reached set:     0.040s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                  87 (count: 7, min: 5, max: 20, avg: 12.43)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.135s
  Counterexample analysis:                             0.092s (Max:     0.020s, Calls: 7)
    Refinement sat check:                              0.075s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.005s
  ARG update:                                          0.025s

Length of refined path (in blocks):                      80 (count: 7, min: 4, max: 19, avg: 11.43)
Number of affected states:                               73 (count: 7, min: 3, max: 18, avg: 10.43)
Length (states) of path with itp 'true':                  0 (count: 7, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        73 (count: 7, min: 3, max: 18, avg: 10.43)
Length (states) of path with itp 'false':                 7 (count: 7, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 7, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              66 (count: 7, min: 2, max: 17, avg: 9.43)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 427
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 261.14
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.710s
Time for refinements:                 0.161s
Average time for refinement:          0.023s
Max time for refinement:              0.039s

Code Coverage
-----------------------------
  Function coverage:      0.275
  Visited lines:          1087
  Total lines:            1844
  Line coverage:          0.589
  Visited conditions:     106
  Total conditions:       270
  Condition coverage:     0.393

CPAchecker general statistics
-----------------------------
Number of program locations:     2192
Number of CFA edges:             2341
Number of relevant variables:    423
Number of functions:             40
Number of loops:                 4
Size of reached set:             319
  Number of reached locations:   273 (12%)
    Avg states per location:     1
    Max states per location:     4 (at node N1396)
  Number of reached functions:   11 (28%)
  Number of partitions:          319
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.122s
  Time for loading CPAs:          0.650s
  Time for loading parser:        0.428s
  Time for CFA construction:      1.918s
    Time for parsing file(s):     0.540s
    Time for AST to CFA:          0.665s
    Time for CFA sanity check:    0.117s
    Time for post-processing:     0.483s
      Time for var class.:        0.248s
Time for Analysis:                1.710s
CPU time for analysis:            1.710s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.839s
Total CPU time for CPAchecker:    4.830s
Time for statistics:              0.068s

Time for Garbage Collector:       0.128s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 59MB (    56 MiB) max;     34MB (    32 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    34 MiB) max;     28MB (    27 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   7982MB (  7612 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
