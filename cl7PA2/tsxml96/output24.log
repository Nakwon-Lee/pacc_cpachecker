scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--tty--serial--xilinx_uartps.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_c69f53iv/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_write_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_update_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_add_one_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_suspend_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_resume_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_insert_char to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            6279 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  5076 (81%)
  Because of loop head:            1173 (19%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         30 (0%)
  Times precision was empty:       2371 (38%)
  Times precision was {false}:     161 (3%)
  Times result was cached:         3663 (58%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      84 (1%)
  Times result was 'false':        51 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         8538
  BDD entailment checks:           2134
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       141
Number of predicates discovered:          2
Number of abstraction locations:          77
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         3908
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 15.95
Number of irrelevant predicates:          1860 (48%)
Number of preds handled by boolean abs:   84 (2%)
  Total number of models for allsat:      84
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.531s
  Time for path formula creation:        3.418s
Time for strengthen operator:            0.195s
Time for prec operator:                  1.985s
  Time for abstraction:                  1.778s (Max:     0.024s, Count: 6279)
    Boolean abstraction:                 0.183s
    Solving time:                        0.346s (Max:     0.015s)
    Model enumeration time:              0.006s
    Time for BDD construction:           0.018s (Max:     0.009s)
Time for merge operator:                 0.249s
Time for coverage check:                 0.019s
  Time for BDD entailment checks:        0.016s
Total time for SMT solver (w/o itp):     0.352s

Number of path formula cache hits:   79963 (56%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.153s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         169 (count: 5819, min: 0, max: 22, avg: 0.03)
Time for BDD node cleanup:                             0.019s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.406s
Automaton transfers with branching:                0
Automaton transfer successors:                       136318 (count: 136318, min: 1, max: 1, avg: 1.00) [1 x 136318]

CPA algorithm statistics
------------------------
Number of iterations:            37085
Max size of waitlist:            46
Average size of waitlist:        22
Number of computed successors:   42450
Max successors for one state:    2
Number of times merged:          3202
Number of times stopped:         4838
Number of times breaked:         30

Total time for CPA algorithm:         9.364s (Max:     0.804s)
  Time for choose from waitlist:      0.081s
  Time for precision adjustment:      2.555s
  Time for transfer relation:         5.579s
  Time for merge operator:            0.390s
  Time for stop operator:             0.100s
  Time for adding to reached set:     0.193s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   30
Avg. length of target path (in blocks):                 369 (count: 30, min: 5, max: 20, avg: 12.30)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.423s
  Counterexample analysis:                             0.226s (Max:     0.025s, Calls: 30)
    Refinement sat check:                              0.160s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.022s
  Precision update:                                    0.018s
  ARG update:                                          0.147s

Length of refined path (in blocks):                     339 (count: 30, min: 4, max: 19, avg: 11.30)
Number of affected states:                              309 (count: 30, min: 3, max: 18, avg: 10.30)
Length (states) of path with itp 'true':                  0 (count: 30, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       309 (count: 30, min: 3, max: 18, avg: 10.30)
Length (states) of path with itp 'false':                30 (count: 30, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 30, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             279 (count: 30, min: 2, max: 17, avg: 9.30)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                30
Number of successful refinements:     30
Number of failed refinements:         0
Max. size of reached set before ref.: 1399
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 1230.83
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       9.872s
Time for refinements:                 0.505s
Average time for refinement:          0.016s
Max time for refinement:              0.043s

Code Coverage
-----------------------------
  Function coverage:      0.750
  Visited lines:          2541
  Total lines:            2620
  Line coverage:          0.970
  Visited conditions:     190
  Total conditions:       212
  Condition coverage:     0.896

CPAchecker general statistics
-----------------------------
Number of program locations:     2932
Number of CFA edges:             3041
Number of relevant variables:    516
Number of functions:             44
Number of loops:                 7
Size of reached set:             727
  Number of reached locations:   598 (20%)
    Avg states per location:     1
    Max states per location:     21 (at node N2224)
  Number of reached functions:   33 (75%)
  Number of partitions:          727
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.379s
  Time for loading CPAs:          0.684s
  Time for loading parser:        0.432s
  Time for CFA construction:      2.148s
    Time for parsing file(s):     0.626s
    Time for AST to CFA:          0.701s
    Time for CFA sanity check:    0.150s
    Time for post-processing:     0.538s
      Time for var class.:        0.281s
Time for Analysis:                9.872s
CPU time for analysis:            9.870s
Time for analyzing result:        0.001s
Total time for CPAchecker:       13.254s
Total CPU time for CPAchecker:   13.240s
Time for statistics:              0.083s

Time for Garbage Collector:       0.447s (in 31 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 84MB (    80 MiB) max;     49MB (    46 MiB) avg;     87MB (    83 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     32MB (    31 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     34MB (    32 MiB) avg
Total process virtual memory:   8017MB (  7646 MiB) max;   8003MB (  7632 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
