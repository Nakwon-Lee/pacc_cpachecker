scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--usb--host--oxu210hp-hcd.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4teztuse/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 4100-4101: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4104-4105: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4112-4113: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8744: Dead code detected: *((u8 *)__gu_p) = (unsigned char )status; (CFACreationUtils.addEdgeToCFA, INFO)

line 8747: Dead code detected: put_unaligned_le16((int )((unsigned short )status), __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

line 8753: Dead code detected: put_unaligned_le64((unsigned long long )status, __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  *((u8 *)__gu_p) = (unsigned char )status;
  goto ldv_35329;
  case 2UL:
  put_unaligned_le16((int )((unsigned short )status), __gu_p);
  goto ldv_35329;
  case 4UL:
  put_unaligned_le32(status, __gu_p);
  goto ldv_35329;
  case 8UL:
  put_unaligned_le64((unsigned long long )status, __gu_p);
  goto ldv_35329;
  default:
  __bad_unaligned_access_size();
  goto ldv_35329;
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_ioremap_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            32391 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  30581 (94%)
  Because of loop head:            1806 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (0%)
  Times precision was empty:       32299 (100%)
  Times precision was {false}:     33 (0%)
  Times result was cached:         36 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      23 (0%)
  Times result was 'false':        23 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         28631
  BDD entailment checks:           3497
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          4
Number of abstraction locations:          7
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         137
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 2.45
Number of irrelevant predicates:          87 (64%)
Number of preds handled by boolean abs:   32 (23%)
  Total number of models for allsat:      37
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.61

Time for post operator:                  7.724s
  Time for path formula creation:        7.456s
Time for strengthen operator:            0.570s
Time for prec operator:                  1.907s
  Time for abstraction:                  0.814s (Max:     0.029s, Count: 32391)
    Boolean abstraction:                 0.117s
    Solving time:                        0.086s (Max:     0.013s)
    Model enumeration time:              0.023s
    Time for BDD construction:           0.013s (Max:     0.009s)
Time for merge operator:                 0.429s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):     0.109s

Number of path formula cache hits:   210576 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.639s

Total number of created targets for pointer analysis: 432
   Number of created targets for uf: *(void)* is 13
   Number of created targets for uf: *unsigned_short_int is 37
   Number of created targets for uf: *(struct_ehci_qh)* is 13
   Number of created targets for uf: *unsigned_char is 9
   Number of created targets for uf: *(struct_list_head)* is 25
   Number of created targets for uf: *(unsigned_int)* is 13
   Number of created targets for uf: *char is 33
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               223
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          68 (count: 36130, min: 0, max: 17, avg: 0.00)
Time for BDD node cleanup:                             0.023s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.885s
  Time for transition matches:                         0.420s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       206303 (count: 206303, min: 1, max: 1, avg: 1.00) [1 x 206303]

CPA algorithm statistics
------------------------
Number of iterations:            126459
Max size of waitlist:            1015
Average size of waitlist:        469
Number of computed successors:   146071
Max successors for one state:    2
Number of times merged:          12567
Number of times stopped:         16030
Number of times breaked:         4

Total time for CPA algorithm:        22.244s (Max:     7.514s)
  Time for choose from waitlist:      0.169s
  Time for precision adjustment:      4.476s
  Time for transfer relation:        13.660s
  Time for merge operator:            1.145s
  Time for stop operator:             0.614s
  Time for adding to reached set:     0.538s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                 274 (count: 4, min: 67, max: 70, avg: 68.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.922s
  Counterexample analysis:                             0.148s (Max:     0.063s, Calls: 4)
    Refinement sat check:                              0.069s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.003s
  ARG update:                                          0.737s

Length of refined path (in blocks):                     163 (count: 4, min: 40, max: 43, avg: 40.75)
Number of affected states:                                9 (count: 4, min: 1, max: 4, avg: 2.25)
Length (states) of path with itp 'true':                150 (count: 4, min: 36, max: 38, avg: 37.50)
Length (states) of path with itp non-trivial itp:         9 (count: 4, min: 1, max: 4, avg: 2.25)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               5 (count: 4, min: 0, max: 3, avg: 1.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 37069
Max. size of reached set after ref.:  99
Avg. size of reached set before ref.: 32409.00
Avg. size of reached set after ref.:  97.75

Total time for CEGAR algorithm:      23.441s
Time for refinements:                 1.194s
Average time for refinement:          0.298s
Max time for refinement:              0.379s

Code Coverage
-----------------------------
  Function coverage:      0.132
  Visited lines:          1163
  Total lines:            4611
  Line coverage:          0.252
  Visited conditions:     266
  Total conditions:       1454
  Condition coverage:     0.183

CPAchecker general statistics
-----------------------------
Number of program locations:     6501
Number of CFA edges:             7752
Number of relevant variables:    977
Number of functions:             190
Number of loops:                 55
Size of reached set:             773
  Number of reached locations:   448 (7%)
    Avg states per location:     1
    Max states per location:     48 (at node N444)
  Number of reached functions:   25 (13%)
  Number of partitions:          772
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N5360 (before line 9743), Function main called from node N5297, stack depth 1 [3db432c2], stack [main]])
  Number of target states:       0
  Size of final wait list        108

Time for analysis setup:          6.829s
  Time for loading CPAs:          1.096s
  Time for loading parser:        0.874s
  Time for CFA construction:      4.703s
    Time for parsing file(s):     1.079s
    Time for AST to CFA:          1.709s
    Time for CFA sanity check:    0.382s
    Time for post-processing:     1.299s
      Time for var class.:        0.670s
Time for Analysis:               23.441s
CPU time for analysis:           23.450s
Total time for CPAchecker:       30.274s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.123s

Time for Garbage Collector:       1.397s (in 56 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                122MB (   117 MiB) max;     67MB (    64 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8069MB (  7695 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
