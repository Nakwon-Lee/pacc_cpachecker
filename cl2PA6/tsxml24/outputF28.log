scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--usb--host--oxu210hp-hcd.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u8bhe30t/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 4100-4101: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4104-4105: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4112-4113: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8744: Dead code detected: *((u8 *)__gu_p) = (unsigned char )status; (CFACreationUtils.addEdgeToCFA, INFO)

line 8747: Dead code detected: put_unaligned_le16((int )((unsigned short )status), __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

line 8753: Dead code detected: put_unaligned_le64((unsigned long long )status, __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  *((u8 *)__gu_p) = (unsigned char )status;
  goto ldv_35329;
  case 2UL:
  put_unaligned_le16((int )((unsigned short )status), __gu_p);
  goto ldv_35329;
  case 4UL:
  put_unaligned_le32(status, __gu_p);
  goto ldv_35329;
  case 8UL:
  put_unaligned_le64((unsigned long long )status, __gu_p);
  goto ldv_35329;
  default:
  __bad_unaligned_access_size();
  goto ldv_35329;
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_ioremap_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_remove_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_type to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_uninterruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_resume_root_hub to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_poll_rh_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hc_died to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_giveback_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_create_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_add_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3454717 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3135243 (91%)
  Because of loop head:            319414 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         60 (0%)
  Times precision was empty:       3241943 (94%)
  Times precision was {false}:     6143 (0%)
  Times result was cached:         204465 (6%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2166 (0%)
  Times result was 'false':        8436 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         2920205
  BDD entailment checks:           540283
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          8
Number of abstraction locations:          103
Max number of predicates per location:    7
Avg number of predicates per location:    1
Total predicates per abstraction:         321002
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 38.63
Number of irrelevant predicates:          288787 (90%)
Number of preds handled by boolean abs:   4007 (1%)
  Total number of models for allsat:      3317
  Max number of models for allsat:        27
  Avg number of models for allsat:        1.53

Time for post operator:                271.833s
  Time for path formula creation:      262.714s
Time for strengthen operator:           23.427s
Time for prec operator:                 84.431s
  Time for abstraction:                 37.241s (Max:     0.504s, Count: 3454717)
    Boolean abstraction:                 2.410s
    Solving time:                        3.184s (Max:     0.017s)
    Model enumeration time:              0.662s
    Time for BDD construction:           0.115s (Max:     0.012s)
Time for merge operator:                19.470s
Time for coverage check:                 0.938s
  Time for BDD entailment checks:        0.552s
Total time for SMT solver (w/o itp):     3.846s

Number of path formula cache hits:   19850916 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   161.277s

Total number of created targets for pointer analysis: 205954
   Number of created targets for uf: *(void)* is 1351
   Number of created targets for uf: *unsigned_short_int is 1237
   Number of created targets for uf: *signed_int is 2089
   Number of created targets for uf: *(struct_ehci_qh)* is 211
   Number of created targets for uf: *unsigned_char is 2061
   Number of created targets for uf: *(struct_list_head)* is 1681
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_urb)*],_VarArgs:_false)* is 233
   Number of created targets for uf: *(unsigned_int)* is 211
   Number of created targets for uf: *unsigned_long_long_int is 5
   Number of created targets for uf: *unsigned_int is 2501
   Number of created targets for uf: *char is 1329
   Number of created targets for uf: *unsigned_long_int is 1351


Number of BDD nodes:                               1829
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4389 (count: 3827912, min: 0, max: 453, avg: 0.00)
Time for BDD node cleanup:                             0.588s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 32.276s
  Time for transition matches:                        13.643s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     19184323 (count: 19184323, min: 1, max: 1, avg: 1.00) [1 x 19184323]

CPA algorithm statistics
------------------------
Number of iterations:            12654635
Max size of waitlist:            5912
Average size of waitlist:        2272
Number of computed successors:   14496414
Max successors for one state:    2
Number of times merged:          1189961
Number of times stopped:         1709016
Number of times breaked:         60

Total time for CPA algorithm:       848.081s (Max:    49.213s)
  Time for choose from waitlist:      4.825s
  Time for precision adjustment:    212.274s
  Time for transfer relation:       516.269s
  Time for merge operator:           34.087s
  Time for stop operator:            18.355s
  Time for adding to reached set:    23.580s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   60
Avg. length of target path (in blocks):                5684 (count: 60, min: 67, max: 135, avg: 94.73)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  34.871s
  Counterexample analysis:                             1.442s (Max:     0.056s, Calls: 60)
    Refinement sat check:                              0.919s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.035s
  Precision update:                                    0.041s
  ARG update:                                         33.274s

Length of refined path (in blocks):                    3665 (count: 60, min: 40, max: 101, avg: 61.08)
Number of affected states:                             1393 (count: 60, min: 0, max: 100, avg: 23.22)
Length (states) of path with itp 'true':               2212 (count: 60, min: 0, max: 57, avg: 36.87)
Length (states) of path with itp non-trivial itp:      1393 (count: 60, min: 0, max: 100, avg: 23.22)
Length (states) of path with itp 'false':                60 (count: 60, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 60, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1344 (count: 60, min: 0, max: 99, avg: 22.40)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                60
Number of successful refinements:     60
Number of failed refinements:         0
Max. size of reached set before ref.: 562543
Max. size of reached set after ref.:  286275
Avg. size of reached set before ref.: 246201.83
Avg. size of reached set after ref.:  33669.15

Total time for CEGAR algorithm:     893.385s
Time for refinements:                43.569s
Average time for refinement:          0.726s
Max time for refinement:              1.860s

Code Coverage
-----------------------------
  Function coverage:      0.405
  Visited lines:          1898
  Total lines:            4611
  Line coverage:          0.412
  Visited conditions:     524
  Total conditions:       1454
  Condition coverage:     0.360

CPAchecker general statistics
-----------------------------
Number of program locations:     6501
Number of CFA edges:             7752
Number of relevant variables:    977
Number of functions:             190
Number of loops:                 55
Size of reached set:             27001
  Number of reached locations:   1177 (18%)
    Avg states per location:     22
    Max states per location:     636 (at node N444)
  Number of reached functions:   77 (41%)
  Number of partitions:          26972
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N5360 (before line 9743), Function main called from node N5297, stack depth 1 [1903b5d], stack [main]])
  Number of target states:       0
  Size of final wait list        1598

Time for analysis setup:          6.896s
  Time for loading CPAs:          1.057s
  Time for loading parser:        0.668s
  Time for CFA construction:      4.999s
    Time for parsing file(s):     1.155s
    Time for AST to CFA:          1.738s
    Time for CFA sanity check:    0.541s
    Time for post-processing:     1.430s
      Time for var class.:        0.694s
Time for Analysis:              893.385s
CPU time for analysis:          893.360s
Total time for CPAchecker:      900.287s
Total CPU time for CPAchecker:  900.240s
Time for statistics:              0.532s

Time for Garbage Collector:     136.646s (in 548 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2886MB (  2753 MiB) max;   1141MB (  1088 MiB) avg;   3044MB (  2903 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          3564MB (  3399 MiB) max;   1672MB (  1594 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8089MB (  7715 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
