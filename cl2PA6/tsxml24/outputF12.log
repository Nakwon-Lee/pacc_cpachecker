scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--usb--host--oxu210hp-hcd.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9qbzf4jf/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 4100-4101: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4104-4105: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4112-4113: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5763;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8744: Dead code detected: *((u8 *)__gu_p) = (unsigned char )status; (CFACreationUtils.addEdgeToCFA, INFO)

line 8747: Dead code detected: put_unaligned_le16((int )((unsigned short )status), __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

line 8753: Dead code detected: put_unaligned_le64((unsigned long long )status, __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  *((u8 *)__gu_p) = (unsigned char )status;
  goto ldv_35329;
  case 2UL:
  put_unaligned_le16((int )((unsigned short )status), __gu_p);
  goto ldv_35329;
  case 4UL:
  put_unaligned_le32(status, __gu_p);
  goto ldv_35329;
  case 8UL:
  put_unaligned_le64((unsigned long long )status, __gu_p);
  goto ldv_35329;
  default:
  __bad_unaligned_access_size();
  goto ldv_35329;
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_remove_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hc_died to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_uninterruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_ioremap_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_type to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_create_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_add_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_poll_rh_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_resume_root_hub to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_calc_bus_time to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_giveback_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 6443: Unsupported feature (recursion): qh_completions(oxu, qh); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            223130 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  207615 (93%)
  Because of loop head:            15513 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2 (0%)
  Times precision was empty:       223076 (100%)
  Times precision was {false}:     12 (0%)
  Times result was cached:         29 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      13 (0%)
  Times result was 'false':        9 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         106517
  BDD entailment checks:           25429
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       64
Number of predicates discovered:          3
Number of abstraction locations:          4
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         84
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 3.36
Number of irrelevant predicates:          40 (48%)
Number of preds handled by boolean abs:   15 (18%)
  Total number of models for allsat:      14
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.08

Time for post operator:                 27.611s
  Time for path formula creation:       26.965s
Time for strengthen operator:            1.133s
Time for prec operator:                  5.233s
  Time for abstraction:                  1.308s (Max:     0.115s, Count: 223130)
    Boolean abstraction:                 0.047s
    Solving time:                        0.029s (Max:     0.013s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.007s (Max:     0.004s)
Time for merge operator:                 2.281s
Time for coverage check:                 0.122s
  Time for BDD entailment checks:        0.084s
Total time for SMT solver (w/o itp):     0.029s

Number of path formula cache hits:   896806 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    19.923s

Total number of created targets for pointer analysis: 8486
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *unsigned_short_int is 97
   Number of created targets for uf: *(struct_ehci_qh)* is 5
   Number of created targets for uf: *unsigned_char is 7
   Number of created targets for uf: *(struct_list_head)* is 169
   Number of created targets for uf: *(unsigned_int)* is 5
   Number of created targets for uf: *char is 13
   Number of created targets for uf: *unsigned_int is 25


Number of BDD nodes:                               203
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          40 (count: 248661, min: 0, max: 14, avg: 0.00)
Time for BDD node cleanup:                             0.066s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.152s
  Time for transition matches:                         0.911s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       947028 (count: 947028, min: 1, max: 1, avg: 1.00) [1 x 947028]

CPA algorithm statistics
------------------------
Number of iterations:            661068
Max size of waitlist:            443
Average size of waitlist:        322
Number of computed successors:   727777
Max successors for one state:    2
Number of times merged:          40544
Number of times stopped:         65937
Number of times breaked:         2

Total time for CPA algorithm:        71.778s (Max:    47.367s)
  Time for choose from waitlist:      0.705s
  Time for precision adjustment:     14.323s
  Time for transfer relation:        46.497s
  Time for merge operator:            3.393s
  Time for stop operator:             1.349s
  Time for adding to reached set:     1.979s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2
Avg. length of target path (in blocks):                 134 (count: 2, min: 67, max: 67, avg: 67.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.843s
  Counterexample analysis:                             0.103s (Max:     0.056s, Calls: 2)
    Refinement sat check:                              0.056s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.011s
  ARG update:                                          0.708s

Length of refined path (in blocks):                      80 (count: 2, min: 40, max: 40, avg: 40.00)
Number of affected states:                                4 (count: 2, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'true':                 74 (count: 2, min: 36, max: 38, avg: 37.00)
Length (states) of path with itp non-trivial itp:         4 (count: 2, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'false':                 2 (count: 2, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               2 (count: 2, min: 0, max: 2, avg: 1.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 59286
Max. size of reached set after ref.:  99
Avg. size of reached set before ref.: 59159.00
Avg. size of reached set after ref.:  96.50

Total time for CEGAR algorithm:      72.844s
Time for refinements:                 1.065s
Average time for refinement:          0.532s
Max time for refinement:              0.717s

Code Coverage
-----------------------------
  Function coverage:      0.847
  Visited lines:          3837
  Total lines:            4611
  Line coverage:          0.832
  Visited conditions:     1115
  Total conditions:       1454
  Condition coverage:     0.767

CPAchecker general statistics
-----------------------------
Number of program locations:     6501
Number of CFA edges:             7752
Number of relevant variables:    977
Number of functions:             190
Number of loops:                 55
Size of reached set:             543707
  Number of reached locations:   3197 (49%)
    Avg states per location:     170
    Max states per location:     10160 (at node N104)
  Number of reached functions:   161 (85%)
  Number of partitions:          543706
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N5360 (before line 9743), Function main called from node N5297, stack depth 1 [1903b5d], stack [main]])
  Number of target states:       0
  Size of final wait list        365

Time for analysis setup:          6.867s
  Time for loading CPAs:          1.091s
  Time for loading parser:        0.716s
  Time for CFA construction:      4.929s
    Time for parsing file(s):     1.236s
    Time for AST to CFA:          1.731s
    Time for CFA sanity check:    0.457s
    Time for post-processing:     1.315s
      Time for var class.:        0.656s
Time for Analysis:               72.844s
CPU time for analysis:           72.840s
Total time for CPAchecker:       79.723s
Total CPU time for CPAchecker:   79.700s
Time for statistics:              4.168s

Time for Garbage Collector:       9.830s (in 109 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                765MB (   729 MiB) max;    219MB (   209 MiB) avg;    816MB (   778 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     40MB (    38 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:          1004MB (   958 MiB) max;    343MB (   327 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     45MB (    43 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8080MB (  7706 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
