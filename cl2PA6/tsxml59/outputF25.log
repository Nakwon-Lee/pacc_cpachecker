scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--usb--host--oxu210hp-hcd.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lb407zh3/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 3983-3984: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3987-3988: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3995-3996: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8782: Dead code detected: *((u8 *)__gu_p) = (unsigned char )status; (CFACreationUtils.addEdgeToCFA, INFO)

line 8785: Dead code detected: put_unaligned_le16((int )((unsigned short )status), __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

line 8791: Dead code detected: put_unaligned_le64((unsigned long long )status, __gu_p); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  *((u8 *)__gu_p) = (unsigned char )status;
  goto ldv_35318;
  case 2UL:
  put_unaligned_le16((int )((unsigned short )status), __gu_p);
  goto ldv_35318;
  case 4UL:
  put_unaligned_le32(status, __gu_p);
  goto ldv_35318;
  case 8UL:
  put_unaligned_le64((unsigned long long )status, __gu_p);
  goto ldv_35318;
  default:
  __bad_unaligned_access_size();
  goto ldv_35318;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10499: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_calc_bus_time to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hc_died to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_remove_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_hcd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_uninterruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_ioremap_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2819280 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2522189 (89%)
  Because of loop head:            296505 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         586 (0%)
  Times precision was empty:       1231268 (44%)
  Times precision was {false}:     4583 (0%)
  Times result was cached:         1563962 (55%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      19467 (1%)
  Times result was 'false':        72935 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         1893179
  BDD entailment checks:           459815
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       66
Number of predicates discovered:          11
Number of abstraction locations:          455
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         7144318
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 297.06
Number of irrelevant predicates:          3212805 (45%)
Number of preds handled by boolean abs:   64812 (1%)
  Total number of models for allsat:      19637
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.01

Time for post operator:                197.949s
  Time for path formula creation:      191.650s
Time for strengthen operator:           11.661s
Time for prec operator:                343.681s
  Time for abstraction:                302.022s (Max:     2.067s, Count: 2819280)
    Boolean abstraction:                26.451s
    Solving time:                       24.009s (Max:     0.032s)
    Model enumeration time:              2.295s
    Time for BDD construction:           0.474s (Max:     0.013s)
Time for merge operator:                 9.356s
Time for coverage check:                 0.670s
  Time for BDD entailment checks:        0.440s
Total time for SMT solver (w/o itp):    26.304s

Number of path formula cache hits:   16898214 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   107.105s

Total number of created targets for pointer analysis: 265921
   Number of created targets for uf: *(void)* is 4981
   Number of created targets for uf: *(struct_ehci_qh)* is 3
   Number of created targets for uf: *(struct_usb_device)* is 2045
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_urb)*],_VarArgs:_false)* is 261
   Number of created targets for uf: *(unsigned_int)* is 3
   Number of created targets for uf: *unsigned_long_int is 13
   Number of created targets for uf: *unsigned_short_int is 813
   Number of created targets for uf: *signed_int is 3709
   Number of created targets for uf: *unsigned_char is 1039
   Number of created targets for uf: *(struct_list_head)* is 7751
   Number of created targets for uf: *unsigned_long_long_int is 6081
   Number of created targets for uf: *unsigned_int is 3218
   Number of created targets for uf: *char is 9


Number of BDD nodes:                               1603
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       39266 (count: 1877010, min: 0, max: 469, avg: 0.02)
Time for BDD node cleanup:                             0.312s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 20.480s
  Time for transition matches:                        11.709s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.006s
Automaton transfers with branching:                0
Automaton transfer successors:                     15689119 (count: 15689119, min: 1, max: 1, avg: 1.00) [1 x 15689119]

CPA algorithm statistics
------------------------
Number of iterations:            9802252
Max size of waitlist:            574
Average size of waitlist:        90
Number of computed successors:   11145875
Max successors for one state:    2
Number of times merged:          716682
Number of times stopped:         1144196
Number of times breaked:         586

Total time for CPA algorithm:       844.205s (Max:    10.022s)
  Time for choose from waitlist:      4.182s
  Time for precision adjustment:    413.724s
  Time for transfer relation:       356.123s
  Time for merge operator:           17.268s
  Time for stop operator:            11.171s
  Time for adding to reached set:    16.786s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   586
Avg. length of target path (in blocks):               74277 (count: 586, min: 46, max: 195, avg: 126.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  41.489s
  Counterexample analysis:                            23.868s (Max:     0.122s, Calls: 586)
    Refinement sat check:                             13.400s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.034s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.457s
  Precision update:                                    0.730s
  ARG update:                                         15.985s

Length of refined path (in blocks):                   70805 (count: 586, min: 40, max: 187, avg: 120.83)
Number of affected states:                            58740 (count: 586, min: 0, max: 186, avg: 100.24)
Length (states) of path with itp 'true':              11479 (count: 586, min: 0, max: 116, avg: 19.59)
Length (states) of path with itp non-trivial itp:     58740 (count: 586, min: 0, max: 186, avg: 100.24)
Length (states) of path with itp 'false':               586 (count: 586, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 586, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           58155 (count: 586, min: 0, max: 185, avg: 99.24)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                586
Number of successful refinements:     586
Number of failed refinements:         0
Max. size of reached set before ref.: 53283
Max. size of reached set after ref.:  28006
Avg. size of reached set before ref.: 19930.84
Avg. size of reached set after ref.:  3014.50

Total time for CEGAR algorithm:     893.574s
Time for refinements:                48.307s
Average time for refinement:          0.082s
Max time for refinement:              0.668s

Code Coverage
-----------------------------
  Function coverage:      0.575
  Visited lines:          3192
  Total lines:            4817
  Line coverage:          0.663
  Visited conditions:     976
  Total conditions:       1532
  Condition coverage:     0.637

CPAchecker general statistics
-----------------------------
Number of program locations:     6844
Number of CFA edges:             8148
Number of relevant variables:    1001
Number of functions:             221
Number of loops:                 55
Size of reached set:             15771
  Number of reached locations:   2449 (36%)
    Avg states per location:     6
    Max states per location:     212 (at node N248)
  Number of reached functions:   127 (57%)
  Number of partitions:          15757
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N3027 (before line 7237), Function intr_submit called from node N3844, stack depth 4 [71d1aca0], stack [main, oxu_urb_enqueue, __oxu_urb_enqueue, intr_submit]])
  Number of target states:       0
  Size of final wait list        118

Time for analysis setup:          6.697s
  Time for loading CPAs:          0.987s
  Time for loading parser:        0.709s
  Time for CFA construction:      4.840s
    Time for parsing file(s):     1.172s
    Time for AST to CFA:          1.701s
    Time for CFA sanity check:    0.447s
    Time for post-processing:     1.337s
      Time for var class.:        0.675s
Time for Analysis:              893.574s
CPU time for analysis:          893.490s
Total time for CPAchecker:      900.284s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.437s

Time for Garbage Collector:      72.517s (in 1700 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1228MB (  1171 MiB) max;    388MB (   370 MiB) avg;   1259MB (  1200 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1535MB (  1464 MiB) max;    580MB (   553 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8294MB (  7910 MiB) max;   8163MB (  7785 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
