scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--net--ethernet--broadcom--tg3.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_c7sry53a/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7118: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7121: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7124: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3129;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3129;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3129;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3129;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7194: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7197: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7200: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5437;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5437;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5437;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5437;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 9348-9363: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 9350: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9353: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9355: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 9359: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 9368-9383: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 9370: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9373: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9375: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 9379: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9390: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9393: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9399: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 9408-9423: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 9410: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9413: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9415: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 9419: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_44825;
  default:
  __bad_percpu_size();
  }
  ldv_44825:
  pscr_ret__ = pfo_ret__;
  goto ldv_44831;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_44835;
  default:
  __bad_percpu_size();
  }
  ldv_44835:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_44831;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_44844;
  default:
  __bad_percpu_size();
  }
  ldv_44844:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_44831;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_44853;
  default:
  __bad_percpu_size();
  }
  ldv_44853:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_44831;
  default:
  __bad_size_call_parameter();
  goto ldv_44831;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17814-17829: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17816: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17819: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17821: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17825: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17834-17849: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17836: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17839: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17841: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17845: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 17856: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17859: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17865: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17874-17889: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 17876: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17879: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17881: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 17885: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_56321;
    default:
    __bad_percpu_size();
    }
    ldv_56321:
    pscr_ret__ = pfo_ret__;
    goto ldv_56327;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_56331;
    default:
    __bad_percpu_size();
    }
    ldv_56331:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_56327;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_56340;
    default:
    __bad_percpu_size();
    }
    ldv_56340:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_56327;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_56349;
    default:
    __bad_percpu_size();
    }
    ldv_56349:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_56327;
    default:
    __bad_size_call_parameter();
    goto ldv_56327;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 28052: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8080: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 8013-8014: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8196: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8143: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8176: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8110: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8047: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 34414: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34418: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34430: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34432: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34442: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(44UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34446: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___15 = ldv_init_zalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34448: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_init_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34458: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___21 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34460: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___22 = ldv_init_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34462: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34464: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___24 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34468: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___26 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34470: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___27 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34478: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___31 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 34482: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___33 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_7 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 33869: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_get_num_default_rss_queues to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19102: Ignoring function call through function pointer *(tp->read32): tmp = (*(tp->read32))(tp, 112U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17200: Ignoring function call through function pointer *(tp->read32): tmp = (*(tp->read32))(tp, 26880U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17202: Ignoring function call through function pointer *(tp->read32): tmp___0 = (*(tp->read32))(tp, 26884U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 26545: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 1036U, tp->led_ctrl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 26542: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 1036U, 17U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 26539: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 1036U, 127U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17212: Ignoring function call through function pointer *(tp->read32): tmp = (*(tp->read32))(tp, 26888U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17214: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26888U, clock_ctl | 2U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17215: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26880U, (u32 )newval); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17216: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26884U, (u32 )(newval >> 32)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function skb_checksum_help to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function ns_to_timespec((s64 )ns) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

line 17274: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26920U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17272: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26920U, __CPAchecker_TMP_0 | correction); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17351: Ignoring function call through function pointer *(tp->read32): clock_ctl = (*(tp->read32))(tp, 26888U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17373: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26908U, 0U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17374: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26888U, clock_ctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17369: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26904U, (u32 )nsec); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17370: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26908U, ((u32 )(nsec >> 32)) | 2147483648U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17371: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 26888U, clock_ctl | 131072U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function phy_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 25428: Ignoring function call through function pointer *(tp->read32): cpmu_val = (*(tp->read32))(tp, 13824U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 25430: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13824U, cpmu_val & 4294965759U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21091: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13860U, 2147483648U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21086: Ignoring function call through function pointer *(tp->read32): val = (*(tp->read32))(tp, 13864U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21087: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13864U, val | 8192U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21112: Ignoring function call through function pointer *(tp->read32): val = (*(tp->read32))(tp, 13860U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21113: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13860U, val & 2147483647U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21107: Ignoring function call through function pointer *(tp->read32): val = (*(tp->read32))(tp, 13864U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21108: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13864U, val & 4294959103U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 25521: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, 13824U, cpmu_val); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 17474: Ignoring function call through function pointer *(tp->read32): *tmp = (*(tp->read32))(tp, off + ((u32 )i)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22259: Ignoring function call through function pointer *(tp->write32): (*(tp->write32))(tp, reg, val); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __bitmap_weight to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function napi_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1978494 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1799254 (91%)
  Because of loop head:            177936 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1304 (0%)
  Times precision was empty:       740136 (37%)
  Times precision was {false}:     7849 (0%)
  Times result was cached:         1225182 (62%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      5327 (0%)
  Times result was 'false':        54967 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         1804977
  BDD entailment checks:           490243
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       162
Number of predicates discovered:          14
Number of abstraction locations:          439
Max number of predicates per location:    7
Avg number of predicates per location:    2
Total predicates per abstraction:         3187621
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 241.93
Number of irrelevant predicates:          2523349 (79%)
Number of preds handled by boolean abs:   7847 (0%)
  Total number of models for allsat:      9454
  Max number of models for allsat:        64
  Avg number of models for allsat:        1.77

Time for post operator:                243.931s
  Time for path formula creation:      238.512s
Time for strengthen operator:           12.110s
Time for prec operator:                226.146s
  Time for abstraction:                182.066s (Max:     0.327s, Count: 1978494)
    Boolean abstraction:                14.643s
    Solving time:                       13.229s (Max:     0.094s)
    Model enumeration time:              5.184s
    Time for BDD construction:           0.310s (Max:     0.017s)
Time for merge operator:                22.284s
Time for coverage check:                 0.603s
  Time for BDD entailment checks:        0.384s
Total time for SMT solver (w/o itp):    18.413s

Number of path formula cache hits:   12765974 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   102.677s

Total number of created targets for pointer analysis: 346531
   Number of created targets for uf: *(void)* is 13
   Number of created targets for uf: *unsigned_short_int is 46
   Number of created targets for uf: *unsigned_char is 8
   Number of created targets for uf: *(struct_list_head)* is 9
   Number of created targets for uf: *signed_long_long_int is 5
   Number of created targets for uf: *signed_long_int is 9
   Number of created targets for uf: *unsigned_long_long_int is 9
   Number of created targets for uf: *unsigned_int is 29656


Number of BDD nodes:                               1095
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       10923 (count: 1316008, min: 0, max: 292, avg: 0.01)
Time for BDD node cleanup:                             0.258s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.760s
  Time for transition matches:                         8.540s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                     11917520 (count: 11917520, min: 1, max: 1, avg: 1.00) [1 x 11917520]

CPA algorithm statistics
------------------------
Number of iterations:            7119967
Max size of waitlist:            1178
Average size of waitlist:        489
Number of computed successors:   8460303
Max successors for one state:    2
Number of times merged:          657367
Number of times stopped:         851014
Number of times breaked:         1304

Total time for CPA algorithm:       773.653s (Max:     4.906s)
  Time for choose from waitlist:      4.579s
  Time for precision adjustment:    282.833s
  Time for transfer relation:       409.099s
  Time for merge operator:           31.006s
  Time for stop operator:             9.613s
  Time for adding to reached set:    15.708s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1304
Avg. length of target path (in blocks):              203341 (count: 1304, min: 106, max: 180, avg: 155.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  95.896s
  Counterexample analysis:                            81.477s (Max:     0.168s, Calls: 1304)
    Refinement sat check:                             49.323s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.112s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.258s
  Precision update:                                    1.073s
  ARG update:                                         12.200s

Length of refined path (in blocks):                  189984 (count: 1304, min: 100, max: 179, avg: 145.69)
Number of affected states:                            29542 (count: 1304, min: 0, max: 178, avg: 22.65)
Length (states) of path with itp 'true':             159138 (count: 1304, min: 0, max: 150, avg: 122.04)
Length (states) of path with itp non-trivial itp:     29542 (count: 1304, min: 0, max: 178, avg: 22.65)
Length (states) of path with itp 'false':              1304 (count: 1304, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1304, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           28433 (count: 1304, min: 0, max: 177, avg: 21.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1304
Number of successful refinements:     1304
Number of failed refinements:         0
Max. size of reached set before ref.: 19407
Max. size of reached set after ref.:  9965
Avg. size of reached set before ref.: 10774.78
Avg. size of reached set after ref.:  4985.36

Total time for CEGAR algorithm:     884.134s
Time for refinements:               106.273s
Average time for refinement:          0.081s
Max time for refinement:              0.207s

Code Coverage
-----------------------------
  Function coverage:      0.221
  Visited lines:          3289
  Total lines:            17999
  Line coverage:          0.183
  Visited conditions:     944
  Total conditions:       14262
  Condition coverage:     0.066

CPAchecker general statistics
-----------------------------
Number of program locations:     36029
Number of CFA edges:             48854
Number of relevant variables:    4109
Number of functions:             616
Number of loops:                 203
Size of reached set:             4929
  Number of reached locations:   2033 (6%)
    Avg states per location:     2
    Max states per location:     48 (at node N323)
  Number of reached functions:   136 (22%)
  Number of partitions:          4925
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N25126 (before line 34514), Function main called from node N24931, stack depth 1 [4aa4a3e5], stack [main]])
  Number of target states:       0
  Size of final wait list        243

Time for analysis setup:         16.134s
  Time for loading CPAs:          1.321s
  Time for loading parser:        0.730s
  Time for CFA construction:     13.921s
    Time for parsing file(s):     2.067s
    Time for AST to CFA:          4.438s
    Time for CFA sanity check:    2.047s
    Time for post-processing:     5.558s
      Time for var class.:        2.541s
Time for Analysis:              884.134s
CPU time for analysis:          884.050s
Total time for CPAchecker:      900.272s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              0.289s

Time for Garbage Collector:      35.361s (in 687 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1008MB (   961 MiB) max;    607MB (   578 MiB) avg;   1018MB (   971 MiB) peak
Used non-heap memory:             49MB (    47 MiB) max;     42MB (    40 MiB) avg;     49MB (    47 MiB) peak
Allocated heap memory:          1037MB (   989 MiB) max;    844MB (   805 MiB) avg
Allocated non-heap memory:        51MB (    49 MiB) max;     50MB (    48 MiB) avg
Total process virtual memory:   8157MB (  7779 MiB) max;   8141MB (  7764 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
