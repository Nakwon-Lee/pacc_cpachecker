scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--block--DAC960.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ni1br953/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6082: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6085: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6091: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12427: Function pointer *(KernelCommand->CompletionFunction) with type void (*)(struct DAC960_V1_KernelCommand *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13318: Function pointer *(KernelCommand->CompletionFunction) with type void (*)(struct DAC960_V2_KernelCommand *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6528: Function pointer *(ops->map_sg) with type int (*)(struct device *, struct scatterlist *, int, enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6569: Function pointer *(ops->unmap_sg) with type void (*)(struct device *, struct scatterlist *, int, enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 15842: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15844: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15846: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15852: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15854: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15862: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15864: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15866: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15868: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15870: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_init_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_fault to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7777-7778: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(4, (unsigned char *)"Illegal Logical Device Geometry %d\n", p, __CPAchecker_TMP_6) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function ldv__builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vsprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv__builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 11307-11308: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(4, (unsigned char *)"More than %d DAC960 Controllers detected - ignoring from Controller at\n", (DAC960_Controller_T *)0, 8) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function check_disk_change to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6347: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6366: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 15701: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function PDE_DATA to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13678: Ignoring function call through function pointer *(Controller->QueueCommand): (*(Controller->QueueCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11476: Ignoring function call through function pointer *(Controller->QueueCommand): (*(Controller->QueueCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 11476: Unsupported feature (recursion): DAC960_V2_QueueReadWriteCommand(Command); (line was originally pointer call(DAC960_V2_QueueReadWriteCommand) (*(Controller->QueueCommand))(Command);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            13045 (9% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  11742 (90%)
  Because of loop head:            1272 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         31 (0%)
  Times precision was empty:       11031 (85%)
  Times precision was {false}:     289 (2%)
  Times result was cached:         1464 (11%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      261 (2%)
  Times result was 'false':        553 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         28607
  BDD entailment checks:           2791
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       120
Number of predicates discovered:          8
Number of abstraction locations:          16
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         6666
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 12.12
Number of irrelevant predicates:          4130 (62%)
Number of preds handled by boolean abs:   883 (13%)
  Total number of models for allsat:      1964
  Max number of models for allsat:        128
  Avg number of models for allsat:        7.52

Time for post operator:                 75.144s
  Time for path formula creation:       74.965s
Time for strengthen operator:            0.263s
Time for prec operator:                  4.730s
  Time for abstraction:                  4.244s (Max:     0.184s, Count: 13045)
    Boolean abstraction:                 2.306s
    Solving time:                        1.063s (Max:     0.027s)
    Model enumeration time:              1.191s
    Time for BDD construction:           0.158s (Max:     0.021s)
Time for merge operator:                 1.170s
Time for coverage check:                 0.042s
  Time for BDD entailment checks:        0.032s
Total time for SMT solver (w/o itp):     2.254s

Number of path formula cache hits:   88685 (58%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    73.769s

Total number of created targets for pointer analysis: 2087
   Number of created targets for uf: *unsigned_char is 161
   Number of created targets for uf: *unsigned_int is 49
   Number of created targets for uf: *unsigned_long_int is 694


Number of BDD nodes:                               943
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         611 (count: 16994, min: 0, max: 41, avg: 0.04)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.502s
  Time for transition matches:                         0.243s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       137463 (count: 137463, min: 1, max: 1, avg: 1.00) [1 x 137463]

CPA algorithm statistics
------------------------
Number of iterations:            77882
Max size of waitlist:            322
Average size of waitlist:        114
Number of computed successors:   97671
Max successors for one state:    2
Number of times merged:          12908
Number of times stopped:         14519
Number of times breaked:         31

Total time for CPA algorithm:        87.541s (Max:     7.351s)
  Time for choose from waitlist:      0.134s
  Time for precision adjustment:      6.027s
  Time for transfer relation:        78.293s
  Time for merge operator:            1.611s
  Time for stop operator:             0.333s
  Time for adding to reached set:     0.366s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   31
Avg. length of target path (in blocks):                3203 (count: 31, min: 97, max: 107, avg: 103.32)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.662s
  Counterexample analysis:                             1.197s (Max:     0.081s, Calls: 31)
    Refinement sat check:                              0.756s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.016s
  Precision update:                                    0.036s
  ARG update:                                          0.345s

Length of refined path (in blocks):                    2950 (count: 31, min: 92, max: 98, avg: 95.16)
Number of affected states:                              129 (count: 31, min: 1, max: 7, avg: 4.16)
Length (states) of path with itp 'true':               2790 (count: 31, min: 90, max: 90, avg: 90.00)
Length (states) of path with itp non-trivial itp:       129 (count: 31, min: 1, max: 7, avg: 4.16)
Length (states) of path with itp 'false':                31 (count: 31, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 31, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              98 (count: 31, min: 0, max: 6, avg: 3.16)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     31
Number of failed refinements:         0
Max. size of reached set before ref.: 5564
Max. size of reached set after ref.:  241
Avg. size of reached set before ref.: 2871.58
Avg. size of reached set after ref.:  241.00

Total time for CEGAR algorithm:      89.421s
Time for refinements:                 1.876s
Average time for refinement:          0.060s
Max time for refinement:              0.170s

Code Coverage
-----------------------------
  Function coverage:      0.212
  Visited lines:          1922
  Total lines:            7528
  Line coverage:          0.255
  Visited conditions:     348
  Total conditions:       2752
  Condition coverage:     0.126

CPAchecker general statistics
-----------------------------
Number of program locations:     11288
Number of CFA edges:             13574
Number of relevant variables:    1546
Number of functions:             273
Number of loops:                 100
Size of reached set:             1052
  Number of reached locations:   754 (7%)
    Avg states per location:     1
    Max states per location:     26 (at node N39)
  Number of reached functions:   58 (21%)
  Number of partitions:          1052
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        56

Time for analysis setup:          8.544s
  Time for loading CPAs:          1.198s
  Time for loading parser:        0.681s
  Time for CFA construction:      6.515s
    Time for parsing file(s):     1.353s
    Time for AST to CFA:          2.232s
    Time for CFA sanity check:    0.704s
    Time for post-processing:     2.079s
      Time for var class.:        1.085s
Time for Analysis:               89.421s
CPU time for analysis:           89.420s
Total time for CPAchecker:       97.975s
Total CPU time for CPAchecker:   97.950s
Time for statistics:              0.129s

Time for Garbage Collector:       2.500s (in 165 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                207MB (   198 MiB) max;    101MB (    96 MiB) avg;    212MB (   203 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           289MB (   276 MiB) max;    161MB (   153 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8089MB (  7714 MiB) max;   8082MB (  7707 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
