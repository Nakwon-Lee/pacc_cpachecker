scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--block--DAC960.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_aaonu3m0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6082: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6085: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6091: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12427: Function pointer *(KernelCommand->CompletionFunction) with type void (*)(struct DAC960_V1_KernelCommand *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13318: Function pointer *(KernelCommand->CompletionFunction) with type void (*)(struct DAC960_V2_KernelCommand *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6528: Function pointer *(ops->map_sg) with type int (*)(struct device *, struct scatterlist *, int, enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6569: Function pointer *(ops->unmap_sg) with type void (*)(struct device *, struct scatterlist *, int, enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 15842: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15844: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15846: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15852: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15854: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15862: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15864: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15866: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15868: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 15870: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_init_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_10 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_15 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function PDE_DATA to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15701: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11283: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(2, (unsigned char *)"Flushing Cache...", Controller) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 11273: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(2, (unsigned char *)"Flushing Cache...", Controller) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function check_disk_change to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 11307-11308: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(4, (unsigned char *)"More than %d DAC960 Controllers detected - ignoring from Controller at\n", (DAC960_Controller_T *)0, 8) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7777-7778: Ignoring parameters passed as varargs to function DAC960_Message: DAC960_Message(4, (unsigned char *)"Illegal Logical Device Geometry %d\n", p, __CPAchecker_TMP_6) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6347: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __might_fault to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_peek_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_start_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_rq_map_sg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6528: Ignoring function call through function pointer *(ops->map_sg): ents = (*(ops->map_sg))(dev, sg, nents, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_sg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11521: Ignoring function call through function pointer *(Controller->QueueReadWriteCommand): (*(Controller->QueueReadWriteCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13656: Ignoring function call through function pointer *(Controller->QueueCommand): (*(Controller->QueueCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13678: Ignoring function call through function pointer *(Controller->QueueCommand): (*(Controller->QueueCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11417: Ignoring function call through function pointer *(Controller->QueueCommand): (*(Controller->QueueCommand))(Command); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 11417: Unsupported feature (recursion): DAC960_V1_QueueReadWriteCommand(Command); (line was originally pointer call(DAC960_V1_QueueReadWriteCommand) (*(Controller->QueueCommand))(Command);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            3365 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2847 (85%)
  Because of loop head:            518 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       3365 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1758
  BDD entailment checks:           544
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       120
Number of predicates discovered:          0

Time for post operator:                 10.694s
  Time for path formula creation:       10.617s
Time for strengthen operator:            0.057s
Time for prec operator:                  0.497s
  Time for abstraction:                  0.067s (Max:     0.008s, Count: 3365)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.278s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   1815 (9%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    10.141s

Total number of created targets for pointer analysis: 37847
   Number of created targets for uf: *(union_DAC960_V1_StatusMailbox)* is 4
   Number of created targets for uf: *(union_DAC960_V2_CommandMailbox)* is 141
   Number of created targets for uf: *(struct_request)* is 15
   Number of created targets for uf: *(union_DAC960_V2_StatusMailbox)* is 4
   Number of created targets for uf: *(struct_completion)* is 15
   Number of created targets for uf: *(struct_DAC960_Command)* is 309
   Number of created targets for uf: *unsigned_long_int is 19
   Number of created targets for uf: *unsigned_short_int is 27
   Number of created targets for uf: *(union_DAC960_V1_CommandMailbox)* is 141
   Number of created targets for uf: *enum_ldv_27334 is 2
   Number of created targets for uf: *signed_int is 365
   Number of created targets for uf: *unsigned_char is 2635
   Number of created targets for uf: *enum_ldv_27713 is 15
   Number of created targets for uf: *unsigned_int is 2857


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 3910, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.242s
Automaton transfers with branching:                0
Automaton transfer successors:                        18221 (count: 18221, min: 1, max: 1, avg: 1.00) [1 x 18221]

CPA algorithm statistics
------------------------
Number of iterations:            10450
Max size of waitlist:            94
Average size of waitlist:        71
Number of computed successors:   11693
Max successors for one state:    2
Number of times merged:          607
Number of times stopped:         1151
Number of times breaked:         0

Total time for CPA algorithm:        13.846s (Max:    13.846s)
  Time for choose from waitlist:      0.084s
  Time for precision adjustment:      0.966s
  Time for transfer relation:        11.894s
  Time for merge operator:            0.429s
  Time for stop operator:             0.109s
  Time for adding to reached set:     0.104s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.429
  Visited lines:          2596
  Total lines:            7528
  Line coverage:          0.345
  Visited conditions:     554
  Total conditions:       2752
  Condition coverage:     0.201

CPAchecker general statistics
-----------------------------
Number of program locations:     11288
Number of CFA edges:             13574
Number of relevant variables:    1546
Number of functions:             273
Number of loops:                 100
Size of reached set:             10543
  Number of reached locations:   1524 (14%)
    Avg states per location:     6
    Max states per location:     146 (at node N154)
  Number of reached functions:   117 (43%)
  Number of partitions:          10543
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        94

Time for analysis setup:          9.221s
  Time for loading CPAs:          1.231s
  Time for loading parser:        0.712s
  Time for CFA construction:      7.140s
    Time for parsing file(s):     1.400s
    Time for AST to CFA:          2.486s
    Time for CFA sanity check:    0.680s
    Time for post-processing:     2.374s
      Time for var class.:        1.037s
Time for Analysis:               13.846s
CPU time for analysis:           13.850s
Total time for CPAchecker:       23.079s
Total CPU time for CPAchecker:   23.060s
Time for statistics:              0.308s

Time for Garbage Collector:       0.688s (in 33 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 98MB (    94 MiB) max;     63MB (    60 MiB) avg;    104MB (    99 MiB) peak
Used non-heap memory:             47MB (    44 MiB) max;     36MB (    35 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8067MB (  7693 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
