scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--video--fbdev--udlfb.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jqoagv0z/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 4144-4145: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4148-4149: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4156-4157: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5596;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8144: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 7638: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7640: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7648: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 7652: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_alloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_dealloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modedb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4537: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __might_fault to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4556: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_edid_to_monspecs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_videomode_to_var to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_find_best_display to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_find_nearest_mode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_add_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unlink_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_prefetch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6986: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(72UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1239425 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1075136 (87%)
  Because of loop head:            162702 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1587 (0%)
  Times precision was empty:       485218 (39%)
  Times precision was {false}:     2576 (0%)
  Times result was cached:         740373 (60%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11258 (1%)
  Times result was 'false':        125630 (10%)
Number of strengthen sat checks:   0
Number of coverage checks:         1432056
  BDD entailment checks:           308530
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       94
Number of predicates discovered:          15
Number of abstraction locations:          226
Max number of predicates per location:    12
Avg number of predicates per location:    5
Total predicates per abstraction:         4836230
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 349.59
Number of irrelevant predicates:          2232687 (46%)
Number of preds handled by boolean abs:   46285 (1%)
  Total number of models for allsat:      9659
  Max number of models for allsat:        12
  Avg number of models for allsat:        0.86

Time for post operator:                130.591s
  Time for path formula creation:      126.375s
Time for strengthen operator:            7.709s
Time for prec operator:                524.929s
  Time for abstraction:                507.624s (Max:    13.282s, Count: 1239425)
    Boolean abstraction:               275.519s
    Solving time:                      272.194s (Max:    13.185s)
    Model enumeration time:              4.007s
    Time for BDD construction:           0.291s (Max:     0.011s)
Time for merge operator:                10.210s
Time for coverage check:                 0.507s
  Time for BDD entailment checks:        0.322s
Total time for SMT solver (w/o itp):   276.201s

Number of path formula cache hits:   10402050 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    73.951s

Total number of created targets for pointer analysis: 258739
   Number of created targets for uf: *(void)* is 529
   Number of created targets for uf: *signed_int is 19
   Number of created targets for uf: *(char)* is 41
   Number of created targets for uf: *(struct_urb)* is 36
   Number of created targets for uf: *unsigned_char is 769
   Number of created targets for uf: *(struct_fb_deferred_io)* is 45
   Number of created targets for uf: *(struct_list_head)* is 2507
   Number of created targets for uf: *(unsigned_char)* is 36
   Number of created targets for uf: *unsigned_int is 2891
   Number of created targets for uf: *char is 985
   Number of created targets for uf: *unsigned_long_int is 5744
   Number of created targets for uf: *(struct_fb_info)* is 105


Number of BDD nodes:                               1295
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       22272 (count: 896417, min: 0, max: 458, avg: 0.02)
Time for BDD node cleanup:                             0.142s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.477s
  Time for transition matches:                         7.787s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                      9827955 (count: 9827955, min: 1, max: 1, avg: 1.00) [1 x 9827955]

CPA algorithm statistics
------------------------
Number of iterations:            5677956
Max size of waitlist:            612
Average size of waitlist:        188
Number of computed successors:   6642090
Max successors for one state:    2
Number of times merged:          561763
Number of times stopped:         741360
Number of times breaked:         1587

Total time for CPA algorithm:       828.776s (Max:    39.693s)
  Time for choose from waitlist:      2.172s
  Time for precision adjustment:    566.136s
  Time for transfer relation:       212.435s
  Time for merge operator:           17.090s
  Time for stop operator:             7.260s
  Time for adding to reached set:     8.667s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1587
Avg. length of target path (in blocks):              135737 (count: 1587, min: 70, max: 146, avg: 85.53)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  55.517s
  Counterexample analysis:                            42.607s (Max:     0.086s, Calls: 1587)
    Refinement sat check:                             24.978s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.083s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.251s
  Precision update:                                    0.430s
  ARG update:                                         11.529s

Length of refined path (in blocks):                  130300 (count: 1587, min: 64, max: 145, avg: 82.10)
Number of affected states:                            28403 (count: 1587, min: 1, max: 144, avg: 17.90)
Length (states) of path with itp 'true':             100310 (count: 1587, min: 0, max: 84, avg: 63.21)
Length (states) of path with itp non-trivial itp:     28403 (count: 1587, min: 1, max: 144, avg: 17.90)
Length (states) of path with itp 'false':              1587 (count: 1587, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1587, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           26816 (count: 1587, min: 0, max: 143, avg: 16.90)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1587
Number of successful refinements:     1587
Number of failed refinements:         0
Max. size of reached set before ref.: 45922
Max. size of reached set after ref.:  13142
Avg. size of reached set before ref.: 6590.16
Avg. size of reached set after ref.:  2960.73

Total time for CEGAR algorithm:     893.876s
Time for refinements:                62.265s
Average time for refinement:          0.039s
Max time for refinement:              1.687s

Code Coverage
-----------------------------
  Function coverage:      0.454
  Visited lines:          2167
  Total lines:            3323
  Line coverage:          0.652
  Visited conditions:     487
  Total conditions:       936
  Condition coverage:     0.520

CPAchecker general statistics
-----------------------------
Number of program locations:     4751
Number of CFA edges:             5408
Number of relevant variables:    765
Number of functions:             207
Number of loops:                 25
Size of reached set:             15207
  Number of reached locations:   1286 (27%)
    Avg states per location:     11
    Max states per location:     135 (at node N187)
  Number of reached functions:   94 (45%)
  Number of partitions:          15148
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N3045 (before line 7683), Function main called from node N2946, stack depth 1 [3b4d50b], stack [main]])
  Number of target states:       0
  Size of final wait list        294

Time for analysis setup:          6.351s
  Time for loading CPAs:          0.985s
  Time for loading parser:        0.726s
  Time for CFA construction:      4.475s
    Time for parsing file(s):     1.117s
    Time for AST to CFA:          1.594s
    Time for CFA sanity check:    0.421s
    Time for post-processing:     1.205s
      Time for var class.:        0.502s
Time for Analysis:              893.876s
CPU time for analysis:          893.790s
Total time for CPAchecker:      900.233s
Total CPU time for CPAchecker:  900.140s
Time for statistics:              0.313s

Time for Garbage Collector:      34.489s (in 952 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                895MB (   854 MiB) max;    362MB (   345 MiB) avg;    900MB (   858 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           919MB (   877 MiB) max;    542MB (   516 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8286MB (  7902 MiB) max;   8168MB (  7790 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
