scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--rapidio--rapidio.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_it5u8foh/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 2797: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 2800: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 2806: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6002;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6002;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6002;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6002;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3949: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4715: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6182: Function pointer *(mport->ops->lcread) with type int (*)(struct rio_mport *, int, u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6204: Function pointer *(mport->ops->lcread) with type int (*)(struct rio_mport *, int, u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6160: Function pointer *(mport->ops->lcread) with type int (*)(struct rio_mport *, int, u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6238: Function pointer *(mport->ops->lcwrite) with type int (*)(struct rio_mport *, int, u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6257: Function pointer *(mport->ops->lcwrite) with type int (*)(struct rio_mport *, int, u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6219: Function pointer *(mport->ops->lcwrite) with type int (*)(struct rio_mport *, int, u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3106: Function pointer *(chan->device->device_prep_slave_sg) with type struct dma_async_tx_descriptor *(*)(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction , unsigned long, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6725: Function pointer *(rdrv->probe) with type int (*)(struct rio_dev *, const struct rio_device_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4338: Function pointer *(((struct rio_switch *)(&(rdev->rswitch)))->ops->em_handle) with type int (*)(struct rio_dev *, u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4288: Function pointer *(rdev->pwcback) with type int (*)(struct rio_dev *, union rio_pw_msg *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6358-6359: Function pointer *(mport->ops->cread) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6382-6383: Function pointer *(mport->ops->cread) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6334-6335: Function pointer *(mport->ops->cread) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6515: Function pointer *(mport->ops->dsend) with type int (*)(struct rio_mport *, int, u16 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6420-6421: Function pointer *(mport->ops->cwrite) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6441-6442: Function pointer *(mport->ops->cwrite) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6399-6400: Function pointer *(mport->ops->cwrite) with type int (*)(struct rio_mport *, int, u16 , u8 , u32 , int, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3365: Function pointer *(mport->ops->close_inb_mbox) with type void (*)(struct rio_mport *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3418: Function pointer *(mport->ops->close_outb_mbox) with type void (*)(struct rio_mport *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3350: Function pointer *(mport->ops->open_inb_mbox) with type int (*)(struct rio_mport *, void *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3403: Function pointer *(mport->ops->open_outb_mbox) with type int (*)(struct rio_mport *, void *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4820-4821: Function pointer *(ops->add_entry) with type int (*)(struct rio_mport *, u16 , u8 , u16 , u16 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4931-4932: Function pointer *(ops->clr_table) with type int (*)(struct rio_mport *, u16 , u8 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4877-4878: Function pointer *(ops->get_entry) with type int (*)(struct rio_mport *, u16 , u8 , u16 , u16 , u8 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_module_exit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6753: Ignoring function call through function pointer *(rdrv->remove): (*(rdrv->remove))(rdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_uevent_var to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bus_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8530: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function put_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8430: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8396: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8362: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8328: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8260: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8226: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8192: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8124: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8090: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8056: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6725: Ignoring function call through function pointer *(rdrv->probe): error = (*(rdrv->probe))(rdev, id); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8532: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8499: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(160UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8466: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8432: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8398: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8364: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8296: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8262: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8228: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8194: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8160: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8126: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8058: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8534: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8468: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8434: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8400: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8366: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8332: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8298: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8264: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8230: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8196: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8040: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(72UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8162: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8128: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8094: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8060: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function kstrtoll to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6382-6383: Ignoring function call through function pointer *(mport->ops->cread): res = (*(mport->ops->cread))(mport, __CPAchecker_TMP_0, (int)destid, (int)hopcount, offset, 4, &data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6441-6442: Ignoring function call through function pointer *(mport->ops->cwrite): res = (*(mport->ops->cwrite))(mport, __CPAchecker_TMP_0, (int)destid, (int)hopcount, offset, 4, value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            8562 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  7184 (84%)
  Because of loop head:            1351 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         27 (0%)
  Times precision was empty:       5204 (61%)
  Times precision was {false}:     780 (9%)
  Times result was cached:         2360 (28%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      218 (3%)
  Times result was 'false':        592 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         8526
  BDD entailment checks:           1642
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       145
Number of predicates discovered:          22
Number of abstraction locations:          43
Max number of predicates per location:    20
Avg number of predicates per location:    2
Total predicates per abstraction:         7447
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 7.46
Number of irrelevant predicates:          6052 (81%)
Number of preds handled by boolean abs:   949 (13%)
  Total number of models for allsat:      1482947
  Max number of models for allsat:        393216
  Avg number of models for allsat:        6802.51

Time for post operator:                  5.525s
  Time for path formula creation:        5.399s
Time for strengthen operator:            0.167s
Time for prec operator:                884.255s
  Time for abstraction:                883.739s (Max:   301.667s, Count: 8562)
    Boolean abstraction:               880.821s
    Solving time:                        0.786s (Max:     0.021s)
    Model enumeration time:            819.758s
    Time for BDD construction:          60.563s (Max:    15.082s)
Time for merge operator:                 0.481s
Time for coverage check:                 0.052s
  Time for BDD entailment checks:        0.040s
Total time for SMT solver (w/o itp):   820.544s

Number of path formula cache hits:   42910 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.507s

Total number of created targets for pointer analysis: 4
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               234587
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1439 (count: 12844, min: 0, max: 124, avg: 0.11)
Time for BDD node cleanup:                             0.027s
Time for BDD garbage collection:                       0.319s (in 111 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.488s
Automaton transfers with branching:                0
Automaton transfer successors:                        61153 (count: 61153, min: 1, max: 1, avg: 1.00) [1 x 61153]

CPA algorithm statistics
------------------------
Number of iterations:            35972
Max size of waitlist:            157
Average size of waitlist:        43
Number of computed successors:   42606
Max successors for one state:    2
Number of times merged:          3442
Number of times stopped:         4590
Number of times breaked:         27

Total time for CPA algorithm:       895.033s (Max:   505.738s)
  Time for choose from waitlist:      0.094s
  Time for precision adjustment:    885.163s
  Time for transfer relation:         7.935s
  Time for merge operator:            0.705s
  Time for stop operator:             0.213s
  Time for adding to reached set:     0.239s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   27
Avg. length of target path (in blocks):                 620 (count: 27, min: 14, max: 34, avg: 22.96)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.002s
  Counterexample analysis:                             0.707s (Max:     0.043s, Calls: 27)
    Refinement sat check:                              0.517s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.039s
  Precision update:                                    0.026s
  ARG update:                                          0.183s

Length of refined path (in blocks):                     400 (count: 27, min: 12, max: 33, avg: 14.81)
Number of affected states:                              139 (count: 27, min: 1, max: 32, avg: 5.15)
Length (states) of path with itp 'true':                234 (count: 27, min: 0, max: 19, avg: 8.67)
Length (states) of path with itp non-trivial itp:       139 (count: 27, min: 1, max: 32, avg: 5.15)
Length (states) of path with itp 'false':                27 (count: 27, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 27, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             112 (count: 27, min: 0, max: 31, avg: 4.15)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                27
Number of successful refinements:     27
Number of failed refinements:         0
Max. size of reached set before ref.: 2756
Max. size of reached set after ref.:  283
Avg. size of reached set before ref.: 1365.59
Avg. size of reached set after ref.:  47.96

Total time for CEGAR algorithm:     896.161s
Time for refinements:                 1.128s
Average time for refinement:          0.041s
Max time for refinement:              0.105s

Code Coverage
-----------------------------
  Function coverage:      0.159
  Visited lines:          1265
  Total lines:            3544
  Line coverage:          0.357
  Visited conditions:     196
  Total conditions:       902
  Condition coverage:     0.217

CPAchecker general statistics
-----------------------------
Number of program locations:     5030
Number of CFA edges:             5641
Number of relevant variables:    792
Number of functions:             208
Number of loops:                 28
Size of reached set:             1848
  Number of reached locations:   445 (9%)
    Avg states per location:     4
    Max states per location:     36 (at node N140)
  Number of reached functions:   33 (16%)
  Number of partitions:          1841
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N2949 (before line 7024), Function main called from node N2904, stack depth 1 [6dd36ab6], stack [main]])
  Number of target states:       0
  Size of final wait list        153

Time for analysis setup:          6.470s
  Time for loading CPAs:          1.030s
  Time for loading parser:        0.637s
  Time for CFA construction:      4.650s
    Time for parsing file(s):     1.120s
    Time for AST to CFA:          1.636s
    Time for CFA sanity check:    0.386s
    Time for post-processing:     1.352s
      Time for var class.:        0.611s
Time for Analysis:              896.161s
CPU time for analysis:          896.100s
Total time for CPAchecker:      902.643s
Total CPU time for CPAchecker:  902.570s
Time for statistics:              0.123s

Time for Garbage Collector:       1.333s (in 389 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 85MB (    81 MiB) max;     65MB (    62 MiB) avg;     89MB (    85 MiB) peak
Used non-heap memory:             48MB (    45 MiB) max;     45MB (    43 MiB) avg;     48MB (    46 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        49MB (    47 MiB) max;     49MB (    47 MiB) avg
Total process virtual memory:   8162MB (  7784 MiB) max;   8110MB (  7735 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
