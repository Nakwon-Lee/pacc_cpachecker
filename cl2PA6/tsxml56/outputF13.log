scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--mmc--host--rtsx_pci_sdmmc.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3_c7_o4t/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5997: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_dma_unmap_sg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_start_run to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_card_exist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_dma_map_sg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_card_exclusive_check to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_add_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_send_cmd to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_card_power_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_card_pull_ctl_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_card_power_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_write_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_switch_clock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_switch_output_voltage to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_read_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_remove_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_free_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_complete_unfinished_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_request_done to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_alloc_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mmc_add_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_read_ppbuf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_copy_to_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_send_cmd_no_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtsx_pci_dma_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_copy_from_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2982422 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2962799 (99%)
  Because of loop head:            19511 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         112 (0%)
  Times precision was empty:       305965 (10%)
  Times precision was {false}:     1335 (0%)
  Times result was cached:         2673522 (90%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1600 (0%)
  Times result was 'false':        46876 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         3006071
  BDD entailment checks:           545659
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       33
Number of predicates discovered:          7
Number of abstraction locations:          165
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         7120104
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 2425.93
Number of irrelevant predicates:          4525292 (64%)
Number of preds handled by boolean abs:   2509 (0%)
  Total number of models for allsat:      1615
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.01

Time for post operator:                 93.115s
  Time for path formula creation:       85.442s
Time for strengthen operator:           14.904s
Time for prec operator:                342.847s
  Time for abstraction:                308.026s (Max:     3.190s, Count: 2982422)
    Boolean abstraction:                 1.170s
    Solving time:                        1.619s (Max:     0.014s)
    Model enumeration time:              0.130s
    Time for BDD construction:           0.074s (Max:     0.007s)
Time for merge operator:                 6.610s
Time for coverage check:                 1.108s
  Time for BDD entailment checks:        0.686s
Total time for SMT solver (w/o itp):     1.749s

Number of path formula cache hits:   23646729 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    29.854s

Total number of created targets for pointer analysis: 4310
   Number of created targets for uf: *(void)* is 81
   Number of created targets for uf: *unsigned_int is 409


Number of BDD nodes:                               316
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3295 (count: 875820, min: 0, max: 168, avg: 0.00)
Time for BDD node cleanup:                             0.202s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 26.644s
  Time for transition matches:                        14.853s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                     20122651 (count: 20122651, min: 1, max: 1, avg: 1.00) [1 x 20122651]

CPA algorithm statistics
------------------------
Number of iterations:            11810836
Max size of waitlist:            6197
Average size of waitlist:        2372
Number of computed successors:   13745968
Max successors for one state:    2
Number of times merged:          1230206
Number of times stopped:         1766496
Number of times breaked:         112

Total time for CPA algorithm:       847.854s (Max:    55.010s)
  Time for choose from waitlist:      6.429s
  Time for precision adjustment:    453.282s
  Time for transfer relation:       291.781s
  Time for merge operator:           22.253s
  Time for stop operator:            14.591s
  Time for adding to reached set:    26.446s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   112
Avg. length of target path (in blocks):                6727 (count: 112, min: 24, max: 83, avg: 60.06)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  34.459s
  Counterexample analysis:                             2.057s (Max:     0.039s, Calls: 112)
    Refinement sat check:                              1.344s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.006s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.040s
  Precision update:                                    0.061s
  ARG update:                                         32.183s

Length of refined path (in blocks):                    4545 (count: 112, min: 10, max: 78, avg: 40.58)
Number of affected states:                             3829 (count: 112, min: 0, max: 77, avg: 34.19)
Length (states) of path with itp 'true':                604 (count: 112, min: 0, max: 29, avg: 5.39)
Length (states) of path with itp non-trivial itp:      3829 (count: 112, min: 0, max: 77, avg: 34.19)
Length (states) of path with itp 'false':               112 (count: 112, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 112, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3718 (count: 112, min: 0, max: 76, avg: 33.20)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                112
Number of successful refinements:     112
Number of failed refinements:         0
Max. size of reached set before ref.: 725556
Max. size of reached set after ref.:  718019
Avg. size of reached set before ref.: 133900.95
Avg. size of reached set after ref.:  32072.52

Total time for CEGAR algorithm:     894.455s
Time for refinements:                43.652s
Average time for refinement:          0.389s
Max time for refinement:              2.743s

Code Coverage
-----------------------------
  Function coverage:      0.745
  Visited lines:          2110
  Total lines:            2459
  Line coverage:          0.858
  Visited conditions:     498
  Total conditions:       596
  Condition coverage:     0.836

CPAchecker general statistics
-----------------------------
Number of program locations:     3315
Number of CFA edges:             3699
Number of relevant variables:    439
Number of functions:             110
Number of loops:                 12
Size of reached set:             527813
  Number of reached locations:   1256 (38%)
    Avg states per location:     420
    Max states per location:     10830 (at node N91)
  Number of reached functions:   82 (75%)
  Number of partitions:          527798
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N2370 (before line 6752), Function main called from node N2351, stack depth 1 [36dfbdaf], stack [main]])
  Number of target states:       0
  Size of final wait list        4542

Time for analysis setup:          5.826s
  Time for loading CPAs:          1.273s
  Time for loading parser:        0.680s
  Time for CFA construction:      3.698s
    Time for parsing file(s):     1.033s
    Time for AST to CFA:          1.255s
    Time for CFA sanity check:    0.264s
    Time for post-processing:     0.970s
      Time for var class.:        0.416s
Time for Analysis:              894.455s
CPU time for analysis:          894.380s
Total time for CPAchecker:      900.288s
Total CPU time for CPAchecker:  900.200s
Time for statistics:              3.995s

Time for Garbage Collector:     139.607s (in 873 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1487MB (  1418 MiB) max;    765MB (   730 MiB) avg;   1520MB (  1449 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1503MB (  1434 MiB) max;   1130MB (  1078 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8084MB (  7709 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
