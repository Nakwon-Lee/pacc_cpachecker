scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--infiniband--hw--mlx5--mlx5_ib.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_x21llz2u/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5679: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5682: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5685: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9063: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11186: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11444: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12309: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

line 16548: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17107: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18050: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21569: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21872: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 22613: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24013: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 18341-18342: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18461: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18408: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18441: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18375: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9460: Function pointer *(ibcq->event_handler) with type void (*)(struct ib_event *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11919: Function pointer *(ibqp->event_handler) with type void (*)(struct ib_event *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17184: Function pointer *(ibsrq->event_handler) with type void (*)(struct ib_event *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8621: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8623: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8625: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8631: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8633: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8635: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8637: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8639: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8641: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8643: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8645: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8647: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8649: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8651: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8653: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___15 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8655: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8657: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___17 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8659: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___18 = ldv_init_zalloc(1416UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mlx5_unregister_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_acquire to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function radix_tree_lookup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_umem_odp_map_dma_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __srcu_read_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_zeroed_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 18341-18342: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18461: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18408: Ignoring function call through function pointer *(ops->sync_single_for_cpu): (*(ops->sync_single_for_cpu))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_sync_single_for_cpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18375: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18441: Ignoring function call through function pointer *(ops->sync_single_for_device): (*(ops->sync_single_for_device))(dev, addr, size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_sync_single_for_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18476: Ignoring function call through function pointer *(qp->device->post_send): tmp = (*(qp->device->post_send))(qp, send_wr, bad_send_wr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2295237 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2178978 (95%)
  Because of loop head:            115246 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1013 (0%)
  Times precision was empty:       362532 (16%)
  Times precision was {false}:     3638 (0%)
  Times result was cached:         1926693 (84%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2374 (0%)
  Times result was 'false':        4374 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1258167
  BDD entailment checks:           362959
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       100
Number of predicates discovered:          8
Number of abstraction locations:          403
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         3292422
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 547.64
Number of irrelevant predicates:          2562690 (78%)
Number of preds handled by boolean abs:   2928 (0%)
  Total number of models for allsat:      2382
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 97.727s
  Time for path formula creation:       94.331s
Time for strengthen operator:            9.177s
Time for prec operator:                184.925s
  Time for abstraction:                156.720s (Max:     0.214s, Count: 2295237)
    Boolean abstraction:                 2.870s
    Solving time:                        6.732s (Max:     0.131s)
    Model enumeration time:              0.179s
    Time for BDD construction:           0.113s (Max:     0.010s)
Time for merge operator:                 5.329s
Time for coverage check:                 0.508s
  Time for BDD entailment checks:        0.319s
Total time for SMT solver (w/o itp):     6.911s

Number of path formula cache hits:   12546188 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    42.416s

Total number of created targets for pointer analysis: 85863
   Number of created targets for uf: *(void)* is 58
   Number of created targets for uf: *enum_ib_wc_status is 22
   Number of created targets for uf: *signed_int is 45
   Number of created targets for uf: *unsigned_char is 107
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *(struct_ib_send_wr)* is 51
   Number of created targets for uf: *(struct_mlx5_wqe_ctrl_seg)* is 124
   Number of created targets for uf: *unsigned_long_long_int is 1677
   Number of created targets for uf: *unsigned_int is 22


Number of BDD nodes:                               263
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4854 (count: 758569, min: 0, max: 222, avg: 0.01)
Time for BDD node cleanup:                             0.119s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 12.210s
  Time for transition matches:                         7.055s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                     10271519 (count: 10271519, min: 1, max: 1, avg: 1.00) [1 x 10271519]

CPA algorithm statistics
------------------------
Number of iterations:            7025395
Max size of waitlist:            74
Average size of waitlist:        50
Number of computed successors:   7744281
Max successors for one state:    2
Number of times merged:          447604
Number of times stopped:         709590
Number of times breaked:         1013

Total time for CPA algorithm:       601.270s (Max:     4.331s)
  Time for choose from waitlist:      2.926s
  Time for precision adjustment:    230.137s
  Time for transfer relation:       321.326s
  Time for merge operator:           10.469s
  Time for stop operator:             8.007s
  Time for adding to reached set:    10.906s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1013
Avg. length of target path (in blocks):              215742 (count: 1013, min: 80, max: 305, avg: 212.97)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 279.836s
  Counterexample analysis:                           267.228s (Max:     0.480s, Calls: 1013)
    Refinement sat check:                            192.474s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.096s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.832s
  Precision update:                                    0.759s
  ARG update:                                          9.999s

Length of refined path (in blocks):                  213781 (count: 1013, min: 79, max: 304, avg: 211.04)
Number of affected states:                           125700 (count: 1013, min: 6, max: 216, avg: 124.09)
Length (states) of path with itp 'true':              87068 (count: 1013, min: 0, max: 162, avg: 85.95)
Length (states) of path with itp non-trivial itp:    125700 (count: 1013, min: 6, max: 216, avg: 124.09)
Length (states) of path with itp 'false':              1013 (count: 1013, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1013, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          124687 (count: 1013, min: 5, max: 215, avg: 123.09)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1013
Number of successful refinements:     1013
Number of failed refinements:         0
Max. size of reached set before ref.: 15049
Max. size of reached set after ref.:  14605
Avg. size of reached set before ref.: 9839.48
Avg. size of reached set after ref.:  2909.27

Total time for CEGAR algorithm:     890.282s
Time for refinements:               287.293s
Average time for refinement:          0.283s
Max time for refinement:              0.503s

Code Coverage
-----------------------------
  Function coverage:      0.186
  Visited lines:          2823
  Total lines:            12331
  Line coverage:          0.229
  Visited conditions:     512
  Total conditions:       3374
  Condition coverage:     0.152

CPAchecker general statistics
-----------------------------
Number of program locations:     17031
Number of CFA edges:             20023
Number of relevant variables:    3129
Number of functions:             688
Number of loops:                 60
Size of reached set:             10016
  Number of reached locations:   1639 (10%)
    Avg states per location:     6
    Max states per location:     212 (at node N144)
  Number of reached functions:   128 (19%)
  Number of partitions:          9974
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N12067 (before line 19817), Function mlx5_ib_update_mtt called from node N14736, stack depth 11 [3ddd2dc4], stack [main, mlx5_ib_cleanup, mlx5_ib_odp_cleanup, ldv_destroy_workqueue_294, call_and_disable_all_3, call_and_disable_work_3, mlx5_ib_qp_pfault_action, mlx5_ib_mr_pfault_handler, mlx5_ib_mr_rdma_pfault_handler, pagefault_single_data_segment, mlx5_ib_update_mtt]])
  Number of target states:       0
  Size of final wait list        45

Time for analysis setup:          9.977s
  Time for loading CPAs:          1.064s
  Time for loading parser:        0.686s
  Time for CFA construction:      8.088s
    Time for parsing file(s):     1.539s
    Time for AST to CFA:          3.226s
    Time for CFA sanity check:    0.794s
    Time for post-processing:     2.299s
      Time for var class.:        1.291s
Time for Analysis:              890.282s
CPU time for analysis:          890.190s
Total time for CPAchecker:      900.265s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.372s

Time for Garbage Collector:      19.034s (in 1259 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                364MB (   347 MiB) max;    251MB (   239 MiB) avg;    369MB (   352 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           426MB (   406 MiB) max;    382MB (   364 MiB) avg
Allocated non-heap memory:        45MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8219MB (  7839 MiB) max;   8156MB (  7779 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
