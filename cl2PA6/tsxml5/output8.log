scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--firewire--firewire-ohci.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_el11q714/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 9721: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6137: Function pointer *(packet->callback) with type void (*)(struct fw_packet *, struct fw_card *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4237: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4170-4171: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4422: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4300: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4333: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4367: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4401-4402: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4267: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4204: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7526-7527: Function pointer *(ctx->base.callback.mc) with type void (*)(struct fw_iso_context *, dma_addr_t , void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7375-7376: Function pointer *(ctx->base.callback.sc) with type void (*)(struct fw_iso_context *, u32 , size_t , void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5975: Function pointer *(packet->callback) with type void (*)(struct fw_packet *, struct fw_card *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7509-7510: Function pointer *(ctx->base.callback.mc) with type void (*)(struct fw_iso_context *, dma_addr_t , void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6111: Function pointer *(packet->callback) with type void (*)(struct fw_packet *, struct fw_card *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6083: Function pointer *(packet->callback) with type void (*)(struct fw_packet *, struct fw_card *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7176: Function pointer *(packet->callback) with type void (*)(struct fw_packet *, struct fw_card *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 9201: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_card_initialize to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_alloc_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_pages_current to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vunmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4267: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4237: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, page, offset, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4422: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dma_free_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_msi_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_card_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msi to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __memmove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5544: Ignoring function call through function pointer *(ctx->callback): tmp = (*(ctx->callback))(ctx, d, last); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4204: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5975: Ignoring function call through function pointer *(packet->callback): (*(packet->callback))(packet, &(ohci->card), packet->ack); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4367: Ignoring function call through function pointer *(ops->sync_single_for_cpu): (*(ops->sync_single_for_cpu))(dev, addr + ((unsigned long long)offset), size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_sync_single_range_for_cpu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7375-7376: Ignoring function call through function pointer *(ctx->base.callback.sc): (*(ctx->base.callback.sc))(&(ctx->base), __CPAchecker_TMP_0, ctx->header_length, ctx->header, ctx->base.callback_data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7509-7510: Ignoring function call through function pointer *(ctx->base.callback.mc): (*(ctx->base.callback.mc))(&(ctx->base), (dma_addr_t )(buffer_dma + completed), ctx->base.callback_data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function fw_core_handle_bus_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_seconds to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_card to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7526-7527: Ignoring function call through function pointer *(ctx->base.callback.mc): (*(ctx->base.callback.mc))(&(ctx->base), (dma_addr_t )((ctx->mc_buffer_bus) + __CPAchecker_TMP_3), ctx->base.callback_data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __printk_ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 4401-4402: Ignoring function call through function pointer *(ops->sync_single_for_device): (*(ops->sync_single_for_device))(dev, addr + ((unsigned long long)offset), size, dir); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_sync_single_range_for_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_choose_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7176: Ignoring function call through function pointer *(packet->callback): (*(packet->callback))(packet, &(ohci->card), packet->ack); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function fw_schedule_bus_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            19140 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  16941 (89%)
  Because of loop head:            2041 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         158 (1%)
  Times precision was empty:       11765 (61%)
  Times precision was {false}:     155 (1%)
  Times result was cached:         7060 (37%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      160 (1%)
  Times result was 'false':        169 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         12776
  BDD entailment checks:           2940
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       85
Number of predicates discovered:          5
Number of abstraction locations:          61
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         9128
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 28.98
Number of irrelevant predicates:          4327 (47%)
Number of preds handled by boolean abs:   187 (2%)
  Total number of models for allsat:      158
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.99

Time for post operator:                  5.708s
  Time for path formula creation:        5.556s
Time for strengthen operator:            0.187s
Time for prec operator:                  2.725s
  Time for abstraction:                  2.085s (Max:     0.021s, Count: 19140)
    Boolean abstraction:                 0.175s
    Solving time:                        0.199s (Max:     0.014s)
    Model enumeration time:              0.007s
    Time for BDD construction:           0.032s (Max:     0.008s)
Time for merge operator:                 0.304s
Time for coverage check:                 0.029s
  Time for BDD entailment checks:        0.026s
Total time for SMT solver (w/o itp):     0.206s

Number of path formula cache hits:   80754 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.884s

Total number of created targets for pointer analysis: 1360
   Number of created targets for uf: *(void)* is 6
   Number of created targets for uf: *(struct_page)* is 55
   Number of created targets for uf: *(unsigned_int)* is 2
   Number of created targets for uf: *(struct_descriptor_buffer)* is 4
   Number of created targets for uf: *unsigned_short_int is 10
   Number of created targets for uf: *signed_int is 10
   Number of created targets for uf: *(char)* is 2
   Number of created targets for uf: *unsigned_char is 13
   Number of created targets for uf: *(struct_list_head)* is 11
   Number of created targets for uf: *(struct_descriptor)* is 6
   Number of created targets for uf: *(struct_iso_context)* is 2
   Number of created targets for uf: *(struct_fw_ohci)* is 4
   Number of created targets for uf: *unsigned_long_long_int is 6
   Number of created targets for uf: *unsigned_int is 5
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_context)*],_Parameter_2_type:_[(struct_descriptor)*],_Parameter_3_type:_[(struct_descriptor)*],_VarArgs:_false)* is 4


Number of BDD nodes:                               206
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         349 (count: 16465, min: 0, max: 112, avg: 0.02)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.491s
Automaton transfers with branching:                0
Automaton transfer successors:                        90144 (count: 90144, min: 1, max: 1, avg: 1.00) [1 x 90144]

CPA algorithm statistics
------------------------
Number of iterations:            63529
Max size of waitlist:            78
Average size of waitlist:        55
Number of computed successors:   72034
Max successors for one state:    2
Number of times merged:          4918
Number of times stopped:         7726
Number of times breaked:         158

Total time for CPA algorithm:        14.673s (Max:     3.307s)
  Time for choose from waitlist:      0.199s
  Time for precision adjustment:      3.956s
  Time for transfer relation:         8.476s
  Time for merge operator:            0.515s
  Time for stop operator:             0.277s
  Time for adding to reached set:     0.394s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   158
Avg. length of target path (in blocks):               19282 (count: 158, min: 60, max: 145, avg: 122.04)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   5.990s
  Counterexample analysis:                             5.307s (Max:     0.078s, Calls: 158)
    Refinement sat check:                              2.756s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.097s
  Precision update:                                    0.098s
  ARG update:                                          0.302s

Length of refined path (in blocks):                   18954 (count: 158, min: 54, max: 144, avg: 119.96)
Number of affected states:                             2148 (count: 158, min: 3, max: 78, avg: 13.59)
Length (states) of path with itp 'true':              16648 (count: 158, min: 0, max: 129, avg: 105.37)
Length (states) of path with itp non-trivial itp:      2148 (count: 158, min: 3, max: 78, avg: 13.59)
Length (states) of path with itp 'false':               158 (count: 158, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 158, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1990 (count: 158, min: 2, max: 77, avg: 12.59)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                158
Number of successful refinements:     158
Number of failed refinements:         0
Max. size of reached set before ref.: 20054
Max. size of reached set after ref.:  10263
Avg. size of reached set before ref.: 6574.63
Avg. size of reached set after ref.:  6184.44

Total time for CEGAR algorithm:      22.789s
Time for refinements:                 7.318s
Average time for refinement:          0.046s
Max time for refinement:              0.177s

Code Coverage
-----------------------------
  Function coverage:      0.321
  Visited lines:          1758
  Total lines:            4396
  Line coverage:          0.400
  Visited conditions:     429
  Total conditions:       1382
  Condition coverage:     0.310

CPAchecker general statistics
-----------------------------
Number of program locations:     6314
Number of CFA edges:             7402
Number of relevant variables:    971
Number of functions:             249
Number of loops:                 51
Size of reached set:             2488
  Number of reached locations:   1076 (17%)
    Avg states per location:     2
    Max states per location:     29 (at node N146)
  Number of reached functions:   80 (32%)
  Number of partitions:          2488
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        57

Time for analysis setup:          6.962s
  Time for loading CPAs:          1.146s
  Time for loading parser:        0.705s
  Time for CFA construction:      4.909s
    Time for parsing file(s):     1.165s
    Time for AST to CFA:          1.743s
    Time for CFA sanity check:    0.472s
    Time for post-processing:     1.366s
      Time for var class.:        0.661s
Time for Analysis:               22.790s
CPU time for analysis:           22.800s
Total time for CPAchecker:       29.762s
Total CPU time for CPAchecker:   29.750s
Time for statistics:              0.156s

Time for Garbage Collector:       0.798s (in 45 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                102MB (    97 MiB) max;     56MB (    54 MiB) avg;    107MB (   102 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     35MB (    33 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
