scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--scsi--bfa--bfa.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_u0rrdrju/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 12850: Dereferencing of non-pointer type bfa_msix_handler_t  in expression *(bfad->bfa.msix.handler[(int )vec->msix.entry]) (ASTConverter.convert, WARNING)

line 14653: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14992: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 14995: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 14998: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 15507: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 15512: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 15517: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_48405;
  case 2UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_48405;
  case 4UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_48405;
  case 8UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_48405;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16961: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 16966: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 16971: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_48775;
  case 2UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_48775;
  case 4UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_48775;
  case 8UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_48775;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17003: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 17008: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 17013: Dead code detected: tmp___7 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___5 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___5->state): : "memory",
                         "cc");
    goto ldv_48786;
    case 2UL:
    tmp___6 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___6->state): : "memory",
                         "cc");
    goto ldv_48786;
    case 4UL:
    tmp___7 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___7->state): : "memory",
                         "cc");
    goto ldv_48786;
    case 8UL:
    tmp___8 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___8->state): : "memory",
                         "cc");
    goto ldv_48786;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 17041: Dead code detected: tmp___10 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 17046: Dead code detected: tmp___11 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 17051: Dead code detected: tmp___12 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      tmp___10 = get_current();
      __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___10->state): : "memory",
                           "cc");
      goto ldv_48797;
      case 2UL:
      tmp___11 = get_current();
      __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___11->state): : "memory",
                           "cc");
      goto ldv_48797;
      case 4UL:
      tmp___12 = get_current();
      __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___12->state): : "memory",
                           "cc");
      goto ldv_48797;
      case 8UL:
      tmp___13 = get_current();
      __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___13->state): : "memory",
                           "cc");
      goto ldv_48797;
      default:
      __xchg_wrong_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 17952: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20248: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21328: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 25868: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 33995: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 34486: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 35606: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 36041: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 36452: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 38402: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 45474: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 49156: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 50217: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 52062: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 53038: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 58605: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 59524: Dereferencing of non-pointer type bfa_isr_func_t  in expression *(bfa_isrs[(int )m->mhdr.msg_class]) (ASTConverter.convert, WARNING)

line 61234: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 70445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 61872: Function pointer *(fcxp->send_cbfn) with type void (*)(void *, struct bfa_fcxp_s *, void *, enum bfa_status , u32 , u32 , struct fchs_s *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28493: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28494: Function pointer *(ioc->ioc_hwif->ioc_set_alt_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28490: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28491: Function pointer *(ioc->ioc_hwif->ioc_set_alt_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28975: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28976: Function pointer *(ioc->ioc_hwif->ioc_set_alt_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 27180: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 27383: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 26857: Function pointer *(iocpf->ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 26858: Function pointer *(iocpf->ioc->ioc_hwif->ioc_set_alt_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 27291: Function pointer *(ioc->ioc_hwif->ioc_set_fwstate) with type void (*)(struct bfa_ioc_s *, enum bfi_ioc_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 31753: Function pointer *(diag->cbfn_beacon) with type void (*)(void *, enum bfa_boolean , enum bfa_boolean ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 13985: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_37 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_38 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_38 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_38 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 20910: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 69835: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 33829: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 70279: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 70205: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_change_queue_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_is_fc_rport to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function do_gettimeofday to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_cmd_get_serial to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_dma_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16859: Ignoring call via function pointer bfad_im_queuecommand_lck::done for which no suitable target was found in line: (*done)(cmnd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16859: Ignoring function call through function pointer *done: (*done)(cmnd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 16848: Ignoring call via function pointer bfad_im_queuecommand_lck::done for which no suitable target was found in line: (*done)(cmnd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16848: Ignoring function call through function pointer *done: (*done)(cmnd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 57697: Ignoring function call through function pointer *(tskim->sm): (*(tskim->sm))((void *)tskim, 7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 59552: Ignoring function call through function pointer *(bfa->iocfc.hwif.hw_reqq_ack): (*(bfa->iocfc.hwif.hw_reqq_ack))(bfa, qid); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 59552: Unsupported feature (recursion): bfa_msix_reqq(bfa, qid); (line was originally pointer call(bfa_msix_reqq) (*(bfa->iocfc.hwif.hw_reqq_ack))(bfa, qid);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            271 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  263 (97%)
  Because of loop head:            8 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       271 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         177
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       259
Number of predicates discovered:          0

Time for post operator:                  2.199s
  Time for path formula creation:        2.160s
Time for strengthen operator:            0.049s
Time for prec operator:                  0.073s
  Time for abstraction:                  0.015s (Max:     0.009s, Count: 271)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.104s
Time for coverage check:                 0.009s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   131 (2%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.981s

Total number of created targets for pointer analysis: 264
   Number of created targets for uf: *signed_int is 79
   Number of created targets for uf: *(struct_list_head)* is 7


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 275, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.099s
Automaton transfers with branching:                0
Automaton transfer successors:                         5657 (count: 5657, min: 1, max: 1, avg: 1.00) [1 x 5657]

CPA algorithm statistics
------------------------
Number of iterations:            946
Max size of waitlist:            165
Average size of waitlist:        67
Number of computed successors:   1199
Max successors for one state:    2
Number of times merged:          87
Number of times stopped:         90
Number of times breaked:         0

Total time for CPA algorithm:         3.226s (Max:     3.226s)
  Time for choose from waitlist:      0.011s
  Time for precision adjustment:      0.194s
  Time for transfer relation:         2.786s
  Time for merge operator:            0.119s
  Time for stop operator:             0.030s
  Time for adding to reached set:     0.030s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.056
  Visited lines:          2479
  Total lines:            35997
  Line coverage:          0.069
  Visited conditions:     490
  Total conditions:       27192
  Condition coverage:     0.018

CPAchecker general statistics
-----------------------------
Number of program locations:     76202
Number of CFA edges:             103105
Number of relevant variables:    9453
Number of functions:             2116
Number of loops:                 235
Size of reached set:             1110
  Number of reached locations:   863 (1%)
    Avg states per location:     1
    Max states per location:     11 (at node N148)
  Number of reached functions:   119 (6%)
  Number of partitions:          1110
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        165

Time for analysis setup:         25.027s
  Time for loading CPAs:          1.384s
  Time for loading parser:        0.680s
  Time for CFA construction:     22.836s
    Time for parsing file(s):     2.916s
    Time for AST to CFA:          7.103s
    Time for CFA sanity check:    1.718s
    Time for post-processing:    10.811s
      Time for var class.:        5.126s
Time for Analysis:                3.226s
CPU time for analysis:            3.230s
Total time for CPAchecker:       28.260s
Total CPU time for CPAchecker:   28.190s
Time for statistics:              0.296s

Time for Garbage Collector:       2.126s (in 59 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                364MB (   347 MiB) max;    181MB (   173 MiB) avg;    378MB (   360 MiB) peak
Used non-heap memory:             45MB (    43 MiB) max;     31MB (    29 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           383MB (   365 MiB) max;    257MB (   245 MiB) avg
Allocated non-heap memory:        46MB (    44 MiB) max;     32MB (    31 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8057MB (  7683 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
