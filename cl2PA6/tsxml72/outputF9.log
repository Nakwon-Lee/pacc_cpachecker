scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--scsi--aic7xxx--aic7xxx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_i4fpox8n/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 19052: Function pointer *(cmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 19693: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(256UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_release_transport to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_cmd_get_serial to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_attach_transport to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sdev_prefix_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcat to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irqsave to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_is_host_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_puts to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_putc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_device_lookup_by_target to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_change_queue_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function panic to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_report_bus_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_display_xfer_agreement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_report_device_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_dv_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtol to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21272: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_remove_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_free_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_host_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7427: Ignoring function call through function pointer *(ahc->bus_intr): (*(ahc->bus_intr))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function kstrdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_get_required_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_dma_unmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19052: Ignoring function call through function pointer *(cmd->scsi_done): (*(cmd->scsi_done))(cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_dma_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_alloc_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sg_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11005: Ignoring function call through function pointer *(ahc->bus_chip_init): error = (*(ahc->bus_chip_init))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13169: Ignoring function call through function pointer *(cur_patch->patch_func): tmp = (*(cur_patch->patch_func))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 13169: Unsupported feature (recursion): tmp = ahc_pci_chip_init(ahc); (line was originally pointer call(ahc_pci_chip_init) tmp = (*(cur_patch->patch_func))(ahc);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            74763 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  70748 (95%)
  Because of loop head:            4008 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7 (0%)
  Times precision was empty:       74102 (99%)
  Times precision was {false}:     59 (0%)
  Times result was cached:         546 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      56 (0%)
  Times result was 'false':        17 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         61107
  BDD entailment checks:           13783
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       105
Number of predicates discovered:          4
Number of abstraction locations:          40
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         716
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 6.23
Number of irrelevant predicates:          538 (75%)
Number of preds handled by boolean abs:   72 (10%)
  Total number of models for allsat:      56
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 52.114s
  Time for path formula creation:       51.831s
Time for strengthen operator:            0.547s
Time for prec operator:                  4.746s
  Time for abstraction:                  2.942s (Max:     0.856s, Count: 74763)
    Boolean abstraction:                 1.275s
    Solving time:                        1.200s (Max:     0.620s)
    Model enumeration time:              0.092s
    Time for BDD construction:           0.009s (Max:     0.007s)
Time for merge operator:                 3.770s
Time for coverage check:                 0.088s
  Time for BDD entailment checks:        0.070s
Total time for SMT solver (w/o itp):     1.292s

Number of path formula cache hits:   346648 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    48.526s

Total number of created targets for pointer analysis: 656842
   Number of created targets for uf: *(struct_pci_dev)* is 2
   Number of created targets for uf: *(unsigned_int)* is 11
   Number of created targets for uf: *(struct_scb)* is 2
   Number of created targets for uf: *(struct_scsi_target)* is 33
   Number of created targets for uf: *unsigned_long_int is 19
   Number of created targets for uf: *unsigned_short_int is 120
   Number of created targets for uf: *(struct_sg_map_node)* is 3
   Number of created targets for uf: *enum_ldv_27764 is 2
   Number of created targets for uf: *signed_int is 359
   Number of created targets for uf: *(char)* is 176
   Number of created targets for uf: *unsigned_char is 10753
   Number of created targets for uf: *(struct_ahc_dma_seg)* is 3
   Number of created targets for uf: *(struct_seeprom_config)* is 2
   Number of created targets for uf: *enum_ldv_27768 is 2
   Number of created targets for uf: *unsigned_long_long_int is 7
   Number of created targets for uf: *unsigned_int is 57
   Number of created targets for uf: *enum_ldv_27770 is 2
   Number of created targets for uf: *char is 23
   Number of created targets for uf: *(struct_ahc_platform_data)* is 2
   Number of created targets for uf: *(struct_ahc_tmode_tstate)* is 2
   Number of created targets for uf: *enum_ldv_27870 is 120
   Number of created targets for uf: *(struct_patch)* is 2


Number of BDD nodes:                               203
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         126 (count: 88529, min: 0, max: 46, avg: 0.00)
Time for BDD node cleanup:                             0.026s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.988s
  Time for transition matches:                         0.553s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       402359 (count: 402359, min: 1, max: 1, avg: 1.00) [1 x 402359]

CPA algorithm statistics
------------------------
Number of iterations:            285956
Max size of waitlist:            169
Average size of waitlist:        68
Number of computed successors:   323777
Max successors for one state:    2
Number of times merged:          23662
Number of times stopped:         37365
Number of times breaked:         7

Total time for CPA algorithm:        92.474s (Max:    41.452s)
  Time for choose from waitlist:      0.273s
  Time for precision adjustment:      8.862s
  Time for transfer relation:        75.405s
  Time for merge operator:            4.405s
  Time for stop operator:             0.710s
  Time for adding to reached set:     0.981s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                 189 (count: 7, min: 22, max: 36, avg: 27.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.879s
  Counterexample analysis:                             3.927s (Max:     0.891s, Calls: 7)
    Refinement sat check:                              3.706s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.025s
  Precision update:                                    0.009s
  ARG update:                                          0.911s

Length of refined path (in blocks):                     174 (count: 7, min: 19, max: 35, avg: 24.86)
Number of affected states:                              110 (count: 7, min: 4, max: 34, avg: 15.71)
Length (states) of path with itp 'true':                 57 (count: 7, min: 0, max: 19, avg: 8.14)
Length (states) of path with itp non-trivial itp:       110 (count: 7, min: 4, max: 34, avg: 15.71)
Length (states) of path with itp 'false':                 7 (count: 7, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 7, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             103 (count: 7, min: 3, max: 33, avg: 14.71)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 38023
Max. size of reached set after ref.:  37974
Avg. size of reached set before ref.: 37957.14
Avg. size of reached set after ref.:  16244.29

Total time for CEGAR algorithm:      97.871s
Time for refinements:                 5.271s
Average time for refinement:          0.753s
Max time for refinement:              1.080s

Code Coverage
-----------------------------
  Function coverage:      0.655
  Visited lines:          5146
  Total lines:            9376
  Line coverage:          0.549
  Visited conditions:     1781
  Total conditions:       3504
  Condition coverage:     0.508

CPAchecker general statistics
-----------------------------
Number of program locations:     14742
Number of CFA edges:             18071
Number of relevant variables:    2867
Number of functions:             397
Number of loops:                 128
Size of reached set:             134406
  Number of reached locations:   5074 (34%)
    Avg states per location:     26
    Max states per location:     2438 (at node N10013)
  Number of reached functions:   260 (65%)
  Number of partitions:          134405
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N12333 (before line 19710), Function main called from node N12298, stack depth 1 [72b60be8], stack [main]])
  Number of target states:       0
  Size of final wait list        169

Time for analysis setup:         10.632s
  Time for loading CPAs:          1.460s
  Time for loading parser:        0.686s
  Time for CFA construction:      8.340s
    Time for parsing file(s):     1.538s
    Time for AST to CFA:          3.180s
    Time for CFA sanity check:    0.975s
    Time for post-processing:     2.513s
      Time for var class.:        1.302s
Time for Analysis:               97.872s
CPU time for analysis:           97.860s
Total time for CPAchecker:      108.511s
Total CPU time for CPAchecker:  108.470s
Time for statistics:              1.549s

Time for Garbage Collector:       5.988s (in 212 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                272MB (   259 MiB) max;    122MB (   117 MiB) avg;    280MB (   267 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     39MB (    37 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           339MB (   323 MiB) max;    190MB (   182 MiB) avg
Allocated non-heap memory:        49MB (    47 MiB) max;     46MB (    44 MiB) avg
Total process virtual memory:   8090MB (  7715 MiB) max;   8083MB (  7708 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
