scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--scsi--aic7xxx--aic7xxx.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zv4px028/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 19052: Function pointer *(cmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 19693: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(256UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_puts to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_putc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_device_lookup_by_target to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcat to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_attach_transport to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtol to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sdev_prefix_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_is_host_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irqsave to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function panic to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_report_bus_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_display_xfer_agreement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_report_device_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scmd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21272: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function scsi_change_queue_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_dv_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_cmd_get_serial to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kstrdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_get_required_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14641: Ignoring function call through function pointer *(entry->setup): error = (*(entry->setup))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_host_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_free_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_slot to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7427: Ignoring function call through function pointer *(ahc->bus_intr): (*(ahc->bus_intr))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function scsi_dma_unmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 19052: Ignoring function call through function pointer *(cmd->scsi_done): (*(cmd->scsi_done))(cmd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_populate_width_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_populate_sync_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_populate_ppr_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11005: Ignoring function call through function pointer *(ahc->bus_chip_init): error = (*(ahc->bus_chip_init))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13169: Ignoring function call through function pointer *(cur_patch->patch_func): tmp = (*(cur_patch->patch_func))(ahc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 13169: Unsupported feature (recursion): tmp = ahc_pci_chip_init(ahc); (line was originally pointer call(ahc_pci_chip_init) tmp = (*(cur_patch->patch_func))(ahc);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            348023 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  303225 (87%)
  Because of loop head:            44795 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3 (0%)
  Times precision was empty:       347879 (100%)
  Times precision was {false}:     40 (0%)
  Times result was cached:         70 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      34 (0%)
  Times result was 'false':        12 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         315746
  BDD entailment checks:           78150
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       105
Number of predicates discovered:          4
Number of abstraction locations:          17
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         213
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 2.88
Number of irrelevant predicates:          147 (69%)
Number of preds handled by boolean abs:   43 (20%)
  Total number of models for allsat:      40
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.18

Time for post operator:                352.786s
  Time for path formula creation:      351.070s
Time for strengthen operator:            2.350s
Time for prec operator:                 12.146s
  Time for abstraction:                  2.325s (Max:     0.872s, Count: 348023)
    Boolean abstraction:                 0.730s
    Solving time:                        0.682s (Max:     0.613s)
    Model enumeration time:              0.046s
    Time for BDD construction:           0.010s (Max:     0.006s)
Time for merge operator:                45.511s
Time for coverage check:                 0.187s
  Time for BDD entailment checks:        0.127s
Total time for SMT solver (w/o itp):     0.728s

Number of path formula cache hits:   183453 (8%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   331.267s

Total number of created targets for pointer analysis: 5066850
   Number of created targets for uf: *(struct_pci_dev)* is 3
   Number of created targets for uf: *(unsigned_char)* is 93
   Number of created targets for uf: *enum_ldv_27714 is 93
   Number of created targets for uf: *(unsigned_int)* is 61
   Number of created targets for uf: *(struct_scb)* is 3
   Number of created targets for uf: *unsigned_long_int is 87
   Number of created targets for uf: *unsigned_short_int is 3
   Number of created targets for uf: *enum_ldv_27764 is 3
   Number of created targets for uf: *(char)* is 1111
   Number of created targets for uf: *signed_int is 4556
   Number of created targets for uf: *unsigned_char is 107373
   Number of created targets for uf: *(struct_seeprom_config)* is 3
   Number of created targets for uf: *enum_ldv_27768 is 3
   Number of created targets for uf: *unsigned_long_long_int is 93
   Number of created targets for uf: *unsigned_int is 914
   Number of created targets for uf: *enum_ldv_27770 is 3
   Number of created targets for uf: *char is 49
   Number of created targets for uf: *(struct_ahc_tmode_tstate)* is 8
   Number of created targets for uf: *enum_ldv_27870 is 4
   Number of created targets for uf: *(struct_patch)* is 2


Number of BDD nodes:                               209
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          98 (count: 426455, min: 0, max: 35, avg: 0.00)
Time for BDD node cleanup:                             0.095s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.924s
  Time for transition matches:                         2.112s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      2129898 (count: 2129898, min: 1, max: 1, avg: 1.00) [1 x 2129898]

CPA algorithm statistics
------------------------
Number of iterations:            1443740
Max size of waitlist:            1425
Average size of waitlist:        1198
Number of computed successors:   1642222
Max successors for one state:    2
Number of times merged:          118798
Number of times stopped:         196868
Number of times breaked:         3

Total time for CPA algorithm:       553.907s (Max:   509.665s)
  Time for choose from waitlist:      0.997s
  Time for precision adjustment:     26.364s
  Time for transfer relation:       463.427s
  Time for merge operator:           48.506s
  Time for stop operator:             3.301s
  Time for adding to reached set:     5.061s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                 109 (count: 3, min: 22, max: 62, avg: 36.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.499s
  Counterexample analysis:                             4.104s (Max:     3.097s, Calls: 3)
    Refinement sat check:                              3.958s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.004s
  ARG update:                                          0.377s

Length of refined path (in blocks):                      57 (count: 3, min: 18, max: 21, avg: 19.00)
Number of affected states:                               22 (count: 3, min: 1, max: 20, avg: 7.33)
Length (states) of path with itp 'true':                 32 (count: 3, min: 0, max: 16, avg: 10.67)
Length (states) of path with itp non-trivial itp:        22 (count: 3, min: 1, max: 20, avg: 7.33)
Length (states) of path with itp 'false':                 3 (count: 3, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 3, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              19 (count: 3, min: 0, max: 19, avg: 6.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 27580
Max. size of reached set after ref.:  45
Avg. size of reached set before ref.: 20391.67
Avg. size of reached set after ref.:  31.00

Total time for CEGAR algorithm:     558.568s
Time for refinements:                 4.661s
Average time for refinement:          1.553s
Max time for refinement:              3.219s

Code Coverage
-----------------------------
  Function coverage:      0.741
  Visited lines:          6318
  Total lines:            9376
  Line coverage:          0.674
  Visited conditions:     2229
  Total conditions:       3504
  Condition coverage:     0.636

CPAchecker general statistics
-----------------------------
Number of program locations:     14742
Number of CFA edges:             18071
Number of relevant variables:    2867
Number of functions:             397
Number of loops:                 128
Size of reached set:             1384261
  Size of final wait list        1324

Time for analysis setup:         10.530s
  Time for loading CPAs:          1.425s
  Time for loading parser:        0.724s
  Time for CFA construction:      8.201s
    Time for parsing file(s):     1.570s
    Time for AST to CFA:          2.933s
    Time for CFA sanity check:    0.869s
    Time for post-processing:     2.702s
      Time for var class.:        1.326s
Time for Analysis:              558.569s
CPU time for analysis:          558.550s
Total time for CPAchecker:      569.103s
Total CPU time for CPAchecker:  569.050s
Time for statistics:              8.286s

Time for Garbage Collector:      46.503s (in 398 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2591MB (  2471 MiB) max;   1018MB (   971 MiB) avg;   2654MB (  2531 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:          2958MB (  2821 MiB) max;   1508MB (  1438 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8156MB (  7778 MiB) max;   8143MB (  7765 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
