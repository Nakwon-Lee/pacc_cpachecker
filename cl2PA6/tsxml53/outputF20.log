scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--net--ethernet--rocker--rocker.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_im8twoug/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7088: Dead code detected: __ptr = (u8 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 7093: Dead code detected: __ptr___0 = (u16 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 7103: Dead code detected: __ptr___2 = (u64 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5679;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5679;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5679;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5679;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 7782-7783: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7836: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7816: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 17352: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17354: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17356: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17358: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(232UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17360: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17362: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_init_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17366: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17368: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(12UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17372: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_init_zalloc(232UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17374: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17378: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17380: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_init_zalloc(112UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17382: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___15 = ldv_init_zalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17384: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_init_zalloc(24UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17388: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___18 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17390: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___19 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 17392: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_init_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_12 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_bridge_getlink to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_fdb_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_fdb_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_bridge_dellink to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_bridge_setlink to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function switchdev_port_fdb_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_9 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netevent_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdevice_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netevent_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function call_switchdev_notifiers to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function napi_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_master_upper_dev_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_msix_vec_count to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_msix_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prandom_u32 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15210: Ignoring function call through function pointer *(obj->cb): err = (*(obj->cb))(rocker_port->dev, obj); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 15210: Unsupported feature (recursion): err = rocker_port_obj_dump(rocker_port->dev, obj); (line was originally pointer call(rocker_port_obj_dump) err = (*(obj->cb))(rocker_port->dev, obj);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            584391 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  463973 (79%)
  Because of loop head:            120133 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         285 (0%)
  Times precision was empty:       362079 (62%)
  Times precision was {false}:     2395 (0%)
  Times result was cached:         214939 (37%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4978 (1%)
  Times result was 'false':        5830 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         583962
  BDD entailment checks:           193634
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       154
Number of predicates discovered:          9
Number of abstraction locations:          231
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         832544
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 112.92
Number of irrelevant predicates:          429165 (52%)
Number of preds handled by boolean abs:   9691 (1%)
  Total number of models for allsat:      9043
  Max number of models for allsat:        64
  Avg number of models for allsat:        1.82

Time for post operator:                 77.014s
  Time for path formula creation:       74.648s
Time for strengthen operator:            3.045s
Time for prec operator:                 67.433s
  Time for abstraction:                 56.692s (Max:     0.407s, Count: 584391)
    Boolean abstraction:                 7.235s
    Solving time:                        5.582s (Max:     0.090s)
    Model enumeration time:              2.248s
    Time for BDD construction:           0.292s (Max:     0.013s)
Time for merge operator:                 6.231s
Time for coverage check:                 0.282s
  Time for BDD entailment checks:        0.182s
Total time for SMT solver (w/o itp):     7.830s

Number of path formula cache hits:   3145265 (80%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    53.647s

Total number of created targets for pointer analysis: 82975
   Number of created targets for uf: *(void)* is 123
   Number of created targets for uf: *unsigned_short_int is 9
   Number of created targets for uf: *signed_int is 3401
   Number of created targets for uf: *(struct_msix_entry)* is 7
   Number of created targets for uf: *(struct_pci_dev)* is 130
   Number of created targets for uf: *(unsigned_char)* is 1960
   Number of created targets for uf: *_Bool is 6393
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *unsigned_int is 1106
   Number of created targets for uf: *unsigned_long_int is 814


Number of BDD nodes:                               1157
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       10154 (count: 598577, min: 0, max: 278, avg: 0.02)
Time for BDD node cleanup:                             0.094s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.479s
  Time for transition matches:                         2.876s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                      3302768 (count: 3302768, min: 1, max: 1, avg: 1.00) [1 x 3302768]

CPA algorithm statistics
------------------------
Number of iterations:            2153819
Max size of waitlist:            910
Average size of waitlist:        278
Number of computed successors:   2560169
Max successors for one state:    2
Number of times merged:          195164
Number of times stopped:         296042
Number of times breaked:         285

Total time for CPA algorithm:       227.207s (Max:     3.342s)
  Time for choose from waitlist:      1.148s
  Time for precision adjustment:     86.754s
  Time for transfer relation:       113.210s
  Time for merge operator:            9.415s
  Time for stop operator:             3.865s
  Time for adding to reached set:     4.705s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   285
Avg. length of target path (in blocks):               29420 (count: 285, min: 86, max: 144, avg: 103.23)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.573s
  Counterexample analysis:                            11.049s (Max:     0.142s, Calls: 285)
    Refinement sat check:                              7.206s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.140s
  Precision update:                                    0.161s
  ARG update:                                          3.916s

Length of refined path (in blocks):                   26822 (count: 285, min: 80, max: 134, avg: 94.11)
Number of affected states:                             9680 (count: 285, min: 1, max: 133, avg: 33.96)
Length (states) of path with itp 'true':              16857 (count: 285, min: 0, max: 87, avg: 59.15)
Length (states) of path with itp non-trivial itp:      9680 (count: 285, min: 1, max: 133, avg: 33.96)
Length (states) of path with itp 'false':               285 (count: 285, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 285, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            9395 (count: 285, min: 0, max: 132, avg: 32.96)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                285
Number of successful refinements:     285
Number of failed refinements:         0
Max. size of reached set before ref.: 26032
Max. size of reached set after ref.:  2091
Avg. size of reached set before ref.: 8052.40
Avg. size of reached set after ref.:  180.82

Total time for CEGAR algorithm:     244.401s
Time for refinements:                17.154s
Average time for refinement:          0.060s
Max time for refinement:              0.224s

Code Coverage
-----------------------------
  Function coverage:      0.376
  Visited lines:          3112
  Total lines:            7170
  Line coverage:          0.434
  Visited conditions:     616
  Total conditions:       2104
  Condition coverage:     0.293

CPAchecker general statistics
-----------------------------
Number of program locations:     10191
Number of CFA edges:             11839
Number of relevant variables:    2273
Number of functions:             420
Number of loops:                 73
Size of reached set:             14896
  Number of reached locations:   1768 (17%)
    Avg states per location:     8
    Max states per location:     204 (at node N469)
  Number of reached functions:   158 (38%)
  Number of partitions:          14861
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N8750 (before line 17428), Function main called from node N8602, stack depth 1 [156cfa20], stack [main]])
  Number of target states:       0
  Size of final wait list        395

Time for analysis setup:          8.350s
  Time for loading CPAs:          1.186s
  Time for loading parser:        0.659s
  Time for CFA construction:      6.363s
    Time for parsing file(s):     1.389s
    Time for AST to CFA:          2.505s
    Time for CFA sanity check:    0.533s
    Time for post-processing:     1.691s
      Time for var class.:        0.809s
Time for Analysis:              244.401s
CPU time for analysis:          244.380s
Total time for CPAchecker:      252.766s
Total CPU time for CPAchecker:  252.720s
Time for statistics:              0.391s

Time for Garbage Collector:      13.909s (in 472 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                588MB (   560 MiB) max;    253MB (   241 MiB) avg;    595MB (   567 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     40MB (    38 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           598MB (   571 MiB) max;    363MB (   346 MiB) avg
Allocated non-heap memory:        49MB (    46 MiB) max;     48MB (    45 MiB) avg
Total process virtual memory:   8154MB (  7777 MiB) max;   8104MB (  7729 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
