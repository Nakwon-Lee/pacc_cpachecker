scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--usb--storage--usb-storage.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0xy1daoy/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6139: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6587: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8294: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8297: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8300: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9536: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9541: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9546: Dead code detected: tmp___7 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_37511;
  case 2UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_37511;
  case 4UL:
  tmp___7 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___7->state): : "memory",
                       "cc");
  goto ldv_37511;
  case 8UL:
  tmp___8 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___8->state): : "memory",
                       "cc");
  goto ldv_37511;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10968: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11390: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11867: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12221: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13453: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13953: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5372: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9512: Function pointer *(us->srb->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9290: Function pointer *(us->suspend_resume_hook) with type void (*)(struct us_data *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9263: Function pointer *(us->suspend_resume_hook) with type void (*)(struct us_data *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6005: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5827: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11745: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5831: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(256UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_probe_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_scan_host to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            4770 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4032 (85%)
  Because of loop head:            708 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         30 (1%)
  Times precision was empty:       3017 (63%)
  Times precision was {false}:     114 (2%)
  Times result was cached:         1349 (28%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      290 (6%)
  Times result was 'false':        222 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         3979
  BDD entailment checks:           613
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       80
Number of predicates discovered:          9
Number of abstraction locations:          28
Max number of predicates per location:    8
Avg number of predicates per location:    5
Total predicates per abstraction:         7862
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 19.46
Number of irrelevant predicates:          2946 (37%)
Number of preds handled by boolean abs:   1172 (15%)
  Total number of models for allsat:      360
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.24

Time for post operator:                  3.124s
  Time for path formula creation:        3.067s
Time for strengthen operator:            0.103s
Time for prec operator:                  5.161s
  Time for abstraction:                  4.881s (Max:     0.669s, Count: 4770)
    Boolean abstraction:                 2.539s
    Solving time:                        2.245s (Max:     0.479s)
    Model enumeration time:              0.151s
    Time for BDD construction:           0.105s (Max:     0.012s)
Time for merge operator:                 0.101s
Time for coverage check:                 0.037s
  Time for BDD entailment checks:        0.034s
Total time for SMT solver (w/o itp):     2.396s

Number of path formula cache hits:   24361 (78%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.772s

Total number of created targets for pointer analysis: 12
   Number of created targets for uf: *(struct_usb_host_endpoint)* is 4


Number of BDD nodes:                               581
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         757 (count: 6047, min: 0, max: 126, avg: 0.13)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.220s
Automaton transfers with branching:                0
Automaton transfer successors:                        26120 (count: 26120, min: 1, max: 1, avg: 1.00) [1 x 26120]

CPA algorithm statistics
------------------------
Number of iterations:            15752
Max size of waitlist:            64
Average size of waitlist:        22
Number of computed successors:   19154
Max successors for one state:    2
Number of times merged:          1683
Number of times stopped:         2122
Number of times breaked:         30

Total time for CPA algorithm:        10.941s (Max:     2.235s)
  Time for choose from waitlist:      0.074s
  Time for precision adjustment:      5.632s
  Time for transfer relation:         4.302s
  Time for merge operator:            0.262s
  Time for stop operator:             0.181s
  Time for adding to reached set:     0.164s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   30
Avg. length of target path (in blocks):                 722 (count: 30, min: 14, max: 38, avg: 24.07)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.291s
  Counterexample analysis:                            11.058s (Max:     0.708s, Calls: 30)
    Refinement sat check:                             10.353s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.019s
  Precision update:                                    0.034s
  ARG update:                                          0.131s

Length of refined path (in blocks):                     525 (count: 29, min: 8, max: 26, avg: 18.10)
Number of affected states:                              448 (count: 29, min: 1, max: 25, avg: 15.45)
Length (states) of path with itp 'true':                 48 (count: 29, min: 0, max: 6, avg: 1.66)
Length (states) of path with itp non-trivial itp:       448 (count: 29, min: 1, max: 25, avg: 15.45)
Length (states) of path with itp 'false':                29 (count: 29, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 29, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             419 (count: 29, min: 0, max: 24, avg: 14.45)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                30
Number of successful refinements:     29
Number of failed refinements:         0
Max. size of reached set before ref.: 903
Max. size of reached set after ref.:  20
Avg. size of reached set before ref.: 567.87
Avg. size of reached set after ref.:  7.76

Total time for CEGAR algorithm:      22.343s
Time for refinements:                11.388s
Average time for refinement:          0.379s
Max time for refinement:              0.712s

Code Coverage
-----------------------------
  Function coverage:      0.108
  Visited lines:          1255
  Total lines:            5012
  Line coverage:          0.250
  Visited conditions:     114
  Total conditions:       1602
  Condition coverage:     0.071

CPAchecker general statistics
-----------------------------
Number of program locations:     7433
Number of CFA edges:             8616
Number of relevant variables:    1006
Number of functions:             362
Number of loops:                 26
Size of reached set:             845
  Number of reached locations:   296 (4%)
    Avg states per location:     2
    Max states per location:     15 (at node N2671)
  Number of reached functions:   39 (11%)
  Number of partitions:          840
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N4256 (before line 10692), Function main called from node N4236, stack depth 1 [23954300], stack [main]])
  Number of target states:       1
  Size of final wait list        47

Time for analysis setup:          7.901s
  Time for loading CPAs:          1.063s
  Time for loading parser:        0.630s
  Time for CFA construction:      6.075s
    Time for parsing file(s):     1.283s
    Time for AST to CFA:          2.274s
    Time for CFA sanity check:    0.500s
    Time for post-processing:     1.785s
      Time for var class.:        0.939s
Time for Analysis:               22.343s
CPU time for analysis:           22.340s
Total time for CPAchecker:       30.259s
Total CPU time for CPAchecker:   30.230s
Time for statistics:              0.107s

Time for Garbage Collector:       0.423s (in 29 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 74MB (    71 MiB) max;     51MB (    49 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     35MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
