scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--char--lp.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_erz2i_r0/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3420: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3423: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3426: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3451: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3454: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3457: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5371: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5395: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5419: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5463: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3947: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4488: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4337: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3891-3892: Function pointer *((lp_table[minor]).dev->port->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3894-3895: Function pointer *((lp_table[minor]).dev->port->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3896: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5026: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5030: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5034: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(88UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_console to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim_or_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3891-3892: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->write_control): (*((lp_table[minor]).dev->port->ops->write_control))((lp_table[minor]).dev->port, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3894-3895: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->write_control): (*((lp_table[minor]).dev->port->ops->write_control))((lp_table[minor]).dev->port, 12); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_console to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            14381 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  12284 (85%)
  Because of loop head:            2018 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         79 (1%)
  Times precision was empty:       4438 (31%)
  Times precision was {false}:     252 (2%)
  Times result was cached:         8353 (58%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1338 (9%)
  Times result was 'false':        1476 (10%)
Number of strengthen sat checks:   0
Number of coverage checks:         21307
  BDD entailment checks:           3641
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       48
Number of predicates discovered:          11
Number of abstraction locations:          63
Max number of predicates per location:    10
Avg number of predicates per location:    6
Total predicates per abstraction:         52275
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 32.88
Number of irrelevant predicates:          10454 (20%)
Number of preds handled by boolean abs:   5892 (11%)
  Total number of models for allsat:      1452
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.09

Time for post operator:                  4.034s
  Time for path formula creation:        3.891s
Time for strengthen operator:            0.190s
Time for prec operator:                 10.988s
  Time for abstraction:                 10.449s (Max:     0.049s, Count: 14381)
    Boolean abstraction:                 3.000s
    Solving time:                        2.481s (Max:     0.021s)
    Model enumeration time:              0.275s
    Time for BDD construction:           0.160s (Max:     0.013s)
Time for merge operator:                 0.478s
Time for coverage check:                 0.060s
  Time for BDD entailment checks:        0.051s
Total time for SMT solver (w/o itp):     2.756s

Number of path formula cache hits:   100667 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.222s

Total number of created targets for pointer analysis: 1809
   Number of created targets for uf: *signed_int is 83
   Number of created targets for uf: *(char)* is 113
   Number of created targets for uf: *(struct_pardevice)* is 70
   Number of created targets for uf: *unsigned_int is 186
   Number of created targets for uf: *unsigned_long_int is 513


Number of BDD nodes:                               974
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3303 (count: 17921, min: 0, max: 281, avg: 0.18)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.457s
Automaton transfers with branching:                0
Automaton transfer successors:                       103474 (count: 103474, min: 1, max: 1, avg: 1.00) [1 x 103474]

CPA algorithm statistics
------------------------
Number of iterations:            72223
Max size of waitlist:            93
Average size of waitlist:        33
Number of computed successors:   87744
Max successors for one state:    2
Number of times merged:          8833
Number of times stopped:         10492
Number of times breaked:         79

Total time for CPA algorithm:        21.641s (Max:     1.309s)
  Time for choose from waitlist:      0.153s
  Time for precision adjustment:     12.164s
  Time for transfer relation:         6.747s
  Time for merge operator:            0.857s
  Time for stop operator:             0.340s
  Time for adding to reached set:     0.317s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   79
Avg. length of target path (in blocks):                4667 (count: 79, min: 38, max: 97, avg: 59.08)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.863s
  Counterexample analysis:                             2.225s (Max:     0.051s, Calls: 79)
    Refinement sat check:                              1.490s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.006s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.085s
  Precision update:                                    0.141s
  ARG update:                                          0.310s

Length of refined path (in blocks):                    4270 (count: 79, min: 32, max: 75, avg: 54.05)
Number of affected states:                             4049 (count: 79, min: 1, max: 74, avg: 51.25)
Length (states) of path with itp 'true':                142 (count: 79, min: 0, max: 41, avg: 1.80)
Length (states) of path with itp non-trivial itp:      4049 (count: 79, min: 1, max: 74, avg: 51.25)
Length (states) of path with itp 'false':                79 (count: 79, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 79, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3970 (count: 79, min: 0, max: 73, avg: 50.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                79
Number of successful refinements:     79
Number of failed refinements:         0
Max. size of reached set before ref.: 1693
Max. size of reached set after ref.:  578
Avg. size of reached set before ref.: 964.23
Avg. size of reached set after ref.:  19.48

Total time for CEGAR algorithm:      24.794s
Time for refinements:                 3.136s
Average time for refinement:          0.039s
Max time for refinement:              0.115s

Code Coverage
-----------------------------
  Function coverage:      0.193
  Visited lines:          1005
  Total lines:            2074
  Line coverage:          0.485
  Visited conditions:     160
  Total conditions:       540
  Condition coverage:     0.296

CPAchecker general statistics
-----------------------------
Number of program locations:     2908
Number of CFA edges:             3269
Number of relevant variables:    329
Number of functions:             140
Number of loops:                 11
Size of reached set:             1142
  Number of reached locations:   391 (13%)
    Avg states per location:     2
    Max states per location:     15 (at node N141)
  Number of reached functions:   27 (19%)
  Number of partitions:          1132
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N1382 (before line 5061), Function main called from node N1308, stack depth 1 [6719a5b8], stack [main]])
  Number of target states:       0
  Size of final wait list        43

Time for analysis setup:          5.485s
  Time for loading CPAs:          1.049s
  Time for loading parser:        0.723s
  Time for CFA construction:      3.569s
    Time for parsing file(s):     0.976s
    Time for AST to CFA:          1.252s
    Time for CFA sanity check:    0.247s
    Time for post-processing:     0.907s
      Time for var class.:        0.385s
Time for Analysis:               24.794s
CPU time for analysis:           24.790s
Total time for CPAchecker:       30.284s
Total CPU time for CPAchecker:   30.280s
Time for statistics:              0.094s

Time for Garbage Collector:       0.512s (in 48 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 71MB (    68 MiB) max;     48MB (    46 MiB) avg;     76MB (    72 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     40MB (    38 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        48MB (    45 MiB) max;     41MB (    40 MiB) avg
Total process virtual memory:   8088MB (  7713 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
