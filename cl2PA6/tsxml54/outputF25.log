scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--char--lp.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_j1lw_8wi/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3420: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3423: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3426: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2696;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3451: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3454: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3457: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& cpu_tss.x86_tss.sp0));
  goto ldv_5374;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5371: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5395: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5419: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5463: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3947: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4488: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4337: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3891-3892: Function pointer *((lp_table[minor]).dev->port->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3894-3895: Function pointer *((lp_table[minor]).dev->port->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3896: Function pointer *((lp_table[minor]).dev->port->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5026: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5030: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5034: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_init_zalloc(88UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_close_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_open_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_release_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_set_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_negotiate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_console to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memchr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_console to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim_or_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3891-3892: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->write_control): (*((lp_table[minor]).dev->port->ops->write_control))((lp_table[minor]).dev->port, 8); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3894-3895: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->write_control): (*((lp_table[minor]).dev->port->ops->write_control))((lp_table[minor]).dev->port, 12); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3746: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __might_fault to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3765: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size(from, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function compat_get_timeval to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_from_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __copy_to_user_overflow to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4337: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->read_status): tmp___1 = (*((lp_table[minor]).dev->port->ops->read_status))((lp_table[minor]).dev->port); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3947: Ignoring function call through function pointer *((lp_table[minor]).dev->port->ops->read_status): tmp = (*((lp_table[minor]).dev->port->ops->read_status))((lp_table[minor]).dev->port); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            810910 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  694440 (86%)
  Because of loop head:            112331 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4139 (1%)
  Times precision was empty:       193895 (24%)
  Times precision was {false}:     3219 (0%)
  Times result was cached:         580302 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      33494 (4%)
  Times result was 'false':        69471 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         1316098
  BDD entailment checks:           562620
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       48
Number of predicates discovered:          40
Number of abstraction locations:          150
Max number of predicates per location:    20
Avg number of predicates per location:    7
Total predicates per abstraction:         3980843
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 108.43
Number of irrelevant predicates:          1349132 (34%)
Number of preds handled by boolean abs:   207483 (5%)
  Total number of models for allsat:      92321
  Max number of models for allsat:        405
  Avg number of models for allsat:        2.76

Time for post operator:                 55.368s
  Time for path formula creation:       53.036s
Time for strengthen operator:            4.780s
Time for prec operator:                282.793s
  Time for abstraction:                272.933s (Max:     1.462s, Count: 810910)
    Boolean abstraction:                74.928s
    Solving time:                       49.784s (Max:     0.025s)
    Model enumeration time:             20.733s
    Time for BDD construction:           2.717s (Max:     0.048s)
Time for merge operator:                 5.600s
Time for coverage check:                 0.867s
  Time for BDD entailment checks:        0.684s
Total time for SMT solver (w/o itp):    70.517s

Number of path formula cache hits:   5391186 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    36.884s

Total number of created targets for pointer analysis: 234008
   Number of created targets for uf: *signed_int is 1621
   Number of created targets for uf: *(char)* is 4273
   Number of created targets for uf: *unsigned_int is 5510
   Number of created targets for uf: *(struct_pardevice)* is 20017
   Number of created targets for uf: *unsigned_long_int is 3313


Number of BDD nodes:                               245584
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       96315 (count: 992014, min: 0, max: 1162, avg: 0.10)
Time for BDD node cleanup:                             0.185s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.060s
  Time for transition matches:                         3.935s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.023s
Automaton transfers with branching:                0
Automaton transfer successors:                      5249633 (count: 5249633, min: 1, max: 1, avg: 1.00) [1 x 5249633]

CPA algorithm statistics
------------------------
Number of iterations:            3399600
Max size of waitlist:            1253
Average size of waitlist:        398
Number of computed successors:   4018927
Max successors for one state:    2
Number of times merged:          376739
Number of times stopped:         481259
Number of times breaked:         4139

Total time for CPA algorithm:       441.414s (Max:     8.571s)
  Time for choose from waitlist:      1.481s
  Time for precision adjustment:    306.180s
  Time for transfer relation:       102.924s
  Time for merge operator:           10.205s
  Time for stop operator:             6.671s
  Time for adding to reached set:     4.790s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4139
Avg. length of target path (in blocks):              359463 (count: 4139, min: 37, max: 137, avg: 86.85)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 239.023s
  Counterexample analysis:                           226.817s (Max:     0.151s, Calls: 4139)
    Refinement sat check:                            162.814s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.191s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.458s
  Precision update:                                    3.145s
  ARG update:                                          6.662s

Length of refined path (in blocks):                  352249 (count: 4138, min: 32, max: 135, avg: 85.13)
Number of affected states:                            39106 (count: 4138, min: 1, max: 92, avg: 9.45)
Length (states) of path with itp 'true':             309005 (count: 4138, min: 0, max: 128, avg: 74.67)
Length (states) of path with itp non-trivial itp:     39106 (count: 4138, min: 1, max: 92, avg: 9.45)
Length (states) of path with itp 'false':              4138 (count: 4138, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1077 (count: 4138, min: 0, max: 7, avg: 0.26)
Equal non-trivial interpolants along paths:           33891 (count: 4138, min: 0, max: 91, avg: 8.19)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4139
Number of successful refinements:     4138
Number of failed refinements:         0
Max. size of reached set before ref.: 77029
Max. size of reached set after ref.:  76973
Avg. size of reached set before ref.: 32026.68
Avg. size of reached set after ref.:  31196.28

Total time for CEGAR algorithm:     894.728s
Time for refinements:               356.764s
Average time for refinement:          0.086s
Max time for refinement:              1.534s

Code Coverage
-----------------------------
  Function coverage:      0.486
  Visited lines:          1605
  Total lines:            2074
  Line coverage:          0.774
  Visited conditions:     368
  Total conditions:       540
  Condition coverage:     0.681

CPAchecker general statistics
-----------------------------
Number of program locations:     2908
Number of CFA edges:             3269
Number of relevant variables:    329
Number of functions:             140
Number of loops:                 11
Size of reached set:             73379
  Number of reached locations:   1009 (35%)
    Avg states per location:     72
    Max states per location:     559 (at node N1182)
  Number of reached functions:   68 (49%)
  Number of partitions:          72498
    Avg size of partitions:      1
    Max size of partitions:      107 (with key [N1363 (before line 5052), Function main called from node N1308, stack depth 1 [5eccd3b9], stack [main]])
  Number of target states:       1
  Size of final wait list        1248

Time for analysis setup:          5.517s
  Time for loading CPAs:          0.952s
  Time for loading parser:        0.726s
  Time for CFA construction:      3.682s
    Time for parsing file(s):     1.008s
    Time for AST to CFA:          1.300s
    Time for CFA sanity check:    0.267s
    Time for post-processing:     0.966s
      Time for var class.:        0.379s
Time for Analysis:              894.728s
CPU time for analysis:          894.630s
Total time for CPAchecker:      900.250s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              1.037s

Time for Garbage Collector:      39.859s (in 1063 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                748MB (   714 MiB) max;    357MB (   340 MiB) avg;    776MB (   740 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           784MB (   748 MiB) max;    519MB (   495 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8761MB (  8356 MiB) max;   8497MB (  8104 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
