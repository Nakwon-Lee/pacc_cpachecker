scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_af6k46ps/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2320807 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2302474 (99%)
  Because of loop head:            8304 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10029 (0%)
  Times precision was empty:       639802 (28%)
  Times precision was {false}:     466 (0%)
  Times result was cached:         1678515 (72%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2024 (0%)
  Times result was 'false':        25438 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1039065
  BDD entailment checks:           238661
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          19
Number of abstraction locations:          167
Max number of predicates per location:    10
Avg number of predicates per location:    3
Total predicates per abstraction:         3394225
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 1363.14
Number of irrelevant predicates:          2143647 (63%)
Number of preds handled by boolean abs:   4921 (0%)
  Total number of models for allsat:      2461
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.22

Time for post operator:                 41.308s
  Time for path formula creation:       37.526s
Time for strengthen operator:            8.072s
Time for prec operator:                142.538s
  Time for abstraction:                120.857s (Max:     0.208s, Count: 2320807)
    Boolean abstraction:                 2.146s
    Solving time:                        1.800s (Max:     0.020s)
    Model enumeration time:              0.305s
    Time for BDD construction:           0.095s (Max:     0.010s)
Time for merge operator:                 2.444s
Time for coverage check:                 0.318s
  Time for BDD entailment checks:        0.183s
Total time for SMT solver (w/o itp):     2.105s

Number of path formula cache hits:   13191360 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.664s

Total number of created targets for pointer analysis: 815
   Number of created targets for uf: *unsigned_short_int is 180
   Number of created targets for uf: *(void)* is 401
   Number of created targets for uf: *signed_int is 19
   Number of created targets for uf: *unsigned_int is 31


Number of BDD nodes:                               1534
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4866 (count: 893442, min: 0, max: 200, avg: 0.01)
Time for BDD node cleanup:                             0.121s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.387s
  Time for transition matches:                         8.602s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.045s
Automaton transfers with branching:                0
Automaton transfer successors:                     10723300 (count: 10723300, min: 1, max: 1, avg: 1.00) [1 x 10723300]

CPA algorithm statistics
------------------------
Number of iterations:            6769925
Max size of waitlist:            60
Average size of waitlist:        40
Number of computed successors:   7369501
Max successors for one state:    2
Number of times merged:          400202
Number of times stopped:         551577
Number of times breaked:         10029

Total time for CPA algorithm:       359.244s (Max:     1.495s)
  Time for choose from waitlist:      2.730s
  Time for precision adjustment:    186.656s
  Time for transfer relation:       129.869s
  Time for merge operator:            6.509s
  Time for stop operator:             7.747s
  Time for adding to reached set:    10.031s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10029
Avg. length of target path (in blocks):             1111945 (count: 10029, min: 22, max: 238, avg: 110.87)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 310.512s
  Counterexample analysis:                           287.902s (Max:     0.088s, Calls: 10029)
    Refinement sat check:                            134.886s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.580s
  Error path post-processing:                          0.000s
  Predicate creation:                                  3.182s
  Precision update:                                    3.830s
  ARG update:                                         10.872s

Length of refined path (in blocks):                 1041433 (count: 10029, min: 18, max: 235, avg: 103.84)
Number of affected states:                           532483 (count: 10029, min: 1, max: 124, avg: 53.09)
Length (states) of path with itp 'true':             498921 (count: 10029, min: 0, max: 174, avg: 49.75)
Length (states) of path with itp non-trivial itp:    532483 (count: 10029, min: 1, max: 124, avg: 53.09)
Length (states) of path with itp 'false':             10029 (count: 10029, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:       10333 (count: 10029, min: 0, max: 3, avg: 1.03)
Equal non-trivial interpolants along paths:          512121 (count: 10029, min: 0, max: 123, avg: 51.06)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10029
Number of successful refinements:     10029
Number of failed refinements:         0
Max. size of reached set before ref.: 43117
Max. size of reached set after ref.:  42215
Avg. size of reached set before ref.: 15923.07
Avg. size of reached set after ref.:  15246.67

Total time for CEGAR algorithm:     895.025s
Time for refinements:               437.715s
Average time for refinement:          0.043s
Max time for refinement:              0.441s

Code Coverage
-----------------------------
  Function coverage:      0.518
  Visited lines:          1788
  Total lines:            2383
  Line coverage:          0.750
  Visited conditions:     480
  Total conditions:       742
  Condition coverage:     0.647

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             8884
  Number of reached locations:   1176 (34%)
    Avg states per location:     7
    Max states per location:     148 (at node N169)
  Number of reached functions:   88 (52%)
  Number of partitions:          8821
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1687 (before line 5792), Function main called from node N1644, stack depth 1 [57c88764], stack [main]])
  Number of target states:       0
  Size of final wait list        49

Time for analysis setup:          5.244s
  Time for loading CPAs:          1.005s
  Time for loading parser:        0.667s
  Time for CFA construction:      3.415s
    Time for parsing file(s):     0.972s
    Time for AST to CFA:          1.121s
    Time for CFA sanity check:    0.268s
    Time for post-processing:     0.891s
      Time for var class.:        0.439s
Time for Analysis:              895.025s
CPU time for analysis:          894.940s
Total time for CPAchecker:      900.282s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.214s

Time for Garbage Collector:      33.512s (in 2881 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                224MB (   213 MiB) max;    118MB (   113 MiB) avg;    230MB (   219 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     40MB (    38 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           228MB (   218 MiB) max;    176MB (   168 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8054MB (  7681 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
