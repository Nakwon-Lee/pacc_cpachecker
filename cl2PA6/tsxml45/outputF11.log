scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_p529cuq4/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2204585 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2141285 (97%)
  Because of loop head:            58161 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5139 (0%)
  Times precision was empty:       119625 (5%)
  Times precision was {false}:     961 (0%)
  Times result was cached:         2068361 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      15638 (1%)
  Times result was 'false':        63433 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         1623329
  BDD entailment checks:           342093
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          45
Number of abstraction locations:          274
Max number of predicates per location:    32
Avg number of predicates per location:    9
Total predicates per abstraction:         12170017
Max number of predicates per abstraction: 32
Avg number of predicates per abstraction: 733.18
Number of irrelevant predicates:          4236504 (35%)
Number of preds handled by boolean abs:   78536 (1%)
  Total number of models for allsat:      39178
  Max number of models for allsat:        1152
  Avg number of models for allsat:        2.51

Time for post operator:                 68.071s
  Time for path formula creation:       62.731s
Time for strengthen operator:            8.273s
Time for prec operator:                438.411s
  Time for abstraction:                413.333s (Max:     1.324s, Count: 2204585)
    Boolean abstraction:                23.143s
    Solving time:                       11.628s (Max:     0.017s)
    Model enumeration time:              9.018s
    Time for BDD construction:           1.496s (Max:     0.085s)
Time for merge operator:                 5.964s
Time for coverage check:                 0.600s
  Time for BDD entailment checks:        0.408s
Total time for SMT solver (w/o itp):    20.646s

Number of path formula cache hits:   12928571 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    30.327s

Total number of created targets for pointer analysis: 4661
   Number of created targets for uf: *unsigned_short_int is 3
   Number of created targets for uf: *(void)* is 1859
   Number of created targets for uf: *signed_int is 147
   Number of created targets for uf: *unsigned_int is 223


Number of BDD nodes:                               110492
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       52335 (count: 570094, min: 0, max: 747, avg: 0.09)
Time for BDD node cleanup:                             0.128s
Time for BDD garbage collection:                       0.076s (in 1 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 15.629s
  Time for transition matches:                         9.189s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                     11319430 (count: 11319430, min: 1, max: 1, avg: 1.00) [1 x 11319430]

CPA algorithm statistics
------------------------
Number of iterations:            7283510
Max size of waitlist:            54
Average size of waitlist:        22
Number of computed successors:   8188542
Max successors for one state:    2
Number of times merged:          640618
Number of times stopped:         826449
Number of times breaked:         5139

Total time for CPA algorithm:       705.112s (Max:     2.210s)
  Time for choose from waitlist:      2.902s
  Time for precision adjustment:    488.532s
  Time for transfer relation:       162.065s
  Time for merge operator:           12.530s
  Time for stop operator:             8.659s
  Time for adding to reached set:    10.665s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5139
Avg. length of target path (in blocks):              482328 (count: 5139, min: 22, max: 270, avg: 93.86)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 129.489s
  Counterexample analysis:                           110.936s (Max:     0.125s, Calls: 5139)
    Refinement sat check:                             60.349s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.197s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.242s
  Precision update:                                    4.708s
  ARG update:                                         10.541s

Length of refined path (in blocks):                  469022 (count: 5139, min: 18, max: 269, avg: 91.27)
Number of affected states:                           199043 (count: 5139, min: 1, max: 166, avg: 38.73)
Length (states) of path with itp 'true':             264840 (count: 5139, min: 0, max: 179, avg: 51.54)
Length (states) of path with itp non-trivial itp:    199043 (count: 5139, min: 1, max: 166, avg: 38.73)
Length (states) of path with itp 'false':              5139 (count: 5139, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         633 (count: 5139, min: 0, max: 3, avg: 0.12)
Equal non-trivial interpolants along paths:          193271 (count: 5139, min: 0, max: 165, avg: 37.61)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5139
Number of successful refinements:     5139
Number of failed refinements:         0
Max. size of reached set before ref.: 30031
Max. size of reached set after ref.:  23484
Avg. size of reached set before ref.: 9781.36
Avg. size of reached set after ref.:  8363.96

Total time for CEGAR algorithm:     895.157s
Time for refinements:               164.755s
Average time for refinement:          0.032s
Max time for refinement:              0.598s

Code Coverage
-----------------------------
  Function coverage:      0.565
  Visited lines:          1925
  Total lines:            2383
  Line coverage:          0.808
  Visited conditions:     526
  Total conditions:       742
  Condition coverage:     0.709

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             14659
  Number of reached locations:   1348 (39%)
    Avg states per location:     10
    Max states per location:     141 (at node N6)
  Number of reached functions:   96 (56%)
  Number of partitions:          14587
    Avg size of partitions:      1
    Max size of partitions:      16 (with key [N1687 (before line 5792), Function main called from node N1644, stack depth 1 [4abf3f0], stack [main]])
  Number of target states:       0
  Size of final wait list        33

Time for analysis setup:          5.129s
  Time for loading CPAs:          0.924s
  Time for loading parser:        0.726s
  Time for CFA construction:      3.364s
    Time for parsing file(s):     0.899s
    Time for AST to CFA:          1.151s
    Time for CFA sanity check:    0.272s
    Time for post-processing:     0.896s
      Time for var class.:        0.409s
Time for Analysis:              895.157s
CPU time for analysis:          895.070s
Total time for CPAchecker:      900.291s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              0.272s

Time for Garbage Collector:      56.351s (in 2237 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                549MB (   523 MiB) max;    253MB (   241 MiB) avg;    609MB (   580 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           728MB (   695 MiB) max;    362MB (   345 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8288MB (  7904 MiB) max;   8166MB (  7788 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
