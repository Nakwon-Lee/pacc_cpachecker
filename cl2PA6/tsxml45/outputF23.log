scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b1i0q79m/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1722359 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1699545 (99%)
  Because of loop head:            12154 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10660 (1%)
  Times precision was empty:       451540 (26%)
  Times precision was {false}:     553 (0%)
  Times result was cached:         1266006 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4260 (0%)
  Times result was 'false':        31779 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         864140
  BDD entailment checks:           125536
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          19
Number of abstraction locations:          203
Max number of predicates per location:    10
Avg number of predicates per location:    4
Total predicates per abstraction:         3860907
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 802.18
Number of irrelevant predicates:          2720092 (70%)
Number of preds handled by boolean abs:   11238 (0%)
  Total number of models for allsat:      4923
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.16

Time for post operator:                 49.779s
  Time for path formula creation:       45.607s
Time for strengthen operator:            6.953s
Time for prec operator:                154.096s
  Time for abstraction:                135.570s (Max:     0.776s, Count: 1722359)
    Boolean abstraction:                 3.942s
    Solving time:                        3.171s (Max:     0.015s)
    Model enumeration time:              0.549s
    Time for BDD construction:           0.155s (Max:     0.009s)
Time for merge operator:                 3.679s
Time for coverage check:                 0.250s
  Time for BDD entailment checks:        0.163s
Total time for SMT solver (w/o itp):     3.720s

Number of path formula cache hits:   9656353 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    18.879s

Total number of created targets for pointer analysis: 2461
   Number of created targets for uf: *unsigned_short_int is 25
   Number of created targets for uf: *(void)* is 905
   Number of created targets for uf: *signed_int is 73
   Number of created targets for uf: *unsigned_int is 92


Number of BDD nodes:                               1537
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9453 (count: 606080, min: 0, max: 218, avg: 0.02)
Time for BDD node cleanup:                             0.130s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.981s
  Time for transition matches:                         6.429s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.034s
Automaton transfers with branching:                0
Automaton transfer successors:                      8215760 (count: 8215760, min: 1, max: 1, avg: 1.00) [1 x 8215760]

CPA algorithm statistics
------------------------
Number of iterations:            5234936
Max size of waitlist:            56
Average size of waitlist:        30
Number of computed successors:   5778525
Max successors for one state:    2
Number of times merged:          369302
Number of times stopped:         480209
Number of times breaked:         10660

Total time for CPA algorithm:       348.256s (Max:     1.304s)
  Time for choose from waitlist:      2.315s
  Time for precision adjustment:    190.935s
  Time for transfer relation:       120.066s
  Time for merge operator:            7.868s
  Time for stop operator:             5.770s
  Time for adding to reached set:     8.093s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   10660
Avg. length of target path (in blocks):             1229696 (count: 10660, min: 22, max: 261, avg: 115.36)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 353.144s
  Counterexample analysis:                           331.711s (Max:     0.147s, Calls: 10660)
    Refinement sat check:                            147.682s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.594s
  Error path post-processing:                          0.000s
  Predicate creation:                                  2.654s
  Precision update:                                    5.374s
  ARG update:                                          8.445s

Length of refined path (in blocks):                 1179323 (count: 10660, min: 18, max: 260, avg: 110.63)
Number of affected states:                           448009 (count: 10660, min: 1, max: 173, avg: 42.03)
Length (states) of path with itp 'true':             720654 (count: 10660, min: 0, max: 188, avg: 67.60)
Length (states) of path with itp non-trivial itp:    448009 (count: 10660, min: 1, max: 173, avg: 42.03)
Length (states) of path with itp 'false':             10660 (count: 10660, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:       10914 (count: 10660, min: 0, max: 3, avg: 1.02)
Equal non-trivial interpolants along paths:          426435 (count: 10660, min: 0, max: 172, avg: 40.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                10660
Number of successful refinements:     10660
Number of failed refinements:         0
Max. size of reached set before ref.: 40687
Max. size of reached set after ref.:  36360
Avg. size of reached set before ref.: 12944.84
Avg. size of reached set after ref.:  12452.65

Total time for CEGAR algorithm:     894.897s
Time for refinements:               464.163s
Average time for refinement:          0.043s
Max time for refinement:              0.922s

Code Coverage
-----------------------------
  Function coverage:      0.559
  Visited lines:          1907
  Total lines:            2383
  Line coverage:          0.800
  Visited conditions:     518
  Total conditions:       742
  Condition coverage:     0.698

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             19823
  Number of reached locations:   1324 (38%)
    Avg states per location:     14
    Max states per location:     200 (at node N169)
  Number of reached functions:   95 (56%)
  Number of partitions:          19819
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N1687 (before line 5792), Function main called from node N1644, stack depth 1 [4abf3f0], stack [main]])
  Number of target states:       0
  Size of final wait list        33

Time for analysis setup:          5.420s
  Time for loading CPAs:          1.066s
  Time for loading parser:        0.624s
  Time for CFA construction:      3.613s
    Time for parsing file(s):     0.934s
    Time for AST to CFA:          1.220s
    Time for CFA sanity check:    0.280s
    Time for post-processing:     0.944s
      Time for var class.:        0.424s
Time for Analysis:              894.897s
CPU time for analysis:          894.820s
Total time for CPAchecker:      900.322s
Total CPU time for CPAchecker:  900.230s
Time for statistics:              0.362s

Time for Garbage Collector:      33.952s (in 2051 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                406MB (   388 MiB) max;    174MB (   166 MiB) avg;    419MB (   399 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     41MB (    39 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           421MB (   401 MiB) max;    254MB (   243 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8222MB (  7841 MiB) max;   8134MB (  7757 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
