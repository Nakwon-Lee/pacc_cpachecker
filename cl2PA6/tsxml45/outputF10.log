scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_k1skydiz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2019056 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1941939 (96%)
  Because of loop head:            70097 (3%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7020 (0%)
  Times precision was empty:       635528 (31%)
  Times precision was {false}:     2272 (0%)
  Times result was cached:         1370938 (68%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      10318 (1%)
  Times result was 'false':        36092 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         3168525
  BDD entailment checks:           1058869
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          44
Number of abstraction locations:          265
Max number of predicates per location:    35
Avg number of predicates per location:    6
Total predicates per abstraction:         9792531
Max number of predicates per abstraction: 35
Avg number of predicates per abstraction: 777.80
Number of irrelevant predicates:          6725445 (69%)
Number of preds handled by boolean abs:   54343 (1%)
  Total number of models for allsat:      20137
  Max number of models for allsat:        64
  Avg number of models for allsat:        1.95

Time for post operator:                 57.108s
  Time for path formula creation:       51.962s
Time for strengthen operator:           10.064s
Time for prec operator:                305.492s
  Time for abstraction:                282.551s (Max:     0.686s, Count: 2019056)
    Boolean abstraction:                12.600s
    Solving time:                        9.337s (Max:     0.022s)
    Model enumeration time:              2.640s
    Time for BDD construction:           0.523s (Max:     0.016s)
Time for merge operator:                 5.947s
Time for coverage check:                 1.063s
  Time for BDD entailment checks:        0.695s
Total time for SMT solver (w/o itp):    11.977s

Number of path formula cache hits:   16049652 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    12.629s

Total number of created targets for pointer analysis: 166
   Number of created targets for uf: *(void)* is 37
   Number of created targets for uf: *unsigned_short_int is 43
   Number of created targets for uf: *signed_int is 8
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               69234
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       48208 (count: 1784416, min: 0, max: 1072, avg: 0.03)
Time for BDD node cleanup:                             0.226s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 16.919s
  Time for transition matches:                         9.225s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.035s
Automaton transfers with branching:                0
Automaton transfer successors:                     13398539 (count: 13398539, min: 1, max: 1, avg: 1.00) [1 x 13398539]

CPA algorithm statistics
------------------------
Number of iterations:            8523794
Max size of waitlist:            536
Average size of waitlist:        235
Number of computed successors:   10090118
Max successors for one state:    2
Number of times merged:          1054828
Number of times stopped:         1236331
Number of times breaked:         7020

Total time for CPA algorithm:       589.965s (Max:     2.719s)
  Time for choose from waitlist:      3.910s
  Time for precision adjustment:    362.850s
  Time for transfer relation:       161.571s
  Time for merge operator:           16.776s
  Time for stop operator:            10.389s
  Time for adding to reached set:    13.578s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7020
Avg. length of target path (in blocks):              353822 (count: 7020, min: 22, max: 138, avg: 50.40)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 124.221s
  Counterexample analysis:                           101.811s (Max:     0.048s, Calls: 7020)
    Refinement sat check:                             61.871s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.178s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.911s
  Precision update:                                    5.797s
  ARG update:                                         13.775s

Length of refined path (in blocks):                  335647 (count: 7020, min: 18, max: 137, avg: 47.81)
Number of affected states:                            99347 (count: 7020, min: 1, max: 136, avg: 14.15)
Length (states) of path with itp 'true':             229280 (count: 7020, min: 0, max: 119, avg: 32.66)
Length (states) of path with itp non-trivial itp:     99347 (count: 7020, min: 1, max: 136, avg: 14.15)
Length (states) of path with itp 'false':              7020 (count: 7020, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        7510 (count: 7020, min: 0, max: 3, avg: 1.07)
Equal non-trivial interpolants along paths:           84817 (count: 7020, min: 0, max: 135, avg: 12.08)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7020
Number of successful refinements:     7020
Number of failed refinements:         0
Max. size of reached set before ref.: 40430
Max. size of reached set after ref.:  37800
Avg. size of reached set before ref.: 19169.25
Avg. size of reached set after ref.:  17918.41

Total time for CEGAR algorithm:     894.576s
Time for refinements:               223.888s
Average time for refinement:          0.031s
Max time for refinement:              0.410s

Code Coverage
-----------------------------
  Function coverage:      0.565
  Visited lines:          1927
  Total lines:            2383
  Line coverage:          0.809
  Visited conditions:     530
  Total conditions:       742
  Condition coverage:     0.714

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             36854
  Number of reached locations:   1356 (39%)
    Avg states per location:     27
    Max states per location:     716 (at node N164)
  Number of reached functions:   96 (56%)
  Number of partitions:          36581
    Avg size of partitions:      1
    Max size of partitions:      14 (with key [N1957 (after line 6073), Function main called from node N1644, stack depth 1 [4abf3f0], stack [main]])
  Number of target states:       0
  Size of final wait list        247

Time for analysis setup:          5.597s
  Time for loading CPAs:          1.105s
  Time for loading parser:        0.675s
  Time for CFA construction:      3.652s
    Time for parsing file(s):     1.036s
    Time for AST to CFA:          1.213s
    Time for CFA sanity check:    0.283s
    Time for post-processing:     0.959s
      Time for var class.:        0.443s
Time for Analysis:              894.576s
CPU time for analysis:          894.500s
Total time for CPAchecker:      900.178s
Total CPU time for CPAchecker:  900.090s
Time for statistics:              0.549s

Time for Garbage Collector:      58.806s (in 2994 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                363MB (   346 MiB) max;    176MB (   168 MiB) avg;    383MB (   365 MiB) peak
Used non-heap memory:             41MB (    40 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           383MB (   366 MiB) max;    260MB (   248 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8222MB (  7841 MiB) max;   8175MB (  7796 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
