scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_reudf2ss/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1988868 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1794894 (90%)
  Because of loop head:            184296 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         9678 (0%)
  Times precision was empty:       453133 (23%)
  Times precision was {false}:     1103 (0%)
  Times result was cached:         1529561 (77%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      5071 (0%)
  Times result was 'false':        62190 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         3229056
  BDD entailment checks:           776502
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          21
Number of abstraction locations:          269
Max number of predicates per location:    16
Avg number of predicates per location:    4
Total predicates per abstraction:         7634303
Max number of predicates per abstraction: 16
Avg number of predicates per abstraction: 1236.52
Number of irrelevant predicates:          3257447 (43%)
Number of preds handled by boolean abs:   15428 (0%)
  Total number of models for allsat:      10261
  Max number of models for allsat:        65
  Avg number of models for allsat:        2.02

Time for post operator:                 62.968s
  Time for path formula creation:       57.646s
Time for strengthen operator:            9.918s
Time for prec operator:                297.992s
  Time for abstraction:                273.512s (Max:     0.330s, Count: 1988868)
    Boolean abstraction:                 6.165s
    Solving time:                        4.408s (Max:     0.024s)
    Model enumeration time:              1.440s
    Time for BDD construction:           0.391s (Max:     0.016s)
Time for merge operator:                 7.520s
Time for coverage check:                 0.919s
  Time for BDD entailment checks:        0.557s
Total time for SMT solver (w/o itp):     5.848s

Number of path formula cache hits:   16842505 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    11.128s

Total number of created targets for pointer analysis: 135
   Number of created targets for uf: *unsigned_short_int is 6
   Number of created targets for uf: *(void)* is 37
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_int is 13


Number of BDD nodes:                               15863
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       11867 (count: 1267125, min: 0, max: 203, avg: 0.01)
Time for BDD node cleanup:                             0.193s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.334s
  Time for transition matches:                         9.491s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.031s
Automaton transfers with branching:                0
Automaton transfer successors:                     14003537 (count: 14003537, min: 1, max: 1, avg: 1.00) [1 x 14003537]

CPA algorithm statistics
------------------------
Number of iterations:            9322363
Max size of waitlist:            305
Average size of waitlist:        148
Number of computed successors:   11199325
Max successors for one state:    2
Number of times merged:          1226277
Number of times stopped:         1464399
Number of times breaked:         9678

Total time for CPA algorithm:       601.955s (Max:     1.713s)
  Time for choose from waitlist:      4.205s
  Time for precision adjustment:    356.583s
  Time for transfer relation:       170.980s
  Time for merge operator:           21.115s
  Time for stop operator:            11.410s
  Time for adding to reached set:    14.595s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9678
Avg. length of target path (in blocks):              555967 (count: 9678, min: 22, max: 166, avg: 57.45)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 171.801s
  Counterexample analysis:                           146.972s (Max:     0.056s, Calls: 9678)
    Refinement sat check:                             92.907s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.267s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.998s
  Precision update:                                    6.426s
  ARG update:                                         14.398s

Length of refined path (in blocks):                  540688 (count: 9678, min: 18, max: 165, avg: 55.87)
Number of affected states:                           112549 (count: 9678, min: 1, max: 164, avg: 11.63)
Length (states) of path with itp 'true':             418461 (count: 9678, min: 0, max: 150, avg: 43.24)
Length (states) of path with itp non-trivial itp:    112549 (count: 9678, min: 1, max: 164, avg: 11.63)
Length (states) of path with itp 'false':              9678 (count: 9678, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        2592 (count: 9678, min: 0, max: 3, avg: 0.27)
Equal non-trivial interpolants along paths:          100279 (count: 9678, min: 0, max: 163, avg: 10.36)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9678
Number of successful refinements:     9678
Number of failed refinements:         0
Max. size of reached set before ref.: 29652
Max. size of reached set after ref.:  27947
Avg. size of reached set before ref.: 9699.97
Avg. size of reached set after ref.:  8703.13

Total time for CEGAR algorithm:     894.698s
Time for refinements:               242.605s
Average time for refinement:          0.025s
Max time for refinement:              0.613s

Code Coverage
-----------------------------
  Function coverage:      0.559
  Visited lines:          1921
  Total lines:            2383
  Line coverage:          0.806
  Visited conditions:     530
  Total conditions:       742
  Condition coverage:     0.714

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             25409
  Number of reached locations:   1345 (39%)
    Avg states per location:     18
    Max states per location:     444 (at node N165)
  Number of reached functions:   95 (56%)
  Number of partitions:          25274
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N1929 (after line 6046), Function main called from node N1644, stack depth 1 [4abf3f0], stack [main]])
  Number of target states:       0
  Size of final wait list        198

Time for analysis setup:          5.564s
  Time for loading CPAs:          0.934s
  Time for loading parser:        0.758s
  Time for CFA construction:      3.706s
    Time for parsing file(s):     1.034s
    Time for AST to CFA:          1.281s
    Time for CFA sanity check:    0.274s
    Time for post-processing:     0.940s
      Time for var class.:        0.482s
Time for Analysis:              894.698s
CPU time for analysis:          894.620s
Total time for CPAchecker:      900.275s
Total CPU time for CPAchecker:  900.180s
Time for statistics:              0.468s

Time for Garbage Collector:      40.840s (in 3519 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                296MB (   283 MiB) max;    141MB (   134 MiB) avg;    302MB (   288 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           304MB (   290 MiB) max;    208MB (   198 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8156MB (  7778 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
