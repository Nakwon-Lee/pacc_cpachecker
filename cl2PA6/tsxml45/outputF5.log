scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-32_7a-drivers--input--touchscreen--tsc2005.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_d4j1nnf3/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6322: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6445: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 5771: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 5775: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(48UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_complete_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_poweroff_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_prepare_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_freeze_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_noirq_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_thaw_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_restore_early_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4384: Ignoring function call through function pointer *(ts->set_reset): (*(ts->set_reset))((int)enable); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_input_allocate_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function of_get_named_gpio_flags to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function touchscreen_parse_of_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function irq_set_irq_wake to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2935165 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2877511 (98%)
  Because of loop head:            48045 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         9609 (0%)
  Times precision was empty:       487710 (17%)
  Times precision was {false}:     1269 (0%)
  Times result was cached:         2438969 (83%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7217 (0%)
  Times result was 'false':        58176 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1889932
  BDD entailment checks:           441876
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       106
Number of predicates discovered:          35
Number of abstraction locations:          199
Max number of predicates per location:    28
Avg number of predicates per location:    5
Total predicates per abstraction:         6504382
Max number of predicates per abstraction: 28
Avg number of predicates per abstraction: 766.48
Number of irrelevant predicates:          3067184 (47%)
Number of preds handled by boolean abs:   25120 (0%)
  Total number of models for allsat:      7802
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.08

Time for post operator:                 49.048s
  Time for path formula creation:       42.781s
Time for strengthen operator:           10.753s
Time for prec operator:                255.657s
  Time for abstraction:                229.315s (Max:     0.477s, Count: 2935165)
    Boolean abstraction:                 5.481s
    Solving time:                        4.567s (Max:     0.020s)
    Model enumeration time:              0.618s
    Time for BDD construction:           0.179s (Max:     0.012s)
Time for merge operator:                 3.866s
Time for coverage check:                 0.561s
  Time for BDD entailment checks:        0.351s
Total time for SMT solver (w/o itp):     5.185s

Number of path formula cache hits:   17520778 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    11.214s

Total number of created targets for pointer analysis: 288
   Number of created targets for uf: *(void)* is 125
   Number of created targets for uf: *unsigned_short_int is 151
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *unsigned_int is 3


Number of BDD nodes:                               2146
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       18364 (count: 984733, min: 0, max: 241, avg: 0.02)
Time for BDD node cleanup:                             0.183s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.578s
  Time for transition matches:                         9.494s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.028s
Automaton transfers with branching:                0
Automaton transfer successors:                     14271419 (count: 14271419, min: 1, max: 1, avg: 1.00) [1 x 14271419]

CPA algorithm statistics
------------------------
Number of iterations:            9314113
Max size of waitlist:            72
Average size of waitlist:        39
Number of computed successors:   10372194
Max successors for one state:    2
Number of times merged:          724028
Number of times stopped:         982597
Number of times breaked:         9609

Total time for CPA algorithm:       538.108s (Max:     2.429s)
  Time for choose from waitlist:      2.709s
  Time for precision adjustment:    319.089s
  Time for transfer relation:       161.692s
  Time for merge operator:           11.038s
  Time for stop operator:            10.065s
  Time for adding to reached set:    11.450s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9609
Avg. length of target path (in blocks):              924523 (count: 9609, min: 22, max: 224, avg: 96.21)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 221.910s
  Counterexample analysis:                           198.654s (Max:     0.255s, Calls: 9609)
    Refinement sat check:                            102.255s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.408s
  Error path post-processing:                          0.000s
  Predicate creation:                                  2.159s
  Precision update:                                    4.249s
  ARG update:                                         13.328s

Length of refined path (in blocks):                  726610 (count: 9609, min: 18, max: 158, avg: 75.62)
Number of affected states:                           349500 (count: 9609, min: 1, max: 124, avg: 36.37)
Length (states) of path with itp 'true':             367501 (count: 9609, min: 0, max: 101, avg: 38.25)
Length (states) of path with itp non-trivial itp:    349500 (count: 9609, min: 1, max: 124, avg: 36.37)
Length (states) of path with itp 'false':              9609 (count: 9609, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        6260 (count: 9609, min: 0, max: 3, avg: 0.65)
Equal non-trivial interpolants along paths:          333631 (count: 9609, min: 0, max: 123, avg: 34.72)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9609
Number of successful refinements:     9609
Number of failed refinements:         0
Max. size of reached set before ref.: 35447
Max. size of reached set after ref.:  32827
Avg. size of reached set before ref.: 11572.04
Avg. size of reached set after ref.:  10602.51

Total time for CEGAR algorithm:     894.726s
Time for refinements:               298.201s
Average time for refinement:          0.031s
Max time for refinement:              0.455s

Code Coverage
-----------------------------
  Function coverage:      0.559
  Visited lines:          1851
  Total lines:            2383
  Line coverage:          0.777
  Visited conditions:     496
  Total conditions:       742
  Condition coverage:     0.668

CPAchecker general statistics
-----------------------------
Number of program locations:     3472
Number of CFA edges:             3932
Number of relevant variables:    427
Number of functions:             170
Number of loops:                 2
Size of reached set:             15137
  Number of reached locations:   1259 (36%)
    Avg states per location:     12
    Max states per location:     160 (at node N169)
  Number of reached functions:   95 (56%)
  Number of partitions:          15000
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1929 (after line 6046), Function main called from node N1644, stack depth 1 [4abf3f0], stack [main]])
  Number of target states:       0
  Size of final wait list        20

Time for analysis setup:          5.582s
  Time for loading CPAs:          1.087s
  Time for loading parser:        0.693s
  Time for CFA construction:      3.695s
    Time for parsing file(s):     1.027s
    Time for AST to CFA:          1.246s
    Time for CFA sanity check:    0.284s
    Time for post-processing:     0.970s
      Time for var class.:        0.442s
Time for Analysis:              894.726s
CPU time for analysis:          894.640s
Total time for CPAchecker:      900.312s
Total CPU time for CPAchecker:  900.210s
Time for statistics:              0.328s

Time for Garbage Collector:      56.415s (in 3444 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                302MB (   288 MiB) max;    132MB (   126 MiB) avg;    308MB (   294 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           313MB (   298 MiB) max;    197MB (   187 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8220MB (  7839 MiB) max;   8136MB (  7759 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
