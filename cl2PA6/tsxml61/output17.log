scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--net--ethernet--hp--hp100.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_p_x4sej0/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5669: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5672: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5678: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (__preempt_count));
  goto ldv_6106;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6340: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 7550: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8455: Dead code detected: tmp___4 = preempt_count(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8456: Dead code detected: [!((((unsigned long)tmp___4) & 2096896UL) == 0UL)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8457: Dead code detected: schedule_timeout_interruptible(1L); (CFACreationUtils.addEdgeToCFA, INFO)

line 8461: Dead code detected: [((long)(((unsigned long)jiffies) - time)) < 0L] (CFACreationUtils.addEdgeToCFA, INFO)

line 8461: Dead code detected: [!(((long)(((unsigned long)jiffies) - time)) < 0L)] (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 6014-6015: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6048: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 8966: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8970: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8972: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_4 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_trans_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6014-6015: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, ((struct page *)0L) + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            42516 (23% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  39176 (92%)
  Because of loop head:            3336 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4 (0%)
  Times precision was empty:       42462 (100%)
  Times precision was {false}:     18 (0%)
  Times result was cached:         21 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      15 (0%)
  Times result was 'false':        8 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         16282
  BDD entailment checks:           7276
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          4
Number of abstraction locations:          5
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         98
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 2.97
Number of irrelevant predicates:          61 (62%)
Number of preds handled by boolean abs:   26 (27%)
  Total number of models for allsat:      36
  Max number of models for allsat:        8
  Avg number of models for allsat:        2.40

Time for post operator:                  7.128s
  Time for path formula creation:        6.771s
Time for strengthen operator:            0.628s
Time for prec operator:                  1.915s
  Time for abstraction:                  0.778s (Max:     0.028s, Count: 42516)
    Boolean abstraction:                 0.114s
    Solving time:                        0.077s (Max:     0.013s)
    Model enumeration time:              0.026s
    Time for BDD construction:           0.004s (Max:     0.002s)
Time for merge operator:                 0.296s
Time for coverage check:                 0.064s
  Time for BDD entailment checks:        0.055s
Total time for SMT solver (w/o itp):     0.103s

Number of path formula cache hits:   158682 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.516s

Total number of created targets for pointer analysis: 800
   Number of created targets for uf: *unsigned_char is 33
   Number of created targets for uf: *unsigned_int is 9
   Number of created targets for uf: *char is 57


Number of BDD nodes:                               218
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          60 (count: 49941, min: 0, max: 21, avg: 0.00)
Time for BDD node cleanup:                             0.058s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.840s
  Time for transition matches:                         0.345s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       182337 (count: 182337, min: 1, max: 1, avg: 1.00) [1 x 182337]

CPA algorithm statistics
------------------------
Number of iterations:            123999
Max size of waitlist:            187
Average size of waitlist:        123
Number of computed successors:   136346
Max successors for one state:    2
Number of times merged:          4503
Number of times stopped:         11748
Number of times breaked:         4

Total time for CPA algorithm:        22.937s (Max:     7.637s)
  Time for choose from waitlist:      0.212s
  Time for precision adjustment:      4.248s
  Time for transfer relation:        15.376s
  Time for merge operator:            0.611s
  Time for stop operator:             0.520s
  Time for adding to reached set:     0.609s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                 326 (count: 4, min: 80, max: 83, avg: 81.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.744s
  Counterexample analysis:                             0.102s (Max:     0.046s, Calls: 4)
    Refinement sat check:                              0.058s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.021s
  Precision update:                                    0.008s
  ARG update:                                          0.587s

Length of refined path (in blocks):                      65 (count: 4, min: 16, max: 17, avg: 16.25)
Number of affected states:                                3 (count: 4, min: 0, max: 1, avg: 0.75)
Length (states) of path with itp 'true':                 58 (count: 4, min: 14, max: 16, avg: 14.50)
Length (states) of path with itp non-trivial itp:         3 (count: 4, min: 0, max: 1, avg: 0.75)
Length (states) of path with itp 'false':                 4 (count: 4, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 4, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 34765
Max. size of reached set after ref.:  11480
Avg. size of reached set before ref.: 29083.00
Avg. size of reached set after ref.:  2905.25

Total time for CEGAR algorithm:      24.036s
Time for refinements:                 1.080s
Average time for refinement:          0.270s
Max time for refinement:              0.372s

Code Coverage
-----------------------------
  Function coverage:      0.562
  Visited lines:          2318
  Total lines:            3183
  Line coverage:          0.728
  Visited conditions:     497
  Total conditions:       744
  Condition coverage:     0.668

CPAchecker general statistics
-----------------------------
Number of program locations:     4320
Number of CFA edges:             5085
Number of relevant variables:    554
Number of functions:             137
Number of loops:                 35
Size of reached set:             19879
  Number of reached locations:   1419 (33%)
    Avg states per location:     14
    Max states per location:     1094 (at node N160)
  Number of reached functions:   77 (56%)
  Number of partitions:          19878
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2965 (before line 8984), Function main called from node N2927, stack depth 1 [64f1fd08], stack [main]])
  Number of target states:       0
  Size of final wait list        113

Time for analysis setup:          6.201s
  Time for loading CPAs:          0.946s
  Time for loading parser:        0.684s
  Time for CFA construction:      4.423s
    Time for parsing file(s):     1.148s
    Time for AST to CFA:          1.587s
    Time for CFA sanity check:    0.343s
    Time for post-processing:     1.167s
      Time for var class.:        0.481s
Time for Analysis:               24.036s
CPU time for analysis:           24.040s
Total time for CPAchecker:       30.247s
Total CPU time for CPAchecker:   30.220s
Time for statistics:              0.505s

Time for Garbage Collector:       1.579s (in 61 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                120MB (   115 MiB) max;     67MB (    64 MiB) avg;    132MB (   126 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    32 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           129MB (   123 MiB) max;    128MB (   122 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
