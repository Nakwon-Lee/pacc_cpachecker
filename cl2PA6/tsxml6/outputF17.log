scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--net--ethernet--sun--niu.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_boj0n2dq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 8098-8113: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 8100: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8103: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8105: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8109: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 8118-8133: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 8120: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8123: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8125: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8129: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8140: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8143: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8149: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 8158-8173: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 8160: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8163: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8165: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8169: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_45059;
  default:
  __bad_percpu_size();
  }
  ldv_45059:
  pscr_ret__ = pfo_ret__;
  goto ldv_45065;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_45069;
  default:
  __bad_percpu_size();
  }
  ldv_45069:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_45065;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_45078;
  default:
  __bad_percpu_size();
  }
  ldv_45078:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_45065;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 2UL:
  __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 4UL:
  __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  case 8UL:
  __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_45087;
  default:
  __bad_percpu_size();
  }
  ldv_45087:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_45065;
  default:
  __bad_size_call_parameter();
  goto ldv_45065;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 12766-12781: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 12768: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12771: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12773: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 12777: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 12786-12801: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 12788: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12791: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12793: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 12797: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 12808: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12811: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12817: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 12826-12841: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 12828: Dead code detected: __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12831: Dead code detected: __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 12833: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 12837: Dead code detected: __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_53039;
    default:
    __bad_percpu_size();
    }
    ldv_53039:
    pscr_ret__ = pfo_ret__;
    goto ldv_53045;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_53049;
    default:
    __bad_percpu_size();
    }
    ldv_53049:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_53045;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_53058;
    default:
    __bad_percpu_size();
    }
    ldv_53058:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_53045;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 2UL:
    __asm__ ("movw %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 4UL:
    __asm__ ("movl %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    case 8UL:
    __asm__ ("movq %%gs:%1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_53067;
    default:
    __bad_percpu_size();
    }
    ldv_53067:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_53045;
    default:
    __bad_size_call_parameter();
    goto ldv_53045;
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4096UL) {
    case 4096UL:
    rp->rbr_sizes[2] = 4096U;
    goto ldv_53311;
    default:
    rp->rbr_sizes[2] = 8192U;
    goto ldv_53311;
    } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7386: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7319-7320: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7416: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7353: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12505-12506: Function pointer *(np->ops->unmap_page) with type void (*)(struct device *, u64 , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12326: Function pointer *(np->ops->map_page) with type u64 (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12591: Function pointer *(np->ops->unmap_page) with type void (*)(struct device *, u64 , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12426-12427: Function pointer *(np->ops->unmap_page) with type void (*)(struct device *, u64 , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 17489-17490: Function pointer *(np->ops->map_single) with type u64 (*)(struct device *, void *, size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 17544-17545: Function pointer *(np->ops->map_page) with type u64 (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12647: Function pointer *(np->ops->unmap_single) with type void (*)(struct device *, u64 , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12678: Function pointer *(np->ops->unmap_page) with type void (*)(struct device *, u64 , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7683: Function pointer *(skb->destructor) with type void (*)(struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 22685: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_init_zalloc(64UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22689: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22691: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22701: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(184UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22707: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22719: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___17 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22723: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___19 = ldv_init_zalloc(196UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22725: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_init_zalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22729: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___22 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22735: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___25 = ldv_init_zalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_shutdown_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_resume_early_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_suspend_late_5 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ethtool_op_get_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_uninit_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ndo_init_6 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_free_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_alloc_attrs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 22029: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22226: Ignoring function call through function pointer *(timer->function): (*(timer->function))(timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7416: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, (struct dma_attrs *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7353: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function napi_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_tx_stop_all_queues to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11083: Ignoring function call through function pointer *(ops->link_status): err = (*(ops->link_status))(np, link_up_p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __local_bh_disable_ip to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __local_bh_enable_ip to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10728: Ignoring function call through function pointer *(ops->serdes_init): err = (*(ops->serdes_init))(np); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10712: Ignoring function call through function pointer *(ops->xcvr_init): err = (*(ops->xcvr_init))(np); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14000: Ignoring function call through function pointer *(np->ops->free_coherent): (*(np->ops->free_coherent))(np->device, 64UL, __CPAchecker_TMP_1, rp->mbox_dma); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 14021: Ignoring function call through function pointer *(np->ops->free_coherent): (*(np->ops->free_coherent))(np->device, 2048UL, __CPAchecker_TMP_3, rp->descr_dma); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13967: Ignoring function call through function pointer *(np->ops->free_coherent): (*(np->ops->free_coherent))(np->device, 64UL, __CPAchecker_TMP_1, rp->mbox_dma); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13973: Ignoring function call through function pointer *(np->ops->free_coherent): (*(np->ops->free_coherent))(np->device, 2048UL, __CPAchecker_TMP_3, rp->rcr_dma); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12591: Ignoring function call through function pointer *(np->ops->unmap_page): (*(np->ops->unmap_page))(np->device, base, 4096UL, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13982: Ignoring function call through function pointer *(np->ops->free_coherent): (*(np->ops->free_coherent))(np->device, 512UL, __CPAchecker_TMP_5, rp->rbr_dma); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12647: Ignoring function call through function pointer *(np->ops->unmap_single): (*(np->ops->unmap_single))(np->device, tb->mapping, (size_t )len, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12678: Ignoring function call through function pointer *(np->ops->unmap_page): (*(np->ops->unmap_page))(np->device, tb->mapping, (size_t )tmp___2, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11026: Ignoring function call through function pointer *(np->phy_ops->xcvr_init): err = (*(np->phy_ops->xcvr_init))(np); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12326: Ignoring function call through function pointer *(np->ops->map_page): addr = (*(np->ops->map_page))(np->device, page, 0UL, 4096UL, 2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_tx_wake_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_link to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_realloc_headroom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7683: Ignoring function call through function pointer *(skb->destructor): (*(skb->destructor))(skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 17489-17490: Ignoring function call through function pointer *(np->ops->map_single): mapping = (*(np->ops->map_single))(np->device, __CPAchecker_TMP_4, (size_t )len, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 17544-17545: Ignoring function call through function pointer *(np->ops->map_page): mapping = (*(np->ops->map_page))(np->device, tmp___8, __CPAchecker_TMP_11, (size_t )len, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2199299 (23% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1840325 (84%)
  Because of loop head:            358595 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         379 (0%)
  Times precision was empty:       1934711 (88%)
  Times precision was {false}:     923 (0%)
  Times result was cached:         263392 (12%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      273 (0%)
  Times result was 'false':        626 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         920961
  BDD entailment checks:           512343
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       180
Number of predicates discovered:          7
Number of abstraction locations:          174
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         301549
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 252.13
Number of irrelevant predicates:          273978 (91%)
Number of preds handled by boolean abs:   326 (0%)
  Total number of models for allsat:      336
  Max number of models for allsat:        32
  Avg number of models for allsat:        1.23

Time for post operator:                218.922s
  Time for path formula creation:      212.989s
Time for strengthen operator:           10.826s
Time for prec operator:                 59.933s
  Time for abstraction:                 23.134s (Max:     1.778s, Count: 2199299)
    Boolean abstraction:                 0.365s
    Solving time:                        0.647s (Max:     0.026s)
    Model enumeration time:              0.104s
    Time for BDD construction:           0.017s (Max:     0.005s)
Time for merge operator:                 8.640s
Time for coverage check:                 0.422s
  Time for BDD entailment checks:        0.259s
Total time for SMT solver (w/o itp):     0.751s

Number of path formula cache hits:   8166749 (72%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   135.699s

Total number of created targets for pointer analysis: 124141
   Number of created targets for uf: *unsigned_short_int is 511
   Number of created targets for uf: *(struct_sock)* is 2
   Number of created targets for uf: *signed_int is 1213
   Number of created targets for uf: *unsigned_char is 3
   Number of created targets for uf: *(struct_list_head)* is 4
   Number of created targets for uf: *unsigned_long_long_int is 3
   Number of created targets for uf: *unsigned_int is 37
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_sk_buff)*],_VarArgs:_false)* is 2


Number of BDD nodes:                               329
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         626 (count: 2453377, min: 0, max: 69, avg: 0.00)
Time for BDD node cleanup:                             0.321s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 12.915s
  Time for transition matches:                         6.853s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.003s
Automaton transfers with branching:                0
Automaton transfer successors:                      9716520 (count: 9716520, min: 1, max: 1, avg: 1.00) [1 x 9716520]

CPA algorithm statistics
------------------------
Number of iterations:            6656611
Max size of waitlist:            210
Average size of waitlist:        128
Number of computed successors:   7372229
Max successors for one state:    2
Number of times merged:          204309
Number of times stopped:         711571
Number of times breaked:         379

Total time for CPA algorithm:       741.076s (Max:    52.115s)
  Time for choose from waitlist:      3.303s
  Time for precision adjustment:    131.954s
  Time for transfer relation:       551.255s
  Time for merge operator:           12.469s
  Time for stop operator:             9.225s
  Time for adding to reached set:    14.464s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   379
Avg. length of target path (in blocks):               80135 (count: 379, min: 110, max: 358, avg: 211.44)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  41.919s
  Counterexample analysis:                            23.508s (Max:     0.170s, Calls: 379)
    Refinement sat check:                              9.746s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.039s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.102s
  Precision update:                                    0.066s
  ARG update:                                         17.868s

Length of refined path (in blocks):                   78060 (count: 379, min: 102, max: 268, avg: 205.96)
Number of affected states:                             8487 (count: 379, min: 1, max: 167, avg: 22.39)
Length (states) of path with itp 'true':              69194 (count: 379, min: 98, max: 200, avg: 182.57)
Length (states) of path with itp non-trivial itp:      8487 (count: 379, min: 1, max: 167, avg: 22.39)
Length (states) of path with itp 'false':               379 (count: 379, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 379, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8108 (count: 379, min: 0, max: 166, avg: 21.39)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                379
Number of successful refinements:     379
Number of failed refinements:         0
Max. size of reached set before ref.: 417046
Max. size of reached set after ref.:  339743
Avg. size of reached set before ref.: 168980.99
Avg. size of reached set after ref.:  152413.98

Total time for CEGAR algorithm:     892.679s
Time for refinements:               102.786s
Average time for refinement:          0.271s
Max time for refinement:              1.871s

Code Coverage
-----------------------------
  Function coverage:      0.706
  Visited lines:          8043
  Total lines:            10952
  Line coverage:          0.734
  Visited conditions:     2560
  Total conditions:       3508
  Condition coverage:     0.730

CPAchecker general statistics
-----------------------------
Number of program locations:     15826
Number of CFA edges:             18620
Number of relevant variables:    2484
Number of functions:             530
Number of loops:                 173
Size of reached set:             381134
  Number of reached locations:   7466 (47%)
    Avg states per location:     51
    Max states per location:     14942 (at node N1357)
  Number of reached functions:   374 (71%)
  Number of partitions:          381085
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N14465 (before line 22783), Function main called from node N14271, stack depth 1 [5a079446], stack [main]])
  Number of target states:       0
  Size of final wait list        106

Time for analysis setup:         10.514s
  Time for loading CPAs:          1.428s
  Time for loading parser:        0.695s
  Time for CFA construction:      8.229s
    Time for parsing file(s):     1.552s
    Time for AST to CFA:          2.845s
    Time for CFA sanity check:    0.973s
    Time for post-processing:     2.787s
      Time for var class.:        1.213s
Time for Analysis:              892.679s
CPU time for analysis:          892.640s
Total time for CPAchecker:      903.197s
Total CPU time for CPAchecker:  903.140s
Time for statistics:              3.541s

Time for Garbage Collector:     106.644s (in 477 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2541MB (  2423 MiB) max;    915MB (   873 MiB) avg;   2634MB (  2512 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:          3209MB (  3061 MiB) max;   1308MB (  1247 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8083MB (  7708 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
