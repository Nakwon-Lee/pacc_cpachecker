scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-43_2a-drivers--mtd--ubi--ubi.ko-entry_point_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_54gxk88d/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4604: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4607: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4610: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3233;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3233;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3233;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3233;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12374: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12377: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12383: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_31703;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_31703;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_31703;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_31703;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_31703;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12615: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12618: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12624: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_31739;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_31739;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_31739;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_31739;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_31739;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 20596: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 20601: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 20606: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      tmp___4 = get_current();
      __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___4->state): : "memory",
                           "cc");
      goto ldv_30491;
      case 2UL:
      tmp___5 = get_current();
      __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                           "cc");
      goto ldv_30491;
      case 4UL:
      tmp___6 = get_current();
      __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                           "cc");
      goto ldv_30491;
      case 8UL:
      tmp___7 = get_current();
      __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___7->state): : "memory",
                           "cc");
      goto ldv_30491;
      default:
      __xchg_wrong_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13161: Function pointer *(mtd->_sync) with type void (*)(struct mtd_info *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 10251: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_init_zalloc(40UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10257: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10263: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10269: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10275: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10279: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10285: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10291: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___19 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10301: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___24 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10303: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___25 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10309: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___28 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10315: Destroying the void* pointer ldv_init_zalloc::tmp produces garbage or the memory pointed by it is unused: tmp___31 = ldv_init_zalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_mq_start_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_rq_map_sg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_rwsem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_insert_color to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_erase to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_block_isbad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function yield to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prandom_u32 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_le to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_first to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function print_hex_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            494312 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  459135 (93%)
  Because of loop head:            32184 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2993 (1%)
  Times precision was empty:       253879 (51%)
  Times precision was {false}:     740 (0%)
  Times result was cached:         238976 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      717 (0%)
  Times result was 'false':        1093 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         262174
  BDD entailment checks:           93076
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       198
Number of predicates discovered:          3
Number of abstraction locations:          205
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         391772
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 268.89
Number of irrelevant predicates:          278230 (71%)
Number of preds handled by boolean abs:   808 (0%)
  Total number of models for allsat:      725
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                 35.345s
  Time for path formula creation:       34.192s
Time for strengthen operator:            2.142s
Time for prec operator:                 30.410s
  Time for abstraction:                 22.792s (Max:     0.166s, Count: 494312)
    Boolean abstraction:                 0.785s
    Solving time:                        1.296s (Max:     0.091s)
    Model enumeration time:              0.062s
    Time for BDD construction:           0.077s (Max:     0.012s)
Time for merge operator:                 2.064s
Time for coverage check:                 0.172s
  Time for BDD entailment checks:        0.121s
Total time for SMT solver (w/o itp):     1.358s

Number of path formula cache hits:   2715626 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    18.059s

Total number of created targets for pointer analysis: 77622
   Number of created targets for uf: *signed_int is 20095
   Number of created targets for uf: *unsigned_char is 989
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *unsigned_long_int is 31


Number of BDD nodes:                               207
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1451 (count: 354977, min: 0, max: 276, avg: 0.00)
Time for BDD node cleanup:                             0.086s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.295s
  Time for transition matches:                         1.729s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.018s
Automaton transfers with branching:                0
Automaton transfer successors:                      2291838 (count: 2291838, min: 1, max: 1, avg: 1.00) [1 x 2291838]

CPA algorithm statistics
------------------------
Number of iterations:            1581965
Max size of waitlist:            67
Average size of waitlist:        52
Number of computed successors:   1753008
Max successors for one state:    2
Number of times merged:          84549
Number of times stopped:         165604
Number of times breaked:         2993

Total time for CPA algorithm:       175.565s (Max:     2.327s)
  Time for choose from waitlist:      0.746s
  Time for precision adjustment:     40.863s
  Time for transfer relation:       121.049s
  Time for merge operator:            3.223s
  Time for stop operator:             2.186s
  Time for adding to reached set:     2.951s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2993
Avg. length of target path (in blocks):              779771 (count: 2993, min: 127, max: 332, avg: 260.53)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 670.304s
  Counterexample analysis:                           662.779s (Max:     0.508s, Calls: 2993)
    Refinement sat check:                            404.287s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.405s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.393s
  Precision update:                                    1.589s
  ARG update:                                          2.479s

Length of refined path (in blocks):                  774763 (count: 2992, min: 126, max: 331, avg: 258.94)
Number of affected states:                            35237 (count: 2992, min: 6, max: 177, avg: 11.78)
Length (states) of path with itp 'true':             736534 (count: 2992, min: 0, max: 324, avg: 246.17)
Length (states) of path with itp non-trivial itp:     35237 (count: 2992, min: 6, max: 177, avg: 11.78)
Length (states) of path with itp 'false':              2992 (count: 2992, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2992, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           32245 (count: 2992, min: 5, max: 176, avg: 10.78)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2993
Number of successful refinements:     2992
Number of failed refinements:         0
Max. size of reached set before ref.: 12744
Max. size of reached set after ref.:  12629
Avg. size of reached set before ref.: 8963.34
Avg. size of reached set after ref.:  8436.15

Total time for CEGAR algorithm:     888.860s
Time for refinements:               698.006s
Average time for refinement:          0.233s
Max time for refinement:              0.861s

Code Coverage
-----------------------------
  Function coverage:      0.195
  Visited lines:          2565
  Total lines:            15987
  Line coverage:          0.160
  Visited conditions:     610
  Total conditions:       4800
  Condition coverage:     0.127

CPAchecker general statistics
-----------------------------
Number of program locations:     21474
Number of CFA edges:             25598
Number of relevant variables:    3913
Number of functions:             514
Number of loops:                 181
Size of reached set:             12180
  Number of reached locations:   1533 (7%)
    Avg states per location:     7
    Max states per location:     278 (at node N89)
  Number of reached functions:   100 (19%)
  Number of partitions:          12148
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N8870 (before line 15009), Function ubi_eba_read_leb called from node N8944, stack depth 14 [4427be7b], stack [main, ubi_exit, ubiblock_exit, ubiblock_remove_all, ubiblock_cleanup, ldv_destroy_workqueue_492, call_and_disable_all_2, call_and_disable_work_2, ubiblock_do_work, ubiblock_read, ubi_read_sg, ubi_leb_read_sg, ubi_eba_read_leb_sg, ubi_eba_read_leb]])
  Number of target states:       1
  Size of final wait list        54

Time for analysis setup:         11.439s
  Time for loading CPAs:          1.365s
  Time for loading parser:        0.682s
  Time for CFA construction:      9.253s
    Time for parsing file(s):     1.574s
    Time for AST to CFA:          3.469s
    Time for CFA sanity check:    0.933s
    Time for post-processing:     3.073s
      Time for var class.:        1.756s
Time for Analysis:              888.860s
CPU time for analysis:          888.720s
Total time for CPAchecker:      900.303s
Total CPU time for CPAchecker:  900.130s
Time for statistics:              0.361s

Time for Garbage Collector:      10.751s (in 655 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                244MB (   233 MiB) max;    155MB (   148 MiB) avg;    250MB (   239 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           253MB (   241 MiB) max;    225MB (   214 MiB) avg
Allocated non-heap memory:        45MB (    43 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8286MB (  7902 MiB) max;   8186MB (  7807 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
