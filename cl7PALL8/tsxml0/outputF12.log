scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-usb-serial-whiteheat.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4lgd_ua3/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3767: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 3770: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 3776: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 3778: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7914: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7977: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_clear_halt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ezusb_set_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_port_softint to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_insert_flip_string_fixed_flag to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ezusb_writememory to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            11048 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            8020 (73%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3028 (27%)
  Times precision was empty:       1145 (10%)
  Times precision was {false}:     319 (3%)
  Times result was cached:         8994 (81%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      590 (5%)
  Times result was 'false':        3237 (29%)
Number of strengthen sat checks:   0
Number of coverage checks:         123315
  BDD entailment checks:           6769
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       288
Number of predicates discovered:          5
Number of abstraction locations:          21
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         18820
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 20.70
Number of irrelevant predicates:          4359 (23%)
Number of preds handled by boolean abs:   1104 (6%)
  Total number of models for allsat:      810
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.37

Time for post operator:                  7.627s
  Time for path formula creation:        7.170s
Time for strengthen operator:            0.604s
Time for prec operator:                 16.916s
  Time for abstraction:                 16.267s (Max:     0.324s, Count: 11048)
    Boolean abstraction:                 6.543s
    Solving time:                        7.684s (Max:     0.213s)
    Model enumeration time:              1.013s
    Time for BDD construction:           0.069s (Max:     0.013s)
Time for merge operator:                 1.239s
Time for coverage check:                 0.048s
  Time for BDD entailment checks:        0.024s
Total time for SMT solver (w/o itp):     8.697s

Number of path formula cache hits:   743013 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.068s

Total number of created targets for pointer analysis: 1210
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *unsigned_char is 9
   Number of created targets for uf: *(struct_list_head)* is 781
   Number of created targets for uf: *(struct_firmware)* is 29
   Number of created targets for uf: *(struct_usb_serial_port)* is 3


Number of BDD nodes:                               231
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1201 (count: 13308, min: 0, max: 51, avg: 0.09)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.985s
  Time for transition matches:                         0.475s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.027s
Automaton transfers with branching:                0
Automaton transfer successors:                       750087 (count: 750087, min: 1, max: 1, avg: 1.00) [1 x 750087]

CPA algorithm statistics
------------------------
Number of iterations:            513318
Max size of waitlist:            39
Average size of waitlist:        21
Number of computed successors:   580123
Max successors for one state:    2
Number of times merged:          58273
Number of times stopped:         62871
Number of times breaked:         31

Total time for CPA algorithm:        39.504s (Max:     5.108s)
  Time for choose from waitlist:      0.188s
  Time for precision adjustment:     20.778s
  Time for transfer relation:        14.119s
  Time for merge operator:            1.961s
  Time for stop operator:             0.510s
  Time for adding to reached set:     0.661s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   31
Avg. length of target path (in blocks):                 124 (count: 31, min: 1, max: 9, avg: 4.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.864s
  Counterexample analysis:                             0.630s (Max:     0.037s, Calls: 31)
    Refinement sat check:                              0.531s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.016s
  Precision update:                                    0.018s
  ARG update:                                          1.160s

Length of refined path (in blocks):                     116 (count: 31, min: 1, max: 9, avg: 3.74)
Number of affected states:                               84 (count: 31, min: 0, max: 8, avg: 2.71)
Length (states) of path with itp 'true':                  1 (count: 31, min: 0, max: 1, avg: 0.03)
Length (states) of path with itp non-trivial itp:        84 (count: 31, min: 0, max: 8, avg: 2.71)
Length (states) of path with itp 'false':                 3 (count: 31, min: 0, max: 1, avg: 0.10)
Different non-trivial interpolants along paths:           0 (count: 31, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              56 (count: 31, min: 0, max: 7, avg: 1.81)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     31
Number of failed refinements:         0
Max. size of reached set before ref.: 28359
Max. size of reached set after ref.:  26013
Avg. size of reached set before ref.: 16640.65
Avg. size of reached set after ref.:  883.26

Total time for CEGAR algorithm:      41.876s
Time for refinements:                 2.357s
Average time for refinement:          0.076s
Max time for refinement:              0.211s

Code Coverage
-----------------------------
  Function coverage:      0.821
  Visited lines:          1998
  Total lines:            2342
  Line coverage:          0.853
  Visited conditions:     324
  Total conditions:       410
  Condition coverage:     0.790

CPAchecker general statistics
-----------------------------
Number of program locations:     3151
Number of CFA edges:             3482
Number of relevant variables:    395
Number of functions:             78
Number of loops:                 24
Size of reached set:             25537
  Number of reached locations:   1313 (42%)
    Avg states per location:     19
    Max states per location:     336 (at node N151)
  Number of reached functions:   64 (82%)
  Number of partitions:          25536
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2783 (before lines 7650-7857), Function main called from node N2754, stack depth 1 [971e903], stack [main]])
  Number of target states:       0

Time for analysis setup:          3.872s
  Time for loading CPAs:          0.778s
  Time for loading parser:        0.477s
  Time for CFA construction:      2.517s
    Time for parsing file(s):     0.696s
    Time for AST to CFA:          0.788s
    Time for CFA sanity check:    0.208s
    Time for post-processing:     0.682s
      Time for var class.:        0.295s
Time for Analysis:               41.877s
CPU time for analysis:           41.880s
Time for analyzing result:        0.019s
Total time for CPAchecker:       45.752s
Total CPU time for CPAchecker:   45.740s
Time for statistics:              0.350s

Time for Garbage Collector:       3.834s (in 211 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                126MB (   120 MiB) max;     70MB (    67 MiB) avg;    130MB (   124 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     37MB (    35 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           129MB (   123 MiB) max;    127MB (   122 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   8067MB (  7693 MiB) max;   8060MB (  7686 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
