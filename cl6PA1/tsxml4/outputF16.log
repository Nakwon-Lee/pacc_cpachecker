scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-net-slip-ko--108_1a--1b0b0ac.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0_djd5yq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4761: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4764: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4767: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5152: Dead code detected: __ptr = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5156: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5160: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_38994;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_38994;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_38994;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_38994;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5175: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5179: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5183: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39006;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39006;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39006;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39006;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5198: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5202: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5206: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39018;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39018;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39018;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39018;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5221: Dead code detected: __ptr___11 = (u8 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5225: Dead code detected: __ptr___12 = (u16 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5229: Dead code detected: __ptr___13 = (u32 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___11 = (u8 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___2), "+m" (*__ptr___11): "0" (__x___2): "memory");
  goto ldv_39030;
  case 2UL:
  __ptr___12 = (u16 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___2), "+m" (*__ptr___12): "0" (__x___2): "memory");
  goto ldv_39030;
  case 4UL:
  __ptr___13 = (u32 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___2), "+m" (*__ptr___13): "0" (__x___2): "memory");
  goto ldv_39030;
  case 8UL:
  __ptr___14 = (u64 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___2), "+m" (*__ptr___14): "0" (__x___2): "memory");
  goto ldv_39030;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5285: Dead code detected: __ptr = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5289: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5293: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_39053;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_39053;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_39053;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_39053;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5308: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5312: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5316: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39065;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39065;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39065;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39065;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5331: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5335: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5339: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39077;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39077;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39077;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39077;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5354: Dead code detected: __ptr___11 = (u8 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5358: Dead code detected: __ptr___12 = (u16 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5362: Dead code detected: __ptr___13 = (u32 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___11 = (u8 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___2), "+m" (*__ptr___11): "0" (__x___2): "memory");
  goto ldv_39089;
  case 2UL:
  __ptr___12 = (u16 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___2), "+m" (*__ptr___12): "0" (__x___2): "memory");
  goto ldv_39089;
  case 4UL:
  __ptr___13 = (u32 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___2), "+m" (*__ptr___13): "0" (__x___2): "memory");
  goto ldv_39089;
  case 8UL:
  __ptr___14 = (u64 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___2), "+m" (*__ptr___14): "0" (__x___2): "memory");
  goto ldv_39089;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5444: Dead code detected: __ptr = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5448: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5452: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_39113;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_39113;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_39113;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_39113;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5467: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5471: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5475: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39125;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39125;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39125;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39125;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5490: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5494: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5498: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39137;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39137;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39137;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39137;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6546: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6549: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6555: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6572: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6575: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6581: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6608: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6611: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6617: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6656-6657: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6660-6661: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6668-6669: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6687: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6690: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6696: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6735-6736: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6739-6740: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6747-6748: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7296: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7310: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 5669-5670: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7035: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5704: Function pointer *(tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_compress to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5669-5670: Ignoring function call through function pointer *(sl->tty->ops->write): actual = (*(sl->tty->ops->write))(sl->tty, __CPAchecker_TMP_2, count); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_trans_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_chars_in_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_remember to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_uncompress to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5704: Ignoring function call through function pointer *(tty->ops->write): actual = (*(tty->ops->write))(tty, __CPAchecker_TMP_2, sl->xleft); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7035: Ignoring function call through function pointer *(sl->tty->ops->write): (*(sl->tty->ops->write))(sl->tty, (const unsigned char *)(&s), 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function alloc_netdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1330028 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1116899 (84%)
  Because of loop head:            212012 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1117 (0%)
  Times precision was empty:       339610 (26%)
  Times precision was {false}:     2555 (0%)
  Times result was cached:         927905 (70%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      59958 (5%)
  Times result was 'false':        32082 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1478514
  BDD entailment checks:           931254
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       32
Number of predicates discovered:          64
Number of abstraction locations:          225
Max number of predicates per location:    19
Avg number of predicates per location:    6
Total predicates per abstraction:         8605809
Max number of predicates per abstraction: 19
Avg number of predicates per abstraction: 137.66
Number of irrelevant predicates:          3370216 (39%)
Number of preds handled by boolean abs:   334024 (4%)
  Total number of models for allsat:      297192
  Max number of models for allsat:        120
  Avg number of models for allsat:        4.96

Time for post operator:                112.637s
  Time for path formula creation:      108.556s
Time for strengthen operator:            6.310s
Time for prec operator:                525.849s
  Time for abstraction:                510.161s (Max:     3.280s, Count: 1330028)
    Boolean abstraction:               102.075s
    Solving time:                       70.542s (Max:     0.035s)
    Model enumeration time:             20.185s
    Time for BDD construction:           5.671s (Max:     0.110s)
Time for merge operator:                 4.657s
Time for coverage check:                 1.040s
  Time for BDD entailment checks:        0.785s
Total time for SMT solver (w/o itp):    90.727s

Number of path formula cache hits:   5280813 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    91.778s

Total number of created targets for pointer analysis: 16210
   Number of created targets for uf: *unsigned_char is 319
   Number of created targets for uf: *(unsigned_char)* is 267
   Number of created targets for uf: *unsigned_int is 1763
   Number of created targets for uf: *char is 61
   Number of created targets for uf: *unsigned_long_int is 824


Number of BDD nodes:                               77473
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      147320 (count: 1660083, min: 0, max: 3822, avg: 0.09)
Time for BDD node cleanup:                             0.295s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.512s
  Time for transition matches:                         6.626s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.021s
Automaton transfers with branching:                0
Automaton transfer successors:                      7110993 (count: 7110993, min: 1, max: 1, avg: 1.00) [1 x 7110993]

CPA algorithm statistics
------------------------
Number of iterations:            4756692
Max size of waitlist:            699
Average size of waitlist:        182
Number of computed successors:   5405782
Max successors for one state:    2
Number of times merged:          273630
Number of times stopped:         524583
Number of times breaked:         1117

Total time for CPA algorithm:       792.253s (Max:     4.934s)
  Time for choose from waitlist:      2.635s
  Time for precision adjustment:    564.158s
  Time for transfer relation:       183.896s
  Time for merge operator:            9.557s
  Time for stop operator:             7.304s
  Time for adding to reached set:    10.016s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1117
Avg. length of target path (in blocks):              203499 (count: 1117, min: 13, max: 742, avg: 182.18)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  92.436s
  Counterexample analysis:                            81.442s (Max:     0.570s, Calls: 1117)
    Refinement sat check:                             32.679s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.122s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.450s
  Precision update:                                    0.810s
  ARG update:                                          8.545s

Length of refined path (in blocks):                  150361 (count: 1117, min: 8, max: 370, avg: 134.61)
Number of affected states:                            42365 (count: 1117, min: 1, max: 368, avg: 37.93)
Length (states) of path with itp 'true':             106879 (count: 1117, min: 0, max: 259, avg: 95.68)
Length (states) of path with itp non-trivial itp:     42365 (count: 1117, min: 1, max: 368, avg: 37.93)
Length (states) of path with itp 'false':              1117 (count: 1117, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1221 (count: 1117, min: 0, max: 16, avg: 1.09)
Equal non-trivial interpolants along paths:           40027 (count: 1117, min: 0, max: 365, avg: 35.83)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1117
Number of successful refinements:     1117
Number of failed refinements:         0
Max. size of reached set before ref.: 22815
Max. size of reached set after ref.:  20752
Avg. size of reached set before ref.: 7725.45
Avg. size of reached set after ref.:  3386.80

Total time for CEGAR algorithm:     894.698s
Time for refinements:               100.063s
Average time for refinement:          0.089s
Max time for refinement:              0.611s

Code Coverage
-----------------------------
  Function coverage:      0.722
  Visited lines:          1497
  Total lines:            2154
  Line coverage:          0.695
  Visited conditions:     196
  Total conditions:       430
  Condition coverage:     0.456

CPAchecker general statistics
-----------------------------
Number of program locations:     2769
Number of CFA edges:             3078
Number of relevant variables:    366
Number of functions:             72
Number of loops:                 11
Size of reached set:             2839
  Number of reached locations:   628 (23%)
    Avg states per location:     4
    Max states per location:     43 (at node N133)
  Number of reached functions:   52 (72%)
  Number of partitions:          2818
    Avg size of partitions:      1
    Max size of partitions:      8 (with key [N2419 (before line 7270), Function main called from node N2236, stack depth 1 [155d1021], stack [main]])
  Number of target states:       0
  Size of final wait list        104

Time for analysis setup:          5.521s
  Time for loading CPAs:          1.017s
  Time for loading parser:        0.771s
  Time for CFA construction:      3.617s
    Time for parsing file(s):     1.065s
    Time for AST to CFA:          1.349s
    Time for CFA sanity check:    0.225s
    Time for post-processing:     0.771s
      Time for var class.:        0.362s
Time for Analysis:              894.698s
CPU time for analysis:          894.590s
Total time for CPAchecker:      900.223s
Total CPU time for CPAchecker:  900.100s
Time for statistics:              0.139s

Time for Garbage Collector:      45.622s (in 731 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1306MB (  1245 MiB) max;    666MB (   635 MiB) avg;   1325MB (  1264 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1629MB (  1554 MiB) max;   1026MB (   979 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:  10380MB (  9899 MiB) max;   9096MB (  8675 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
