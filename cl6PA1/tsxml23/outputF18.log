scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/main3_true-unreach-call_drivers-media-video-tlg2300-poseidon-ko--32_7a--4a349aa-1_false-termination.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_15dcuvv_/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5250: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5253: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5256: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6886: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6891: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6896: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29173;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29173;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29173;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29173;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6985: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6990: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6995: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29212;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29212;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29212;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29212;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7433: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7438: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7443: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29340;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29340;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29340;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29340;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8231: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9085: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9250: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9255: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9260: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_25814;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_25814;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_25814;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_25814;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10048: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10053: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10058: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26025;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26025;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26025;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26025;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10224: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10461: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10466: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10471: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28568;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28568;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28568;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28568;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10691: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10696: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10701: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28619;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28619;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28619;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28619;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10790: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10795: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10800: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28648;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28648;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28648;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28648;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11363: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12581: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11164: Destroying the void* pointer ldv_successful_malloc::p produces garbage or the memory pointed by it is unused: v4l2_querymenu_p1 = ldv_successful_malloc(44); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11167: Destroying the void* pointer ldv_successful_malloc::p produces garbage or the memory pointed by it is unused: v4l2_control_p1 = ldv_successful_malloc(8); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function v4l2_ctrl_query_fill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function video_devdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            103282 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  84563 (82%)
  Because of loop head:            17055 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1664 (2%)
  Times precision was empty:       24432 (24%)
  Times precision was {false}:     275 (0%)
  Times result was cached:         76230 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2345 (2%)
  Times result was 'false':        6926 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         84342
  BDD entailment checks:           23662
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       139
Number of predicates discovered:          8
Number of abstraction locations:          103
Max number of predicates per location:    7
Avg number of predicates per location:    5
Total predicates per abstraction:         278076
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 106.14
Number of irrelevant predicates:          132164 (48%)
Number of preds handled by boolean abs:   6368 (2%)
  Total number of models for allsat:      2350
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 13.312s
  Time for path formula creation:       12.879s
Time for strengthen operator:            0.729s
Time for prec operator:                 86.406s
  Time for abstraction:                 84.870s (Max:     0.476s, Count: 103282)
    Boolean abstraction:                24.565s
    Solving time:                       24.707s (Max:     0.425s)
    Model enumeration time:              1.345s
    Time for BDD construction:           0.099s (Max:     0.006s)
Time for merge operator:                 0.375s
Time for coverage check:                 0.090s
  Time for BDD entailment checks:        0.072s
Total time for SMT solver (w/o itp):    26.052s

Number of path formula cache hits:   1000527 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.233s

Total number of created targets for pointer analysis: 339439
   Number of created targets for uf: *(void)* is 2
   Number of created targets for uf: *signed_char is 101
   Number of created targets for uf: *(struct_v4l2_ext_control)* is 2
   Number of created targets for uf: *signed_int is 132
   Number of created targets for uf: *(struct_list_head)* is 11
   Number of created targets for uf: *(struct_file)* is 28
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_poseidon)*],_VarArgs:_false)* is 55
   Number of created targets for uf: *unsigned_int is 15


Number of BDD nodes:                               316
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4911 (count: 64011, min: 0, max: 94, avg: 0.08)
Time for BDD node cleanup:                             0.023s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.400s
  Time for transition matches:                         0.745s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                       902924 (count: 902924, min: 1, max: 1, avg: 1.00) [1 x 902924]

CPA algorithm statistics
------------------------
Number of iterations:            424146
Max size of waitlist:            29
Average size of waitlist:        19
Number of computed successors:   486556
Max successors for one state:    2
Number of times merged:          30340
Number of times stopped:         49258
Number of times breaked:         1664

Total time for CPA algorithm:       115.001s (Max:     1.330s)
  Time for choose from waitlist:      0.210s
  Time for precision adjustment:     89.254s
  Time for transfer relation:        21.973s
  Time for merge operator:            0.872s
  Time for stop operator:             0.704s
  Time for adding to reached set:     0.688s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1664
Avg. length of target path (in blocks):               76590 (count: 1664, min: 32, max: 68, avg: 46.03)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 222.967s
  Counterexample analysis:                           221.085s (Max:     0.550s, Calls: 1664)
    Refinement sat check:                            195.848s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.036s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.214s
  Precision update:                                    0.472s
  ARG update:                                          0.718s

Length of refined path (in blocks):                   73260 (count: 1664, min: 31, max: 67, avg: 44.03)
Number of affected states:                            16711 (count: 1664, min: 3, max: 36, avg: 10.04)
Length (states) of path with itp 'true':              54885 (count: 1664, min: 27, max: 50, avg: 32.98)
Length (states) of path with itp non-trivial itp:     16711 (count: 1664, min: 3, max: 36, avg: 10.04)
Length (states) of path with itp 'false':              1664 (count: 1664, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1664, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           15047 (count: 1664, min: 2, max: 35, avg: 9.04)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1664
Number of successful refinements:     1664
Number of failed refinements:         0
Max. size of reached set before ref.: 1723
Max. size of reached set after ref.:  1429
Avg. size of reached set before ref.: 974.39
Avg. size of reached set after ref.:  716.46

Total time for CEGAR algorithm:     340.362s
Time for refinements:               224.635s
Average time for refinement:          0.134s
Max time for refinement:              0.562s

Code Coverage
-----------------------------
  Function coverage:      0.129
  Visited lines:          1646
  Total lines:            4921
  Line coverage:          0.334
  Visited conditions:     176
  Total conditions:       1216
  Condition coverage:     0.145

CPAchecker general statistics
-----------------------------
Number of program locations:     6914
Number of CFA edges:             7728
Number of relevant variables:    977
Number of functions:             317
Number of loops:                 37
Size of reached set:             1182
  Number of reached locations:   550 (8%)
    Avg states per location:     2
    Max states per location:     26 (at node N5115)
  Number of reached functions:   41 (13%)
  Number of partitions:          1182
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.886s
  Time for loading CPAs:          1.065s
  Time for loading parser:        0.548s
  Time for CFA construction:      5.107s
    Time for parsing file(s):     1.128s
    Time for AST to CFA:          1.852s
    Time for CFA sanity check:    0.531s
    Time for post-processing:     1.371s
      Time for var class.:        0.707s
Time for Analysis:              340.362s
CPU time for analysis:          340.300s
Time for analyzing result:        0.001s
Total time for CPAchecker:      347.252s
Total CPU time for CPAchecker:  347.170s
Time for statistics:              0.112s

Time for Garbage Collector:       3.726s (in 878 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 81MB (    77 MiB) max;     58MB (    55 MiB) avg;     84MB (    81 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8286MB (  7902 MiB) max;   8178MB (  7799 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
