scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/main1_true-unreach-call_drivers-media-video-tlg2300-poseidon-ko--32_7a--4a349aa_false-termination.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hzj15l_5/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5249: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5252: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5255: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6883: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6888: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6893: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29169;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29169;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29169;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29169;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6982: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6987: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6992: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29208;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29208;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29208;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29208;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7430: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7435: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7440: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29336;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29336;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29336;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29336;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8217: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9061: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9226: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9231: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9236: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_25814;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_25814;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_25814;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_25814;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10024: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10029: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10034: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26025;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26025;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26025;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26025;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10200: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10437: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10442: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10447: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28568;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28568;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28568;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28568;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10667: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10672: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10677: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28619;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28619;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28619;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28619;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10766: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10771: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10776: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28648;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28648;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28648;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28648;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11248: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12466: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_pcm_hw_constraint_integer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            4941 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3632 (74%)
  Because of loop head:            1254 (25%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         55 (1%)
  Times precision was empty:       1504 (30%)
  Times precision was {false}:     90 (2%)
  Times result was cached:         2885 (58%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      462 (9%)
  Times result was 'false':        595 (12%)
Number of strengthen sat checks:   0
Number of coverage checks:         4469
  BDD entailment checks:           1695
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          6
Number of abstraction locations:          38
Max number of predicates per location:    5
Avg number of predicates per location:    4
Total predicates per abstraction:         13445
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 24.36
Number of irrelevant predicates:          4265 (32%)
Number of preds handled by boolean abs:   1270 (9%)
  Total number of models for allsat:      462
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.751s
  Time for path formula creation:        1.683s
Time for strengthen operator:            0.134s
Time for prec operator:                  4.541s
  Time for abstraction:                  4.199s (Max:     0.036s, Count: 4941)
    Boolean abstraction:                 1.391s
    Solving time:                        1.231s (Max:     0.019s)
    Model enumeration time:              0.117s
    Time for BDD construction:           0.080s (Max:     0.009s)
Time for merge operator:                 0.067s
Time for coverage check:                 0.032s
  Time for BDD entailment checks:        0.027s
Total time for SMT solver (w/o itp):     1.348s

Number of path formula cache hits:   33565 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.421s

Total number of created targets for pointer analysis: 794
   Number of created targets for uf: *signed_int is 191
   Number of created targets for uf: *(struct_list_head)* is 11
   Number of created targets for uf: *unsigned_int is 5
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               222
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         959 (count: 6468, min: 0, max: 165, avg: 0.15)
Time for BDD node cleanup:                             0.013s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.355s
Automaton transfers with branching:                0
Automaton transfer successors:                        31973 (count: 31973, min: 1, max: 1, avg: 1.00) [1 x 31973]

CPA algorithm statistics
------------------------
Number of iterations:            19901
Max size of waitlist:            13
Average size of waitlist:        7
Number of computed successors:   23360
Max successors for one state:    2
Number of times merged:          1387
Number of times stopped:         2439
Number of times breaked:         55

Total time for CPA algorithm:         9.415s (Max:     1.139s)
  Time for choose from waitlist:      0.079s
  Time for precision adjustment:      5.150s
  Time for transfer relation:         3.246s
  Time for merge operator:            0.231s
  Time for stop operator:             0.167s
  Time for adding to reached set:     0.130s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   55
Avg. length of target path (in blocks):                 600 (count: 55, min: 6, max: 20, avg: 10.91)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.179s
  Counterexample analysis:                             0.872s (Max:     0.032s, Calls: 55)
    Refinement sat check:                              0.708s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.061s
  Precision update:                                    0.056s
  ARG update:                                          0.137s

Length of refined path (in blocks):                     545 (count: 55, min: 5, max: 19, avg: 9.91)
Number of affected states:                              435 (count: 55, min: 3, max: 17, avg: 7.91)
Length (states) of path with itp 'true':                 55 (count: 55, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       435 (count: 55, min: 3, max: 17, avg: 7.91)
Length (states) of path with itp 'false':                55 (count: 55, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 55, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             380 (count: 55, min: 2, max: 16, avg: 6.91)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                55
Number of successful refinements:     55
Number of failed refinements:         0
Max. size of reached set before ref.: 451
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 370.76
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      10.726s
Time for refinements:                 1.305s
Average time for refinement:          0.023s
Max time for refinement:              0.098s

Code Coverage
-----------------------------
  Function coverage:      0.057
  Visited lines:          1104
  Total lines:            4827
  Line coverage:          0.229
  Visited conditions:     80
  Total conditions:       1210
  Condition coverage:     0.066

CPAchecker general statistics
-----------------------------
Number of program locations:     6787
Number of CFA edges:             7586
Number of relevant variables:    960
Number of functions:             315
Number of loops:                 37
Size of reached set:             265
  Number of reached locations:   227 (3%)
    Avg states per location:     1
    Max states per location:     9 (at node N3089)
  Number of reached functions:   18 (6%)
  Number of partitions:          265
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          7.122s
  Time for loading CPAs:          1.086s
  Time for loading parser:        0.702s
  Time for CFA construction:      5.183s
    Time for parsing file(s):     1.226s
    Time for AST to CFA:          1.935s
    Time for CFA sanity check:    0.446s
    Time for post-processing:     1.333s
      Time for var class.:        0.677s
Time for Analysis:               10.727s
CPU time for analysis:           10.730s
Time for analyzing result:        0.000s
Total time for CPAchecker:       17.859s
Total CPU time for CPAchecker:   17.850s
Time for statistics:              0.096s

Time for Garbage Collector:       0.366s (in 23 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 72MB (    69 MiB) max;     47MB (    44 MiB) avg;     77MB (    74 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     31MB (    30 MiB) avg;     38MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     33MB (    31 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8062MB (  7689 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
