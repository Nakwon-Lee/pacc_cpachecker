scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-acceleration/diamond_true-unreach-call2.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bfj_pji7/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            47 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            24 (51%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         23 (49%)
  Times precision was empty:       2 (4%)
  Times precision was {false}:     22 (47%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      23 (49%)
  Times result was 'false':        18 (38%)
Number of strengthen sat checks:   0
Number of coverage checks:         412
  BDD entailment checks:           52
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       21
Number of predicates discovered:          18
Number of abstraction locations:          2
Max number of predicates per location:    17
Avg number of predicates per location:    9
Total predicates per abstraction:         311
Max number of predicates per abstraction: 17
Avg number of predicates per abstraction: 6.91
Number of irrelevant predicates:          22 (7%)
Number of preds handled by boolean abs:   289 (93%)
  Total number of models for allsat:      202
  Max number of models for allsat:        25
  Avg number of models for allsat:        8.78

Time for post operator:                  0.370s
  Time for path formula creation:        0.364s
Time for strengthen operator:            0.017s
Time for prec operator:                  0.939s
  Time for abstraction:                  0.911s (Max:     0.047s, Count: 47)
    Boolean abstraction:                 0.380s
    Solving time:                        0.227s (Max:     0.017s)
    Model enumeration time:              0.072s
    Time for BDD construction:           0.091s (Max:     0.019s)
Time for merge operator:                 0.016s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.299s

Number of path formula cache hits:   985 (65%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.344s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               4110
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 1065, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.049s
Automaton transfers with branching:                0
Automaton transfer successors:                         1387 (count: 1387, min: 1, max: 1, avg: 1.00) [1 x 1387]

CPA algorithm statistics
------------------------
Number of iterations:            1136
Max size of waitlist:            3
Average size of waitlist:        1
Number of computed successors:   1344
Max successors for one state:    2
Number of times merged:          180
Number of times stopped:         181
Number of times breaked:         5

Total time for CPA algorithm:         1.827s (Max:     0.608s)
  Time for choose from waitlist:      0.006s
  Time for precision adjustment:      1.060s
  Time for transfer relation:         0.591s
  Time for merge operator:            0.067s
  Time for stop operator:             0.024s
  Time for adding to reached set:     0.023s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  21 (count: 5, min: 2, max: 7, avg: 4.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.173s
  Counterexample analysis:                             0.103s (Max:     0.038s, Calls: 5)
    Refinement sat check:                              0.061s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.044s
  Precision update:                                    0.008s
  ARG update:                                          0.011s

Length of refined path (in blocks):                      21 (count: 5, min: 2, max: 7, avg: 4.20)
Number of affected states:                               16 (count: 5, min: 1, max: 6, avg: 3.20)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        16 (count: 5, min: 1, max: 6, avg: 3.20)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:          11 (count: 5, min: 0, max: 5, avg: 2.20)
Equal non-trivial interpolants along paths:               0 (count: 5, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 317
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 146.20
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       2.075s
Time for refinements:                 0.248s
Average time for refinement:          0.049s
Max time for refinement:              0.112s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          27
  Total lines:            27
  Line coverage:          1.000
  Visited conditions:     24
  Total conditions:       24
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     74
Number of CFA edges:             85
Number of relevant variables:    4
Number of functions:             2
Number of loops:                 1
Size of reached set:             430
  Number of reached locations:   64 (86%)
    Avg states per location:     6
    Max states per location:     7 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          424
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N14 (before line 12), Function main called from node N9, stack depth 1 [63376bed], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.510s
  Time for loading CPAs:          0.782s
  Time for loading parser:        0.736s
  Time for CFA construction:      0.854s
    Time for parsing file(s):     0.304s
    Time for AST to CFA:          0.191s
    Time for CFA sanity check:    0.037s
    Time for post-processing:     0.157s
      Time for var class.:        0.044s
Time for Analysis:                2.075s
CPU time for analysis:            2.080s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.590s
Total CPU time for CPAchecker:    4.590s
Time for statistics:              0.102s

Time for Garbage Collector:       0.098s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 54MB (    51 MiB) max;     31MB (    29 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             31MB (    29 MiB) max;     24MB (    23 MiB) avg;     33MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        34MB (    32 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8066MB (  7692 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
