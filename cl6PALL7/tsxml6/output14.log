scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b7buwbvu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            147 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            17 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         130 (88%)
  Times precision was empty:       39 (27%)
  Times precision was {false}:     99 (67%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9 (6%)
  Times result was 'false':        98 (67%)
Number of strengthen sat checks:   0
Number of coverage checks:         1391
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1295
Number of predicates discovered:          3
Number of abstraction locations:          4
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         112
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 1.04
Number of irrelevant predicates:          99 (88%)
Number of preds handled by boolean abs:   13 (12%)
  Total number of models for allsat:      8
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.89

Time for post operator:                  2.706s
  Time for path formula creation:        2.648s
Time for strengthen operator:            0.070s
Time for prec operator:                 15.116s
  Time for abstraction:                 15.029s (Max:     0.506s, Count: 147)
    Boolean abstraction:                 0.259s
    Solving time:                       11.575s (Max:     0.459s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.766s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.001s
Total time for SMT solver (w/o itp):    11.577s

Number of path formula cache hits:   4579 (33%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.487s

Total number of created targets for pointer analysis: 13098
   Number of created targets for uf: *(void)* is 13
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_dentry)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 2
   Number of created targets for uf: *enum_rfkill_type is 6
   Number of created targets for uf: *(struct_rfkill)* is 7
   Number of created targets for uf: *(struct_platform_device)* is 2
   Number of created targets for uf: *unsigned_short_int is 19
   Number of created targets for uf: *(struct_backlight_device)* is 3
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_char is 108
   Number of created targets for uf: *_Bool is 5
   Number of created targets for uf: *(struct_workqueue_struct)* is 2
   Number of created targets for uf: *unsigned_int is 209


Number of BDD nodes:                               203
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          28 (count: 693, min: 0, max: 16, avg: 0.04)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.210s
Automaton transfers with branching:                0
Automaton transfer successors:                        13648 (count: 13648, min: 1, max: 1, avg: 1.00) [1 x 13648]

CPA algorithm statistics
------------------------
Number of iterations:            9055
Max size of waitlist:            20
Average size of waitlist:        9
Number of computed successors:   9882
Max successors for one state:    2
Number of times merged:          694
Number of times stopped:         697
Number of times breaked:         32

Total time for CPA algorithm:        20.499s (Max:     7.191s)
  Time for choose from waitlist:      0.055s
  Time for precision adjustment:     15.425s
  Time for transfer relation:         3.797s
  Time for merge operator:            0.855s
  Time for stop operator:             0.057s
  Time for adding to reached set:     0.111s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   32
Avg. length of target path (in blocks):                  37 (count: 32, min: 1, max: 3, avg: 1.16)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.135s
  Counterexample analysis:                             3.968s (Max:     0.330s, Calls: 32)
    Refinement sat check:                              3.626s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.005s
  Precision update:                                    0.023s
  ARG update:                                          0.042s

Length of refined path (in blocks):                      37 (count: 32, min: 1, max: 3, avg: 1.16)
Number of affected states:                                5 (count: 32, min: 0, max: 2, avg: 0.16)
Length (states) of path with itp 'true':                  0 (count: 32, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         5 (count: 32, min: 0, max: 2, avg: 0.16)
Length (states) of path with itp 'false':                 0 (count: 32, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 32, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               2 (count: 32, min: 0, max: 1, avg: 0.06)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                32
Number of successful refinements:     32
Number of failed refinements:         0
Max. size of reached set before ref.: 5278
Max. size of reached set after ref.:  2465
Avg. size of reached set before ref.: 1587.88
Avg. size of reached set after ref.:  1491.38

Total time for CEGAR algorithm:      24.935s
Time for refinements:                 4.396s
Average time for refinement:          0.137s
Max time for refinement:              0.349s

Code Coverage
-----------------------------
  Function coverage:      0.492
  Visited lines:          1305
  Total lines:            1928
  Line coverage:          0.677
  Visited conditions:     214
  Total conditions:       440
  Condition coverage:     0.486

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             5999
  Number of reached locations:   715 (26%)
    Avg states per location:     8
    Max states per location:     184 (at node N32)
  Number of reached functions:   61 (49%)
  Number of partitions:          5999
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          5.336s
  Time for loading CPAs:          0.891s
  Time for loading parser:        0.714s
  Time for CFA construction:      3.600s
    Time for parsing file(s):     1.061s
    Time for AST to CFA:          1.213s
    Time for CFA sanity check:    0.229s
    Time for post-processing:     0.917s
      Time for var class.:        0.499s
Time for Analysis:               24.936s
CPU time for analysis:           24.930s
Total time for CPAchecker:       30.276s
Total CPU time for CPAchecker:   30.250s
Time for statistics:              0.216s

Time for Garbage Collector:       0.384s (in 30 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 71MB (    67 MiB) max;     46MB (    44 MiB) avg;     74MB (    70 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     34MB (    32 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8199MB (  7820 MiB) max;   8120MB (  7744 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
