scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b7r1f15_/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            3449 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            386 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3063 (89%)
  Times precision was empty:       71 (2%)
  Times precision was {false}:     1266 (37%)
  Times result was cached:         1983 (57%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      129 (4%)
  Times result was 'false':        3064 (89%)
Number of strengthen sat checks:   0
Number of coverage checks:         42487
  BDD entailment checks:           291
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1717
Number of predicates discovered:          10
Number of abstraction locations:          6
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         5179
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 3.71
Number of irrelevant predicates:          3168 (61%)
Number of preds handled by boolean abs:   588 (11%)
  Total number of models for allsat:      155
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.20

Time for post operator:                 10.516s
  Time for path formula creation:       10.212s
Time for strengthen operator:            0.411s
Time for prec operator:                284.598s
  Time for abstraction:                284.195s (Max:     1.648s, Count: 3449)
    Boolean abstraction:                21.890s
    Solving time:                      182.851s (Max:     0.956s)
    Model enumeration time:              5.944s
    Time for BDD construction:           0.037s (Max:     0.008s)
Time for merge operator:                 4.809s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.002s
Total time for SMT solver (w/o itp):   188.795s

Number of path formula cache hits:   319346 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.458s

Total number of created targets for pointer analysis: 162961
   Number of created targets for uf: *(void)* is 287
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_dentry)* is 11
   Number of created targets for uf: *(struct_sabi_config)* is 23
   Number of created targets for uf: *enum_rfkill_type is 51
   Number of created targets for uf: *(struct_platform_device)* is 13
   Number of created targets for uf: *(struct_rfkill)* is 51
   Number of created targets for uf: *unsigned_short_int is 1504
   Number of created targets for uf: *(struct_backlight_device)* is 11
   Number of created targets for uf: *signed_int is 51
   Number of created targets for uf: *unsigned_char is 2475
   Number of created targets for uf: *_Bool is 37
   Number of created targets for uf: *(struct_workqueue_struct)* is 11
   Number of created targets for uf: *unsigned_int is 385
   Number of created targets for uf: *char is 21


Number of BDD nodes:                               490
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         649 (count: 8880, min: 0, max: 188, avg: 0.07)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.872s
  Time for transition matches:                         0.298s
  Time for transition assertions:                      0.013s
  Time for transition actions:                         0.025s
Automaton transfers with branching:                0
Automaton transfer successors:                       372240 (count: 372240, min: 1, max: 1, avg: 1.00) [1 x 372240]

CPA algorithm statistics
------------------------
Number of iterations:            264976
Max size of waitlist:            20
Average size of waitlist:        8
Number of computed successors:   289391
Max successors for one state:    2
Number of times merged:          21098
Number of times stopped:         21238
Number of times breaked:         52

Total time for CPA algorithm:       310.402s (Max:    29.626s)
  Time for choose from waitlist:      0.187s
  Time for precision adjustment:    286.712s
  Time for transfer relation:        15.957s
  Time for merge operator:            5.220s
  Time for stop operator:             0.429s
  Time for adding to reached set:     0.679s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   52
Avg. length of target path (in blocks):                 134 (count: 52, min: 1, max: 7, avg: 2.58)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.682s
  Counterexample analysis:                            14.836s (Max:     0.798s, Calls: 52)
    Refinement sat check:                             13.729s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.010s
  Precision update:                                    0.012s
  ARG update:                                          0.649s

Length of refined path (in blocks):                     130 (count: 52, min: 1, max: 7, avg: 2.50)
Number of affected states:                               74 (count: 52, min: 0, max: 6, avg: 1.42)
Length (states) of path with itp 'true':                  4 (count: 52, min: 0, max: 4, avg: 0.08)
Length (states) of path with itp non-trivial itp:        74 (count: 52, min: 0, max: 6, avg: 1.42)
Length (states) of path with itp 'false':                 2 (count: 52, min: 0, max: 1, avg: 0.04)
Different non-trivial interpolants along paths:           4 (count: 52, min: 0, max: 1, avg: 0.08)
Equal non-trivial interpolants along paths:              47 (count: 52, min: 0, max: 5, avg: 0.90)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                52
Number of successful refinements:     52
Number of failed refinements:         0
Max. size of reached set before ref.: 31187
Max. size of reached set after ref.:  19190
Avg. size of reached set before ref.: 6729.85
Avg. size of reached set after ref.:  2187.71

Total time for CEGAR algorithm:     326.734s
Time for refinements:                16.246s
Average time for refinement:          0.312s
Max time for refinement:              0.853s

Code Coverage
-----------------------------
  Function coverage:      0.565
  Visited lines:          1498
  Total lines:            1928
  Line coverage:          0.777
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             28899
  Number of reached locations:   905 (33%)
    Avg states per location:     31
    Max states per location:     888 (at node N32)
  Number of reached functions:   70 (56%)
  Number of partitions:          28893
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N706 (before line 4610), Function find_signature called from node N1206, stack depth 5 [4f186450], stack [main, samsung_init, samsung_sabi_init, samsung_sabi_diag, find_signature]])
  Number of target states:       0

Time for analysis setup:          5.844s
  Time for loading CPAs:          1.160s
  Time for loading parser:        0.785s
  Time for CFA construction:      3.715s
    Time for parsing file(s):     1.046s
    Time for AST to CFA:          1.262s
    Time for CFA sanity check:    0.234s
    Time for post-processing:     0.974s
      Time for var class.:        0.529s
Time for Analysis:              326.736s
CPU time for analysis:          326.720s
Time for analyzing result:        0.024s
Total time for CPAchecker:      332.587s
Total CPU time for CPAchecker:  332.560s
Time for statistics:              0.540s

Time for Garbage Collector:       8.133s (in 930 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                139MB (   132 MiB) max;     80MB (    76 MiB) avg;    142MB (   136 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     38MB (    36 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           142MB (   136 MiB) max;    130MB (   124 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8488MB (  8095 MiB) max;   8307MB (  7922 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
