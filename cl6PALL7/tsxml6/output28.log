scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7fp0l57b/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            177 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            37 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         140 (79%)
  Times precision was empty:       41 (23%)
  Times precision was {false}:     111 (63%)
  Times result was cached:         9 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      16 (9%)
  Times result was 'false':        106 (60%)
Number of strengthen sat checks:   0
Number of coverage checks:         1579
  BDD entailment checks:           15
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1086
Number of predicates discovered:          3
Number of abstraction locations:          5
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         148
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 1.17
Number of irrelevant predicates:          113 (76%)
Number of preds handled by boolean abs:   23 (16%)
  Total number of models for allsat:      15
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.94

Time for post operator:                  3.154s
  Time for path formula creation:        3.097s
Time for strengthen operator:            0.114s
Time for prec operator:                 13.980s
  Time for abstraction:                 13.883s (Max:     0.559s, Count: 177)
    Boolean abstraction:                 0.281s
    Solving time:                       10.884s (Max:     0.491s)
    Model enumeration time:              0.010s
    Time for BDD construction:           0.010s (Max:     0.008s)
Time for merge operator:                 0.983s
Time for coverage check:                 0.002s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):    10.894s

Number of path formula cache hits:   3216 (21%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.893s

Total number of created targets for pointer analysis: 16375
   Number of created targets for uf: *(void)* is 27
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 3
   Number of created targets for uf: *(struct_dentry)* is 2
   Number of created targets for uf: *enum_rfkill_type is 6
   Number of created targets for uf: *(struct_platform_device)* is 2
   Number of created targets for uf: *(struct_rfkill)* is 7
   Number of created targets for uf: *unsigned_short_int is 357
   Number of created targets for uf: *(struct_backlight_device)* is 4
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_char is 108
   Number of created targets for uf: *_Bool is 9
   Number of created targets for uf: *(struct_workqueue_struct)* is 2
   Number of created targets for uf: *unsigned_int is 13
   Number of created targets for uf: *char is 21


Number of BDD nodes:                               204
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          42 (count: 817, min: 0, max: 18, avg: 0.05)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.230s
Automaton transfers with branching:                0
Automaton transfer successors:                        15212 (count: 15212, min: 1, max: 1, avg: 1.00) [1 x 15212]

CPA algorithm statistics
------------------------
Number of iterations:            10106
Max size of waitlist:            20
Average size of waitlist:        8
Number of computed successors:   11047
Max successors for one state:    2
Number of times merged:          782
Number of times stopped:         795
Number of times breaked:         34

Total time for CPA algorithm:        20.070s (Max:     6.044s)
  Time for choose from waitlist:      0.048s
  Time for precision adjustment:     14.282s
  Time for transfer relation:         4.222s
  Time for merge operator:            1.086s
  Time for stop operator:             0.068s
  Time for adding to reached set:     0.126s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   34
Avg. length of target path (in blocks):                  45 (count: 34, min: 1, max: 4, avg: 1.32)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.311s
  Counterexample analysis:                             4.161s (Max:     0.304s, Calls: 34)
    Refinement sat check:                              3.849s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.009s
  Precision update:                                    0.008s
  ARG update:                                          0.044s

Length of refined path (in blocks):                      45 (count: 34, min: 1, max: 4, avg: 1.32)
Number of affected states:                               11 (count: 34, min: 0, max: 3, avg: 0.32)
Length (states) of path with itp 'true':                  0 (count: 34, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        11 (count: 34, min: 0, max: 3, avg: 0.32)
Length (states) of path with itp 'false':                 0 (count: 34, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 34, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               6 (count: 34, min: 0, max: 2, avg: 0.18)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                34
Number of successful refinements:     34
Number of failed refinements:         0
Max. size of reached set before ref.: 5304
Max. size of reached set after ref.:  2465
Avg. size of reached set before ref.: 1728.68
Avg. size of reached set after ref.:  1548.62

Total time for CEGAR algorithm:      24.784s
Time for refinements:                 4.646s
Average time for refinement:          0.136s
Max time for refinement:              0.332s

Code Coverage
-----------------------------
  Function coverage:      0.492
  Visited lines:          1303
  Total lines:            1928
  Line coverage:          0.676
  Visited conditions:     222
  Total conditions:       440
  Condition coverage:     0.505

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             4024
  Number of reached locations:   715 (26%)
    Avg states per location:     5
    Max states per location:     119 (at node N32)
  Number of reached functions:   61 (49%)
  Number of partitions:          4024
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        8

Time for analysis setup:          5.444s
  Time for loading CPAs:          0.993s
  Time for loading parser:        0.804s
  Time for CFA construction:      3.539s
    Time for parsing file(s):     1.025s
    Time for AST to CFA:          1.148s
    Time for CFA sanity check:    0.231s
    Time for post-processing:     0.938s
      Time for var class.:        0.504s
Time for Analysis:               24.784s
CPU time for analysis:           24.780s
Total time for CPAchecker:       30.235s
Total CPU time for CPAchecker:   30.210s
Time for statistics:              0.144s

Time for Garbage Collector:       0.374s (in 30 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     47MB (    44 MiB) avg;     74MB (    71 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8134MB (  7758 MiB) max;   8119MB (  7743 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
