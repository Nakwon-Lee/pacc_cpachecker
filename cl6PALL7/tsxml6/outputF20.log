scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_psl98yze/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            4534 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            484 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         4050 (89%)
  Times precision was empty:       201 (4%)
  Times precision was {false}:     4013 (89%)
  Times result was cached:         19 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      301 (7%)
  Times result was 'false':        4123 (91%)
Number of strengthen sat checks:   0
Number of coverage checks:         57131
  BDD entailment checks:           925
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1717
Number of predicates discovered:          21
Number of abstraction locations:          4
Max number of predicates per location:    20
Avg number of predicates per location:    7
Total predicates per abstraction:         7095
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 1.64
Number of irrelevant predicates:          4213 (59%)
Number of preds handled by boolean abs:   2882 (41%)
  Total number of models for allsat:      927
  Max number of models for allsat:        16
  Avg number of models for allsat:        3.08

Time for post operator:                 24.712s
  Time for path formula creation:       24.381s
Time for strengthen operator:            0.674s
Time for prec operator:                829.291s
  Time for abstraction:                828.699s (Max:     0.850s, Count: 4534)
    Boolean abstraction:                 1.670s
    Solving time:                      669.023s (Max:     0.760s)
    Model enumeration time:              0.143s
    Time for BDD construction:           0.096s (Max:     0.011s)
Time for merge operator:                13.498s
Time for coverage check:                 0.022s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):   669.166s

Number of path formula cache hits:   266686 (52%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    21.831s

Total number of created targets for pointer analysis: 520598
   Number of created targets for uf: *(void)* is 469
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 10
   Number of created targets for uf: *(struct_dentry)* is 38
   Number of created targets for uf: *enum_rfkill_type is 186
   Number of created targets for uf: *(struct_platform_device)* is 38
   Number of created targets for uf: *(struct_rfkill)* is 167
   Number of created targets for uf: *unsigned_short_int is 8577
   Number of created targets for uf: *(struct_backlight_device)* is 38
   Number of created targets for uf: *signed_int is 223
   Number of created targets for uf: *unsigned_char is 9576
   Number of created targets for uf: *_Bool is 145
   Number of created targets for uf: *(struct_workqueue_struct)* is 38
   Number of created targets for uf: *unsigned_int is 1381
   Number of created targets for uf: *char is 21


Number of BDD nodes:                               7267
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4358 (count: 28556, min: 0, max: 1096, avg: 0.15)
Time for BDD node cleanup:                             0.025s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.260s
  Time for transition matches:                         0.545s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.033s
Automaton transfers with branching:                0
Automaton transfer successors:                       493784 (count: 493784, min: 1, max: 1, avg: 1.00) [1 x 493784]

CPA algorithm statistics
------------------------
Number of iterations:            351623
Max size of waitlist:            20
Average size of waitlist:        9
Number of computed successors:   384135
Max successors for one state:    2
Number of times merged:          28103
Number of times stopped:         28272
Number of times breaked:         43

Total time for CPA algorithm:       882.222s (Max:   181.635s)
  Time for choose from waitlist:      0.248s
  Time for precision adjustment:    832.237s
  Time for transfer relation:        32.455s
  Time for merge operator:           14.062s
  Time for stop operator:             0.620s
  Time for adding to reached set:     1.002s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   43
Avg. length of target path (in blocks):                 127 (count: 43, min: 1, max: 17, avg: 2.95)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  11.503s
  Counterexample analysis:                            10.119s (Max:     0.615s, Calls: 43)
    Refinement sat check:                              9.334s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.012s
  Precision update:                                    0.014s
  ARG update:                                          1.187s

Length of refined path (in blocks):                     111 (count: 43, min: 1, max: 15, avg: 2.58)
Number of affected states:                               68 (count: 43, min: 0, max: 14, avg: 1.58)
Length (states) of path with itp 'true':                  0 (count: 43, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        68 (count: 43, min: 0, max: 14, avg: 1.58)
Length (states) of path with itp 'false':                 8 (count: 43, min: 0, max: 1, avg: 0.19)
Different non-trivial interpolants along paths:          49 (count: 43, min: 0, max: 13, avg: 1.14)
Equal non-trivial interpolants along paths:               5 (count: 43, min: 0, max: 1, avg: 0.12)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                43
Number of successful refinements:     43
Number of failed refinements:         0
Max. size of reached set before ref.: 74435
Max. size of reached set after ref.:  2521
Avg. size of reached set before ref.: 9409.98
Avg. size of reached set after ref.:  1741.49

Total time for CEGAR algorithm:     894.332s
Time for refinements:                12.024s
Average time for refinement:          0.279s
Max time for refinement:              0.910s

Code Coverage
-----------------------------
  Function coverage:      0.492
  Visited lines:          1325
  Total lines:            1928
  Line coverage:          0.687
  Visited conditions:     230
  Total conditions:       440
  Condition coverage:     0.523

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             21995
  Number of reached locations:   739 (27%)
    Avg states per location:     29
    Max states per location:     674 (at node N32)
  Number of reached functions:   61 (49%)
  Number of partitions:          21976
    Avg size of partitions:      1
    Max size of partitions:      16 (with key [N706 (before line 4610), Function find_signature called from node N1206, stack depth 5 [4f186450], stack [main, samsung_init, samsung_sabi_init, samsung_sabi_diag, find_signature]])
  Number of target states:       0
  Size of final wait list        5

Time for analysis setup:          5.947s
  Time for loading CPAs:          1.244s
  Time for loading parser:        0.801s
  Time for CFA construction:      3.717s
    Time for parsing file(s):     1.072s
    Time for AST to CFA:          1.161s
    Time for CFA sanity check:    0.258s
    Time for post-processing:     1.028s
      Time for var class.:        0.535s
Time for Analysis:              894.332s
CPU time for analysis:          894.300s
Total time for CPAchecker:      900.286s
Total CPU time for CPAchecker:  900.240s
Time for statistics:              0.437s

Time for Garbage Collector:      14.083s (in 1141 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                198MB (   189 MiB) max;    113MB (   108 MiB) avg;    211MB (   201 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     38MB (    36 MiB) avg;     39MB (    38 MiB) peak
Allocated heap memory:           241MB (   230 MiB) max;    168MB (   160 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   9130MB (  8707 MiB) max;   8622MB (  8223 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
