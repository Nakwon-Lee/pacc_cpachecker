scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3emy2pym/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1722 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            200 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1522 (88%)
  Times precision was empty:       57 (3%)
  Times precision was {false}:     935 (54%)
  Times result was cached:         636 (37%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      94 (5%)
  Times result was 'false':        1488 (86%)
Number of strengthen sat checks:   0
Number of coverage checks:         20781
  BDD entailment checks:           73
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1717
Number of predicates discovered:          8
Number of abstraction locations:          6
Max number of predicates per location:    7
Avg number of predicates per location:    5
Total predicates per abstraction:         2421
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.35
Number of irrelevant predicates:          1574 (65%)
Number of preds handled by boolean abs:   354 (15%)
  Total number of models for allsat:      103
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.10

Time for post operator:                  7.482s
  Time for path formula creation:        7.282s
Time for strengthen operator:            0.205s
Time for prec operator:                171.605s
  Time for abstraction:                171.337s (Max:     1.578s, Count: 1722)
    Boolean abstraction:                13.918s
    Solving time:                      125.687s (Max:     0.968s)
    Model enumeration time:              3.436s
    Time for BDD construction:           0.024s (Max:     0.008s)
Time for merge operator:                 3.143s
Time for coverage check:                 0.008s
  Time for BDD entailment checks:        0.004s
Total time for SMT solver (w/o itp):   129.123s

Number of path formula cache hits:   154879 (81%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.065s

Total number of created targets for pointer analysis: 91306
   Number of created targets for uf: *(void)* is 157
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 3
   Number of created targets for uf: *(struct_dentry)* is 6
   Number of created targets for uf: *enum_rfkill_type is 26
   Number of created targets for uf: *(struct_platform_device)* is 8
   Number of created targets for uf: *(struct_rfkill)* is 29
   Number of created targets for uf: *unsigned_short_int is 74
   Number of created targets for uf: *(struct_backlight_device)* is 10
   Number of created targets for uf: *signed_int is 31
   Number of created targets for uf: *unsigned_char is 7261
   Number of created targets for uf: *_Bool is 4
   Number of created targets for uf: *(struct_workqueue_struct)* is 6
   Number of created targets for uf: *unsigned_int is 180
   Number of created targets for uf: *char is 21


Number of BDD nodes:                               296
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         378 (count: 6370, min: 0, max: 69, avg: 0.06)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.568s
  Time for transition matches:                         0.222s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                       183853 (count: 183853, min: 1, max: 1, avg: 1.00) [1 x 183853]

CPA algorithm statistics
------------------------
Number of iterations:            130546
Max size of waitlist:            20
Average size of waitlist:        8
Number of computed successors:   142549
Max successors for one state:    2
Number of times merged:          10354
Number of times stopped:         10401
Number of times breaked:         51

Total time for CPA algorithm:       188.614s (Max:    30.402s)
  Time for choose from waitlist:      0.145s
  Time for precision adjustment:    172.695s
  Time for transfer relation:        10.812s
  Time for merge operator:            3.428s
  Time for stop operator:             0.227s
  Time for adding to reached set:     0.416s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   51
Avg. length of target path (in blocks):                 129 (count: 51, min: 1, max: 7, avg: 2.53)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.033s
  Counterexample analysis:                            14.412s (Max:     0.851s, Calls: 51)
    Refinement sat check:                             13.325s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.016s
  ARG update:                                          0.450s

Length of refined path (in blocks):                     127 (count: 51, min: 1, max: 7, avg: 2.49)
Number of affected states:                               72 (count: 51, min: 0, max: 6, avg: 1.41)
Length (states) of path with itp 'true':                  4 (count: 51, min: 0, max: 4, avg: 0.08)
Length (states) of path with itp non-trivial itp:        72 (count: 51, min: 0, max: 6, avg: 1.41)
Length (states) of path with itp 'false':                 1 (count: 51, min: 0, max: 1, avg: 0.02)
Different non-trivial interpolants along paths:           3 (count: 51, min: 0, max: 1, avg: 0.06)
Equal non-trivial interpolants along paths:              47 (count: 51, min: 0, max: 5, avg: 0.92)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                51
Number of successful refinements:     51
Number of failed refinements:         0
Max. size of reached set before ref.: 12079
Max. size of reached set after ref.:  9579
Avg. size of reached set before ref.: 4176.45
Avg. size of reached set after ref.:  1993.24

Total time for CEGAR algorithm:     204.270s
Time for refinements:                15.589s
Average time for refinement:          0.305s
Max time for refinement:              0.888s

Code Coverage
-----------------------------
  Function coverage:      0.565
  Visited lines:          1498
  Total lines:            1928
  Line coverage:          0.777
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             19317
  Number of reached locations:   905 (33%)
    Avg states per location:     21
    Max states per location:     590 (at node N32)
  Number of reached functions:   70 (56%)
  Number of partitions:          19315
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N706 (before line 4610), Function find_signature called from node N1206, stack depth 5 [41c204a0], stack [main, samsung_init, samsung_sabi_init, samsung_sabi_diag, find_signature]])
  Number of target states:       0

Time for analysis setup:          5.618s
  Time for loading CPAs:          0.982s
  Time for loading parser:        0.714s
  Time for CFA construction:      3.750s
    Time for parsing file(s):     1.073s
    Time for AST to CFA:          1.202s
    Time for CFA sanity check:    0.256s
    Time for post-processing:     1.026s
      Time for var class.:        0.545s
Time for Analysis:              204.270s
CPU time for analysis:          204.260s
Time for analyzing result:        0.021s
Total time for CPAchecker:      209.902s
Total CPU time for CPAchecker:  209.870s
Time for statistics:              0.432s

Time for Garbage Collector:       3.650s (in 429 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                124MB (   118 MiB) max;     69MB (    65 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     37MB (    35 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8273MB (  7890 MiB) max;   8183MB (  7803 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
