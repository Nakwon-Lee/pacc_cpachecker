scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--scsi--aic7xxx_old.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_thwsz5np/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6289: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 6373: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 7975: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 15763: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7112: Function pointer *(cmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4749: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4782: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4639-4640: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4673: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function panic to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_adjust_queue_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_dma_unmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4673: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcat to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4782: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4749: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6098: Ignoring function call through function pointer *(cur_patch->patch_func): tmp = (*(cur_patch->patch_func))(p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            191395 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            191326 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         69 (0%)
  Times precision was empty:       190835 (100%)
  Times precision was {false}:     75 (0%)
  Times result was cached:         436 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      49 (0%)
  Times result was 'false':        70 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         995598
  BDD entailment checks:           101646
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       888
Number of predicates discovered:          4
Number of abstraction locations:          7
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         1511
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 12.19
Number of irrelevant predicates:          1127 (75%)
Number of preds handled by boolean abs:   99 (7%)
  Total number of models for allsat:      46
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.94

Time for post operator:                324.335s
  Time for path formula creation:      319.449s
Time for strengthen operator:            8.963s
Time for prec operator:                 22.649s
  Time for abstraction:                 11.158s (Max:     0.586s, Count: 191395)
    Boolean abstraction:                 3.984s
    Solving time:                        7.646s (Max:     0.540s)
    Model enumeration time:              0.145s
    Time for BDD construction:           0.016s (Max:     0.007s)
Time for merge operator:                24.997s
Time for coverage check:                 0.183s
  Time for BDD entailment checks:        0.096s
Total time for SMT solver (w/o itp):     7.791s

Number of path formula cache hits:   8288414 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   251.171s

Total number of created targets for pointer analysis: 7252856
   Number of created targets for uf: *enum_ldv_24926 is 20
   Number of created targets for uf: *(struct_aic7xxx_host)* is 4
   Number of created targets for uf: *(struct_hw_scatterlist)* is 3
   Number of created targets for uf: *(struct_aic7xxx_scb_dma)* is 3
   Number of created targets for uf: *enum_ldv_24924 is 20
   Number of created targets for uf: *(struct_scsi_device)* is 2
   Number of created targets for uf: *(struct_aic7xxx_scb)* is 7
   Number of created targets for uf: *(struct_pci_dev)* is 2
   Number of created targets for uf: *enum_ldv_24931 is 6
   Number of created targets for uf: *(unsigned_char)* is 3
   Number of created targets for uf: *(unsigned_int)* is 16
   Number of created targets for uf: *unsigned_short_int_:_10 is 124
   Number of created targets for uf: *enum_ldv_24928 is 22
   Number of created targets for uf: *unsigned_long_int is 3
   Number of created targets for uf: *(struct_sequencer_patch)* is 10
   Number of created targets for uf: *unsigned_short_int is 81
   Number of created targets for uf: *signed_int is 24862
   Number of created targets for uf: *(char)* is 66
   Number of created targets for uf: *unsigned_char is 314
   Number of created targets for uf: *signed_long_int is 5
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *(struct_aic7xxx_hwscb)* is 71
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               208
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         119 (count: 293183, min: 0, max: 15, avg: 0.00)
Time for BDD node cleanup:                             0.037s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.946s
  Time for transition matches:                         7.063s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      8554684 (count: 8554684, min: 1, max: 1, avg: 1.00) [1 x 8554684]

CPA algorithm statistics
------------------------
Number of iterations:            6087040
Max size of waitlist:            204
Average size of waitlist:        157
Number of computed successors:   6636948
Max successors for one state:    2
Number of times merged:          446976
Number of times stopped:         548606
Number of times breaked:         15

Total time for CPA algorithm:       861.551s (Max:   292.305s)
  Time for choose from waitlist:      2.735s
  Time for precision adjustment:     76.429s
  Time for transfer relation:       708.463s
  Time for merge operator:           32.422s
  Time for stop operator:             6.895s
  Time for adding to reached set:    15.778s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   15
Avg. length of target path (in blocks):                  72 (count: 15, min: 2, max: 7, avg: 4.80)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  25.322s
  Counterexample analysis:                             8.529s (Max:     0.763s, Calls: 15)
    Refinement sat check:                              8.187s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.016s
  Precision update:                                    0.019s
  ARG update:                                         16.739s

Length of refined path (in blocks):                      72 (count: 15, min: 2, max: 7, avg: 4.80)
Number of affected states:                               57 (count: 15, min: 1, max: 6, avg: 3.80)
Length (states) of path with itp 'true':                  0 (count: 15, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        57 (count: 15, min: 1, max: 6, avg: 3.80)
Length (states) of path with itp 'false':                 0 (count: 15, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 15, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              42 (count: 15, min: 0, max: 5, avg: 2.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                15
Number of successful refinements:     15
Number of failed refinements:         0
Max. size of reached set before ref.: 430211
Max. size of reached set after ref.:  7
Avg. size of reached set before ref.: 344105.00
Avg. size of reached set after ref.:  7.00

Total time for CEGAR algorithm:     890.111s
Time for refinements:                28.560s
Average time for refinement:          1.904s
Max time for refinement:              2.712s

Code Coverage
-----------------------------
  Function coverage:      0.744
  Visited lines:          6053
  Total lines:            7726
  Line coverage:          0.783
  Visited conditions:     1838
  Total conditions:       2544
  Condition coverage:     0.722

CPAchecker general statistics
-----------------------------
Number of program locations:     11320
Number of CFA edges:             13512
Number of relevant variables:    1829
Number of functions:             176
Number of loops:                 142
Size of reached set:             926803
  Number of reached locations:   4926 (44%)
    Avg states per location:     188
    Max states per location:     32046 (at node N64)
  Number of reached functions:   131 (74%)
  Number of partitions:          926802
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N10839 (before line 15710), Function main called from node N10758, stack depth 1 [6a4f7c17], stack [main]])
  Number of target states:       0
  Size of final wait list        160

Time for analysis setup:         10.123s
  Time for loading CPAs:          1.356s
  Time for loading parser:        0.740s
  Time for CFA construction:      7.821s
    Time for parsing file(s):     1.457s
    Time for AST to CFA:          2.721s
    Time for CFA sanity check:    0.985s
    Time for post-processing:     2.495s
      Time for var class.:        1.329s
Time for Analysis:              890.111s
CPU time for analysis:          890.090s
Total time for CPAchecker:      900.239s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              8.009s

Time for Garbage Collector:      72.532s (in 504 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1314MB (  1254 MiB) max;    614MB (   585 MiB) avg;   1334MB (  1272 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     39MB (    37 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:          1728MB (  1648 MiB) max;    970MB (   925 MiB) avg
Allocated non-heap memory:        49MB (    47 MiB) max;     48MB (    46 MiB) avg
Total process virtual memory:   8226MB (  7845 MiB) max;   8189MB (  7810 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
