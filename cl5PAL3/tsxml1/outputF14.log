scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec1_product28_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_tw_11jxz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 80: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 109: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 157: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 204: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 249: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 327: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 396: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 530: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 613: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 660: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 707: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 752: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 815: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 922: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 976: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1048: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1095: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1435: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1481: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1499: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1525: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1548: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1682: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1702: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1711: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1726: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2256: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2277: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2314: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2351: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2390: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2429: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2466: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2503: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2540: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2577: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2614: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2796: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2828: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2837: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2846: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2871: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1272: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            11 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            6 (55%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5 (45%)
  Times precision was empty:       3 (27%)
  Times precision was {false}:     4 (36%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4 (36%)
  Times result was 'false':        3 (27%)
Number of strengthen sat checks:   0
Number of coverage checks:         1701
  BDD entailment checks:           3
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       366
Number of predicates discovered:          3
Number of abstraction locations:          2
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         10
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 1.25
Number of irrelevant predicates:          4 (40%)
Number of preds handled by boolean abs:   6 (60%)
  Total number of models for allsat:      4
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.916s
  Time for path formula creation:        0.873s
Time for strengthen operator:            0.052s
Time for prec operator:                  0.450s
  Time for abstraction:                  0.398s (Max:     0.097s, Count: 11)
    Boolean abstraction:                 0.105s
    Solving time:                        0.215s (Max:     0.072s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.201s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):     0.219s

Number of path formula cache hits:   3536 (58%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.831s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               203
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           5 (count: 61, min: 0, max: 5, avg: 0.08)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.101s
Automaton transfers with branching:                0
Automaton transfer successors:                         5615 (count: 5615, min: 1, max: 1, avg: 1.00) [1 x 5615]

CPA algorithm statistics
------------------------
Number of iterations:            4100
Max size of waitlist:            10
Average size of waitlist:        4
Number of computed successors:   4959
Max successors for one state:    2
Number of times merged:          849
Number of times stopped:         852
Number of times breaked:         2

Total time for CPA algorithm:         3.014s (Max:     1.488s)
  Time for choose from waitlist:      0.041s
  Time for precision adjustment:      0.680s
  Time for transfer relation:         1.710s
  Time for merge operator:            0.325s
  Time for stop operator:             0.071s
  Time for adding to reached set:     0.068s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2
Avg. length of target path (in blocks):                   4 (count: 2, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.206s
  Counterexample analysis:                             0.094s (Max:     0.050s, Calls: 2)
    Refinement sat check:                              0.074s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.007s
  Precision update:                                    0.002s
  ARG update:                                          0.055s

Length of refined path (in blocks):                       4 (count: 2, min: 2, max: 2, avg: 2.00)
Number of affected states:                                2 (count: 2, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 2, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         2 (count: 2, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 0 (count: 2, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 2, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 2, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2
Number of successful refinements:     2
Number of failed refinements:         0
Max. size of reached set before ref.: 1519
Max. size of reached set after ref.:  136
Avg. size of reached set before ref.: 1300.00
Avg. size of reached set after ref.:  136.00

Total time for CEGAR algorithm:       3.281s
Time for refinements:                 0.265s
Average time for refinement:          0.132s
Max time for refinement:              0.173s

Code Coverage
-----------------------------
  Function coverage:      0.606
  Visited lines:          737
  Total lines:            1413
  Line coverage:          0.522
  Visited conditions:     258
  Total conditions:       496
  Condition coverage:     0.520

CPAchecker general statistics
-----------------------------
Number of program locations:     1940
Number of CFA edges:             2197
Number of relevant variables:    340
Number of functions:             109
Number of loops:                 4
Size of reached set:             1777
  Number of reached locations:   734 (38%)
    Avg states per location:     2
    Max states per location:     8 (at node N1833)
  Number of reached functions:   66 (61%)
  Number of partitions:          1777
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.416s
  Time for loading CPAs:          1.042s
  Time for loading parser:        0.806s
  Time for CFA construction:      2.392s
    Time for parsing file(s):     0.706s
    Time for AST to CFA:          0.753s
    Time for CFA sanity check:    0.238s
    Time for post-processing:     0.573s
      Time for var class.:        0.307s
Time for Analysis:                3.281s
CPU time for analysis:            3.270s
Time for analyzing result:        0.002s
Total time for CPAchecker:        7.705s
Total CPU time for CPAchecker:    7.690s
Time for statistics:              0.176s

Time for Garbage Collector:       0.183s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    56 MiB) max;     33MB (    31 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     27MB (    25 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     29MB (    27 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8084MB (  7709 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
