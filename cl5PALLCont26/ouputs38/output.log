scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--inftl.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9rvd15yv/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4666: Dead code detected: tmp___25 = silly2; (CFACreationUtils.addEdgeToCFA, INFO)

line 4668: Dead code detected: [!(tmp___25 == 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4671: Dead code detected: Goto: while_break___0 (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 2123: Function pointer *__cil_tmp15 with type int (*)(struct mtd_info *mtd, loff_t from, struct mtd_oob_ops *ops) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 2180: Function pointer *__cil_tmp19 with type int (*)(struct mtd_info *mtd, loff_t to, struct mtd_oob_ops *ops) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_mtd_blktrans to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_mtd_blktrans_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2123: Ignoring call via function pointer mtd_read_oob::__cil_tmp15 for which no suitable target was found in line: tmp___8 = (*__cil_tmp15)(mtd, from, ops); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2123: Ignoring function call through function pointer *__cil_tmp15: tmp___8 = (*__cil_tmp15)(mtd, from, ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mtd_erase to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_block_isbad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2180: Ignoring call via function pointer mtd_write_oob::__cil_tmp19 for which no suitable target was found in line: tmp___8 = (*__cil_tmp19)(mtd, to, ops); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2180: Ignoring function call through function pointer *__cil_tmp19: tmp___8 = (*__cil_tmp19)(mtd, to, ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __builtin_alloca to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_alloca, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mtd_block_markbad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_mtd_blktrans_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _cond_resched to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function deregister_mtd_blktrans to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            12156 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            12120 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         36 (0%)
  Times precision was empty:       5744 (47%)
  Times precision was {false}:     1884 (15%)
  Times result was cached:         4327 (36%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      201 (2%)
  Times result was 'false':        734 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         53304
  BDD entailment checks:           7972
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       865
Number of predicates discovered:          2
Number of abstraction locations:          40
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         6412
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.08
Number of irrelevant predicates:          4299 (67%)
Number of preds handled by boolean abs:   201 (3%)
  Total number of models for allsat:      198
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.99

Time for post operator:                 62.524s
  Time for path formula creation:       61.766s
Time for strengthen operator:            1.982s
Time for prec operator:                125.166s
  Time for abstraction:                124.501s (Max:     7.240s, Count: 12156)
    Boolean abstraction:                 7.015s
    Solving time:                      109.854s (Max:     7.223s)
    Model enumeration time:              0.246s
    Time for BDD construction:           0.017s (Max:     0.001s)
Time for merge operator:                 6.952s
Time for coverage check:                 0.109s
  Time for BDD entailment checks:        0.101s
Total time for SMT solver (w/o itp):   110.100s

Number of path formula cache hits:   492923 (52%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    55.038s

Total number of created targets for pointer analysis: 295853
   Number of created targets for uf: *unsigned_short_int is 77
   Number of created targets for uf: *unsigned_char is 11689
   Number of created targets for uf: *unsigned_long_int is 55


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         396 (count: 24753, min: 0, max: 56, avg: 0.02)
Time for BDD node cleanup:                             0.013s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.806s
  Time for transition matches:                         0.975s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       927354 (count: 927354, min: 1, max: 1, avg: 1.00) [1 x 927354]

CPA algorithm statistics
------------------------
Number of iterations:            236679
Max size of waitlist:            111
Average size of waitlist:        52
Number of computed successors:   267027
Max successors for one state:    2
Number of times merged:          22666
Number of times stopped:         29582
Number of times breaked:         18

Total time for CPA algorithm:       214.150s (Max:    19.137s)
  Time for choose from waitlist:      0.228s
  Time for precision adjustment:    128.440s
  Time for transfer relation:        75.141s
  Time for merge operator:            7.492s
  Time for stop operator:             0.627s
  Time for adding to reached set:     0.655s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   18
Avg. length of target path (in blocks):                 259 (count: 18, min: 1, max: 22, avg: 14.39)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.186s
  Counterexample analysis:                             1.485s (Max:     0.164s, Calls: 18)
    Refinement sat check:                              1.324s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.007s
  ARG update:                                          0.659s

Length of refined path (in blocks):                     259 (count: 18, min: 1, max: 22, avg: 14.39)
Number of affected states:                              241 (count: 18, min: 0, max: 21, avg: 13.39)
Length (states) of path with itp 'true':                  0 (count: 18, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       241 (count: 18, min: 0, max: 21, avg: 13.39)
Length (states) of path with itp 'false':                 0 (count: 18, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 18, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             224 (count: 18, min: 0, max: 20, avg: 12.44)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                18
Number of successful refinements:     18
Number of failed refinements:         0
Max. size of reached set before ref.: 15673
Max. size of reached set after ref.:  6853
Avg. size of reached set before ref.: 13229.94
Avg. size of reached set after ref.:  400.56

Total time for CEGAR algorithm:     216.646s
Time for refinements:                 2.480s
Average time for refinement:          0.137s
Max time for refinement:              0.240s

Code Coverage
-----------------------------
  Function coverage:      0.818
  Visited lines:          6354
  Total lines:            6399
  Line coverage:          0.993
  Visited conditions:     494
  Total conditions:       514
  Condition coverage:     0.961

CPAchecker general statistics
-----------------------------
Number of program locations:     7008
Number of CFA edges:             7336
Number of relevant variables:    2199
Number of functions:             44
Number of loops:                 39
Size of reached set:             5783
  Number of reached locations:   1630 (23%)
    Avg states per location:     3
    Max states per location:     83 (at node N3651)
  Number of reached functions:   36 (82%)
  Number of partitions:          5783
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.593s
  Time for loading CPAs:          1.116s
  Time for loading parser:        0.747s
  Time for CFA construction:      4.584s
    Time for parsing file(s):     1.127s
    Time for AST to CFA:          1.436s
    Time for CFA sanity check:    0.469s
    Time for post-processing:     1.310s
      Time for var class.:        0.626s
Time for Analysis:              216.647s
CPU time for analysis:          216.640s
Time for analyzing result:        0.007s
Total time for CPAchecker:      223.252s
Total CPU time for CPAchecker:  223.220s
Time for statistics:              0.229s

Time for Garbage Collector:       7.637s (in 144 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                457MB (   436 MiB) max;    214MB (   204 MiB) avg;    471MB (   449 MiB) peak
Used non-heap memory:             45MB (    43 MiB) max;     39MB (    37 MiB) avg;     45MB (    43 MiB) peak
Allocated heap memory:           559MB (   533 MiB) max;    330MB (   314 MiB) avg
Allocated non-heap memory:        47MB (    45 MiB) max;     46MB (    44 MiB) avg
Total process virtual memory:   8275MB (  7891 MiB) max;   8158MB (  7780 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
