scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loops/sum04_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_t1va2q0m/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            145 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  63 (43%)
  Because of loop head:            72 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (7%)
  Times precision was empty:       5 (3%)
  Times precision was {false}:     2 (1%)
  Times result was cached:         7 (5%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      131 (90%)
  Times result was 'false':        51 (35%)
Number of strengthen sat checks:   0
Number of coverage checks:         501
  BDD entailment checks:           253
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       6
Number of predicates discovered:          38
Number of abstraction locations:          3
Max number of predicates per location:    37
Avg number of predicates per location:    13
Total predicates per abstraction:         1109
Max number of predicates per abstraction: 37
Avg number of predicates per abstraction: 8.34
Number of irrelevant predicates:          77 (7%)
Number of preds handled by boolean abs:   1032 (93%)
  Total number of models for allsat:      468
  Max number of models for allsat:        18
  Avg number of models for allsat:        3.57

Time for post operator:                  0.083s
  Time for path formula creation:        0.074s
Time for strengthen operator:            0.022s
Time for prec operator:                  0.746s
  Time for abstraction:                  0.695s (Max:     0.017s, Count: 145)
    Boolean abstraction:                 0.342s
    Solving time:                        0.171s (Max:     0.014s)
    Model enumeration time:              0.038s
    Time for BDD construction:           0.042s (Max:     0.007s)
Time for merge operator:                 0.005s
Time for coverage check:                 0.006s
  Time for BDD entailment checks:        0.006s
Total time for SMT solver (w/o itp):     0.209s

Number of path formula cache hits:   857 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.064s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               7276
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 2317, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.045s
Automaton transfers with branching:                0
Automaton transfer successors:                          877 (count: 877, min: 1, max: 1, avg: 1.00) [1 x 877]

CPA algorithm statistics
------------------------
Number of iterations:            614
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   809
Max successors for one state:    2
Number of times merged:          124
Number of times stopped:         133
Number of times breaked:         9

Total time for CPA algorithm:         1.142s (Max:     0.204s)
  Time for choose from waitlist:      0.015s
  Time for precision adjustment:      0.810s
  Time for transfer relation:         0.243s
  Time for merge operator:            0.027s
  Time for stop operator:             0.022s
  Time for adding to reached set:     0.008s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                  71 (count: 9, min: 3, max: 12, avg: 7.89)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.097s
  Counterexample analysis:                             0.069s (Max:     0.018s, Calls: 9)
    Refinement sat check:                              0.026s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.013s
  Precision update:                                    0.003s
  ARG update:                                          0.006s

Length of refined path (in blocks):                      63 (count: 9, min: 3, max: 11, avg: 7.00)
Number of affected states:                               54 (count: 9, min: 2, max: 10, avg: 6.00)
Length (states) of path with itp 'true':                  0 (count: 9, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        54 (count: 9, min: 2, max: 10, avg: 6.00)
Length (states) of path with itp 'false':                 7 (count: 9, min: 0, max: 1, avg: 0.78)
Different non-trivial interpolants along paths:          45 (count: 9, min: 1, max: 9, avg: 5.00)
Equal non-trivial interpolants along paths:               0 (count: 9, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 100
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 62.33
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       1.294s
Time for refinements:                 0.152s
Average time for refinement:          0.016s
Max time for refinement:              0.073s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          7
  Total lines:            7
  Line coverage:          1.000
  Visited conditions:     8
  Total conditions:       8
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     28
Number of CFA edges:             31
Number of relevant variables:    4
Number of functions:             2
Number of loops:                 1
Size of reached set:             92
  Number of reached locations:   20 (71%)
    Avg states per location:     4
    Max states per location:     9 (at node N14)
  Number of reached functions:   2 (100%)
  Number of partitions:          84
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N14 (before line 13), Function main called from node N9, stack depth 1 [48aca48b], stack [main]])
  Number of target states:       0

Time for analysis setup:          1.669s
  Time for loading CPAs:          0.512s
  Time for loading parser:        0.516s
  Time for CFA construction:      0.568s
    Time for parsing file(s):     0.256s
    Time for AST to CFA:          0.104s
    Time for CFA sanity check:    0.013s
    Time for post-processing:     0.068s
      Time for var class.:        0.021s
Time for Analysis:                1.294s
CPU time for analysis:            1.300s
Time for analyzing result:        0.000s
Total time for CPAchecker:        2.965s
Total CPU time for CPAchecker:    2.960s
Time for statistics:              0.040s

Time for Garbage Collector:       0.071s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 50MB (    48 MiB) max;     30MB (    28 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             30MB (    28 MiB) max;     23MB (    22 MiB) avg;     32MB (    30 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        33MB (    31 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:   8017MB (  7646 MiB) max;   7963MB (  7594 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
