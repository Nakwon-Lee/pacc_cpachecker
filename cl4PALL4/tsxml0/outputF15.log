scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ddv-machzwd/ddv_machzwd_outb_p_true-unreach-call_false-valid-memtrack.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__3bh9xo9/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

none: Dead code detected: switch ((64 / 32)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
 case 1: set->sig[0] = -1;
  break;
 } (CFACreationUtils.addEdgeToCFA, INFO)

line 3079: Dereferencing of non-pointer type irq_handler_t  in expression * registered_irq[i].handler (ASTConverter.convert, WARNING)

line 4137: Dead code detected: __VERIFIER_atomic_end(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3062: Function pointer *((genhd_registered[genhd_no]).gd->fops->getgeo) with type int (*)(struct block_device *, struct hd_geometry *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3051: Function pointer *((genhd_registered[genhd_no]).gd->fops->revalidate_disk) with type int (*)(struct gendisk *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3045: Function pointer *((genhd_registered[genhd_no]).gd->fops->media_changed) with type int (*)(struct gendisk *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3079-3080: Function pointer *((registered_irq[i]).handler) with type irqreturn_t (*)(int, void *, struct pt_regs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 2980: Function pointer *((genhd_registered[genhd_no]).gd->queue->request_fn) with type request_fn_proc * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3097-3098: Function pointer *(registered_pci_driver.pci_driver->probe) with type int (*)(struct pci_dev *dev, const struct pci_device_id *id) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3109: Function pointer *(registered_pci_driver.pci_driver->remove) with type void (*)(struct pci_dev *dev) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 3143: Ignoring function call through function pointer *((tasklet_registered[i]).tasklet->func): (*((tasklet_registered[i]).tasklet->func))((tasklet_registered[i]).tasklet->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4406: Ignoring function call through function pointer *((shared_workqueue[i])->func): (*((shared_workqueue[i])->func))((shared_workqueue[i])->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 3079-3080: Ignoring function call through function pointer *((registered_irq[i]).handler): (*((registered_irq[i]).handler))((int)i, (registered_irq[i]).dev_id, &regs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3158: Ignoring function call through function pointer *((timer_registered[i]).timer->function): (*((timer_registered[i]).timer->function))((timer_registered[i]).timer->data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2890-2891: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->release): result = (*((cdev_registered[cdev_no]).cdevp->ops->release))(&((cdev_registered[cdev_no]).inode), &((cdev_registered[cdev_no]).filp)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2876-2877: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->open): result = (*((cdev_registered[cdev_no]).cdevp->ops->open))(&((cdev_registered[cdev_no]).inode), &((cdev_registered[cdev_no]).filp)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2857-2860: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->ioctl): (*((cdev_registered[cdev_no]).cdevp->ops->ioctl))(&((cdev_registered[cdev_no]).inode), &((cdev_registered[cdev_no]).filp), uint_value, ulong_value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2837-2840: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->write): (*((cdev_registered[cdev_no]).cdevp->ops->write))(&((cdev_registered[cdev_no]).filp), &char_value, size_t_value, &loff_t_value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2823-2826: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->read): (*((cdev_registered[cdev_no]).cdevp->ops->read))(&((cdev_registered[cdev_no]).filp), &char_value, size_t_value, &loff_t_value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 2813-2815: Ignoring function call through function pointer *((cdev_registered[cdev_no]).cdevp->ops->llseek): (*((cdev_registered[cdev_no]).cdevp->ops->llseek))(&((cdev_registered[cdev_no]).filp), loff_t_value, int_value); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            12 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            12 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         0 (0%)
  Times precision was empty:       12 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         181
  BDD entailment checks:           7
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       68
Number of predicates discovered:          0

Time for post operator:                  1.150s
  Time for path formula creation:        1.125s
Time for strengthen operator:            0.021s
Time for prec operator:                  0.024s
  Time for abstraction:                  0.006s (Max:     0.005s, Count: 12)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.223s
Time for coverage check:                 0.015s
  Time for BDD entailment checks:        0.015s
Total time for SMT solver (w/o itp):     0.000s

Number of path formula cache hits:   60 (2%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.011s

Total number of created targets for pointer analysis: 86
   Number of created targets for uf: *unsigned_short_int is 3
   Number of created targets for uf: *(struct_work_struct)* is 11
   Number of created targets for uf: *signed_int is 13
   Number of created targets for uf: *(struct_cdev)* is 2
   Number of created targets for uf: *(struct_tasklet_struct)* is 2
   Number of created targets for uf: *(struct_file_operations)* is 3
   Number of created targets for uf: *(struct_timer_list)* is 2
   Number of created targets for uf: *signed_short_int is 2
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 20, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.046s
Automaton transfers with branching:                0
Automaton transfer successors:                         2657 (count: 2657, min: 1, max: 1, avg: 1.00) [1 x 2657]

CPA algorithm statistics
------------------------
Number of iterations:            1564
Max size of waitlist:            23
Average size of waitlist:        11
Number of computed successors:   1657
Max successors for one state:    2
Number of times merged:          87
Number of times stopped:         94
Number of times breaked:         0

Total time for CPA algorithm:         2.192s (Max:     2.192s)
  Time for choose from waitlist:      0.008s
  Time for precision adjustment:      0.268s
  Time for transfer relation:         1.486s
  Time for merge operator:            0.245s
  Time for stop operator:             0.030s
  Time for adding to reached set:     0.068s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   0

CEGAR algorithm statistics
--------------------------
Number of refinements:                0

Code Coverage
-----------------------------
  Function coverage:      0.284
  Visited lines:          622
  Total lines:            1080
  Line coverage:          0.576
  Visited conditions:     176
  Total conditions:       392
  Condition coverage:     0.449

CPAchecker general statistics
-----------------------------
Number of program locations:     2473
Number of CFA edges:             2643
Number of relevant variables:    228
Number of functions:             190
Number of loops:                 12
Size of reached set:             1564
  Number of reached locations:   530 (21%)
    Avg states per location:     2
    Max states per location:     48 (at node N1411)
  Number of reached functions:   54 (28%)
  Number of partitions:          1564
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          5.042s
  Time for loading CPAs:          0.867s
  Time for loading parser:        0.787s
  Time for CFA construction:      3.213s
    Time for parsing file(s):     0.899s
    Time for AST to CFA:          1.178s
    Time for CFA sanity check:    0.199s
    Time for post-processing:     0.725s
      Time for var class.:        0.381s
Time for Analysis:                2.193s
CPU time for analysis:            2.190s
Time for analyzing result:        0.003s
Total time for CPAchecker:        7.240s
Total CPU time for CPAchecker:    7.230s
Time for statistics:              0.130s

Time for Garbage Collector:       0.189s (in 7 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 55MB (    53 MiB) max;     32MB (    30 MiB) avg;     65MB (    62 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8080MB (  7706 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
