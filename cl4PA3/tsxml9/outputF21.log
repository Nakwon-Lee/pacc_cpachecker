scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-lit/gsv2008_true-unreach-call_true-termination.c.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8d8tw205/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            131 (25% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  60 (46%)
  Because of loop head:            52 (40%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         19 (15%)
  Times precision was empty:       19 (15%)
  Times precision was {false}:     4 (3%)
  Times result was cached:         16 (12%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      92 (70%)
  Times result was 'false':        19 (15%)
Number of strengthen sat checks:   0
Number of coverage checks:         315
  BDD entailment checks:           313
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       6
Number of predicates discovered:          19
Number of abstraction locations:          3
Max number of predicates per location:    17
Avg number of predicates per location:    6
Total predicates per abstraction:         588
Max number of predicates per abstraction: 17
Avg number of predicates per abstraction: 6.13
Number of irrelevant predicates:          62 (11%)
Number of preds handled by boolean abs:   525 (89%)
  Total number of models for allsat:      700
  Max number of models for allsat:        32
  Avg number of models for allsat:        7.61

Time for post operator:                  0.133s
  Time for path formula creation:        0.128s
Time for strengthen operator:            0.004s
Time for prec operator:                  1.462s
  Time for abstraction:                  1.446s (Max:     0.053s, Count: 131)
    Boolean abstraction:                 0.905s
    Solving time:                        0.236s (Max:     0.013s)
    Model enumeration time:              0.425s
    Time for BDD construction:           0.127s (Max:     0.012s)
Time for merge operator:                 0.003s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.011s
Total time for SMT solver (w/o itp):     0.661s

Number of path formula cache hits:   320 (56%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.116s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               6728
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 2127, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.010s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.035s
Automaton transfers with branching:                0
Automaton transfer successors:                          514 (count: 514, min: 1, max: 1, avg: 1.00) [1 x 514]

CPA algorithm statistics
------------------------
Number of iterations:            302
Max size of waitlist:            16
Average size of waitlist:        6
Number of computed successors:   367
Max successors for one state:    2
Number of times merged:          1
Number of times stopped:         20
Number of times breaked:         5

Total time for CPA algorithm:         1.885s (Max:     0.939s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      1.532s
  Time for transfer relation:         0.263s
  Time for merge operator:            0.007s
  Time for stop operator:             0.030s
  Time for adding to reached set:     0.034s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  41 (count: 5, min: 3, max: 18, avg: 8.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.090s
  Counterexample analysis:                             0.053s (Max:     0.021s, Calls: 5)
    Refinement sat check:                              0.017s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.011s
  Precision update:                                    0.003s
  ARG update:                                          0.013s

Length of refined path (in blocks):                      40 (count: 5, min: 2, max: 18, avg: 8.00)
Number of affected states:                               35 (count: 5, min: 1, max: 17, avg: 7.00)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        35 (count: 5, min: 1, max: 17, avg: 7.00)
Length (states) of path with itp 'false':                 1 (count: 5, min: 0, max: 1, avg: 0.20)
Different non-trivial interpolants along paths:          30 (count: 5, min: 0, max: 16, avg: 6.00)
Equal non-trivial interpolants along paths:               0 (count: 5, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 91
Max. size of reached set after ref.:  7
Avg. size of reached set before ref.: 42.20
Avg. size of reached set after ref.:  7.00

Total time for CEGAR algorithm:       2.033s
Time for refinements:                 0.148s
Average time for refinement:          0.029s
Max time for refinement:              0.079s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          12
  Total lines:            12
  Line coverage:          1.000
  Visited conditions:     8
  Total conditions:       8
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     31
Number of CFA edges:             34
Number of relevant variables:    4
Number of functions:             2
Number of loops:                 1
Size of reached set:             153
  Number of reached locations:   18 (58%)
    Avg states per location:     8
    Max states per location:     15 (at node N19)
  Number of reached functions:   2 (100%)
  Number of partitions:          139
    Avg size of partitions:      1
    Max size of partitions:      15 (with key [N19 (before line 15), Function main called from node N9, stack depth 1 [d9345cd], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.297s
  Time for loading CPAs:          0.745s
  Time for loading parser:        0.625s
  Time for CFA construction:      0.821s
    Time for parsing file(s):     0.376s
    Time for AST to CFA:          0.148s
    Time for CFA sanity check:    0.020s
    Time for post-processing:     0.116s
      Time for var class.:        0.032s
Time for Analysis:                2.034s
CPU time for analysis:            2.030s
Time for analyzing result:        0.001s
Total time for CPAchecker:        4.337s
Total CPU time for CPAchecker:    4.340s
Time for statistics:              0.075s

Time for Garbage Collector:       0.082s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 52MB (    50 MiB) max;     31MB (    30 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             29MB (    28 MiB) max;     24MB (    22 MiB) avg;     31MB (    30 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        32MB (    31 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8022MB (  7650 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
