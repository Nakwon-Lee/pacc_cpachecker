scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-lit/cggmp2005_true-unreach-call_true-termination.c.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ixcmypqe/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            69 (31% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  28 (41%)
  Because of loop head:            33 (48%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (12%)
  Times precision was empty:       10 (14%)
  Times precision was {false}:     16 (23%)
  Times result was cached:         1 (1%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      42 (61%)
  Times result was 'false':        21 (30%)
Number of strengthen sat checks:   0
Number of coverage checks:         66
  BDD entailment checks:           66
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       4
Number of predicates discovered:          21
Number of abstraction locations:          3
Max number of predicates per location:    20
Avg number of predicates per location:    7
Total predicates per abstraction:         307
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 5.29
Number of irrelevant predicates:          34 (11%)
Number of preds handled by boolean abs:   273 (89%)
  Total number of models for allsat:      81
  Max number of models for allsat:        5
  Avg number of models for allsat:        1.93

Time for post operator:                  0.076s
  Time for path formula creation:        0.067s
Time for strengthen operator:            0.003s
Time for prec operator:                  0.413s
  Time for abstraction:                  0.396s (Max:     0.019s, Count: 69)
    Boolean abstraction:                 0.138s
    Solving time:                        0.039s (Max:     0.006s)
    Model enumeration time:              0.003s
    Time for BDD construction:           0.041s (Max:     0.013s)
Time for merge operator:                 0.000s
Time for coverage check:                 0.004s
  Time for BDD entailment checks:        0.004s
Total time for SMT solver (w/o itp):     0.042s

Number of path formula cache hits:   167 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.063s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1319
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 781, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.024s
Automaton transfers with branching:                0
Automaton transfer successors:                          220 (count: 220, min: 1, max: 1, avg: 1.00) [1 x 220]

CPA algorithm statistics
------------------------
Number of iterations:            153
Max size of waitlist:            3
Average size of waitlist:        1
Number of computed successors:   185
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         6
Number of times breaked:         6

Total time for CPA algorithm:         0.637s (Max:     0.191s)
  Time for choose from waitlist:      0.002s
  Time for precision adjustment:      0.444s
  Time for transfer relation:         0.165s
  Time for merge operator:            0.002s
  Time for stop operator:             0.016s
  Time for adding to reached set:     0.003s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  33 (count: 6, min: 3, max: 8, avg: 5.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.122s
  Counterexample analysis:                             0.083s (Max:     0.056s, Calls: 6)
    Refinement sat check:                              0.014s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.010s
  ARG update:                                          0.008s

Length of refined path (in blocks):                      27 (count: 6, min: 2, max: 7, avg: 4.50)
Number of affected states:                               21 (count: 6, min: 1, max: 6, avg: 3.50)
Length (states) of path with itp 'true':                  0 (count: 6, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        21 (count: 6, min: 1, max: 6, avg: 3.50)
Length (states) of path with itp 'false':                 5 (count: 6, min: 0, max: 1, avg: 0.83)
Different non-trivial interpolants along paths:          15 (count: 6, min: 0, max: 5, avg: 2.50)
Equal non-trivial interpolants along paths:               0 (count: 6, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 41
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 24.33
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       0.772s
Time for refinements:                 0.134s
Average time for refinement:          0.022s
Max time for refinement:              0.088s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          11
  Total lines:            11
  Line coverage:          1.000
  Visited conditions:     4
  Total conditions:       4
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     26
Number of CFA edges:             27
Number of relevant variables:    3
Number of functions:             2
Number of loops:                 1
Size of reached set:             31
  Number of reached locations:   15 (58%)
    Avg states per location:     2
    Max states per location:     5 (at node N15)
  Number of reached functions:   2 (100%)
  Number of partitions:          27
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N15 (before line 14), Function main called from node N9, stack depth 1 [1b11171f], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.212s
  Time for loading CPAs:          0.676s
  Time for loading parser:        0.658s
  Time for CFA construction:      0.758s
    Time for parsing file(s):     0.347s
    Time for AST to CFA:          0.135s
    Time for CFA sanity check:    0.020s
    Time for post-processing:     0.109s
      Time for var class.:        0.032s
Time for Analysis:                0.773s
CPU time for analysis:            0.770s
Time for analyzing result:        0.004s
Total time for CPAchecker:        2.990s
Total CPU time for CPAchecker:    2.990s
Time for statistics:              0.065s

Time for Garbage Collector:       0.082s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 41MB (    39 MiB) max;     26MB (    25 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     22MB (    21 MiB) avg;     30MB (    29 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        31MB (    30 MiB) max;     23MB (    22 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   7996MB (  7625 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
