scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ssh-simplified/s3_srvr_1b_true-unreach-call_false-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_qc7alumw/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            24 (3% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            14 (58%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         10 (42%)
  Times precision was empty:       3 (13%)
  Times precision was {false}:     9 (38%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      12 (50%)
  Times result was 'false':        7 (29%)
Number of strengthen sat checks:   0
Number of coverage checks:         279
  BDD entailment checks:           19
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       12
Number of predicates discovered:          11
Number of abstraction locations:          2
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         85
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 4.05
Number of irrelevant predicates:          9 (11%)
Number of preds handled by boolean abs:   76 (89%)
  Total number of models for allsat:      26
  Max number of models for allsat:        4
  Avg number of models for allsat:        2.17

Time for post operator:                  0.221s
  Time for path formula creation:        0.218s
Time for strengthen operator:            0.028s
Time for prec operator:                  0.255s
  Time for abstraction:                  0.219s (Max:     0.025s, Count: 24)
    Boolean abstraction:                 0.084s
    Solving time:                        0.045s (Max:     0.009s)
    Model enumeration time:              0.007s
    Time for BDD construction:           0.008s (Max:     0.004s)
Time for merge operator:                 0.031s
Time for coverage check:                 0.007s
  Time for BDD entailment checks:        0.007s
Total time for SMT solver (w/o itp):     0.052s

Number of path formula cache hits:   546 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.209s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               524
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 275, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.044s
Automaton transfers with branching:                0
Automaton transfer successors:                          779 (count: 779, min: 1, max: 1, avg: 1.00) [1 x 779]

CPA algorithm statistics
------------------------
Number of iterations:            583
Max size of waitlist:            8
Average size of waitlist:        5
Number of computed successors:   726
Max successors for one state:    2
Number of times merged:          130
Number of times stopped:         133
Number of times breaked:         3

Total time for CPA algorithm:         0.857s (Max:     0.276s)
  Time for choose from waitlist:      0.005s
  Time for precision adjustment:      0.329s
  Time for transfer relation:         0.395s
  Time for merge operator:            0.054s
  Time for stop operator:             0.021s
  Time for adding to reached set:     0.029s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                   9 (count: 3, min: 2, max: 4, avg: 3.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.074s
  Counterexample analysis:                             0.026s (Max:     0.009s, Calls: 3)
    Refinement sat check:                              0.012s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.027s
  Precision update:                                    0.006s
  ARG update:                                          0.007s

Length of refined path (in blocks):                       9 (count: 3, min: 2, max: 4, avg: 3.00)
Number of affected states:                                6 (count: 3, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'true':                  0 (count: 3, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         6 (count: 3, min: 1, max: 3, avg: 2.00)
Length (states) of path with itp 'false':                 0 (count: 3, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           3 (count: 3, min: 0, max: 2, avg: 1.00)
Equal non-trivial interpolants along paths:               0 (count: 3, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 178
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 120.33
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       0.946s
Time for refinements:                 0.089s
Average time for refinement:          0.029s
Max time for refinement:              0.055s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          51
  Total lines:            53
  Line coverage:          0.962
  Visited conditions:     30
  Total conditions:       30
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     79
Number of CFA edges:             93
Number of relevant variables:    5
Number of functions:             1
Number of loops:                 1
Size of reached set:             235
  Number of reached locations:   61 (77%)
    Avg states per location:     3
    Max states per location:     4 (at node N0)
  Number of reached functions:   1 (100%)
  Number of partitions:          232
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N10 (before lines 18-135), Function main called from node N1, stack depth 1 [71ba6d4e], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.590s
  Time for loading CPAs:          0.799s
  Time for loading parser:        0.767s
  Time for CFA construction:      0.903s
    Time for parsing file(s):     0.407s
    Time for AST to CFA:          0.174s
    Time for CFA sanity check:    0.026s
    Time for post-processing:     0.147s
      Time for var class.:        0.062s
Time for Analysis:                0.947s
CPU time for analysis:            0.950s
Time for analyzing result:        0.000s
Total time for CPAchecker:        3.542s
Total CPU time for CPAchecker:    3.530s
Time for statistics:              0.075s

Time for Garbage Collector:       0.100s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 44MB (    42 MiB) max;     26MB (    24 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             29MB (    27 MiB) max;     22MB (    21 MiB) avg;     31MB (    29 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        32MB (    30 MiB) max;     23MB (    22 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   7998MB (  7627 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
