scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/product-lines/email_spec4_product17_true-unreach-call_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_saszabd8/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 121: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 150: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 198: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 245: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 290: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 368: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 437: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 571: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 654: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 701: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 748: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 793: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 856: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 963: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1136: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1600: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1632: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1641: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1650: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1675: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1773: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1796: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1825: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1846: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1883: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1920: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1959: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 1998: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2035: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2072: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2109: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2146: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2183: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2216: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2298: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2307: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2322: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2858: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2904: Dead code detected: return (retValue_acc); (CFACreationUtils.addEdgeToCFA, INFO)

line 2695: Function pointer *__cil_tmp10 with type int (*)(int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            52 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            12 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         40 (77%)
  Times precision was empty:       3 (6%)
  Times precision was {false}:     39 (75%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      10 (19%)
  Times result was 'false':        37 (71%)
Number of strengthen sat checks:   0
Number of coverage checks:         7402
  BDD entailment checks:           18
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       581
Number of predicates discovered:          8
Number of abstraction locations:          2
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         99
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.02
Number of irrelevant predicates:          39 (39%)
Number of preds handled by boolean abs:   60 (61%)
  Total number of models for allsat:      75
  Max number of models for allsat:        16
  Avg number of models for allsat:        7.50

Time for post operator:                  2.488s
  Time for path formula creation:        2.399s
Time for strengthen operator:            0.098s
Time for prec operator:                  2.703s
  Time for abstraction:                  2.592s (Max:     0.118s, Count: 52)
    Boolean abstraction:                 0.485s
    Solving time:                        1.748s (Max:     0.081s)
    Model enumeration time:              0.167s
    Time for BDD construction:           0.039s (Max:     0.010s)
Time for merge operator:                 0.459s
Time for coverage check:                 0.016s
  Time for BDD entailment checks:        0.008s
Total time for SMT solver (w/o itp):     1.915s

Number of path formula cache hits:   7758 (31%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.279s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               458
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         139 (count: 368, min: 0, max: 55, avg: 0.38)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.389s
Automaton transfers with branching:                0
Automaton transfer successors:                        23832 (count: 23832, min: 1, max: 1, avg: 1.00) [1 x 23832]

CPA algorithm statistics
------------------------
Number of iterations:            17886
Max size of waitlist:            11
Average size of waitlist:        5
Number of computed successors:   21628
Max successors for one state:    2
Number of times merged:          3692
Number of times stopped:         3694
Number of times breaked:         3

Total time for CPA algorithm:         8.892s (Max:     5.614s)
  Time for choose from waitlist:      0.074s
  Time for precision adjustment:      3.169s
  Time for transfer relation:         4.104s
  Time for merge operator:            0.730s
  Time for stop operator:             0.127s
  Time for adding to reached set:     0.173s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3
Avg. length of target path (in blocks):                   6 (count: 3, min: 2, max: 2, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.234s
  Counterexample analysis:                             0.165s (Max:     0.085s, Calls: 3)
    Refinement sat check:                              0.122s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.007s
  Precision update:                                    0.001s
  ARG update:                                          0.048s

Length of refined path (in blocks):                       6 (count: 3, min: 2, max: 2, avg: 2.00)
Number of affected states:                                3 (count: 3, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 3, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         3 (count: 3, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 0 (count: 3, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 3, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 3, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3
Number of successful refinements:     3
Number of failed refinements:         0
Max. size of reached set before ref.: 2526
Max. size of reached set after ref.:  136
Avg. size of reached set before ref.: 1830.00
Avg. size of reached set after ref.:  136.00

Total time for CEGAR algorithm:       9.185s
Time for refinements:                 0.292s
Average time for refinement:          0.097s
Max time for refinement:              0.125s

Code Coverage
-----------------------------
  Function coverage:      0.620
  Visited lines:          804
  Total lines:            1394
  Line coverage:          0.577
  Visited conditions:     318
  Total conditions:       488
  Condition coverage:     0.652

CPAchecker general statistics
-----------------------------
Number of program locations:     1912
Number of CFA edges:             2164
Number of relevant variables:    334
Number of functions:             108
Number of loops:                 4
Size of reached set:             12816
  Number of reached locations:   831 (43%)
    Avg states per location:     15
    Max states per location:     60 (at node N1506)
  Number of reached functions:   67 (62%)
  Number of partitions:          12812
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N1722 (before lines 2365-2532), Function test called from node N987, stack depth 2 [3624da92], stack [main, test]])
  Number of target states:       0

Time for analysis setup:          4.481s
  Time for loading CPAs:          1.052s
  Time for loading parser:        0.786s
  Time for CFA construction:      2.402s
    Time for parsing file(s):     0.744s
    Time for AST to CFA:          0.689s
    Time for CFA sanity check:    0.219s
    Time for post-processing:     0.599s
      Time for var class.:        0.330s
Time for Analysis:                9.186s
CPU time for analysis:            9.180s
Time for analyzing result:        0.027s
Total time for CPAchecker:       13.672s
Total CPU time for CPAchecker:   13.660s
Time for statistics:              0.326s

Time for Garbage Collector:       0.336s (in 14 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    63 MiB) max;     40MB (    38 MiB) avg;     75MB (    72 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     30MB (    29 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     32MB (    31 MiB) avg
Total process virtual memory:   8134MB (  7758 MiB) max;   8106MB (  7731 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
