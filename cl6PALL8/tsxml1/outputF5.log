scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/module_get_put-drivers-hwmon-it87.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_tqkrl8fg/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 2953: Function pointer *(pv_cpu_ops.io_delay) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_get_system_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_check_resource_conflict to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add_resources to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2953: Ignoring function call through function pointer *(pv_cpu_ops.io_delay): (*(pv_cpu_ops.io_delay))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_chmod_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            599 (2% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            508 (85%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         91 (15%)
  Times precision was empty:       41 (7%)
  Times precision was {false}:     77 (13%)
  Times result was cached:         351 (59%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      130 (22%)
  Times result was 'false':        104 (17%)
Number of strengthen sat checks:   0
Number of coverage checks:         4078
  BDD entailment checks:           286
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       356
Number of predicates discovered:          3
Number of abstraction locations:          11
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         804
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 3.88
Number of irrelevant predicates:          304 (38%)
Number of preds handled by boolean abs:   158 (20%)
  Total number of models for allsat:      129
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.99

Time for post operator:                  4.147s
  Time for path formula creation:        4.021s
Time for strengthen operator:            0.097s
Time for prec operator:                  8.783s
  Time for abstraction:                  8.620s (Max:     0.554s, Count: 599)
    Boolean abstraction:                 4.207s
    Solving time:                        6.431s (Max:     0.495s)
    Model enumeration time:              0.445s
    Time for BDD construction:           0.024s (Max:     0.010s)
Time for merge operator:                 0.770s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.019s
Total time for SMT solver (w/o itp):     6.876s

Number of path formula cache hits:   19324 (56%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.404s

Total number of created targets for pointer analysis: 8842
   Number of created targets for uf: *unsigned_short_int is 29
   Number of created targets for uf: *enum_chips is 2
   Number of created targets for uf: *unsigned_char is 709
   Number of created targets for uf: *(struct_device)* is 10


Number of BDD nodes:                               205
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         258 (count: 1546, min: 0, max: 37, avg: 0.17)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.270s
Automaton transfers with branching:                0
Automaton transfer successors:                        33326 (count: 33326, min: 1, max: 1, avg: 1.00) [1 x 33326]

CPA algorithm statistics
------------------------
Number of iterations:            24760
Max size of waitlist:            14
Average size of waitlist:        5
Number of computed successors:   27057
Max successors for one state:    2
Number of times merged:          1896
Number of times stopped:         2142
Number of times breaked:         12

Total time for CPA algorithm:        16.964s (Max:     3.573s)
  Time for choose from waitlist:      0.102s
  Time for precision adjustment:      9.399s
  Time for transfer relation:         5.747s
  Time for merge operator:            0.899s
  Time for stop operator:             0.136s
  Time for adding to reached set:     0.219s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                  97 (count: 12, min: 1, max: 14, avg: 8.08)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.091s
  Counterexample analysis:                             1.859s (Max:     0.314s, Calls: 12)
    Refinement sat check:                              1.697s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.019s
  ARG update:                                          0.167s

Length of refined path (in blocks):                      77 (count: 12, min: 1, max: 10, avg: 6.42)
Number of affected states:                               65 (count: 12, min: 0, max: 9, avg: 5.42)
Length (states) of path with itp 'true':                  0 (count: 12, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        65 (count: 12, min: 0, max: 9, avg: 5.42)
Length (states) of path with itp 'false':                 5 (count: 12, min: 0, max: 1, avg: 0.42)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              54 (count: 12, min: 0, max: 8, avg: 4.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 4320
Max. size of reached set after ref.:  426
Avg. size of reached set before ref.: 2326.75
Avg. size of reached set after ref.:  425.83

Total time for CEGAR algorithm:      19.215s
Time for refinements:                 2.248s
Average time for refinement:          0.187s
Max time for refinement:              0.355s

Code Coverage
-----------------------------
  Function coverage:      0.351
  Visited lines:          1297
  Total lines:            2491
  Line coverage:          0.521
  Visited conditions:     230
  Total conditions:       468
  Condition coverage:     0.491

CPAchecker general statistics
-----------------------------
Number of program locations:     3197
Number of CFA edges:             3546
Number of relevant variables:    667
Number of functions:             94
Number of loops:                 22
Size of reached set:             2001
  Number of reached locations:   710 (22%)
    Avg states per location:     2
    Max states per location:     47 (at node N27)
  Number of reached functions:   33 (35%)
  Number of partitions:          2001
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.455s
  Time for loading CPAs:          1.067s
  Time for loading parser:        0.802s
  Time for CFA construction:      4.407s
    Time for parsing file(s):     1.155s
    Time for AST to CFA:          1.530s
    Time for CFA sanity check:    0.310s
    Time for post-processing:     1.186s
      Time for var class.:        0.662s
Time for Analysis:               19.215s
CPU time for analysis:           19.220s
Time for analyzing result:        0.002s
Total time for CPAchecker:       25.675s
Total CPU time for CPAchecker:   25.670s
Time for statistics:              0.152s

Time for Garbage Collector:       0.416s (in 24 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 69MB (    66 MiB) max;     45MB (    43 MiB) avg;     74MB (    70 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     35MB (    34 MiB) avg
Total process virtual memory:   8133MB (  7756 MiB) max;   8115MB (  7739 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
