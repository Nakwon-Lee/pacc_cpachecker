scripts/cpa.sh -heap 7000M -Dy-ABlkDFSCSRPO-ABEl-FC -preprocess -noout -timelimit 900s -stats -spec /home/spiral/pacc_cpachecker_trunk/sv-comp/PropertyERROR.prp /home/spiral/pacc_cpachecker_trunk/sv-comp/ntdrivers/diskperf_false-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 7000M.
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.4-svn 9f6dc66+ (OpenJDK 64-Bit Server VM 1.8.0_111) started (CPAchecker.run, INFO)

line 3030: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

Using predicate analysis with SMTInterpol 2.1-183-g4d3bb9f-comp. (PredicateCPA:PredicateCPA.<init>, INFO)

CompositeCPA cpas?   org.sosy_lab.cpachecker.cpa.location.LocationCPA  org.sosy_lab.cpachecker.cpa.callstack.CallstackCPA  org.sosy_lab.cpachecker.cpa.functionpointer.FunctionPointerCPA  org.sosy_lab.cpachecker.cpa.predicate.PredicateCPA  org.sosy_lab.cpachecker.cpa.automaton.ControlAutomatonCPA   
ARGCPA cpa?   org.sosy_lab.cpachecker.cpa.composite.CompositeCPA
Using refinement for predicate analysis with ImpactRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

CPAchecker runAlgorithm st
Starting analysis ... (CPAchecker.runAlgorithm, INFO)

CCA.run algorithm?   org.sosy_lab.cpachecker.core.algorithm.CEGARAlgorithm
CCA.run checker?   org.sosy_lab.cpachecker.core.algorithm.CounterexampleCPAChecker
CEGARAlgorithme run st
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Extern function KeQueryPerformanceCounter((void *)0) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function InterlockedDecrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedIncrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoWMIRegistrationControl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedExchange to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoAllocateErrorLogEntry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function IoWriteErrorLogEntry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Extern function KeQueryPerformanceCounter(&frequency) returning a composite is treated as nondet. (PredicateCPA:CExpressionVisitorWithPointerAliasing.visit, WARNING)

Assuming external function KeQuerySystemTime to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

refinement st 
refinement ed 
CEGARAlgorithme run ed
CCA.checkCounterexample checkerName?   CPACHECKER
Error path found, starting counterexample check with CPACHECKER. (CounterexampleCheckAlgorithm.checkCounterexample, INFO)

CounterexampleCPAChecker cpa?  org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Using the following resource limits: CPU-time limit of 900s (CounterexampleCheck:ResourceLimitChecker.fromConfiguration, INFO)

Repeated loading of Eclipse source parser (CounterexampleCheck:EclipseParsers.getClassLoader, INFO)

CompositeCPA cpas?   org.sosy_lab.cpachecker.cpa.location.LocationCPA  org.sosy_lab.cpachecker.cpa.callstack.CallstackCPA  org.sosy_lab.cpachecker.cpa.functionpointer.FunctionPointerCPA  org.sosy_lab.cpachecker.cpa.value.ValueAnalysisCPA  org.sosy_lab.cpachecker.cpa.automaton.ControlAutomatonCPA   
ARGCPA cpa?   org.sosy_lab.cpachecker.cpa.composite.CompositeCPA
CounterexampleCPAChecker.checkCounterexample lAlgorithm?   org.sosy_lab.cpachecker.core.algorithm.CPAAlgorithm
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Error path found and confirmed by counterexample check with CPACHECKER. (CounterexampleCheckAlgorithm.checkCounterexample, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

CPAchecker runAlgorithm ed
PredicateCPA statistics
-----------------------
Number of abstractions:            1 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            1 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       1 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   49
  Times result was 'false':        48 (98%)
Number of coverage checks:         434
  BDD entailment checks:           0
Number of SMT sat checks:          49
  trivial:                         0
  cached:                          0

Max ABE block size:                       27
Number of predicates discovered:          0


Time for post operator:                  0.628s
  Time for path formula creation:        0.591s
Time for strengthen operator:            4.093s
  Time for satisfiability checks:        4.081s
Time for prec operator:                  0.006s
  Time for abstraction:                  0.006s (Max:     0.006s, Count: 1)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.174s
Time for coverage check:                 0.000s
Total time for SMT solver (w/o itp):     4.080s


PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.064s
Automaton transfers with branching:                0
Automaton transfer successors:                         3575 (count: 3575, min: 1, max: 1, avg: 1.00) [1 x 3575]

Predicate Forced Covering statistics
------------------------------------
Attempted forced coverings:             0
No of times elment was already covered: 0

CPA algorithm statistics
------------------------
Number of iterations:            1640
Max size of waitlist:            21
Average size of waitlist:        11
Number of computed successors:   1866
Max successors for one state:    2
Number of times merged:          217
Number of times stopped:         217
Number of times breaked:         1

Total time for CPA algorithm:         5.393s (Max:     5.393s)
  Time for choose from waitlist:      0.019s
  Time for forced covering:           0.004s
  Time for precision adjustment:      0.035s
  Time for transfer relation:         4.965s
  Time for merge operator:            0.197s
  Time for stop operator:             0.020s
  Time for adding to reached set:     0.043s

Impact Refiner statistics
-------------------------
Avg. length of target path (in blocks):                   1 (count: 1, min: 1, max: 1, avg: 1.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.375s
  Counterexample analysis:                1.205s (Max:     1.205s, Calls: 1)
    Refinement sat check:                 0.922s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.167s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   1.205s
  Extracting precise counterexample:                   0.167s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Computing abstraction of itp:           0.000s
  Checking whether itp is new:            0.000s
  Coverage checks:                        0.000s
  ARG update:                             0.000s

Number of abstractions during refinements:  0
Length of refined path (in blocks):                       0 (count: 0, min: 0, max: 0, avg: 0.00)
Number of affected states:                                0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'true':                  0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         0 (count: 0, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp 'false':                 0 (count: 0, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 0, min: 0, max: 0, avg: 0.00)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)

CEGAR algorithm statistics
--------------------------
Number of refinements:                1
Number of successful refinements:     0
Number of failed refinements:         0
Max. size of reached set before ref.: 1650
Max. size of reached set after ref.:  0
Avg. size of reached set before ref.: 1650.00
Avg. size of reached set after ref.:  NaN

Total time for CEGAR algorithm:       6.797s
Time for refinements:                 1.404s
Average time for refinement:          1.404s
Max time for refinement:              1.404s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    1
Number of infeasible paths:         0 (0%)
Time for counterexample checks:         1.212s

Code Coverage
-----------------------------
  Function coverage:      0.310
  Visited lines:          2344
  Total lines:            2833
  Line coverage:          0.827
  Visited conditions:     166
  Total conditions:       268
  Condition coverage:     0.619

CPAchecker general statistics
-----------------------------
Number of program locations:     964
Number of CFA edges:             1103
Number of relevant variables:    227
Number of functions:             87
Number of loops:                 2
Size of reached set:             1650
  Number of reached locations:   477 (49%)
    Avg states per location:     3
    Max states per location:     49 (at node N5)
  Number of reached functions:   27 (31%)
  Number of partitions:          1650
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       1
  Size of final wait list        10

Time for analysis setup:          2.962s
  Time for loading CPAs:          0.580s
  Time for loading parser:        0.474s
  Time for CFA construction:      1.848s
    Time for parsing file(s):     0.650s
    Time for AST to CFA:          0.540s
    Time for CFA sanity check:    0.073s
    Time for post-processing:     0.330s
      Time for var class.:        0.000s
Time for Analysis:                8.019s
CPU time for analysis:            8.010s
Total time for CPAchecker:       10.982s
Total CPU time for CPAchecker:   10.970s

Time for Garbage Collector:       0.247s (in 7 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                172MB (   164 MiB) max;     72MB (    68 MiB) avg;    178MB (   170 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     31MB (    29 MiB) avg;     42MB (    40 MiB) peak
Used in PS Old Gen pool:          15MB (    14 MiB) max;     12MB (    11 MiB) avg;     15MB (    14 MiB) peak
Allocated heap memory:           268MB (   256 MiB) max;    208MB (   199 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     33MB (    32 MiB) avg
Total process virtual memory:  10415MB (  9932 MiB) max;  10395MB (  9914 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 1976) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
