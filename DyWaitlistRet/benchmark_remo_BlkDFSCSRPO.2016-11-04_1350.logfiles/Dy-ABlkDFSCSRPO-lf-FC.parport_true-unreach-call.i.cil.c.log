scripts/cpa.sh -heap 7000M -Dy-ABlkDFSCSRPO-lf-FC -preprocess -noout -timelimit 900s -stats -spec /home/spiral/pacc_cpachecker_trunk/sv-comp/PropertyERROR.prp /home/spiral/pacc_cpachecker_trunk/sv-comp/ntdrivers/parport_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 7000M.
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.4-svn 9f6dc66+ (OpenJDK 64-Bit Server VM 1.8.0_111) started (CPAchecker.run, INFO)

line 6170: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6171: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6172: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6221: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6245: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6257: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6698: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6699: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6700: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 6763: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundPort (ASTConverter.convert, WARNING)

line 6843: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundIrq (ASTConverter.convert, WARNING)

line 6855: Dereferencing of non-pointer type PBOOLEAN  in expression *FoundDma (ASTConverter.convert, WARNING)

line 8237: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8248: Dereferencing of non-pointer type PULONG  in expression *ParameterValue (ASTConverter.convert, WARNING)

line 8558: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8559: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8567: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8568: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 8576: Dereferencing of non-pointer type PLONG  in expression *(((struct _SYNCHRONIZED_COUNT_CONTEXT *)SyncContext)->Count) (ASTConverter.convert, WARNING)

line 9098: Dereferencing of non-pointer type PULONG  in expression *PortNumber (ASTConverter.convert, WARNING)

line 9393: Dereferencing of non-pointer type PULONG  in expression *PRegFlags (ASTConverter.convert, WARNING)

line 9423: Dereferencing of non-pointer type PULONG  in expression *InstanceLengthArray (ASTConverter.convert, WARNING)

Using predicate analysis with SMTInterpol 2.1-183-g4d3bb9f-comp. (PredicateCPA:PredicateCPA.<init>, INFO)

CompositeCPA cpas?   org.sosy_lab.cpachecker.cpa.location.LocationCPA  org.sosy_lab.cpachecker.cpa.callstack.CallstackCPA  org.sosy_lab.cpachecker.cpa.functionpointer.FunctionPointerCPA  org.sosy_lab.cpachecker.cpa.predicate.PredicateCPA  org.sosy_lab.cpachecker.cpa.automaton.ControlAutomatonCPA   
ARGCPA cpa?   org.sosy_lab.cpachecker.cpa.composite.CompositeCPA
Using refinement for predicate analysis with ImpactRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

CPAchecker runAlgorithm st
Starting analysis ... (CPAchecker.runAlgorithm, INFO)

CCA.run algorithm?   org.sosy_lab.cpachecker.core.algorithm.CEGARAlgorithm
CCA.run checker?   org.sosy_lab.cpachecker.core.algorithm.CounterexampleCPAChecker
CEGARAlgorithme run st
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Assuming external function IoAcquireCancelSpinLock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

refinement st 
cached!cached!cached!number of affected states:        4 (count: 1, min: 4, max: 4, avg: 4.00)
removed coverage count: 0
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Assuming external function IoDisconnectInterrupt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

refinement st 
cached!cached!cached!cached!cached!number of affected states:       10 (count: 2, min: 4, max: 6, avg: 5.00)
removed coverage count: 1
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 1
successed forced covering: 1
cached!cached!cached!cached!removed coverage count: 3
num of affected states: 4
cached!attempting forced covering: 2
successed forced covering: 2
cached!cached!cached!removed coverage count: 3
num of affected states: 7
refinement st 
cached!cached!cached!number of affected states:       14 (count: 3, min: 4, max: 6, avg: 4.67)
removed coverage count: 4
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 3
successed forced covering: 3
cached!cached!cached!removed coverage count: 5
num of affected states: 11
attempting forced covering: 4
successed forced covering: 4
cached!cached!removed coverage count: 5
num of affected states: 14
refinement st 
cached!cached!cached!cached!cached!cached!cached!number of affected states:       24 (count: 4, min: 4, max: 10, avg: 6.00)
removed coverage count: 6
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 5
successed forced covering: 5
cached!cached!cached!removed coverage count: 7
num of affected states: 18
attempting forced covering: 6
successed forced covering: 6
cached!cached!removed coverage count: 7
num of affected states: 21
refinement st 
cached!cached!cached!cached!number of affected states:       24 (count: 5, min: 0, max: 10, avg: 4.80)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 7
successed forced covering: 7
removed coverage count: 7
num of affected states: 22
refinement st 
cached!cached!cached!number of affected states:       24 (count: 6, min: 0, max: 10, avg: 4.00)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       24 (count: 7, min: 0, max: 10, avg: 3.43)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!cached!number of affected states:       24 (count: 8, min: 0, max: 10, avg: 3.00)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!number of affected states:       24 (count: 9, min: 0, max: 10, avg: 2.67)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!cached!number of affected states:       28 (count: 10, min: 0, max: 10, avg: 2.80)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 8
refinement st 
cached!cached!cached!cached!cached!cached!cached!number of affected states:       35 (count: 11, min: 0, max: 10, avg: 3.18)
removed coverage count: 8
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 9
successed forced covering: 8
cached!cached!cached!cached!removed coverage count: 10
num of affected states: 26
cached!attempting forced covering: 10
successed forced covering: 9
cached!cached!cached!removed coverage count: 10
num of affected states: 29
refinement st 
cached!cached!cached!cached!cached!cached!number of affected states:       45 (count: 12, min: 0, max: 10, avg: 3.75)
removed coverage count: 11
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 11
successed forced covering: 10
cached!cached!cached!removed coverage count: 12
num of affected states: 33
attempting forced covering: 12
successed forced covering: 11
cached!cached!removed coverage count: 12
num of affected states: 36
refinement st 
cached!cached!cached!cached!cached!cached!cached!cached!number of affected states:       56 (count: 13, min: 0, max: 11, avg: 4.31)
removed coverage count: 13
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 13
successed forced covering: 12
cached!cached!cached!removed coverage count: 14
num of affected states: 40
attempting forced covering: 14
successed forced covering: 13
cached!cached!removed coverage count: 14
num of affected states: 43
refinement st 
cached!cached!cached!cached!number of affected states:       56 (count: 14, min: 0, max: 11, avg: 4.00)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 15
successed forced covering: 14
removed coverage count: 14
num of affected states: 44
refinement st 
cached!cached!cached!cached!number of affected states:       56 (count: 15, min: 0, max: 11, avg: 3.73)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!number of affected states:       56 (count: 16, min: 0, max: 11, avg: 3.50)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!cached!cached!number of affected states:       56 (count: 17, min: 0, max: 11, avg: 3.29)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!cached!number of affected states:       56 (count: 18, min: 0, max: 11, avg: 3.11)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!cached!cached!cached!cached!cached!cached!cached!number of affected states:       62 (count: 19, min: 0, max: 11, avg: 3.26)
removed coverage count: 14
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
Assuming external function KeSynchronizeExecution to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function WRITE_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function READ_PORT_UCHAR to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeStallExecutionProcessor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeQueryTimeIncrement to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function KeQueryTickCount to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

cached!Assuming external function IoReleaseRemoveLockEx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

refinement st 
cached!cached!cached!cached!cached!cached!cached!cached!cached!number of affected states:       69 (count: 20, min: 0, max: 11, avg: 3.45)
removed coverage count: 20
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 16
successed forced covering: 15
cached!cached!cached!cached!cached!cached!cached!removed coverage count: 21
num of affected states: 51
cached!attempting forced covering: 17
successed forced covering: 16
cached!cached!cached!cached!removed coverage count: 23
num of affected states: 55
cached!attempting forced covering: 18
successed forced covering: 17
cached!cached!cached!removed coverage count: 23
num of affected states: 58
cached!attempting forced covering: 19
successed forced covering: 18
cached!removed coverage count: 23
num of affected states: 59
cached!attempting forced covering: 20
successed forced covering: 19
cached!cached!cached!cached!cached!cached!cached!removed coverage count: 24
num of affected states: 66
cached!attempting forced covering: 21
successed forced covering: 20
cached!cached!cached!cached!removed coverage count: 26
num of affected states: 70
cached!attempting forced covering: 22
successed forced covering: 21
cached!cached!cached!removed coverage count: 26
num of affected states: 73
cached!attempting forced covering: 23
successed forced covering: 22
cached!removed coverage count: 26
num of affected states: 74
cached!cached!attempting forced covering: 24
cached!cached!cached!cached!cached!cached!cached!cached!cached!refinement st 
cached!cached!cached!cached!number of affected states:       76 (count: 21, min: 0, max: 11, avg: 3.62)
removed coverage count: 90
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!cached!cached!attempting forced covering: 25
successed forced covering: 23
cached!cached!removed coverage count: 99
num of affected states: 83
attempting forced covering: 26
successed forced covering: 24
removed coverage count: 103
num of affected states: 92
attempting forced covering: 27
successed forced covering: 25
removed coverage count: 103
num of affected states: 93
attempting forced covering: 28
successed forced covering: 26
removed coverage count: 107
num of affected states: 102
attempting forced covering: 29
successed forced covering: 27
removed coverage count: 107
num of affected states: 103
attempting forced covering: 30
successed forced covering: 28
removed coverage count: 107
num of affected states: 104
attempting forced covering: 31
successed forced covering: 29
removed coverage count: 108
num of affected states: 106
attempting forced covering: 32
successed forced covering: 30
removed coverage count: 108
num of affected states: 107
attempting forced covering: 33
successed forced covering: 31
removed coverage count: 108
num of affected states: 108
attempting forced covering: 34
successed forced covering: 32
removed coverage count: 108
num of affected states: 109
attempting forced covering: 35
successed forced covering: 33
removed coverage count: 108
num of affected states: 110
attempting forced covering: 36
successed forced covering: 34
removed coverage count: 108
num of affected states: 111
attempting forced covering: 37
successed forced covering: 35
removed coverage count: 109
num of affected states: 113
attempting forced covering: 38
successed forced covering: 36
removed coverage count: 109
num of affected states: 114
attempting forced covering: 39
successed forced covering: 37
removed coverage count: 109
num of affected states: 115
attempting forced covering: 40
successed forced covering: 38
removed coverage count: 109
num of affected states: 116
attempting forced covering: 41
successed forced covering: 39
removed coverage count: 109
num of affected states: 117
attempting forced covering: 42
successed forced covering: 40
removed coverage count: 109
num of affected states: 118
attempting forced covering: 43
successed forced covering: 41
removed coverage count: 109
num of affected states: 119
attempting forced covering: 44
successed forced covering: 42
removed coverage count: 109
num of affected states: 120
lines 5482-5483: Ignoring function call through function pointer *(Extension->ChipInfo.ParChipClearMode): Status = (*(Extension->ChipInfo.ParChipClearMode))(Extension->ChipInfo.Context, ChipMode); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

CEGARAlgorithme run ed
Error: lines 5482-5483: Unsupported feature (recursion): Status = PptClearChipMode(Extension->ChipInfo.Context, ChipMode); (line was originally pointer call(PptClearChipMode) Status = (*(Extension->ChipInfo.ParChipClearMode))(Extension->ChipInfo.Context,
                                                       ChipMode);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            542 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  429 (79%)
  Because of loop head:            113 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       542 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   21
  Times result was 'false':        0 (0%)
Number of coverage checks:         964
  BDD entailment checks:           270
Number of SMT sat checks:          547
  trivial:                         283
  cached:                          192

Max ABE block size:                       27
Number of predicates discovered:          14
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0


Time for post operator:                  1.179s
  Time for path formula creation:        1.159s
Time for strengthen operator:            0.044s
  Time for satisfiability checks:        0.001s
Time for prec operator:                  0.412s
  Time for abstraction:                  0.318s (Max:     0.167s, Count: 542)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.083s
Time for coverage check:                 0.044s
  Time for BDD entailment checks:        0.044s
Total time for SMT solver (w/o itp):     0.052s


PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.118s
Automaton transfers with branching:                0
Automaton transfer successors:                         6956 (count: 6956, min: 1, max: 1, avg: 1.00) [1 x 6956]

Predicate Forced Covering statistics
------------------------------------
Attempted forced coverings:             44
Successful forced coverings:            42 (95%)
No of times elment was already covered: 0

CPA algorithm statistics
------------------------
Number of iterations:            4182
Max size of waitlist:            62
Average size of waitlist:        44
Number of computed successors:   4556
Max successors for one state:    2
Number of times merged:          347
Number of times stopped:         347
Number of times breaked:         21

Total time for CPA algorithm:         2.920s (Max:     1.089s)
  Time for choose from waitlist:      0.037s
  Time for forced covering:           0.389s
  Time for precision adjustment:      0.529s
  Time for transfer relation:         1.551s
  Time for merge operator:            0.128s
  Time for stop operator:             0.050s
  Time for adding to reached set:     0.109s

Impact Refiner statistics
-------------------------
Avg. length of target path (in blocks):                 302 (count: 21, min: 9, max: 21, avg: 14.38)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.950s
  Counterexample analysis:                0.817s (Max:     0.091s, Calls: 21)
    Refinement sat check:                 0.627s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   0.817s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Computing abstraction of itp:           0.020s
  Checking whether itp is new:            0.036s
  Coverage checks:                        0.017s
  ARG update:                             0.023s

Number of abstractions during refinements:  133
Length of refined path (in blocks):                     277 (count: 21, min: 8, max: 16, avg: 13.19)
Number of affected states:                               76 (count: 21, min: 0, max: 11, avg: 3.62)
Length (states) of path with itp 'true':                120 (count: 21, min: 3, max: 9, avg: 5.71)
Length (states) of path with itp non-trivial itp:       136 (count: 21, min: 1, max: 12, avg: 6.48)
Length (states) of path with itp 'false':                21 (count: 21, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           5 (count: 21, min: 0, max: 2, avg: 0.24)
Equal non-trivial interpolants along paths:             110 (count: 21, min: 0, max: 11, avg: 5.24)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)

CEGAR algorithm statistics
--------------------------
Number of refinements:                21
Number of successful refinements:     21
Number of failed refinements:         0
Max. size of reached set before ref.: 3504
Max. size of reached set after ref.:  2037
Avg. size of reached set before ref.: 514.14
Avg. size of reached set after ref.:  440.48

Total time for CEGAR algorithm:       3.967s
Time for refinements:                 1.022s
Average time for refinement:          0.048s
Max time for refinement:              0.106s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      0.221
  Visited lines:          2789
  Total lines:            6409
  Line coverage:          0.435
  Visited conditions:     278
  Total conditions:       1152
  Condition coverage:     0.241

CPAchecker general statistics
-----------------------------
Number of program locations:     3329
Number of CFA edges:             4041
Number of relevant variables:    894
Number of functions:             181
Number of loops:                 37
Size of reached set:             2663
  Number of reached locations:   823 (25%)
    Avg states per location:     3
    Max states per location:     24 (at node N4408)
  Number of reached functions:   40 (22%)
  Number of partitions:          2561
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N824 (after line 3549), Function PptDispatchInternalDeviceControl called from node N4929, stack depth 2 [58f437b0], stack [main, PptDispatchInternalDeviceControl], Init])
  Number of target states:       0
  Size of final wait list        47

Time for analysis setup:          4.343s
  Time for loading CPAs:          0.650s
  Time for loading parser:        0.442s
  Time for CFA construction:      3.176s
    Time for parsing file(s):     0.812s
    Time for AST to CFA:          1.245s
    Time for CFA sanity check:    0.122s
    Time for post-processing:     0.721s
      Time for var class.:        0.000s
Time for Analysis:                3.967s
CPU time for analysis:            3.970s
Total time for CPAchecker:        8.313s
Total CPU time for CPAchecker:    8.310s

Time for Garbage Collector:       0.247s (in 6 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                144MB (   137 MiB) max;     56MB (    53 MiB) avg;    157MB (   149 MiB) peak
Used non-heap memory:             37MB (    36 MiB) max;     28MB (    26 MiB) avg;     39MB (    37 MiB) peak
Used in PS Old Gen pool:          20MB (    19 MiB) max;     11MB (    10 MiB) avg;     21MB (    20 MiB) peak
Allocated heap memory:           227MB (   217 MiB) max;    182MB (   174 MiB) avg
Allocated non-heap memory:        39MB (    38 MiB) max;     30MB (    28 MiB) avg
Total process virtual memory:  10413MB (  9931 MiB) max;  10388MB (  9907 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
