scripts/cpa.sh -heap 7000M -Dy-ABlkCSRPO-ABEl-FC -preprocess -noout -timelimit 900s -stats -spec /home/spiral/pacc_cpachecker_trunk/sv-comp/PropertyERROR.prp /home/spiral/pacc_cpachecker_trunk/sv-comp/ntdrivers/cdaudio_true-unreach-call.i.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 7000M.
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.4-svn 9b7d282+ (OpenJDK 64-Bit Server VM 1.8.0_91) started (CPAchecker.run, INFO)

line 7414: Dead code detected: return (-1073741823L); (CFACreationUtils.addEdgeToCFA, INFO)

Using predicate analysis with SMTInterpol 2.1-183-g4d3bb9f-comp. (PredicateCPA:PredicateCPA.<init>, INFO)

CompositeCPA cpas?   org.sosy_lab.cpachecker.cpa.location.LocationCPA  org.sosy_lab.cpachecker.cpa.callstack.CallstackCPA  org.sosy_lab.cpachecker.cpa.functionpointer.FunctionPointerCPA  org.sosy_lab.cpachecker.cpa.predicate.PredicateCPA  org.sosy_lab.cpachecker.cpa.automaton.ControlAutomatonCPA   
ARGCPA cpa?   org.sosy_lab.cpachecker.cpa.composite.CompositeCPA
Using refinement for predicate analysis with ImpactRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

CPAchecker runAlgorithm st
Starting analysis ... (CPAchecker.runAlgorithm, INFO)

CCA.run algorithm?   org.sosy_lab.cpachecker.core.algorithm.CEGARAlgorithm
CCA.run checker?   org.sosy_lab.cpachecker.core.algorithm.CounterexampleCPAChecker
CEGARAlgorithme run st
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
The void * pointer __VERIFIER_successful_alloc_*void#2 to a deferred allocation escaped form tracking! Allocating array void[904]. (in the following line(s):
 line 7550:	N3907 -{irp.AssociatedIrp.SystemBuffer = malloc(904);}-> N3908) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedIncrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function InterlockedDecrement to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

The void * pointer __VERIFIER_successful_alloc_*void#20 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

Assuming external function IoOpenDeviceRegistryKey to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function RtlWriteRegistryValue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

The void * pointer __VERIFIER_successful_alloc_*void#44 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#52 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#60 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#72 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#76 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#84 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#95 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#101 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#105 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#110 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

The void * pointer __VERIFIER_successful_alloc_*void#114 to a deferred allocation escaped form tracking! Allocating array void[4]. (in the following line(s):
 line 7709:	N4033 -{tmp = malloc(i);}-> N4035) (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationPointerEscape, WARNING)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function MmLockPagableDataSection to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

refinement st 
number of affected states:        1 (count: 1, min: 1, max: 1, avg: 1.00)
removed coverage count: 1
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:        1 (count: 2, min: 0, max: 1, avg: 0.50)
removed coverage count: 1
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 1
cached!refinement st 
number of affected states:        2 (count: 3, min: 0, max: 1, avg: 0.67)
removed coverage count: 2
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!number of affected states:        3 (count: 4, min: 0, max: 1, avg: 0.75)
removed coverage count: 2
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 2
attempting forced covering: 3
cached!cached!refinement st 
cached!number of affected states:        4 (count: 5, min: 0, max: 1, avg: 0.80)
removed coverage count: 3
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!number of affected states:        5 (count: 6, min: 0, max: 1, avg: 0.83)
removed coverage count: 3
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
cached!attempting forced covering: 4
cached!attempting forced covering: 5
attempting forced covering: 6
cached!cached!cached!refinement st 
cached!cached!number of affected states:        6 (count: 7, min: 0, max: 1, avg: 0.86)
removed coverage count: 4
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       10 (count: 8, min: 0, max: 4, avg: 1.25)
removed coverage count: 4
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
attempting forced covering: 7
attempting forced covering: 8
attempting forced covering: 9
attempting forced covering: 10
cached!cached!cached!cached!refinement st 
number of affected states:       15 (count: 9, min: 0, max: 5, avg: 1.67)
removed coverage count: 5
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       16 (count: 10, min: 0, max: 5, avg: 1.60)
removed coverage count: 5
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       17 (count: 11, min: 0, max: 5, avg: 1.55)
removed coverage count: 6
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       18 (count: 12, min: 0, max: 5, avg: 1.50)
removed coverage count: 6
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       18 (count: 13, min: 0, max: 5, avg: 1.38)
removed coverage count: 6
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
cached!number of affected states:       19 (count: 14, min: 0, max: 5, avg: 1.36)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       20 (count: 15, min: 0, max: 5, avg: 1.33)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
refinement st 
number of affected states:       20 (count: 16, min: 0, max: 5, avg: 1.25)
removed coverage count: 7
refinement ed 
CPAAlgorithm.run0 cpa?   org.sosy_lab.cpachecker.cpa.arg.ARGCPA
CEGARAlgorithme run ed
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

CPAchecker runAlgorithm ed
PredicateCPA statistics
-----------------------
Number of abstractions:            10 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            10 (100%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Times precision was empty:       10 (100%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      0 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   122
  Times result was 'false':        106 (87%)
Number of coverage checks:         1728
  BDD entailment checks:           56
Number of SMT sat checks:          212
  trivial:                         7
  cached:                          20

Max ABE block size:                       109
Number of predicates discovered:          23
Number of abstraction locations:          0
Max number of predicates per location:    0
Avg number of predicates per location:    0


Time for post operator:                  1.307s
  Time for path formula creation:        1.282s
Time for strengthen operator:           11.117s
  Time for satisfiability checks:       11.085s
Time for prec operator:                  0.044s
  Time for abstraction:                  0.044s (Max:     0.015s, Count: 10)
    Solving time:                        0.000s (Max:     0.000s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.538s
Time for coverage check:                 0.033s
  Time for BDD entailment checks:        0.033s
Total time for SMT solver (w/o itp):    11.124s


PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.133s
Automaton transfers with branching:                0
Automaton transfer successors:                         9064 (count: 9064, min: 1, max: 1, avg: 1.00) [1 x 9064]

Predicate Forced Covering statistics
------------------------------------
Attempted forced coverings:             10
Successful forced coverings:            0 (0%)
No of times elment was already covered: 0

CPA algorithm statistics
------------------------
Number of iterations:            4649
Max size of waitlist:            27
Average size of waitlist:        11
Number of computed successors:   5524
Max successors for one state:    2
Number of times merged:          836
Number of times stopped:         836
Number of times breaked:         16

Total time for CPA algorithm:        14.242s (Max:    12.352s)
  Time for choose from waitlist:      0.064s
  Time for forced covering:           0.161s
  Time for precision adjustment:      0.100s
  Time for transfer relation:        12.885s
  Time for merge operator:            0.646s
  Time for stop operator:             0.090s
  Time for adding to reached set:     0.094s

Impact Refiner statistics
-------------------------
Avg. length of target path (in blocks):                  52 (count: 16, min: 2, max: 6, avg: 3.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   5.946s
  Counterexample analysis:                5.831s (Max:     1.251s, Calls: 16)
    Refinement sat check:                 0.766s
    Interpolant computation:              0.000s
  Error path post-processing:                          0.000s
  Path-formulas extraction:                            0.000s
  Building the counterexample trace:                   5.831s
  Extracting precise counterexample:                   0.000s
  Extracting infeasible sliced prefixes:               0.000s
  Selecting infeasible sliced prefixes:                0.000s
  Computing abstraction of itp:           0.004s
  Checking whether itp is new:            0.025s
  Coverage checks:                        0.052s
  ARG update:                             0.004s

Number of abstractions during refinements:  34
Length of refined path (in blocks):                      50 (count: 16, min: 1, max: 6, avg: 3.13)
Number of affected states:                               20 (count: 16, min: 0, max: 5, avg: 1.25)
Length (states) of path with itp 'true':                  0 (count: 16, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        34 (count: 16, min: 0, max: 5, avg: 2.13)
Length (states) of path with itp 'false':                 2 (count: 16, min: 0, max: 1, avg: 0.13)
Different non-trivial interpolants along paths:          15 (count: 16, min: 0, max: 4, avg: 0.94)
Equal non-trivial interpolants along paths:               5 (count: 16, min: 0, max: 3, avg: 0.31)
Different precisions along paths:                         0 (count: 0, min: 0, max: 0, avg: 0.00)
Equal precisions along paths:                             0 (count: 0, min: 0, max: 0, avg: 0.00)

CEGAR algorithm statistics
--------------------------
Number of refinements:                16
Number of successful refinements:     16
Number of failed refinements:         0
Max. size of reached set before ref.: 4598
Max. size of reached set after ref.:  4591
Avg. size of reached set before ref.: 4127.19
Avg. size of reached set after ref.:  4116.56

Total time for CEGAR algorithm:      20.442s
Time for refinements:                 6.128s
Average time for refinement:          0.383s
Max time for refinement:              1.277s

Counterexample-Check Algorithm statistics
-----------------------------------------
Number of counterexample checks:    0

Code Coverage
-----------------------------
  Function coverage:      0.345
  Visited lines:          4288
  Total lines:            6461
  Line coverage:          0.664
  Visited conditions:     450
  Total conditions:       924
  Condition coverage:     0.487

CPAchecker general statistics
-----------------------------
Number of program locations:     2222
Number of CFA edges:             2774
Number of relevant variables:    378
Number of functions:             87
Number of loops:                 19
Size of reached set:             4519
  Number of reached locations:   990 (45%)
    Avg states per location:     4
    Max states per location:     114 (at node N1)
  Number of reached functions:   30 (34%)
  Number of partitions:          4514
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N274 (before lines 3214-3236), Function CdAudioStartDevice called from node N558, stack depth 3 [27be17c8], stack [main, CdAudioPnp, CdAudioStartDevice], Init])
  Number of target states:       0

Time for analysis setup:          4.460s
  Time for loading CPAs:          0.814s
  Time for loading parser:        0.447s
  Time for CFA construction:      3.096s
    Time for parsing file(s):     0.748s
    Time for AST to CFA:          1.269s
    Time for CFA sanity check:    0.130s
    Time for post-processing:     0.747s
      Time for var class.:        0.000s
Time for Analysis:               20.456s
CPU time for analysis:           20.460s
Total time for CPAchecker:       24.925s
Total CPU time for CPAchecker:   24.920s

Time for Garbage Collector:       0.431s (in 11 runs)
Garbage Collector(s) used:    PS MarkSweep, PS Scavenge
Used heap memory:                579MB (   552 MiB) max;    153MB (   146 MiB) avg;    618MB (   589 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     33MB (    31 MiB) avg;     40MB (    38 MiB) peak
Used in PS Old Gen pool:          26MB (    24 MiB) max;     15MB (    15 MiB) avg;     26MB (    24 MiB) peak
Allocated heap memory:           699MB (   667 MiB) max;    355MB (   338 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:  10416MB (  9934 MiB) max;  10405MB (  9923 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
