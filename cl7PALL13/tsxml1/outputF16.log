scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/loop-invgen/nest-if3_true-unreach-call_true-termination.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_xp7pacob/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            72 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            53 (74%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         19 (26%)
  Times precision was empty:       4 (6%)
  Times precision was {false}:     18 (25%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      50 (69%)
  Times result was 'false':        18 (25%)
Number of strengthen sat checks:   0
Number of coverage checks:         153
  BDD entailment checks:           111
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       10
Number of predicates discovered:          15
Number of abstraction locations:          3
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         318
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 4.68
Number of irrelevant predicates:          18 (6%)
Number of preds handled by boolean abs:   300 (94%)
  Total number of models for allsat:      289
  Max number of models for allsat:        18
  Avg number of models for allsat:        5.78

Time for post operator:                  0.056s
  Time for path formula creation:        0.052s
Time for strengthen operator:            0.007s
Time for prec operator:                  0.352s
  Time for abstraction:                  0.335s (Max:     0.015s, Count: 72)
    Boolean abstraction:                 0.162s
    Solving time:                        0.108s (Max:     0.009s)
    Model enumeration time:              0.007s
    Time for BDD construction:           0.030s (Max:     0.012s)
Time for merge operator:                 0.003s
Time for coverage check:                 0.005s
  Time for BDD entailment checks:        0.005s
Total time for SMT solver (w/o itp):     0.115s

Number of path formula cache hits:   317 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.048s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               1223
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 751, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.032s
Automaton transfers with branching:                0
Automaton transfer successors:                          462 (count: 462, min: 1, max: 1, avg: 1.00) [1 x 462]

CPA algorithm statistics
------------------------
Number of iterations:            373
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   432
Max successors for one state:    2
Number of times merged:          21
Number of times stopped:         38
Number of times breaked:         4

Total time for CPA algorithm:         0.553s (Max:     0.192s)
  Time for choose from waitlist:      0.000s
  Time for precision adjustment:      0.386s
  Time for transfer relation:         0.141s
  Time for merge operator:            0.004s
  Time for stop operator:             0.012s
  Time for adding to reached set:     0.003s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  21 (count: 4, min: 3, max: 7, avg: 5.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.090s
  Counterexample analysis:                             0.023s (Max:     0.009s, Calls: 4)
    Refinement sat check:                              0.010s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.044s
  Precision update:                                    0.002s
  ARG update:                                          0.014s

Length of refined path (in blocks):                      21 (count: 4, min: 3, max: 7, avg: 5.25)
Number of affected states:                               16 (count: 4, min: 2, max: 6, avg: 4.00)
Length (states) of path with itp 'true':                  1 (count: 4, min: 0, max: 1, avg: 0.25)
Length (states) of path with itp non-trivial itp:        16 (count: 4, min: 2, max: 6, avg: 4.00)
Length (states) of path with itp 'false':                 0 (count: 4, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           9 (count: 4, min: 1, max: 4, avg: 2.25)
Equal non-trivial interpolants along paths:               3 (count: 4, min: 0, max: 3, avg: 0.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 146
Max. size of reached set after ref.:  16
Avg. size of reached set before ref.: 73.50
Avg. size of reached set after ref.:  12.25

Total time for CEGAR algorithm:       0.652s
Time for refinements:                 0.099s
Average time for refinement:          0.024s
Max time for refinement:              0.072s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          14
  Total lines:            14
  Line coverage:          1.000
  Visited conditions:     14
  Total conditions:       14
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     44
Number of CFA edges:             50
Number of relevant variables:    7
Number of functions:             2
Number of loops:                 2
Size of reached set:             132
  Number of reached locations:   31 (70%)
    Avg states per location:     4
    Max states per location:     6 (at node N0)
  Number of reached functions:   2 (100%)
  Number of partitions:          123
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N32 (before line 18), Function main called from node N9, stack depth 1 [13fd2ccd], stack [main]])
  Number of target states:       0

Time for analysis setup:          1.465s
  Time for loading CPAs:          0.456s
  Time for loading parser:        0.419s
  Time for CFA construction:      0.525s
    Time for parsing file(s):     0.228s
    Time for AST to CFA:          0.081s
    Time for CFA sanity check:    0.016s
    Time for post-processing:     0.083s
      Time for var class.:        0.034s
Time for Analysis:                0.652s
CPU time for analysis:            0.660s
Time for analyzing result:        0.000s
Total time for CPAchecker:        2.121s
Total CPU time for CPAchecker:    2.120s
Time for statistics:              0.056s

Time for Garbage Collector:       0.071s (in 4 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 43MB (    41 MiB) max;     28MB (    26 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             28MB (    27 MiB) max;     22MB (    21 MiB) avg;     30MB (    29 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        31MB (    30 MiB) max;     23MB (    22 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8048MB (  7675 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
