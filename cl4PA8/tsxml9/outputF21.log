scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.14/linux-3.14__complex_emg__linux-kernel-locking-mutex__drivers-net-can-mcp251x_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_agj2u6zw/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5368: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8432: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9524: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9560: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9881: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9895: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10262: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10451: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10478: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10506: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5588: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5629: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8630: Function pointer *arg0 with type int (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8641: Function pointer *arg0 with type int (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8652: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9646: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9646: Ignoring call via function pointer ldv_rtc_class_instance_release_5_2::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9646: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8652: Ignoring call via function pointer ldv_pm_ops_instance_complete_3_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8652: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8453: Ignoring call via function pointer ldv_interrupt_instance_handler_1_5::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8453: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8806: Ignoring call via function pointer ldv_pm_ops_instance_runtime_idle_3_27::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8806: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8828: Ignoring call via function pointer ldv_pm_ops_instance_runtime_suspend_3_25::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8828: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8817: Ignoring call via function pointer ldv_pm_ops_instance_runtime_resume_3_24::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8817: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8729: Ignoring call via function pointer ldv_pm_ops_instance_prepare_3_22::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8729: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8861: Ignoring call via function pointer ldv_pm_ops_instance_suspend_noirq_3_20::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8861: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8795: Ignoring call via function pointer ldv_pm_ops_instance_resume_noirq_3_19::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8795: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8850: Ignoring call via function pointer ldv_pm_ops_instance_suspend_late_3_18::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8850: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8784: Ignoring call via function pointer ldv_pm_ops_instance_resume_early_3_17::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8784: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8674: Ignoring call via function pointer ldv_pm_ops_instance_freeze_late_3_14::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8674: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8883: Ignoring call via function pointer ldv_pm_ops_instance_thaw_early_3_13::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8883: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8685: Ignoring call via function pointer ldv_pm_ops_instance_freeze_noirq_3_12::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8685: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8894: Ignoring call via function pointer ldv_pm_ops_instance_thaw_noirq_3_11::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8894: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8707: Ignoring call via function pointer ldv_pm_ops_instance_poweroff_late_3_8::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8707: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8751: Ignoring call via function pointer ldv_pm_ops_instance_restore_early_3_7::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8751: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8718: Ignoring call via function pointer ldv_pm_ops_instance_poweroff_noirq_3_6::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8718: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8762: Ignoring call via function pointer ldv_pm_ops_instance_restore_noirq_3_5::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8762: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9635: Ignoring call via function pointer ldv_rtc_class_instance_probe_5_10::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9635: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8630: Ignoring call via function pointer ldv_platform_instance_probe_4_14::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8630: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9038: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_xmalloc(1432UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8641: Ignoring call via function pointer ldv_platform_instance_release_4_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8641: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2241223 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1876855 (84%)
  Because of loop head:            363638 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         730 (0%)
  Times precision was empty:       1292713 (58%)
  Times precision was {false}:     5509 (0%)
  Times result was cached:         910703 (41%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      32298 (1%)
  Times result was 'false':        175299 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         2322522
  BDD entailment checks:           1430068
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          51
Number of abstraction locations:          89
Max number of predicates per location:    51
Avg number of predicates per location:    18
Total predicates per abstraction:         16414703
Max number of predicates per abstraction: 51
Avg number of predicates per abstraction: 434.17
Number of irrelevant predicates:          9160867 (56%)
Number of preds handled by boolean abs:   402415 (2%)
  Total number of models for allsat:      177695
  Max number of models for allsat:        200
  Avg number of models for allsat:        5.50

Time for post operator:                 66.768s
  Time for path formula creation:       61.959s
Time for strengthen operator:            9.020s
Time for prec operator:                556.480s
  Time for abstraction:                536.086s (Max:     2.410s, Count: 2241223)
    Boolean abstraction:                84.824s
    Solving time:                       53.092s (Max:     0.040s)
    Model enumeration time:             21.203s
    Time for BDD construction:           7.798s (Max:     0.103s)
Time for merge operator:                 3.858s
Time for coverage check:                 1.444s
  Time for BDD entailment checks:        1.122s
Total time for SMT solver (w/o itp):    74.298s

Number of path formula cache hits:   11992506 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    39.574s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               96360
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      157239 (count: 3062471, min: 0, max: 2487, avg: 0.05)
Time for BDD node cleanup:                             0.510s
Time for BDD garbage collection:                       0.099s (in 2 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.371s
  Time for transition matches:                         7.985s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                     11576705 (count: 11576705, min: 1, max: 1, avg: 1.00) [1 x 11576705]

CPA algorithm statistics
------------------------
Number of iterations:            9392689
Max size of waitlist:            1156
Average size of waitlist:        372
Number of computed successors:   10752720
Max successors for one state:    2
Number of times merged:          446227
Number of times stopped:         855415
Number of times breaked:         730

Total time for CPA algorithm:       863.235s (Max:     7.435s)
  Time for choose from waitlist:      4.333s
  Time for precision adjustment:    617.726s
  Time for transfer relation:       176.007s
  Time for merge operator:           11.570s
  Time for stop operator:            14.456s
  Time for adding to reached set:    16.333s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   730
Avg. length of target path (in blocks):               23779 (count: 730, min: 15, max: 49, avg: 32.57)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  25.906s
  Counterexample analysis:                             9.264s (Max:     0.038s, Calls: 730)
    Refinement sat check:                              5.718s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.023s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.187s
  Precision update:                                    0.519s
  ARG update:                                         15.612s

Length of refined path (in blocks):                   15156 (count: 730, min: 11, max: 30, avg: 20.76)
Number of affected states:                            10030 (count: 730, min: 4, max: 23, avg: 13.74)
Length (states) of path with itp 'true':               4396 (count: 730, min: 6, max: 10, avg: 6.02)
Length (states) of path with itp non-trivial itp:     10030 (count: 730, min: 4, max: 23, avg: 13.74)
Length (states) of path with itp 'false':               730 (count: 730, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          10 (count: 730, min: 0, max: 1, avg: 0.01)
Equal non-trivial interpolants along paths:            9290 (count: 730, min: 3, max: 22, avg: 12.73)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                730
Number of successful refinements:     730
Number of failed refinements:         0
Max. size of reached set before ref.: 28300
Max. size of reached set after ref.:  10791
Avg. size of reached set before ref.: 13373.16
Avg. size of reached set after ref.:  61.17

Total time for CEGAR algorithm:     893.925s
Time for refinements:                30.619s
Average time for refinement:          0.041s
Max time for refinement:              0.147s

Code Coverage
-----------------------------
  Function coverage:      0.207
  Visited lines:          1482
  Total lines:            3399
  Line coverage:          0.436
  Visited conditions:     222
  Total conditions:       732
  Condition coverage:     0.303

CPAchecker general statistics
-----------------------------
Number of program locations:     4844
Number of CFA edges:             5463
Number of relevant variables:    703
Number of functions:             242
Number of loops:                 12
Size of reached set:             4257
  Number of reached locations:   652 (13%)
    Avg states per location:     6
    Max states per location:     35 (at node N3608)
  Number of reached functions:   50 (21%)
  Number of partitions:          4229
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1994 (before line 8337), Function main called from node N1979, stack depth 1 [49122b8f], stack [main]])
  Number of target states:       0
  Size of final wait list        208

Time for analysis setup:          6.367s
  Time for loading CPAs:          1.025s
  Time for loading parser:        0.704s
  Time for CFA construction:      4.478s
    Time for parsing file(s):     1.089s
    Time for AST to CFA:          1.649s
    Time for CFA sanity check:    0.319s
    Time for post-processing:     1.223s
      Time for var class.:        0.510s
Time for Analysis:              893.925s
CPU time for analysis:          893.810s
Total time for CPAchecker:      900.297s
Total CPU time for CPAchecker:  900.160s
Time for statistics:              0.171s

Time for Garbage Collector:      52.881s (in 1636 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                788MB (   752 MiB) max;    383MB (   365 MiB) avg;    797MB (   760 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1070MB (  1021 MiB) max;    547MB (   522 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8896MB (  8484 MiB) max;   8353MB (  7966 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
