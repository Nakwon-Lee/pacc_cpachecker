scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.14/linux-3.14__complex_emg__linux-kernel-locking-mutex__drivers-net-can-mcp251x_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8r5gqbv1/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5368: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 8432: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9524: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9560: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9881: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9895: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10262: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10451: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10478: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10506: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5588: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5629: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8630: Function pointer *arg0 with type int (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8641: Function pointer *arg0 with type int (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8652: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9646: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function regulator_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clk_disable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clk_unprepare to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5411: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_unreachable to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5629: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_clk_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clk_get_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_get_device_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_regulator_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8453: Ignoring call via function pointer ldv_interrupt_instance_handler_1_5::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8453: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function open_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8652: Ignoring call via function pointer ldv_pm_ops_instance_complete_3_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8652: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8762: Ignoring call via function pointer ldv_pm_ops_instance_restore_noirq_3_5::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 8762: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function spi_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_can_led_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clk_prepare to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function clk_enable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close_candev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            866594 (23% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  745996 (86%)
  Because of loop head:            87582 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         33016 (4%)
  Times precision was empty:       158371 (18%)
  Times precision was {false}:     2935 (0%)
  Times result was cached:         605244 (70%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      100044 (12%)
  Times result was 'false':        179550 (21%)
Number of strengthen sat checks:   0
Number of coverage checks:         933241
  BDD entailment checks:           783229
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          56
Number of abstraction locations:          301
Max number of predicates per location:    34
Avg number of predicates per location:    14
Total predicates per abstraction:         9226558
Max number of predicates per abstraction: 34
Avg number of predicates per abstraction: 89.60
Number of irrelevant predicates:          1559701 (17%)
Number of preds handled by boolean abs:   1502022 (16%)
  Total number of models for allsat:      364541
  Max number of models for allsat:        120
  Avg number of models for allsat:        3.64

Time for post operator:                 37.605s
  Time for path formula creation:       36.084s
Time for strengthen operator:            3.610s
Time for prec operator:                599.479s
  Time for abstraction:                590.123s (Max:     0.972s, Count: 866594)
    Boolean abstraction:               213.794s
    Solving time:                      141.447s (Max:     0.074s)
    Model enumeration time:             36.292s
    Time for BDD construction:          15.164s (Max:     0.097s)
Time for merge operator:                 2.607s
Time for coverage check:                 1.563s
  Time for BDD entailment checks:        1.405s
Total time for SMT solver (w/o itp):   177.739s

Number of path formula cache hits:   3435688 (79%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    27.226s

Total number of created targets for pointer analysis: 1733
   Number of created targets for uf: *(struct_device_private)* is 236
   Number of created targets for uf: *(void)* is 818
   Number of created targets for uf: *signed_int is 44
   Number of created targets for uf: *unsigned_long_long_int is 236
   Number of created targets for uf: *unsigned_int is 127


Number of BDD nodes:                               247273
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      411743 (count: 1663011, min: 0, max: 3872, avg: 0.25)
Time for BDD node cleanup:                             0.339s
Time for BDD garbage collection:                       0.138s (in 3 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.503s
  Time for transition matches:                         3.140s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.055s
Automaton transfers with branching:                0
Automaton transfer successors:                      3770660 (count: 3770660, min: 1, max: 1, avg: 1.00) [1 x 3770660]

CPA algorithm statistics
------------------------
Number of iterations:            2997309
Max size of waitlist:            721
Average size of waitlist:        233
Number of computed successors:   3405542
Max successors for one state:    2
Number of times merged:          75006
Number of times stopped:         129695
Number of times breaked:         686

Total time for CPA algorithm:       726.477s (Max:    26.091s)
  Time for choose from waitlist:      1.424s
  Time for precision adjustment:    621.552s
  Time for transfer relation:        79.156s
  Time for merge operator:            4.632s
  Time for stop operator:             6.589s
  Time for adding to reached set:     5.918s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   686
Avg. length of target path (in blocks):              249404 (count: 686, min: 31, max: 1790, avg: 363.56)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 159.535s
  Counterexample analysis:                           151.180s (Max:     3.890s, Calls: 686)
    Refinement sat check:                             33.833s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.137s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.946s
  Precision update:                                    0.942s
  ARG update:                                          5.048s

Length of refined path (in blocks):                  203954 (count: 686, min: 11, max: 1168, avg: 297.31)
Number of affected states:                           121112 (count: 686, min: 0, max: 1015, avg: 176.55)
Length (states) of path with itp 'true':              82156 (count: 686, min: 0, max: 1134, avg: 119.76)
Length (states) of path with itp non-trivial itp:    121112 (count: 686, min: 0, max: 1015, avg: 176.55)
Length (states) of path with itp 'false':               523 (count: 686, min: 0, max: 1, avg: 0.76)
Different non-trivial interpolants along paths:         259 (count: 686, min: 0, max: 16, avg: 0.38)
Equal non-trivial interpolants along paths:          120198 (count: 686, min: 0, max: 1013, avg: 175.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                686
Number of successful refinements:     686
Number of failed refinements:         0
Max. size of reached set before ref.: 32326
Max. size of reached set after ref.:  20956
Avg. size of reached set before ref.: 6511.43
Avg. size of reached set after ref.:  2015.10

Total time for CEGAR algorithm:     893.218s
Time for refinements:               165.743s
Average time for refinement:          0.241s
Max time for refinement:              4.081s

Code Coverage
-----------------------------
  Function coverage:      0.496
  Visited lines:          2007
  Total lines:            3399
  Line coverage:          0.590
  Visited conditions:     280
  Total conditions:       732
  Condition coverage:     0.383

CPAchecker general statistics
-----------------------------
Number of program locations:     4844
Number of CFA edges:             5463
Number of relevant variables:    703
Number of functions:             242
Number of loops:                 12
Size of reached set:             11816
  Number of reached locations:   1137 (23%)
    Avg states per location:     10
    Max states per location:     132 (at node N4107)
  Number of reached functions:   120 (50%)
  Number of partitions:          11683
    Avg size of partitions:      1
    Max size of partitions:      36 (with key [N1994 (before line 8337), Function main called from node N1979, stack depth 1 [49122b8f], stack [main]])
  Number of target states:       0
  Size of final wait list        360

Time for analysis setup:          7.024s
  Time for loading CPAs:          1.148s
  Time for loading parser:        0.745s
  Time for CFA construction:      4.981s
    Time for parsing file(s):     1.230s
    Time for AST to CFA:          1.837s
    Time for CFA sanity check:    0.328s
    Time for post-processing:     1.401s
      Time for var class.:        0.570s
Time for Analysis:              893.218s
CPU time for analysis:          893.090s
Total time for CPAchecker:      900.255s
Total CPU time for CPAchecker:  900.110s
Time for statistics:              0.301s

Time for Garbage Collector:      34.875s (in 1725 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                511MB (   487 MiB) max;    228MB (   218 MiB) avg;    522MB (   498 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           620MB (   591 MiB) max;    340MB (   324 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:  14214MB ( 13555 MiB) max;   9809MB (  9354 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
