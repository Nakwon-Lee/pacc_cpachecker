scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.14/linux-3.14__complex_emg__linux-alloc-spinlock__drivers-net-ethernet-sun-cassini_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_n2hcn68x/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6028: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 6215: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 6220: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 6230: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 6234: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 6293: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 6298: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 6308: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 6312: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 12711: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 15152: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 15172: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 15175: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 15177: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 15237: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 15761: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 15774: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 15906: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 16541: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 16583: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 16584: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 16629: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 16985: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 17144: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17160: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17212: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17276: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17328: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17359: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17508: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17524: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17602: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7009: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7050: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6806: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6881: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6921: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6841: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16924: Ignoring call via function pointer ldv_timer_instance_callback_3_2::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16924: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 16289: Ignoring call via function pointer ldv_pci_instance_suspend_late_2_7::arg0 for which no suitable target was found in line: tmp = (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16289: Ignoring function call through function pointer *arg0: tmp = (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 16254: Ignoring call via function pointer ldv_pci_instance_resume_early_2_6::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16254: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 16265: Ignoring call via function pointer ldv_pci_instance_shutdown_2_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 16265: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15807: Ignoring call via function pointer ldv_interrupt_instance_thread_0_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 15807: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_assert to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __ldv_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pad to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16116: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_try_set_mwi to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16511: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_xmalloc(32UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function netdev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14224: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_unreachable to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_bus_write_config_byte to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6800: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_iomap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3250830 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2796408 (86%)
  Because of loop head:            454106 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         316 (0%)
  Times precision was empty:       2377413 (73%)
  Times precision was {false}:     4403 (0%)
  Times result was cached:         859646 (26%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9368 (0%)
  Times result was 'false':        49251 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1827150
  BDD entailment checks:           825350
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       67
Number of predicates discovered:          28
Number of abstraction locations:          246
Max number of predicates per location:    24
Avg number of predicates per location:    3
Total predicates per abstraction:         4208348
Max number of predicates per abstraction: 24
Avg number of predicates per abstraction: 305.59
Number of irrelevant predicates:          3175923 (75%)
Number of preds handled by boolean abs:   43102 (1%)
  Total number of models for allsat:      17083
  Max number of models for allsat:        33
  Avg number of models for allsat:        1.82

Time for post operator:                167.950s
  Time for path formula creation:      161.691s
Time for strengthen operator:           12.489s
Time for prec operator:                202.897s
  Time for abstraction:                166.777s (Max:     2.031s, Count: 3250830)
    Boolean abstraction:                12.567s
    Solving time:                       11.331s (Max:     0.024s)
    Model enumeration time:              2.019s
    Time for BDD construction:           0.570s (Max:     0.038s)
Time for merge operator:                 7.096s
Time for coverage check:                 0.976s
  Time for BDD entailment checks:        0.720s
Total time for SMT solver (w/o itp):    13.350s

Number of path formula cache hits:   16063985 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   109.964s

Total number of created targets for pointer analysis: 342096
   Number of created targets for uf: *unsigned_short_int is 4579
   Number of created targets for uf: *signed_int is 2809
   Number of created targets for uf: *(struct_list_head)* is 231
   Number of created targets for uf: *unsigned_long_long_int is 178
   Number of created targets for uf: *unsigned_int is 6


Number of BDD nodes:                               34081
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       34979 (count: 3294963, min: 0, max: 1838, avg: 0.01)
Time for BDD node cleanup:                             0.579s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 21.492s
  Time for transition matches:                        12.037s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     15054873 (count: 15054873, min: 1, max: 1, avg: 1.00) [1 x 15054873]

CPA algorithm statistics
------------------------
Number of iterations:            10449064
Max size of waitlist:            2642
Average size of waitlist:        481
Number of computed successors:   11680735
Max successors for one state:    2
Number of times merged:          500900
Number of times stopped:         949573
Number of times breaked:         316

Total time for CPA algorithm:       842.894s (Max:    11.890s)
  Time for choose from waitlist:      6.607s
  Time for precision adjustment:    290.577s
  Time for transfer relation:       439.877s
  Time for merge operator:           17.411s
  Time for stop operator:            18.860s
  Time for adding to reached set:    24.408s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   316
Avg. length of target path (in blocks):               18677 (count: 316, min: 32, max: 93, avg: 59.10)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  34.238s
  Counterexample analysis:                             7.335s (Max:     0.097s, Calls: 316)
    Refinement sat check:                              4.862s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.020s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.141s
  Precision update:                                    0.206s
  ARG update:                                         26.317s

Length of refined path (in blocks):                   10077 (count: 316, min: 9, max: 70, avg: 31.89)
Number of affected states:                             8057 (count: 316, min: 3, max: 65, avg: 25.50)
Length (states) of path with itp 'true':               1704 (count: 316, min: 0, max: 32, avg: 5.39)
Length (states) of path with itp non-trivial itp:      8057 (count: 316, min: 3, max: 65, avg: 25.50)
Length (states) of path with itp 'false':               316 (count: 316, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          26 (count: 316, min: 0, max: 2, avg: 0.08)
Equal non-trivial interpolants along paths:            7715 (count: 316, min: 1, max: 64, avg: 24.41)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                316
Number of successful refinements:     316
Number of failed refinements:         0
Max. size of reached set before ref.: 95551
Max. size of reached set after ref.:  57374
Avg. size of reached set before ref.: 43858.41
Avg. size of reached set after ref.:  10165.77

Total time for CEGAR algorithm:     891.047s
Time for refinements:                44.854s
Average time for refinement:          0.141s
Max time for refinement:              0.639s

Code Coverage
-----------------------------
  Function coverage:      0.354
  Visited lines:          3091
  Total lines:            7167
  Line coverage:          0.431
  Visited conditions:     558
  Total conditions:       1674
  Condition coverage:     0.333

CPAchecker general statistics
-----------------------------
Number of program locations:     10564
Number of CFA edges:             12229
Number of relevant variables:    1451
Number of functions:             545
Number of loops:                 72
Size of reached set:             35037
  Number of reached locations:   2199 (21%)
    Avg states per location:     15
    Max states per location:     666 (at node N349)
  Number of reached functions:   193 (35%)
  Number of partitions:          34754
    Avg size of partitions:      1
    Max size of partitions:      21 (with key [N7050 (before line 15734), Function main called from node N7002, stack depth 1 [290c266c], stack [main]])
  Number of target states:       0
  Size of final wait list        434

Time for analysis setup:          9.221s
  Time for loading CPAs:          1.458s
  Time for loading parser:        0.740s
  Time for CFA construction:      6.874s
    Time for parsing file(s):     1.442s
    Time for AST to CFA:          2.691s
    Time for CFA sanity check:    0.701s
    Time for post-processing:     1.834s
      Time for var class.:        0.904s
Time for Analysis:              891.048s
CPU time for analysis:          890.970s
Total time for CPAchecker:      900.272s
Total CPU time for CPAchecker:  900.170s
Time for statistics:              0.685s

Time for Garbage Collector:      96.512s (in 736 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1723MB (  1643 MiB) max;    786MB (   750 MiB) avg;   1813MB (  1729 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1937MB (  1847 MiB) max;   1159MB (  1105 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8220MB (  7839 MiB) max;   8138MB (  7761 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
