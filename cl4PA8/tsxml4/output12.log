scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.14/linux-3.14__complex_emg__linux-kernel-locking-spinlock__drivers-net-ethernet-8390-axnet_cs_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_s283phwl/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5489: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 8075: Dead code detected: __ms = 2UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8563: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8566: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8568: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 8657: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9100: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9113: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9406: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9420: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9462: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9463: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 9508: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 10022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10050: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10090: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10109: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10137: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10153: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function external_allocated_data to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_interrupt_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_switch_to_process_context to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9961: Ignoring call via function pointer ldv_timer_instance_callback_3_2::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9961: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function eth_change_mtu to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_mac_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function eth_validate_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9146: Ignoring call via function pointer ldv_interrupt_instance_thread_0_3::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9146: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            29845 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  23719 (79%)
  Because of loop head:            6085 (20%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         41 (0%)
  Times precision was empty:       19090 (64%)
  Times precision was {false}:     672 (2%)
  Times result was cached:         9182 (31%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      901 (3%)
  Times result was 'false':        1242 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         20350
  BDD entailment checks:           14562
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       37
Number of predicates discovered:          14
Number of abstraction locations:          24
Max number of predicates per location:    14
Avg number of predicates per location:    5
Total predicates per abstraction:         44537
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 28.31
Number of irrelevant predicates:          32116 (72%)
Number of preds handled by boolean abs:   4235 (10%)
  Total number of models for allsat:      1967
  Max number of models for allsat:        25
  Avg number of models for allsat:        2.18

Time for post operator:                  4.835s
  Time for path formula creation:        4.605s
Time for strengthen operator:            0.241s
Time for prec operator:                  7.922s
  Time for abstraction:                  7.200s (Max:     0.041s, Count: 29845)
    Boolean abstraction:                 1.599s
    Solving time:                        1.246s (Max:     0.017s)
    Model enumeration time:              0.243s
    Time for BDD construction:           0.196s (Max:     0.013s)
Time for merge operator:                 0.156s
Time for coverage check:                 0.066s
  Time for BDD entailment checks:        0.060s
Total time for SMT solver (w/o itp):     1.490s

Number of path formula cache hits:   119250 (73%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.965s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               4986
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4817 (count: 43757, min: 0, max: 750, avg: 0.11)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.505s
  Time for transition matches:                         0.202s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       139930 (count: 139930, min: 1, max: 1, avg: 1.00) [1 x 139930]

CPA algorithm statistics
------------------------
Number of iterations:            107234
Max size of waitlist:            268
Average size of waitlist:        109
Number of computed successors:   120498
Max successors for one state:    2
Number of times merged:          2894
Number of times stopped:         8817
Number of times breaked:         41

Total time for CPA algorithm:        21.809s (Max:     1.539s)
  Time for choose from waitlist:      0.195s
  Time for precision adjustment:      9.885s
  Time for transfer relation:         9.389s
  Time for merge operator:            0.369s
  Time for stop operator:             0.470s
  Time for adding to reached set:     0.407s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   41
Avg. length of target path (in blocks):                1168 (count: 41, min: 13, max: 52, avg: 28.49)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.346s
  Counterexample analysis:                             0.669s (Max:     0.035s, Calls: 41)
    Refinement sat check:                              0.337s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.080s
  Precision update:                                    0.031s
  ARG update:                                          0.490s

Length of refined path (in blocks):                     786 (count: 41, min: 9, max: 43, avg: 19.17)
Number of affected states:                              555 (count: 41, min: 4, max: 38, avg: 13.54)
Length (states) of path with itp 'true':                190 (count: 41, min: 4, max: 30, avg: 4.63)
Length (states) of path with itp non-trivial itp:       555 (count: 41, min: 4, max: 38, avg: 13.54)
Length (states) of path with itp 'false':                41 (count: 41, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           4 (count: 41, min: 0, max: 1, avg: 0.10)
Equal non-trivial interpolants along paths:             510 (count: 41, min: 3, max: 37, avg: 12.44)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                41
Number of successful refinements:     41
Number of failed refinements:         0
Max. size of reached set before ref.: 6446
Max. size of reached set after ref.:  3140
Avg. size of reached set before ref.: 2774.41
Avg. size of reached set after ref.:  88.29

Total time for CEGAR algorithm:      23.396s
Time for refinements:                 1.586s
Average time for refinement:          0.038s
Max time for refinement:              0.129s

Code Coverage
-----------------------------
  Function coverage:      0.067
  Visited lines:          1147
  Total lines:            3719
  Line coverage:          0.308
  Visited conditions:     58
  Total conditions:       724
  Condition coverage:     0.080

CPAchecker general statistics
-----------------------------
Number of program locations:     5241
Number of CFA edges:             5973
Number of relevant variables:    606
Number of functions:             283
Number of loops:                 22
Size of reached set:             308
  Number of reached locations:   197 (4%)
    Avg states per location:     1
    Max states per location:     6 (at node N3343)
  Number of reached functions:   19 (7%)
  Number of partitions:          305
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2351 (before line 9015), Function main called from node N2339, stack depth 1 [4fb392c4], stack [main]])
  Number of target states:       0
  Size of final wait list        24

Time for analysis setup:          6.827s
  Time for loading CPAs:          1.098s
  Time for loading parser:        0.699s
  Time for CFA construction:      4.867s
    Time for parsing file(s):     1.202s
    Time for AST to CFA:          1.749s
    Time for CFA sanity check:    0.355s
    Time for post-processing:     1.322s
      Time for var class.:        0.536s
Time for Analysis:               23.397s
CPU time for analysis:           23.400s
Total time for CPAchecker:       30.228s
Total CPU time for CPAchecker:   30.210s
Time for statistics:              0.090s

Time for Garbage Collector:       0.818s (in 57 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 81MB (    77 MiB) max;     51MB (    48 MiB) avg;     84MB (    80 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
