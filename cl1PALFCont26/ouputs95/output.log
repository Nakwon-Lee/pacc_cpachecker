scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--power--wm831x_power.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9i0efdd0/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_crit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function power_supply_changed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_set_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function power_supply_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wm831x_reg_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq_byname to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function power_supply_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            699 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  535 (77%)
  Because of loop head:            158 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (1%)
  Times precision was empty:       190 (27%)
  Times precision was {false}:     83 (12%)
  Times result was cached:         358 (51%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      68 (10%)
  Times result was 'false':        11 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         845
  BDD entailment checks:           197
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       132
Number of predicates discovered:          2
Number of abstraction locations:          32
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         509
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.37
Number of irrelevant predicates:          204 (40%)
Number of preds handled by boolean abs:   68 (13%)
  Total number of models for allsat:      68
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.643s
  Time for path formula creation:        1.562s
Time for strengthen operator:            0.090s
Time for prec operator:                  0.988s
  Time for abstraction:                  0.887s (Max:     0.055s, Count: 699)
    Boolean abstraction:                 0.175s
    Solving time:                        0.252s (Max:     0.040s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.020s (Max:     0.009s)
Time for merge operator:                 0.127s
Time for coverage check:                 0.032s
  Time for BDD entailment checks:        0.032s
Total time for SMT solver (w/o itp):     0.256s

Number of path formula cache hits:   9591 (60%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.431s

Total number of created targets for pointer analysis: 180
   Number of created targets for uf: *(char)* is 33
   Number of created targets for uf: *signed_int is 9


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         127 (count: 1215, min: 0, max: 112, avg: 0.10)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.153s
Automaton transfers with branching:                0
Automaton transfer successors:                        15254 (count: 15254, min: 1, max: 1, avg: 1.00) [1 x 15254]

CPA algorithm statistics
------------------------
Number of iterations:            4544
Max size of waitlist:            17
Average size of waitlist:        10
Number of computed successors:   5108
Max successors for one state:    2
Number of times merged:          324
Number of times stopped:         502
Number of times breaked:         6

Total time for CPA algorithm:         4.345s (Max:     1.373s)
  Time for choose from waitlist:      0.029s
  Time for precision adjustment:      1.263s
  Time for transfer relation:         2.563s
  Time for merge operator:            0.199s
  Time for stop operator:             0.069s
  Time for adding to reached set:     0.054s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                 110 (count: 6, min: 4, max: 41, avg: 18.33)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.241s
  Counterexample analysis:                             0.139s (Max:     0.056s, Calls: 6)
    Refinement sat check:                              0.098s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.011s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.016s
  Precision update:                                    0.012s
  ARG update:                                          0.049s

Length of refined path (in blocks):                     104 (count: 6, min: 3, max: 40, avg: 17.33)
Number of affected states:                               98 (count: 6, min: 2, max: 39, avg: 16.33)
Length (states) of path with itp 'true':                  0 (count: 6, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        98 (count: 6, min: 2, max: 39, avg: 16.33)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              92 (count: 6, min: 1, max: 38, avg: 15.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 920
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 690.67
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       4.612s
Time for refinements:                 0.267s
Average time for refinement:          0.044s
Max time for refinement:              0.079s

Code Coverage
-----------------------------
  Function coverage:      0.364
  Visited lines:          1213
  Total lines:            1578
  Line coverage:          0.769
  Visited conditions:     78
  Total conditions:       162
  Condition coverage:     0.481

CPAchecker general statistics
-----------------------------
Number of program locations:     1815
Number of CFA edges:             1899
Number of relevant variables:    372
Number of functions:             33
Number of loops:                 5
Size of reached set:             470
  Number of reached locations:   280 (15%)
    Avg states per location:     1
    Max states per location:     10 (at node N162)
  Number of reached functions:   12 (36%)
  Number of partitions:          470
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.604s
  Time for loading CPAs:          0.920s
  Time for loading parser:        0.752s
  Time for CFA construction:      2.760s
    Time for parsing file(s):     0.857s
    Time for AST to CFA:          0.823s
    Time for CFA sanity check:    0.234s
    Time for post-processing:     0.656s
      Time for var class.:        0.350s
Time for Analysis:                4.612s
CPU time for analysis:            4.600s
Time for analyzing result:        0.000s
Total time for CPAchecker:        9.227s
Total CPU time for CPAchecker:    9.210s
Time for statistics:              0.103s

Time for Garbage Collector:       0.198s (in 9 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 61MB (    58 MiB) max;     36MB (    34 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             35MB (    34 MiB) max;     28MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     30MB (    28 MiB) avg
Total process virtual memory:   8133MB (  7757 MiB) max;   8094MB (  7719 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
