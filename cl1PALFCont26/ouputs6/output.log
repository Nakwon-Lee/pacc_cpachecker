scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--leds--leds-bd2802.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jmxs5pku/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 2162: Dead code detected: tmp___0 = (int )_kstrtoul(s, base, res); (CFACreationUtils.addEdgeToCFA, INFO)

line 2168: Dead code detected: tmp___0 = (int )_kstrtoul(s, base, res); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpio_request_one to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_smbus_write_byte_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __gpio_set_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_rwsem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            788 (5% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  618 (78%)
  Because of loop head:            162 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (1%)
  Times precision was empty:       200 (25%)
  Times precision was {false}:     49 (6%)
  Times result was cached:         464 (59%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      75 (10%)
  Times result was 'false':        15 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         602
  BDD entailment checks:           216
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       177
Number of predicates discovered:          2
Number of abstraction locations:          54
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         588
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.74
Number of irrelevant predicates:          189 (32%)
Number of preds handled by boolean abs:   75 (13%)
  Total number of models for allsat:      75
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.564s
  Time for path formula creation:        1.510s
Time for strengthen operator:            0.099s
Time for prec operator:                  1.020s
  Time for abstraction:                  0.930s (Max:     0.069s, Count: 788)
    Boolean abstraction:                 0.117s
    Solving time:                        0.260s (Max:     0.044s)
    Model enumeration time:              0.018s
    Time for BDD construction:           0.006s (Max:     0.001s)
Time for merge operator:                 0.143s
Time for coverage check:                 0.013s
  Time for BDD entailment checks:        0.013s
Total time for SMT solver (w/o itp):     0.278s

Number of path formula cache hits:   10934 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.401s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         139 (count: 1116, min: 0, max: 52, avg: 0.12)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.160s
Automaton transfers with branching:                0
Automaton transfer successors:                        16783 (count: 16783, min: 1, max: 1, avg: 1.00) [1 x 16783]

CPA algorithm statistics
------------------------
Number of iterations:            3853
Max size of waitlist:            16
Average size of waitlist:        8
Number of computed successors:   4300
Max successors for one state:    2
Number of times merged:          193
Number of times stopped:         372
Number of times breaked:         8

Total time for CPA algorithm:         4.446s (Max:     1.057s)
  Time for choose from waitlist:      0.020s
  Time for precision adjustment:      1.285s
  Time for transfer relation:         2.683s
  Time for merge operator:            0.223s
  Time for stop operator:             0.064s
  Time for adding to reached set:     0.067s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   8
Avg. length of target path (in blocks):                 139 (count: 8, min: 4, max: 33, avg: 17.38)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.282s
  Counterexample analysis:                             0.187s (Max:     0.040s, Calls: 8)
    Refinement sat check:                              0.144s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.027s
  Precision update:                                    0.014s
  ARG update:                                          0.035s

Length of refined path (in blocks):                     131 (count: 8, min: 3, max: 32, avg: 16.38)
Number of affected states:                              123 (count: 8, min: 2, max: 31, avg: 15.38)
Length (states) of path with itp 'true':                  0 (count: 8, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       123 (count: 8, min: 2, max: 31, avg: 15.38)
Length (states) of path with itp 'false':                 8 (count: 8, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 8, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             115 (count: 8, min: 1, max: 30, avg: 14.38)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                8
Number of successful refinements:     8
Number of failed refinements:         0
Max. size of reached set before ref.: 627
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 440.88
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       4.759s
Time for refinements:                 0.312s
Average time for refinement:          0.039s
Max time for refinement:              0.060s

Code Coverage
-----------------------------
  Function coverage:      0.247
  Visited lines:          1643
  Total lines:            4568
  Line coverage:          0.360
  Visited conditions:     76
  Total conditions:       294
  Condition coverage:     0.259

CPAchecker general statistics
-----------------------------
Number of program locations:     5097
Number of CFA edges:             5318
Number of relevant variables:    1497
Number of functions:             85
Number of loops:                 10
Size of reached set:             411
  Number of reached locations:   318 (6%)
    Avg states per location:     1
    Max states per location:     4 (at node N195)
  Number of reached functions:   21 (25%)
  Number of partitions:          411
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          5.721s
  Time for loading CPAs:          0.911s
  Time for loading parser:        0.799s
  Time for CFA construction:      3.841s
    Time for parsing file(s):     1.013s
    Time for AST to CFA:          1.247s
    Time for CFA sanity check:    0.417s
    Time for post-processing:     1.013s
      Time for var class.:        0.575s
Time for Analysis:                4.760s
CPU time for analysis:            4.770s
Time for analyzing result:        0.000s
Total time for CPAchecker:       10.485s
Total CPU time for CPAchecker:   10.470s
Time for statistics:              0.126s

Time for Garbage Collector:       0.282s (in 12 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     38MB (    37 MiB) avg;     71MB (    68 MiB) peak
Used non-heap memory:             36MB (    34 MiB) max;     28MB (    27 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    36 MiB) max;     30MB (    29 MiB) avg
Total process virtual memory:   8132MB (  7755 MiB) max;   8094MB (  7719 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
