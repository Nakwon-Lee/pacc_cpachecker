scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-mtd-sm_ftl.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_nm8ezg3k/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5288: Dead code detected: tmp___9 = -22; (CFACreationUtils.addEdgeToCFA, INFO)

line 6642: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 6705: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4737: Function pointer *(mtd->erase) with type int (*)(struct mtd_info *mtd, struct erase_info *instr) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4250: Function pointer *(mtd->read_oob) with type int (*)(struct mtd_info *mtd, loff_t from, struct mtd_oob_ops *ops) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4461: Function pointer *(mtd->write_oob) with type int (*)(struct mtd_info *mtd, loff_t to, struct mtd_oob_ops *ops) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_mtd_blktrans to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_mtd_blktrans_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function deregister_mtd_blktrans to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_out_r to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_out to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_next_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4250: Ignoring function call through function pointer *(mtd->read_oob): ret = (*(mtd->read_oob))(mtd, tmp___9, &ops); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function strnlen to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_mtd_blktrans_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: lines 5020-5021: Unsupported feature (recursion): tmp___7 = sm_read_sector(ftl, 0, ftl->cis_block, ftl->cis_boffset, __CPAchecker_TMP_0, &oob); (line was originally tmp___7 = sm_read_sector(ftl, 0, ftl->cis_block, ftl->cis_boffset, (uint8_t *)ftl->cis_buffer,
                           & oob);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            20986 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  15361 (73%)
  Because of loop head:            5446 (26%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         179 (1%)
  Times precision was empty:       4074 (19%)
  Times precision was {false}:     276 (1%)
  Times result was cached:         15990 (76%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      646 (3%)
  Times result was 'false':        674 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         18500
  BDD entailment checks:           6236
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       42
Number of predicates discovered:          6
Number of abstraction locations:          97
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         36381
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 39.46
Number of irrelevant predicates:          17112 (47%)
Number of preds handled by boolean abs:   937 (3%)
  Total number of models for allsat:      651
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  4.809s
  Time for path formula creation:        4.609s
Time for strengthen operator:            0.311s
Time for prec operator:                  8.480s
  Time for abstraction:                  7.828s (Max:     0.036s, Count: 20986)
    Boolean abstraction:                 1.362s
    Solving time:                        1.435s (Max:     0.029s)
    Model enumeration time:              0.093s
    Time for BDD construction:           0.151s (Max:     0.012s)
Time for merge operator:                 0.183s
Time for coverage check:                 0.051s
  Time for BDD entailment checks:        0.036s
Total time for SMT solver (w/o itp):     1.528s

Number of path formula cache hits:   186023 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.982s

Total number of created targets for pointer analysis: 2462
   Number of created targets for uf: *(struct_attribute_group)* is 2
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(struct_mtd_blktrans_dev)* is 14
   Number of created targets for uf: *signed_int is 3
   Number of created targets for uf: *(struct_mtd_info)* is 2
   Number of created targets for uf: *unsigned_char is 11
   Number of created targets for uf: *(unsigned_char)* is 2
   Number of created targets for uf: *_Bool is 3
   Number of created targets for uf: *unsigned_int is 17
   Number of created targets for uf: *char is 2
   Number of created targets for uf: *(struct_ftl_zone)* is 2
   Number of created targets for uf: *unsigned_long_int is 2


Number of BDD nodes:                               222
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1335 (count: 15599, min: 0, max: 90, avg: 0.09)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.720s
  Time for transition matches:                         0.311s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       182703 (count: 182703, min: 1, max: 1, avg: 1.00) [1 x 182703]

CPA algorithm statistics
------------------------
Number of iterations:            97571
Max size of waitlist:            50
Average size of waitlist:        20
Number of computed successors:   111471
Max successors for one state:    2
Number of times merged:          6132
Number of times stopped:         9600
Number of times breaked:         179

Total time for CPA algorithm:        21.156s (Max:     0.795s)
  Time for choose from waitlist:      0.193s
  Time for precision adjustment:      9.940s
  Time for transfer relation:         8.732s
  Time for merge operator:            0.394s
  Time for stop operator:             0.329s
  Time for adding to reached set:     0.480s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   179
Avg. length of target path (in blocks):                4439 (count: 179, min: 7, max: 51, avg: 24.80)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.945s
  Counterexample analysis:                             3.246s (Max:     0.041s, Calls: 179)
    Refinement sat check:                              2.337s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.064s
  Precision update:                                    0.156s
  ARG update:                                          0.366s

Length of refined path (in blocks):                    3535 (count: 179, min: 6, max: 49, avg: 19.75)
Number of affected states:                             2176 (count: 179, min: 1, max: 48, avg: 12.16)
Length (states) of path with itp 'true':               1180 (count: 179, min: 0, max: 37, avg: 6.59)
Length (states) of path with itp non-trivial itp:      2176 (count: 179, min: 1, max: 48, avg: 12.16)
Length (states) of path with itp 'false':               179 (count: 179, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 179, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1997 (count: 179, min: 0, max: 47, avg: 11.16)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                179
Number of successful refinements:     179
Number of failed refinements:         0
Max. size of reached set before ref.: 1739
Max. size of reached set after ref.:  1320
Avg. size of reached set before ref.: 1103.72
Avg. size of reached set after ref.:  547.86

Total time for CEGAR algorithm:      25.523s
Time for refinements:                 4.275s
Average time for refinement:          0.023s
Max time for refinement:              0.069s

Code Coverage
-----------------------------
  Function coverage:      0.677
  Visited lines:          1412
  Total lines:            1968
  Line coverage:          0.717
  Visited conditions:     224
  Total conditions:       438
  Condition coverage:     0.511

CPAchecker general statistics
-----------------------------
Number of program locations:     2614
Number of CFA edges:             2876
Number of relevant variables:    390
Number of functions:             65
Number of loops:                 20
Size of reached set:             1699
  Number of reached locations:   713 (27%)
    Avg states per location:     2
    Max states per location:     21 (at node N409)
  Number of reached functions:   44 (68%)
  Number of partitions:          1695
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1668 (before line 5861), Function sm_read called from node N2180, stack depth 2 [5e0bed88], stack [main, sm_read]])
  Number of target states:       0
  Size of final wait list        25

Time for analysis setup:          5.012s
  Time for loading CPAs:          0.916s
  Time for loading parser:        0.720s
  Time for CFA construction:      3.217s
    Time for parsing file(s):     0.928s
    Time for AST to CFA:          1.092s
    Time for CFA sanity check:    0.229s
    Time for post-processing:     0.783s
      Time for var class.:        0.389s
Time for Analysis:               25.523s
CPU time for analysis:           25.520s
Total time for CPAchecker:       30.547s
Total CPU time for CPAchecker:   30.540s
Time for statistics:              0.103s

Time for Garbage Collector:       0.560s (in 57 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 72MB (    69 MiB) max;     46MB (    44 MiB) avg;     75MB (    71 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
