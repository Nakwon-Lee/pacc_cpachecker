scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-usb-serial-whiteheat.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7w_048ub/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3767: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 3770: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 3776: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 3778: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7914: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7977: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_clear_halt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_bulk_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_firmware to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_undefined_pointer to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ezusb_set_reset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ezusb_writememory to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_serial_port_softint to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_insert_flip_string_fixed_flag to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            553077 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  483212 (87%)
  Because of loop head:            69502 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         363 (0%)
  Times precision was empty:       88037 (16%)
  Times precision was {false}:     1560 (0%)
  Times result was cached:         444433 (80%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      19047 (3%)
  Times result was 'false':        24625 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         787314
  BDD entailment checks:           156930
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          24
Number of abstraction locations:          243
Max number of predicates per location:    11
Avg number of predicates per location:    4
Total predicates per abstraction:         2397645
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 116.35
Number of irrelevant predicates:          1013436 (42%)
Number of preds handled by boolean abs:   60068 (3%)
  Total number of models for allsat:      33605
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.76

Time for post operator:                 47.288s
  Time for path formula creation:       44.954s
Time for strengthen operator:            4.249s
Time for prec operator:                153.948s
  Time for abstraction:                145.608s (Max:     0.309s, Count: 553077)
    Boolean abstraction:                21.536s
    Solving time:                       17.481s (Max:     0.014s)
    Model enumeration time:              2.579s
    Time for BDD construction:           0.709s (Max:     0.013s)
Time for merge operator:                 3.295s
Time for coverage check:                 0.336s
  Time for BDD entailment checks:        0.226s
Total time for SMT solver (w/o itp):    20.060s

Number of path formula cache hits:   5011185 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    33.419s

Total number of created targets for pointer analysis: 17941
   Number of created targets for uf: *(void)* is 251
   Number of created targets for uf: *unsigned_char is 80
   Number of created targets for uf: *(struct_list_head)* is 6856
   Number of created targets for uf: *(struct_usb_serial_port)* is 126
   Number of created targets for uf: *(struct_firmware)* is 710


Number of BDD nodes:                               2372
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       38033 (count: 368951, min: 0, max: 961, avg: 0.10)
Time for BDD node cleanup:                             0.072s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.837s
  Time for transition matches:                         3.762s
  Time for transition assertions:                      0.007s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      5062636 (count: 5062636, min: 1, max: 1, avg: 1.00) [1 x 5062636]

CPA algorithm statistics
------------------------
Number of iterations:            3396551
Max size of waitlist:            59
Average size of waitlist:        33
Number of computed successors:   3823640
Max successors for one state:    2
Number of times merged:          315192
Number of times stopped:         398753
Number of times breaked:         363

Total time for CPA algorithm:       302.168s (Max:     3.823s)
  Time for choose from waitlist:      1.521s
  Time for precision adjustment:    178.990s
  Time for transfer relation:        93.781s
  Time for merge operator:            7.651s
  Time for stop operator:             4.499s
  Time for adding to reached set:     6.238s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   363
Avg. length of target path (in blocks):               19787 (count: 363, min: 5, max: 124, avg: 54.51)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.603s
  Counterexample analysis:                             9.040s (Max:     0.117s, Calls: 363)
    Refinement sat check:                              5.609s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.144s
  Precision update:                                    0.268s
  ARG update:                                          5.927s

Length of refined path (in blocks):                   13562 (count: 363, min: 4, max: 118, avg: 37.36)
Number of affected states:                             7755 (count: 363, min: 1, max: 108, avg: 21.36)
Length (states) of path with itp 'true':               5444 (count: 363, min: 0, max: 112, avg: 15.00)
Length (states) of path with itp non-trivial itp:      7755 (count: 363, min: 1, max: 108, avg: 21.36)
Length (states) of path with itp 'false':               363 (count: 363, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         116 (count: 363, min: 0, max: 5, avg: 0.32)
Equal non-trivial interpolants along paths:            7276 (count: 363, min: 0, max: 107, avg: 20.04)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                363
Number of successful refinements:     363
Number of failed refinements:         0
Max. size of reached set before ref.: 25060
Max. size of reached set after ref.:  24063
Avg. size of reached set before ref.: 12096.90
Avg. size of reached set after ref.:  2776.09

Total time for CEGAR algorithm:     322.691s
Time for refinements:                19.714s
Average time for refinement:          0.054s
Max time for refinement:              1.057s

Code Coverage
-----------------------------
  Function coverage:      0.795
  Visited lines:          1973
  Total lines:            2342
  Line coverage:          0.842
  Visited conditions:     322
  Total conditions:       410
  Condition coverage:     0.785

CPAchecker general statistics
-----------------------------
Number of program locations:     3151
Number of CFA edges:             3482
Number of relevant variables:    395
Number of functions:             78
Number of loops:                 24
Size of reached set:             16809
  Number of reached locations:   1299 (41%)
    Avg states per location:     12
    Max states per location:     120 (at node N151)
  Number of reached functions:   62 (79%)
  Number of partitions:          16714
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N2972 (before line 7845), Function main called from node N2754, stack depth 1 [2a9bc08f], stack [main]])
  Number of target states:       0

Time for analysis setup:          5.543s
  Time for loading CPAs:          0.933s
  Time for loading parser:        0.680s
  Time for CFA construction:      3.765s
    Time for parsing file(s):     1.069s
    Time for AST to CFA:          1.327s
    Time for CFA sanity check:    0.255s
    Time for post-processing:     0.884s
      Time for var class.:        0.469s
Time for Analysis:              322.691s
CPU time for analysis:          322.630s
Time for analyzing result:        0.014s
Total time for CPAchecker:      328.239s
Total CPU time for CPAchecker:  328.180s
Time for statistics:              0.338s

Time for Garbage Collector:      18.937s (in 590 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                463MB (   441 MiB) max;    266MB (   254 MiB) avg;    463MB (   442 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           501MB (   478 MiB) max;    389MB (   370 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8424MB (  8034 MiB) max;   8214MB (  7833 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
