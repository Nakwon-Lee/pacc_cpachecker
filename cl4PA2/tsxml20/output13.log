scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/module_get_put-drivers-char-ipmi-ipmi_watchdog.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__4u3hbgs/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 2960: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 2962: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 2964: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 2958: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

line 5842: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (buf + i)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5844: Dead code detected: __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (buf + i)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5846: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (buf + i)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5837: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

line 5940: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 5946: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 5952: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 5937: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3369: Function pointer *fn with type int (*)(const char *, char *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3224: Function pointer *(p->qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 3340: Function pointer *fn with type int (*)(const char *, char *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_die_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_smi_watcher_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_free_recv_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_smi_watcher_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3369: Ignoring call via function pointer get_param_str::fn for which no suitable target was found in line: rv = (*fn)((const char *)0, buffer); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3369: Ignoring function call through function pointer *fn: rv = (*fn)((const char *)0, buffer); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function param_set_int to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_create_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_get_version to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_destroy_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3224: Ignoring function call through function pointer *(p->qproc): (*(p->qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strim to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function panic to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3141: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((void *)((const void *)to), 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3340: Ignoring call via function pointer set_param_str::fn for which no suitable target was found in line: rv = (*fn)((const char *)s, (char *)0); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3340: Ignoring function call through function pointer *fn: rv = (*fn)((const char *)s, (char *)0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ipmi_request_supply_msgs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_uninterruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ipmi_poll_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kill_fasync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 4028: Unsupported feature (recursion): rv = ipmi_heartbeat(); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            1776 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1571 (88%)
  Because of loop head:            199 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (0%)
  Times precision was empty:       1520 (86%)
  Times precision was {false}:     38 (2%)
  Times result was cached:         187 (11%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      31 (2%)
  Times result was 'false':        7 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         2838
  BDD entailment checks:           314
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       81
Number of predicates discovered:          2
Number of abstraction locations:          21
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         256
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 3.71
Number of irrelevant predicates:          112 (44%)
Number of preds handled by boolean abs:   31 (12%)
  Total number of models for allsat:      31
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.413s
  Time for path formula creation:        2.362s
Time for strengthen operator:            0.058s
Time for prec operator:                  0.738s
  Time for abstraction:                  0.573s (Max:     0.070s, Count: 1776)
    Boolean abstraction:                 0.077s
    Solving time:                        0.104s (Max:     0.020s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.006s (Max:     0.003s)
Time for merge operator:                 0.241s
Time for coverage check:                 0.028s
  Time for BDD entailment checks:        0.024s
Total time for SMT solver (w/o itp):     0.108s

Number of path formula cache hits:   11961 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.171s

Total number of created targets for pointer analysis: 1767
   Number of created targets for uf: *signed_int is 71
   Number of created targets for uf: *unsigned_char is 19
   Number of created targets for uf: *char is 127


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          65 (count: 2215, min: 0, max: 41, avg: 0.03)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.185s
Automaton transfers with branching:                0
Automaton transfer successors:                        15975 (count: 15975, min: 1, max: 1, avg: 1.00) [1 x 15975]

CPA algorithm statistics
------------------------
Number of iterations:            10241
Max size of waitlist:            94
Average size of waitlist:        39
Number of computed successors:   12124
Max successors for one state:    2
Number of times merged:          1262
Number of times stopped:         1523
Number of times breaked:         6

Total time for CPA algorithm:         5.628s (Max:     1.616s)
  Time for choose from waitlist:      0.049s
  Time for precision adjustment:      1.148s
  Time for transfer relation:         3.475s
  Time for merge operator:            0.413s
  Time for stop operator:             0.129s
  Time for adding to reached set:     0.094s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  91 (count: 6, min: 13, max: 18, avg: 15.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.226s
  Counterexample analysis:                             0.137s (Max:     0.036s, Calls: 6)
    Refinement sat check:                              0.085s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.017s
  Precision update:                                    0.005s
  ARG update:                                          0.060s

Length of refined path (in blocks):                      85 (count: 6, min: 12, max: 17, avg: 14.17)
Number of affected states:                               79 (count: 6, min: 11, max: 16, avg: 13.17)
Length (states) of path with itp 'true':                  0 (count: 6, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        79 (count: 6, min: 11, max: 16, avg: 13.17)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              73 (count: 6, min: 10, max: 15, avg: 12.17)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 2154
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 1191.17
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       5.922s
Time for refinements:                 0.293s
Average time for refinement:          0.048s
Max time for refinement:              0.110s

Code Coverage
-----------------------------
  Function coverage:      0.838
  Visited lines:          1469
  Total lines:            1586
  Line coverage:          0.926
  Visited conditions:     342
  Total conditions:       370
  Condition coverage:     0.924

CPAchecker general statistics
-----------------------------
Number of program locations:     2056
Number of CFA edges:             2292
Number of relevant variables:    261
Number of functions:             68
Number of loops:                 7
Size of reached set:             3466
  Number of reached locations:   934 (45%)
    Avg states per location:     3
    Max states per location:     45 (at node N340)
  Number of reached functions:   57 (84%)
  Number of partitions:          3463
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N1649 (before line 7119), Function main called from node N1345, stack depth 1 [19650aa6], stack [main]])
  Number of target states:       0
  Size of final wait list        94

Time for analysis setup:          5.705s
  Time for loading CPAs:          0.994s
  Time for loading parser:        0.757s
  Time for CFA construction:      3.771s
    Time for parsing file(s):     1.048s
    Time for AST to CFA:          1.440s
    Time for CFA sanity check:    0.229s
    Time for post-processing:     0.851s
      Time for var class.:        0.452s
Time for Analysis:                5.923s
CPU time for analysis:            5.920s
Total time for CPAchecker:       11.632s
Total CPU time for CPAchecker:   11.610s
Time for statistics:              0.177s

Time for Garbage Collector:       0.221s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 67MB (    64 MiB) max;     39MB (    38 MiB) avg;     70MB (    66 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     29MB (    27 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     31MB (    29 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8052MB (  7679 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
