scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/module_get_put-drivers-net-sis900.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_79h9og8h/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4963: Function pointer *(ops->alloc_coherent) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5003: Function pointer *(ops->free_coherent) with type void (*)(struct device *, size_t , void *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4833-4834: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4870: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4870: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4963: Ignoring function call through function pointer *(ops->alloc_coherent): memory = (*(ops->alloc_coherent))(dev, size, dma_handle, tmp___1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5003: Ignoring function call through function pointer *(ops->free_coherent): (*(ops->free_coherent))(dev, size, vaddr, bus); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function yield to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            511253 (25% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  444277 (87%)
  Because of loop head:            66854 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         122 (0%)
  Times precision was empty:       22888 (4%)
  Times precision was {false}:     1770 (0%)
  Times result was cached:         485664 (95%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      931 (0%)
  Times result was 'false':        378 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         137600
  BDD entailment checks:           44132
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       34
Number of predicates discovered:          2
Number of abstraction locations:          526
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         488365
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 180.81
Number of irrelevant predicates:          26510 (5%)
Number of preds handled by boolean abs:   931 (0%)
  Total number of models for allsat:      931
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 12.379s
  Time for path formula creation:       11.318s
Time for strengthen operator:            2.065s
Time for prec operator:                 41.245s
  Time for abstraction:                 36.127s (Max:     0.302s, Count: 511253)
    Boolean abstraction:                 0.645s
    Solving time:                        1.289s (Max:     0.014s)
    Model enumeration time:              0.065s
    Time for BDD construction:           0.047s (Max:     0.008s)
Time for merge operator:                 0.407s
Time for coverage check:                 0.112s
  Time for BDD entailment checks:        0.089s
Total time for SMT solver (w/o itp):     1.354s

Number of path formula cache hits:   2461520 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.748s

Total number of created targets for pointer analysis: 339
   Number of created targets for uf: *unsigned_short_int is 9
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 61
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *(struct_mii_phy)* is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1863 (count: 81461, min: 0, max: 128, avg: 0.02)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.254s
  Time for transition matches:                         1.790s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                      2039491 (count: 2039491, min: 1, max: 1, avg: 1.00) [1 x 2039491]

CPA algorithm statistics
------------------------
Number of iterations:            1449926
Max size of waitlist:            109
Average size of waitlist:        52
Number of computed successors:   1547615
Max successors for one state:    2
Number of times merged:          46734
Number of times stopped:         89367
Number of times breaked:         122

Total time for CPA algorithm:       111.485s (Max:     2.668s)
  Time for choose from waitlist:      0.874s
  Time for precision adjustment:     54.965s
  Time for transfer relation:        44.624s
  Time for merge operator:            1.287s
  Time for stop operator:             1.993s
  Time for adding to reached set:     2.936s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   122
Avg. length of target path (in blocks):                8663 (count: 122, min: 5, max: 228, avg: 71.01)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   5.883s
  Counterexample analysis:                             2.509s (Max:     0.077s, Calls: 122)
    Refinement sat check:                              1.238s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.181s
  Precision update:                                    0.158s
  ARG update:                                          2.882s

Length of refined path (in blocks):                    8528 (count: 122, min: 4, max: 227, avg: 69.90)
Number of affected states:                             8383 (count: 122, min: 0, max: 226, avg: 68.71)
Length (states) of path with itp 'true':                 23 (count: 122, min: 0, max: 23, avg: 0.19)
Length (states) of path with itp non-trivial itp:      8383 (count: 122, min: 0, max: 226, avg: 68.71)
Length (states) of path with itp 'false':               122 (count: 122, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 122, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8262 (count: 122, min: 0, max: 225, avg: 67.72)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                122
Number of successful refinements:     122
Number of failed refinements:         0
Max. size of reached set before ref.: 31518
Max. size of reached set after ref.:  11607
Avg. size of reached set before ref.: 11795.05
Avg. size of reached set after ref.:  98.11

Total time for CEGAR algorithm:     119.027s
Time for refinements:                 7.523s
Average time for refinement:          0.061s
Max time for refinement:              0.452s

Code Coverage
-----------------------------
  Function coverage:      0.941
  Visited lines:          3014
  Total lines:            3065
  Line coverage:          0.983
  Visited conditions:     600
  Total conditions:       612
  Condition coverage:     0.980

CPAchecker general statistics
-----------------------------
Number of program locations:     4016
Number of CFA edges:             4590
Number of relevant variables:    569
Number of functions:             118
Number of loops:                 46
Size of reached set:             30845
  Number of reached locations:   2211 (55%)
    Avg states per location:     13
    Max states per location:     1834 (at node N100)
  Number of reached functions:   111 (94%)
  Number of partitions:          30845
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.089s
  Time for loading CPAs:          1.139s
  Time for loading parser:        0.711s
  Time for CFA construction:      4.076s
    Time for parsing file(s):     1.064s
    Time for AST to CFA:          1.539s
    Time for CFA sanity check:    0.311s
    Time for post-processing:     0.973s
      Time for var class.:        0.504s
Time for Analysis:              119.027s
CPU time for analysis:          119.010s
Time for analyzing result:        0.034s
Total time for CPAchecker:      125.134s
Total CPU time for CPAchecker:  125.090s
Time for statistics:              0.527s

Time for Garbage Collector:      12.622s (in 587 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                188MB (   179 MiB) max;     86MB (    82 MiB) avg;    193MB (   184 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     39MB (    37 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           194MB (   185 MiB) max;    138MB (   132 MiB) avg
Allocated non-heap memory:        48MB (    45 MiB) max;     46MB (    44 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8083MB (  7709 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
