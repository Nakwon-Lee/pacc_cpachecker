scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/module_get_put-drivers-net-sis900.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_67ciptcb/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4963: Function pointer *(ops->alloc_coherent) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5003: Function pointer *(ops->free_coherent) with type void (*)(struct device *, size_t , void *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4833-4834: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4870: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4870: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_etherdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mii_ethtool_gset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4963: Ignoring function call through function pointer *(ops->alloc_coherent): memory = (*(ops->alloc_coherent))(dev, size, dma_handle, tmp___1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5003: Ignoring function call through function pointer *(ops->free_coherent): (*(ops->free_coherent))(dev, size, vaddr, bus); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_dev_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function yield to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2908975 (26% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2507706 (86%)
  Because of loop head:            401143 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         126 (0%)
  Times precision was empty:       300429 (10%)
  Times precision was {false}:     4107 (0%)
  Times result was cached:         2603505 (89%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      934 (0%)
  Times result was 'false':        583 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         679572
  BDD entailment checks:           263378
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       34
Number of predicates discovered:          2
Number of abstraction locations:          526
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         2608546
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 517.47
Number of irrelevant predicates:          2010178 (77%)
Number of preds handled by boolean abs:   934 (0%)
  Total number of models for allsat:      934
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 88.946s
  Time for path formula creation:       83.896s
Time for strengthen operator:           10.386s
Time for prec operator:                146.951s
  Time for abstraction:                118.781s (Max:     1.187s, Count: 2908975)
    Boolean abstraction:                 0.530s
    Solving time:                        2.359s (Max:     0.013s)
    Model enumeration time:              0.057s
    Time for BDD construction:           0.051s (Max:     0.017s)
Time for merge operator:                 2.666s
Time for coverage check:                 0.353s
  Time for BDD entailment checks:        0.284s
Total time for SMT solver (w/o itp):     2.416s

Number of path formula cache hits:   11471894 (84%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    53.006s

Total number of created targets for pointer analysis: 17451
   Number of created targets for uf: *unsigned_short_int is 479
   Number of created targets for uf: *signed_int is 280
   Number of created targets for uf: *unsigned_char is 3586
   Number of created targets for uf: *(struct_mii_phy)* is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1835 (count: 589951, min: 0, max: 114, avg: 0.00)
Time for BDD node cleanup:                             0.114s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 14.643s
  Time for transition matches:                         8.179s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     10979004 (count: 10979004, min: 1, max: 1, avg: 1.00) [1 x 10979004]

CPA algorithm statistics
------------------------
Number of iterations:            7965432
Max size of waitlist:            61
Average size of waitlist:        30
Number of computed successors:   8430002
Max successors for one state:    2
Number of times merged:          208097
Number of times stopped:         463334
Number of times breaked:         126

Total time for CPA algorithm:       516.641s (Max:     9.539s)
  Time for choose from waitlist:      2.823s
  Time for precision adjustment:    214.067s
  Time for transfer relation:       252.140s
  Time for merge operator:            5.788s
  Time for stop operator:             8.145s
  Time for adding to reached set:    12.993s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   126
Avg. length of target path (in blocks):                8687 (count: 126, min: 5, max: 223, avg: 68.94)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  21.147s
  Counterexample analysis:                             1.990s (Max:     0.108s, Calls: 126)
    Refinement sat check:                              1.037s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.089s
  Precision update:                                    0.324s
  ARG update:                                         18.640s

Length of refined path (in blocks):                    8561 (count: 126, min: 4, max: 222, avg: 67.94)
Number of affected states:                             8435 (count: 126, min: 3, max: 221, avg: 66.94)
Length (states) of path with itp 'true':                  0 (count: 126, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:      8435 (count: 126, min: 3, max: 221, avg: 66.94)
Length (states) of path with itp 'false':               126 (count: 126, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 126, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8309 (count: 126, min: 2, max: 220, avg: 65.94)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                126
Number of successful refinements:     126
Number of failed refinements:         0
Max. size of reached set before ref.: 68900
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 62981.10
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:     541.905s
Time for refinements:                25.259s
Average time for refinement:          0.200s
Max time for refinement:              0.763s

Code Coverage
-----------------------------
  Function coverage:      0.941
  Visited lines:          3014
  Total lines:            3065
  Line coverage:          0.983
  Visited conditions:     600
  Total conditions:       612
  Condition coverage:     0.980

CPAchecker general statistics
-----------------------------
Number of program locations:     4016
Number of CFA edges:             4590
Number of relevant variables:    569
Number of functions:             118
Number of loops:                 46
Size of reached set:             30845
  Number of reached locations:   2211 (55%)
    Avg states per location:     13
    Max states per location:     1834 (at node N100)
  Number of reached functions:   111 (94%)
  Number of partitions:          30845
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          5.940s
  Time for loading CPAs:          0.999s
  Time for loading parser:        0.682s
  Time for CFA construction:      4.096s
    Time for parsing file(s):     1.084s
    Time for AST to CFA:          1.400s
    Time for CFA sanity check:    0.362s
    Time for post-processing:     1.071s
      Time for var class.:        0.480s
Time for Analysis:              541.905s
CPU time for analysis:          541.860s
Time for analyzing result:        0.027s
Total time for CPAchecker:      547.850s
Total CPU time for CPAchecker:  547.780s
Time for statistics:              0.654s

Time for Garbage Collector:      86.165s (in 1286 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                956MB (   911 MiB) max;    297MB (   283 MiB) avg;    980MB (   934 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:          1143MB (  1090 MiB) max;    441MB (   420 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8084MB (  7709 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
