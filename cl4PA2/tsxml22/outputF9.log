scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.0/usb_urb-drivers-media-video-c-qcam.ko_true-unreach-call.cil.out.i.pp.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_0ximxity/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4581: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4584: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4590: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4592: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 4766: Dead code detected: [((int)size) == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 4766: Dead code detected: [!(((int)size) == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4769: Dead code detected: [!(((int)size) == 2)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4772: Dead code detected: [!(((int)size) == 4)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4775: Dead code detected: [!(((int)size) == 8)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4778: Dead code detected: [!(((int)size) == 10)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4781: Dead code detected: [!(((int)size) == 16)] (CFACreationUtils.addEdgeToCFA, INFO)

line 4767: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4770: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4773: Dead code detected: Goto: case_4 (CFACreationUtils.addEdgeToCFA, INFO)

line 4776: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4779: Dead code detected: Goto: case_10 (CFACreationUtils.addEdgeToCFA, INFO)

line 4782: Dead code detected: Goto: case_16 (CFACreationUtils.addEdgeToCFA, INFO)

line 4784: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_16 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_4 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_10 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7260: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 7323: Dead code detected: Goto: while_break (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label while_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5544: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5545: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5580: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5581: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5583: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5586: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5601: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5560: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5628: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5629: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5631: Function pointer *(qcam->pport->ops->write_control) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5324: Function pointer *(qcam->pport->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5325: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5396: Function pointer *(qcam->pport->ops->read_data) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5397: Function pointer *(qcam->pport->ops->read_control) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5398: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5716: Function pointer *(qcam->pport->ops->read_data) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5718: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5729: Function pointer *(qcam->pport->ops->read_data) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5731: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5783: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5794: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5423: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5434: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5235: Function pointer *(qcam->pport->ops->read_status) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5251: Function pointer *(qcam->pport->ops->read_data) with type unsigned char (*)(struct parport *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5224: Function pointer *(qcam->pport->ops->frob_control) with type unsigned char (*)(struct parport *, unsigned char mask, unsigned char val) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5448: Function pointer *(qcam->pport->ops->write_data) with type void (*)(struct parport *, unsigned char) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function video_devdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function video_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock_nested to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_claim_or_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function v4l2_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5628: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 12U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5629: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 8U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5631: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 12U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function parport_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5448: Ignoring function call through function pointer *(qcam->pport->ops->write_data): (*(qcam->pport->ops->write_data))(qcam->pport, (unsigned char)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5544: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 12U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5545: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___8 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5580: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 12U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5581: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 8U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5583: Ignoring function call through function pointer *(qcam->pport->ops->write_control): (*(qcam->pport->ops->write_control))(qcam->pport, 12U); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5586: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___13 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5560: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___10 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5224: Ignoring function call through function pointer *(qcam->pport->ops->frob_control): (*(qcam->pport->ops->frob_control))(qcam->pport, 8U, (unsigned char)tmp___7); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5601: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___15 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5235: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___9 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5423: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___8 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5434: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___10 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5947: Ignoring function call through function pointer *(qcam->pport->ops->data_reverse): (*(qcam->pport->ops->data_reverse))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6036: Ignoring function call through function pointer *(qcam->pport->ops->data_forward): (*(qcam->pport->ops->data_forward))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __might_sleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _cond_resched to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5251: Ignoring function call through function pointer *(qcam->pport->ops->read_data): tmp___9 = (*(qcam->pport->ops->read_data))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5716: Ignoring function call through function pointer *(qcam->pport->ops->read_data): tmp___8 = (*(qcam->pport->ops->read_data))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5718: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___9 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5783: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___20 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6121: Ignoring function call through function pointer *(qcam->pport->ops->data_forward): (*(qcam->pport->ops->data_forward))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6129: Ignoring function call through function pointer *(qcam->pport->ops->data_forward): (*(qcam->pport->ops->data_forward))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5729: Ignoring function call through function pointer *(qcam->pport->ops->read_data): tmp___11 = (*(qcam->pport->ops->read_data))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5731: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___12 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5794: Ignoring function call through function pointer *(qcam->pport->ops->read_status): tmp___22 = (*(qcam->pport->ops->read_status))(qcam->pport); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __video_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            792890 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  614304 (77%)
  Because of loop head:            178412 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         174 (0%)
  Times precision was empty:       19637 (2%)
  Times precision was {false}:     1801 (0%)
  Times result was cached:         767834 (97%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3618 (0%)
  Times result was 'false':        1889 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         613559
  BDD entailment checks:           226327
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       38
Number of predicates discovered:          4
Number of abstraction locations:          165
Max number of predicates per location:    4
Avg number of predicates per location:    2
Total predicates per abstraction:         1902551
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 351.09
Number of irrelevant predicates:          807709 (42%)
Number of preds handled by boolean abs:   5655 (0%)
  Total number of models for allsat:      3590
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.99

Time for post operator:                 39.121s
  Time for path formula creation:       36.975s
Time for strengthen operator:            4.902s
Time for prec operator:                105.460s
  Time for abstraction:                 95.430s (Max:     1.263s, Count: 792890)
    Boolean abstraction:                 2.773s
    Solving time:                        3.066s (Max:     0.018s)
    Model enumeration time:              0.219s
    Time for BDD construction:           0.168s (Max:     0.008s)
Time for merge operator:                 1.894s
Time for coverage check:                 0.403s
  Time for BDD entailment checks:        0.301s
Total time for SMT solver (w/o itp):     3.285s

Number of path formula cache hits:   5525879 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    21.183s

Total number of created targets for pointer analysis: 28681
   Number of created targets for uf: *(struct_v4l2_file_operations)* is 155
   Number of created targets for uf: *signed_int is 1137
   Number of created targets for uf: *unsigned_char is 1144
   Number of created targets for uf: *(struct_parport)* is 155
   Number of created targets for uf: *unsigned_int is 100
   Number of created targets for uf: *(struct_pardevice)* is 155


Number of BDD nodes:                               221
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        7224 (count: 277569, min: 0, max: 182, avg: 0.03)
Time for BDD node cleanup:                             0.051s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.324s
  Time for transition matches:                         3.826s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      5128013 (count: 5128013, min: 1, max: 1, avg: 1.00) [1 x 5128013]

CPA algorithm statistics
------------------------
Number of iterations:            3521477
Max size of waitlist:            293
Average size of waitlist:        110
Number of computed successors:   3936131
Max successors for one state:    2
Number of times merged:          193616
Number of times stopped:         400063
Number of times breaked:         174

Total time for CPA algorithm:       254.937s (Max:     7.726s)
  Time for choose from waitlist:      1.473s
  Time for precision adjustment:    136.088s
  Time for transfer relation:        89.760s
  Time for merge operator:            5.066s
  Time for stop operator:             6.190s
  Time for adding to reached set:     6.364s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   174
Avg. length of target path (in blocks):               12862 (count: 174, min: 5, max: 176, avg: 73.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  12.691s
  Counterexample analysis:                             3.560s (Max:     0.062s, Calls: 174)
    Refinement sat check:                              1.995s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.021s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.168s
  Precision update:                                    0.140s
  ARG update:                                          8.603s

Length of refined path (in blocks):                   10921 (count: 174, min: 4, max: 175, avg: 62.76)
Number of affected states:                             8875 (count: 174, min: 1, max: 174, avg: 51.01)
Length (states) of path with itp 'true':               1872 (count: 174, min: 0, max: 36, avg: 10.76)
Length (states) of path with itp non-trivial itp:      8875 (count: 174, min: 1, max: 174, avg: 51.01)
Length (states) of path with itp 'false':               174 (count: 174, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 174, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8701 (count: 174, min: 0, max: 173, avg: 50.01)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                174
Number of successful refinements:     174
Number of failed refinements:         0
Max. size of reached set before ref.: 103635
Max. size of reached set after ref.:  49546
Avg. size of reached set before ref.: 25053.76
Avg. size of reached set after ref.:  5345.78

Total time for CEGAR algorithm:     271.499s
Time for refinements:                15.770s
Average time for refinement:          0.090s
Max time for refinement:              0.449s

Code Coverage
-----------------------------
  Function coverage:      0.855
  Visited lines:          1722
  Total lines:            1772
  Line coverage:          0.972
  Visited conditions:     282
  Total conditions:       298
  Condition coverage:     0.946

CPAchecker general statistics
-----------------------------
Number of program locations:     2230
Number of CFA edges:             2433
Number of relevant variables:    289
Number of functions:             55
Number of loops:                 16
Size of reached set:             104991
  Number of reached locations:   922 (41%)
    Avg states per location:     113
    Max states per location:     3942 (at node N243)
  Number of reached functions:   47 (85%)
  Number of partitions:          104954
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N814 (before lines 5977-6025), Function qc_capture called from node N1302, stack depth 3 [b299774], stack [main, qcam_read, qc_capture]])
  Number of target states:       0

Time for analysis setup:          5.458s
  Time for loading CPAs:          1.030s
  Time for loading parser:        0.676s
  Time for CFA construction:      3.613s
    Time for parsing file(s):     1.097s
    Time for AST to CFA:          1.296s
    Time for CFA sanity check:    0.188s
    Time for post-processing:     0.804s
      Time for var class.:        0.381s
Time for Analysis:              271.499s
CPU time for analysis:          271.470s
Time for analyzing result:        0.084s
Total time for CPAchecker:      276.972s
Total CPU time for CPAchecker:  276.930s
Time for statistics:              2.376s

Time for Garbage Collector:      38.032s (in 732 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                538MB (   513 MiB) max;    214MB (   204 MiB) avg;    554MB (   528 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           552MB (   527 MiB) max;    316MB (   302 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8084MB (  7709 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
