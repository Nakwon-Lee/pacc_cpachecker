scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--devices--docprobe.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ltvki002/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 2437: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 2472: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 2838: Function pointer *initroutine with type void (*)(struct mtd_info *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_module to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2838: Ignoring call via function pointer DoC_Probe::initroutine for which no suitable target was found in line: (*initroutine)(mtd); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 2838: Ignoring function call through function pointer *initroutine: (*initroutine)(mtd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function symbol_put_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            26 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            18 (69%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (31%)
  Times precision was empty:       13 (50%)
  Times precision was {false}:     4 (15%)
  Times result was cached:         3 (12%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6 (23%)
  Times result was 'false':        5 (19%)
Number of strengthen sat checks:   0
Number of coverage checks:         245
  BDD entailment checks:           9
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       248
Number of predicates discovered:          2
Number of abstraction locations:          3
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         13
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.30
Number of irrelevant predicates:          5 (38%)
Number of preds handled by boolean abs:   6 (46%)
  Total number of models for allsat:      5
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.83

Time for post operator:                  0.866s
  Time for path formula creation:        0.837s
Time for strengthen operator:            0.015s
Time for prec operator:                  0.230s
  Time for abstraction:                  0.218s (Max:     0.051s, Count: 26)
    Boolean abstraction:                 0.087s
    Solving time:                        0.091s (Max:     0.032s)
    Model enumeration time:              0.004s
    Time for BDD construction:           0.000s (Max:     0.000s)
Time for merge operator:                 0.197s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.095s

Number of path formula cache hits:   1492 (39%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.805s

Total number of created targets for pointer analysis: 63
   Number of created targets for uf: *unsigned_long_int is 64


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           8 (count: 85, min: 0, max: 8, avg: 0.09)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.133s
Automaton transfers with branching:                0
Automaton transfer successors:                         3729 (count: 3729, min: 1, max: 1, avg: 1.00) [1 x 3729]

CPA algorithm statistics
------------------------
Number of iterations:            1316
Max size of waitlist:            13
Average size of waitlist:        6
Number of computed successors:   1462
Max successors for one state:    2
Number of times merged:          118
Number of times stopped:         127
Number of times breaked:         4

Total time for CPA algorithm:         2.188s (Max:     0.825s)
  Time for choose from waitlist:      0.019s
  Time for precision adjustment:      0.353s
  Time for transfer relation:         1.459s
  Time for merge operator:            0.206s
  Time for stop operator:             0.021s
  Time for adding to reached set:     0.027s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                   8 (count: 4, min: 1, max: 3, avg: 2.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.088s
  Counterexample analysis:                             0.050s (Max:     0.018s, Calls: 4)
    Refinement sat check:                              0.033s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.010s
  ARG update:                                          0.015s

Length of refined path (in blocks):                       8 (count: 4, min: 1, max: 3, avg: 2.00)
Number of affected states:                                4 (count: 4, min: 0, max: 2, avg: 1.00)
Length (states) of path with itp 'true':                  0 (count: 4, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         4 (count: 4, min: 0, max: 2, avg: 1.00)
Length (states) of path with itp 'false':                 0 (count: 4, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               1 (count: 4, min: 0, max: 1, avg: 0.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 616
Max. size of reached set after ref.:  261
Avg. size of reached set before ref.: 400.75
Avg. size of reached set after ref.:  241.25

Total time for CEGAR algorithm:       2.316s
Time for refinements:                 0.124s
Average time for refinement:          0.031s
Max time for refinement:              0.056s

Code Coverage
-----------------------------
  Function coverage:      0.625
  Visited lines:          998
  Total lines:            1020
  Line coverage:          0.978
  Visited conditions:     76
  Total conditions:       84
  Condition coverage:     0.905

CPAchecker general statistics
-----------------------------
Number of program locations:     1131
Number of CFA edges:             1196
Number of relevant variables:    140
Number of functions:             16
Number of loops:                 3
Size of reached set:             693
  Number of reached locations:   271 (24%)
    Avg states per location:     2
    Max states per location:     31 (at node N0)
  Number of reached functions:   10 (63%)
  Number of partitions:          693
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.170s
  Time for loading CPAs:          0.924s
  Time for loading parser:        0.768s
  Time for CFA construction:      2.362s
    Time for parsing file(s):     0.807s
    Time for AST to CFA:          0.669s
    Time for CFA sanity check:    0.151s
    Time for post-processing:     0.534s
      Time for var class.:        0.224s
Time for Analysis:                2.316s
CPU time for analysis:            2.310s
Time for analyzing result:        0.001s
Total time for CPAchecker:        6.491s
Total CPU time for CPAchecker:    6.480s
Time for statistics:              0.122s

Time for Garbage Collector:       0.147s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     32MB (    30 MiB) avg;     64MB (    61 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     26MB (    25 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8079MB (  7705 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
