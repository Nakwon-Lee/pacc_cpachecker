scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--tty--serial--altera_jtaguart.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_2zxsgutf/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_add_one_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_copy_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_insert_char to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_write_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            48 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            40 (83%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         8 (17%)
  Times precision was empty:       18 (38%)
  Times precision was {false}:     7 (15%)
  Times result was cached:         14 (29%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9 (19%)
  Times result was 'false':        4 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         418
  BDD entailment checks:           24
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       160
Number of predicates discovered:          2
Number of abstraction locations:          4
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         30
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 1.88
Number of irrelevant predicates:          12 (40%)
Number of preds handled by boolean abs:   9 (30%)
  Total number of models for allsat:      9
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.955s
  Time for path formula creation:        0.916s
Time for strengthen operator:            0.023s
Time for prec operator:                  0.469s
  Time for abstraction:                  0.431s (Max:     0.104s, Count: 48)
    Boolean abstraction:                 0.136s
    Solving time:                        0.166s (Max:     0.066s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.280s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.001s
Total time for SMT solver (w/o itp):     0.182s

Number of path formula cache hits:   3799 (54%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.863s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          15 (count: 137, min: 0, max: 10, avg: 0.11)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.132s
Automaton transfers with branching:                0
Automaton transfer successors:                         6929 (count: 6929, min: 1, max: 1, avg: 1.00) [1 x 6929]

CPA algorithm statistics
------------------------
Number of iterations:            2133
Max size of waitlist:            28
Average size of waitlist:        14
Number of computed successors:   2424
Max successors for one state:    2
Number of times merged:          197
Number of times stopped:         216
Number of times breaked:         4

Total time for CPA algorithm:         2.767s (Max:     1.077s)
  Time for choose from waitlist:      0.020s
  Time for precision adjustment:      0.649s
  Time for transfer relation:         1.601s
  Time for merge operator:            0.322s
  Time for stop operator:             0.026s
  Time for adding to reached set:     0.050s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   4
Avg. length of target path (in blocks):                  11 (count: 4, min: 1, max: 4, avg: 2.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.142s
  Counterexample analysis:                             0.079s (Max:     0.027s, Calls: 4)
    Refinement sat check:                              0.060s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.014s
  ARG update:                                          0.033s

Length of refined path (in blocks):                      11 (count: 4, min: 1, max: 4, avg: 2.75)
Number of affected states:                                7 (count: 4, min: 0, max: 3, avg: 1.75)
Length (states) of path with itp 'true':                  0 (count: 4, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:         7 (count: 4, min: 0, max: 3, avg: 1.75)
Length (states) of path with itp 'false':                 0 (count: 4, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 4, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               4 (count: 4, min: 0, max: 2, avg: 1.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                4
Number of successful refinements:     4
Number of failed refinements:         0
Max. size of reached set before ref.: 754
Max. size of reached set after ref.:  29
Avg. size of reached set before ref.: 436.75
Avg. size of reached set after ref.:  28.25

Total time for CEGAR algorithm:       2.953s
Time for refinements:                 0.186s
Average time for refinement:          0.046s
Max time for refinement:              0.056s

Code Coverage
-----------------------------
  Function coverage:      0.767
  Visited lines:          1498
  Total lines:            1560
  Line coverage:          0.960
  Visited conditions:     102
  Total conditions:       124
  Condition coverage:     0.823

CPAchecker general statistics
-----------------------------
Number of program locations:     1791
Number of CFA edges:             1863
Number of relevant variables:    258
Number of functions:             43
Number of loops:                 3
Size of reached set:             571
  Number of reached locations:   397 (22%)
    Avg states per location:     1
    Max states per location:     14 (at node N40)
  Number of reached functions:   33 (77%)
  Number of partitions:          571
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.714s
  Time for loading CPAs:          0.946s
  Time for loading parser:        0.728s
  Time for CFA construction:      2.919s
    Time for parsing file(s):     0.927s
    Time for AST to CFA:          0.945s
    Time for CFA sanity check:    0.170s
    Time for post-processing:     0.645s
      Time for var class.:        0.292s
Time for Analysis:                2.953s
CPU time for analysis:            2.940s
Time for analyzing result:        0.001s
Total time for CPAchecker:        7.672s
Total CPU time for CPAchecker:    7.650s
Time for statistics:              0.108s

Time for Garbage Collector:       0.188s (in 8 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    61 MiB) max;     34MB (    32 MiB) avg;     68MB (    65 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     26MB (    25 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    27 MiB) avg
Total process virtual memory:   8133MB (  7757 MiB) max;   8087MB (  7712 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
