scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-regression/test22_true-unreach-call.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_gofj7gvu/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            155 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            78 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         77 (50%)
  Times precision was empty:       2 (1%)
  Times precision was {false}:     76 (49%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      77 (50%)
  Times result was 'false':        66 (43%)
Number of strengthen sat checks:   0
Number of coverage checks:         296
  BDD entailment checks:           286
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       33
Number of predicates discovered:          13
Number of abstraction locations:          2
Max number of predicates per location:    12
Avg number of predicates per location:    6
Total predicates per abstraction:         725
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 4.74
Number of irrelevant predicates:          76 (10%)
Number of preds handled by boolean abs:   649 (90%)
  Total number of models for allsat:      362
  Max number of models for allsat:        11
  Avg number of models for allsat:        4.70

Time for post operator:                  0.326s
  Time for path formula creation:        0.304s
Time for strengthen operator:            0.008s
Time for prec operator:                  1.287s
  Time for abstraction:                  1.249s (Max:     0.031s, Count: 155)
    Boolean abstraction:                 0.463s
    Solving time:                        0.333s (Max:     0.019s)
    Model enumeration time:              0.044s
    Time for BDD construction:           0.074s (Max:     0.012s)
Time for merge operator:                 0.016s
Time for coverage check:                 0.004s
  Time for BDD entailment checks:        0.004s
Total time for SMT solver (w/o itp):     0.377s

Number of path formula cache hits:   1111 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.278s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               2559
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1452 (count: 1825, min: 0, max: 1452, avg: 0.80)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.082s
Automaton transfers with branching:                0
Automaton transfer successors:                         1289 (count: 1289, min: 1, max: 1, avg: 1.00) [1 x 1289]

CPA algorithm statistics
------------------------
Number of iterations:            1092
Max size of waitlist:            3
Average size of waitlist:        2
Number of computed successors:   1185
Max successors for one state:    2
Number of times merged:          5
Number of times stopped:         6
Number of times breaked:         11

Total time for CPA algorithm:         2.137s (Max:     0.275s)
  Time for choose from waitlist:      0.014s
  Time for precision adjustment:      1.375s
  Time for transfer relation:         0.568s
  Time for merge operator:            0.040s
  Time for stop operator:             0.018s
  Time for adding to reached set:     0.035s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   11
Avg. length of target path (in blocks):                  77 (count: 11, min: 2, max: 12, avg: 7.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.233s
  Counterexample analysis:                             0.166s (Max:     0.027s, Calls: 11)
    Refinement sat check:                              0.085s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.039s
  Precision update:                                    0.006s
  ARG update:                                          0.012s

Length of refined path (in blocks):                      77 (count: 11, min: 2, max: 12, avg: 7.00)
Number of affected states:                               66 (count: 11, min: 1, max: 11, avg: 6.00)
Length (states) of path with itp 'true':                  0 (count: 11, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        66 (count: 11, min: 1, max: 11, avg: 6.00)
Length (states) of path with itp 'false':                 0 (count: 11, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:          46 (count: 11, min: 0, max: 9, avg: 4.18)
Equal non-trivial interpolants along paths:               9 (count: 11, min: 0, max: 9, avg: 0.82)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                11
Number of successful refinements:     11
Number of failed refinements:         0
Max. size of reached set before ref.: 190
Max. size of reached set after ref.:  36
Avg. size of reached set before ref.: 120.00
Avg. size of reached set after ref.:  36.00

Total time for CEGAR algorithm:       2.408s
Time for refinements:                 0.268s
Average time for refinement:          0.024s
Max time for refinement:              0.053s

Code Coverage
-----------------------------
  Function coverage:      1.000
  Visited lines:          19
  Total lines:            21
  Line coverage:          0.905
  Visited conditions:     12
  Total conditions:       12
  Condition coverage:     1.000

CPAchecker general statistics
-----------------------------
Number of program locations:     59
Number of CFA edges:             66
Number of relevant variables:    15
Number of functions:             4
Number of loops:                 1
Size of reached set:             190
  Number of reached locations:   36 (61%)
    Avg states per location:     5
    Max states per location:     12 (at node N21)
  Number of reached functions:   4 (100%)
  Number of partitions:          180
    Avg size of partitions:      1
    Max size of partitions:      11 (with key [N39 (before line 38), Function main called from node N22, stack depth 1 [1a6d8329], stack [main]])
  Number of target states:       0

Time for analysis setup:          2.536s
  Time for loading CPAs:          0.739s
  Time for loading parser:        0.752s
  Time for CFA construction:      0.928s
    Time for parsing file(s):     0.404s
    Time for AST to CFA:          0.184s
    Time for CFA sanity check:    0.017s
    Time for post-processing:     0.156s
      Time for var class.:        0.074s
Time for Analysis:                2.408s
CPU time for analysis:            2.410s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.949s
Total CPU time for CPAchecker:    4.940s
Time for statistics:              0.072s

Time for Garbage Collector:       0.111s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 55MB (    53 MiB) max;     31MB (    29 MiB) avg;     62MB (    59 MiB) peak
Used non-heap memory:             31MB (    30 MiB) max;     24MB (    23 MiB) avg;     33MB (    31 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        34MB (    32 MiB) max;     26MB (    25 MiB) avg
Total process virtual memory:   8136MB (  7759 MiB) max;   8070MB (  7696 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
