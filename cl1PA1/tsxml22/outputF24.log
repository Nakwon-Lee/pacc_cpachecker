scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-net-slip-ko--108_1a--1b0b0ac.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4lbteady/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4761: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4764: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4767: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2064;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5152: Dead code detected: __ptr = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5156: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5160: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_38994;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_38994;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_38994;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_38994;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5175: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5179: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5183: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39006;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39006;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39006;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39006;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5198: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5202: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5206: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39018;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39018;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39018;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39018;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5221: Dead code detected: __ptr___11 = (u8 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5225: Dead code detected: __ptr___12 = (u16 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5229: Dead code detected: __ptr___13 = (u32 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___11 = (u8 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___2), "+m" (*__ptr___11): "0" (__x___2): "memory");
  goto ldv_39030;
  case 2UL:
  __ptr___12 = (u16 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___2), "+m" (*__ptr___12): "0" (__x___2): "memory");
  goto ldv_39030;
  case 4UL:
  __ptr___13 = (u32 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___2), "+m" (*__ptr___13): "0" (__x___2): "memory");
  goto ldv_39030;
  case 8UL:
  __ptr___14 = (u64 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___2), "+m" (*__ptr___14): "0" (__x___2): "memory");
  goto ldv_39030;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5285: Dead code detected: __ptr = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5289: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5293: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_39053;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_39053;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_39053;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_39053;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5308: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5312: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5316: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39065;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39065;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39065;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39065;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5331: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5335: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5339: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39077;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39077;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39077;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39077;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5354: Dead code detected: __ptr___11 = (u8 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5358: Dead code detected: __ptr___12 = (u16 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

line 5362: Dead code detected: __ptr___13 = (u32 volatile *)(& sl->slcomp); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___11 = (u8 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___2), "+m" (*__ptr___11): "0" (__x___2): "memory");
  goto ldv_39089;
  case 2UL:
  __ptr___12 = (u16 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___2), "+m" (*__ptr___12): "0" (__x___2): "memory");
  goto ldv_39089;
  case 4UL:
  __ptr___13 = (u32 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___2), "+m" (*__ptr___13): "0" (__x___2): "memory");
  goto ldv_39089;
  case 8UL:
  __ptr___14 = (u64 volatile *)(& sl->slcomp);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___2), "+m" (*__ptr___14): "0" (__x___2): "memory");
  goto ldv_39089;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5444: Dead code detected: __ptr = (u8 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5448: Dead code detected: __ptr___0 = (u16 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5452: Dead code detected: __ptr___1 = (u32 volatile *)(& sl->xbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_39113;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_39113;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_39113;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& sl->xbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_39113;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5467: Dead code detected: __ptr___3 = (u8 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5471: Dead code detected: __ptr___4 = (u16 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5475: Dead code detected: __ptr___5 = (u32 volatile *)(& sl->rbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___3 = (u8 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___0), "+m" (*__ptr___3): "0" (__x___0): "memory");
  goto ldv_39125;
  case 2UL:
  __ptr___4 = (u16 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___0), "+m" (*__ptr___4): "0" (__x___0): "memory");
  goto ldv_39125;
  case 4UL:
  __ptr___5 = (u32 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___0), "+m" (*__ptr___5): "0" (__x___0): "memory");
  goto ldv_39125;
  case 8UL:
  __ptr___6 = (u64 volatile *)(& sl->rbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___0), "+m" (*__ptr___6): "0" (__x___0): "memory");
  goto ldv_39125;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5490: Dead code detected: __ptr___7 = (u8 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5494: Dead code detected: __ptr___8 = (u16 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

line 5498: Dead code detected: __ptr___9 = (u32 volatile *)(& sl->cbuff); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr___7 = (u8 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x___1), "+m" (*__ptr___7): "0" (__x___1): "memory");
  goto ldv_39137;
  case 2UL:
  __ptr___8 = (u16 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x___1), "+m" (*__ptr___8): "0" (__x___1): "memory");
  goto ldv_39137;
  case 4UL:
  __ptr___9 = (u32 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x___1), "+m" (*__ptr___9): "0" (__x___1): "memory");
  goto ldv_39137;
  case 8UL:
  __ptr___10 = (u64 volatile *)(& sl->cbuff);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x___1), "+m" (*__ptr___10): "0" (__x___1): "memory");
  goto ldv_39137;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6546: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6549: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6555: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
  goto ldv_39348;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6572: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6575: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6581: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
  goto ldv_39358;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6608: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6611: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6617: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
  goto ldv_39369;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6656-6657: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6660-6661: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6668-6669: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (p): "ebx");
  goto ldv_39379;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6687: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6690: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6696: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (p));
  goto ldv_39389;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6735-6736: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6739-6740: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6747-6748: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (p): "ebx");
  goto ldv_39399;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7296: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7310: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 5669-5670: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7035: Function pointer *(sl->tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5704: Function pointer *(tty->ops->write) with type int (*)(struct tty_struct *, const unsigned char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_netdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdevice_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5704: Ignoring function call through function pointer *(tty->ops->write): actual = (*(tty->ops->write))(tty, __CPAchecker_TMP_2, sl->xleft); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_compress to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5669-5670: Ignoring function call through function pointer *(sl->tty->ops->write): actual = (*(sl->tty->ops->write))(sl->tty, __CPAchecker_TMP_2, count); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_trans_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_chars_in_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7035: Ignoring function call through function pointer *(sl->tty->ops->write): (*(sl->tty->ops->write))(sl->tty, (const unsigned char *)(&s), 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function slhc_remember to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_uncompress to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_rx to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_ldisc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            61649 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  55393 (90%)
  Because of loop head:            5853 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         403 (1%)
  Times precision was empty:       32793 (53%)
  Times precision was {false}:     603 (1%)
  Times result was cached:         27428 (44%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      825 (1%)
  Times result was 'false':        1065 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         50391
  BDD entailment checks:           17901
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       32
Number of predicates discovered:          23
Number of abstraction locations:          134
Max number of predicates per location:    8
Avg number of predicates per location:    1
Total predicates per abstraction:         43090
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 30.18
Number of irrelevant predicates:          17864 (41%)
Number of preds handled by boolean abs:   1868 (4%)
  Total number of models for allsat:      1071
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.30

Time for post operator:                  6.802s
  Time for path formula creation:        6.590s
Time for strengthen operator:            0.586s
Time for prec operator:                  8.920s
  Time for abstraction:                  7.798s (Max:     0.030s, Count: 61649)
    Boolean abstraction:                 1.163s
    Solving time:                        1.201s (Max:     0.014s)
    Model enumeration time:              0.113s
    Time for BDD construction:           0.116s (Max:     0.012s)
Time for merge operator:                 0.356s
Time for coverage check:                 0.113s
  Time for BDD entailment checks:        0.083s
Total time for SMT solver (w/o itp):     1.314s

Number of path formula cache hits:   408337 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.611s

Total number of created targets for pointer analysis: 123
   Number of created targets for uf: *unsigned_char is 10
   Number of created targets for uf: *(unsigned_char)* is 25
   Number of created targets for uf: *unsigned_int is 9
   Number of created targets for uf: *char is 3
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               968
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2735 (count: 59327, min: 0, max: 419, avg: 0.05)
Time for BDD node cleanup:                             0.042s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.099s
  Time for transition matches:                         0.498s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.019s
Automaton transfers with branching:                0
Automaton transfer successors:                       396224 (count: 396224, min: 1, max: 1, avg: 1.00) [1 x 396224]

CPA algorithm statistics
------------------------
Number of iterations:            243423
Max size of waitlist:            45
Average size of waitlist:        20
Number of computed successors:   274761
Max successors for one state:    2
Number of times merged:          16245
Number of times stopped:         28867
Number of times breaked:         403

Total time for CPA algorithm:        29.140s (Max:     1.892s)
  Time for choose from waitlist:      0.309s
  Time for precision adjustment:     11.872s
  Time for transfer relation:        13.112s
  Time for merge operator:            0.906s
  Time for stop operator:             0.659s
  Time for adding to reached set:     0.743s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   403
Avg. length of target path (in blocks):               13723 (count: 403, min: 13, max: 68, avg: 34.05)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   7.473s
  Counterexample analysis:                             6.092s (Max:     0.039s, Calls: 403)
    Refinement sat check:                              3.631s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.017s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.146s
  Precision update:                                    0.256s
  ARG update:                                          0.691s

Length of refined path (in blocks):                   12161 (count: 403, min: 8, max: 55, avg: 30.18)
Number of affected states:                             3468 (count: 403, min: 2, max: 49, avg: 8.61)
Length (states) of path with itp 'true':               8290 (count: 403, min: 0, max: 36, avg: 20.57)
Length (states) of path with itp non-trivial itp:      3468 (count: 403, min: 2, max: 49, avg: 8.61)
Length (states) of path with itp 'false':               403 (count: 403, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         802 (count: 403, min: 0, max: 3, avg: 1.99)
Equal non-trivial interpolants along paths:            2263 (count: 403, min: 0, max: 47, avg: 5.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                403
Number of successful refinements:     403
Number of failed refinements:         0
Max. size of reached set before ref.: 5178
Max. size of reached set after ref.:  2895
Avg. size of reached set before ref.: 1928.42
Avg. size of reached set after ref.:  1347.22

Total time for CEGAR algorithm:      38.235s
Time for refinements:                 8.561s
Average time for refinement:          0.021s
Max time for refinement:              0.082s

Code Coverage
-----------------------------
  Function coverage:      0.944
  Visited lines:          2131
  Total lines:            2154
  Line coverage:          0.989
  Visited conditions:     428
  Total conditions:       430
  Condition coverage:     0.995

CPAchecker general statistics
-----------------------------
Number of program locations:     2769
Number of CFA edges:             3078
Number of relevant variables:    366
Number of functions:             72
Number of loops:                 11
Size of reached set:             10609
  Number of reached locations:   1206 (44%)
    Avg states per location:     8
    Max states per location:     145 (at node N93)
  Number of reached functions:   68 (94%)
  Number of partitions:          10551
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N2460 (before line 7320), Function ldv_slip_open_3 called from node N2362, stack depth 2 [7a92de86], stack [main, ldv_slip_open_3]])
  Number of target states:       0

Time for analysis setup:          5.397s
  Time for loading CPAs:          0.915s
  Time for loading parser:        0.737s
  Time for CFA construction:      3.598s
    Time for parsing file(s):     1.061s
    Time for AST to CFA:          1.319s
    Time for CFA sanity check:    0.227s
    Time for post-processing:     0.789s
      Time for var class.:        0.384s
Time for Analysis:               38.241s
CPU time for analysis:           38.240s
Time for analyzing result:        0.009s
Total time for CPAchecker:       43.651s
Total CPU time for CPAchecker:   43.630s
Time for statistics:              0.281s

Time for Garbage Collector:       1.129s (in 104 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 83MB (    79 MiB) max;     52MB (    50 MiB) avg;     94MB (    90 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     37MB (    35 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8077MB (  7702 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
