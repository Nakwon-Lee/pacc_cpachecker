scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/main2_true-unreach-call_drivers-media-video-tlg2300-poseidon-ko--32_7a--4a349aa-1_false-termination.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_43ssk9g1/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5249: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5252: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5255: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6885: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6890: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6895: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29173;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29173;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29173;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29173;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6984: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6989: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6994: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29212;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29212;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29212;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29212;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7432: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7437: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7442: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29340;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29340;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29340;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29340;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8219: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9073: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9238: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9243: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9248: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_25814;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_25814;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_25814;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_25814;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10036: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10041: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10046: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26025;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26025;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26025;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26025;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10212: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10449: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10454: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10459: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28568;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28568;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28568;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28568;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10679: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10684: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10689: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28619;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28619;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28619;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28619;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10778: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10783: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10788: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28648;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28648;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28648;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28648;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11260: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12478: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function jiffies_to_msecs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            33905 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  29350 (87%)
  Because of loop head:            4160 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         395 (1%)
  Times precision was empty:       6219 (18%)
  Times precision was {false}:     308 (1%)
  Times result was cached:         25602 (76%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1776 (5%)
  Times result was 'false':        2761 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         19526
  BDD entailment checks:           8580
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       139
Number of predicates discovered:          7
Number of abstraction locations:          106
Max number of predicates per location:    5
Avg number of predicates per location:    4
Total predicates per abstraction:         103388
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 49.61
Number of irrelevant predicates:          33267 (32%)
Number of preds handled by boolean abs:   4350 (4%)
  Total number of models for allsat:      1776
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.889s
  Time for path formula creation:        4.665s
Time for strengthen operator:            0.303s
Time for prec operator:                 33.515s
  Time for abstraction:                 32.736s (Max:     0.462s, Count: 33905)
    Boolean abstraction:                15.908s
    Solving time:                       16.044s (Max:     0.425s)
    Model enumeration time:              0.749s
    Time for BDD construction:           0.106s (Max:     0.009s)
Time for merge operator:                 0.120s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.067s
Total time for SMT solver (w/o itp):    16.793s

Number of path formula cache hits:   261364 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.543s

Total number of created targets for pointer analysis: 17923
   Number of created targets for uf: *signed_char is 61
   Number of created targets for uf: *signed_int is 77
   Number of created targets for uf: *(struct_list_head)* is 11
   Number of created targets for uf: *unsigned_int is 17
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               264
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3648 (count: 27093, min: 0, max: 152, avg: 0.13)
Time for BDD node cleanup:                             0.024s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.642s
  Time for transition matches:                         0.303s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                       236899 (count: 236899, min: 1, max: 1, avg: 1.00) [1 x 236899]

CPA algorithm statistics
------------------------
Number of iterations:            119978
Max size of waitlist:            60
Average size of waitlist:        16
Number of computed successors:   138351
Max successors for one state:    2
Number of times merged:          5473
Number of times stopped:         10374
Number of times breaked:         395

Total time for CPA algorithm:        45.430s (Max:     1.114s)
  Time for choose from waitlist:      0.180s
  Time for precision adjustment:     34.814s
  Time for transfer relation:         8.500s
  Time for merge operator:            0.304s
  Time for stop operator:             0.348s
  Time for adding to reached set:     0.406s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   395
Avg. length of target path (in blocks):                6368 (count: 395, min: 6, max: 29, avg: 16.12)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.021s
  Counterexample analysis:                            14.203s (Max:     0.262s, Calls: 395)
    Refinement sat check:                             12.361s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.114s
  Precision update:                                    0.190s
  ARG update:                                          0.359s

Length of refined path (in blocks):                    5973 (count: 395, min: 5, max: 28, avg: 15.12)
Number of affected states:                             3419 (count: 395, min: 3, max: 26, avg: 8.66)
Length (states) of path with itp 'true':               2159 (count: 395, min: 1, max: 22, avg: 5.47)
Length (states) of path with itp non-trivial itp:      3419 (count: 395, min: 3, max: 26, avg: 8.66)
Length (states) of path with itp 'false':               395 (count: 395, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 395, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3024 (count: 395, min: 2, max: 25, avg: 7.66)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                395
Number of successful refinements:     395
Number of failed refinements:         0
Max. size of reached set before ref.: 1327
Max. size of reached set after ref.:  1209
Avg. size of reached set before ref.: 680.34
Avg. size of reached set after ref.:  365.72

Total time for CEGAR algorithm:      60.877s
Time for refinements:                15.325s
Average time for refinement:          0.038s
Max time for refinement:              0.263s

Code Coverage
-----------------------------
  Function coverage:      0.133
  Visited lines:          1510
  Total lines:            4831
  Line coverage:          0.313
  Visited conditions:     152
  Total conditions:       1210
  Condition coverage:     0.126

CPAchecker general statistics
-----------------------------
Number of program locations:     6794
Number of CFA edges:             7594
Number of relevant variables:    960
Number of functions:             316
Number of loops:                 37
Size of reached set:             943
  Number of reached locations:   490 (7%)
    Avg states per location:     1
    Max states per location:     14 (at node N5994)
  Number of reached functions:   42 (13%)
  Number of partitions:          943
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          6.994s
  Time for loading CPAs:          1.145s
  Time for loading parser:        0.626s
  Time for CFA construction:      5.063s
    Time for parsing file(s):     1.148s
    Time for AST to CFA:          1.949s
    Time for CFA sanity check:    0.456s
    Time for post-processing:     1.348s
      Time for var class.:        0.651s
Time for Analysis:               60.877s
CPU time for analysis:           60.870s
Time for analyzing result:        0.001s
Total time for CPAchecker:       67.882s
Total CPU time for CPAchecker:   67.860s
Time for statistics:              0.131s

Time for Garbage Collector:       0.991s (in 181 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 83MB (    79 MiB) max;     61MB (    58 MiB) avg;     87MB (    83 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     43MB (    41 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        49MB (    47 MiB) max;     45MB (    43 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8080MB (  7705 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
