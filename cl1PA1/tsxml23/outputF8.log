scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-media-rc-imon--32_7a--a9e7fb5.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_m5ds59js/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3303: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3306: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3309: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4049: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 4054: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 4059: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___2 = get_current();
  __ptr = (u8 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26644;
  case 2UL:
  tmp___3 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___3->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26644;
  case 4UL:
  tmp___4 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___4->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26644;
  case 8UL:
  tmp___5 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___5->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26644;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6563: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6797: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_ifnum_to_if to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_allocate_device to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcat to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            44620 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  41172 (92%)
  Because of loop head:            2391 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1057 (2%)
  Times precision was empty:       2258 (5%)
  Times precision was {false}:     205 (0%)
  Times result was cached:         41064 (92%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1093 (2%)
  Times result was 'false':        4084 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         44629
  BDD entailment checks:           9129
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       31
Number of predicates discovered:          8
Number of abstraction locations:          175
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         150269
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 115.77
Number of irrelevant predicates:          20155 (13%)
Number of preds handled by boolean abs:   2865 (2%)
  Total number of models for allsat:      1087
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.99

Time for post operator:                  2.805s
  Time for path formula creation:        2.581s
Time for strengthen operator:            0.369s
Time for prec operator:                 12.444s
  Time for abstraction:                 11.564s (Max:     0.025s, Count: 44620)
    Boolean abstraction:                 1.268s
    Solving time:                        1.018s (Max:     0.018s)
    Model enumeration time:              0.073s
    Time for BDD construction:           0.094s (Max:     0.017s)
Time for merge operator:                 0.224s
Time for coverage check:                 0.053s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     1.091s

Number of path formula cache hits:   351550 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.423s

Total number of created targets for pointer analysis: 324
   Number of created targets for uf: *unsigned_short_int is 2
   Number of created targets for uf: *(struct_usb_device)* is 2
   Number of created targets for uf: *(struct_urb)* is 2
   Number of created targets for uf: *(struct_input_dev)* is 4
   Number of created targets for uf: *unsigned_char is 26
   Number of created targets for uf: *(struct_rc_dev)* is 7
   Number of created targets for uf: *_Bool is 6
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *(struct_device)* is 5


Number of BDD nodes:                               402
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2602 (count: 19396, min: 0, max: 263, avg: 0.13)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.756s
  Time for transition matches:                         0.283s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.017s
Automaton transfers with branching:                0
Automaton transfer successors:                       302869 (count: 302869, min: 1, max: 1, avg: 1.00) [1 x 302869]

CPA algorithm statistics
------------------------
Number of iterations:            201030
Max size of waitlist:            28
Average size of waitlist:        11
Number of computed successors:   230950
Max successors for one state:    2
Number of times merged:          17750
Number of times stopped:         23096
Number of times breaked:         1057

Total time for CPA algorithm:        23.924s (Max:     0.552s)
  Time for choose from waitlist:      0.178s
  Time for precision adjustment:     14.311s
  Time for transfer relation:         7.106s
  Time for merge operator:            0.561s
  Time for stop operator:             0.503s
  Time for adding to reached set:     0.425s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1057
Avg. length of target path (in blocks):               54482 (count: 1057, min: 9, max: 92, avg: 51.54)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  18.030s
  Counterexample analysis:                            16.464s (Max:     0.060s, Calls: 1057)
    Refinement sat check:                             10.923s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.033s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.165s
  Precision update:                                    0.517s
  ARG update:                                          0.457s

Length of refined path (in blocks):                   53247 (count: 1057, min: 8, max: 89, avg: 50.38)
Number of affected states:                            11713 (count: 1057, min: 1, max: 87, avg: 11.08)
Length (states) of path with itp 'true':              40477 (count: 1057, min: 1, max: 82, avg: 38.29)
Length (states) of path with itp non-trivial itp:     11713 (count: 1057, min: 1, max: 87, avg: 11.08)
Length (states) of path with itp 'false':              1057 (count: 1057, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1057, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           10656 (count: 1057, min: 0, max: 86, avg: 10.08)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1057
Number of successful refinements:     1057
Number of failed refinements:         0
Max. size of reached set before ref.: 1790
Max. size of reached set after ref.:  1696
Avg. size of reached set before ref.: 816.71
Avg. size of reached set after ref.:  625.55

Total time for CEGAR algorithm:      43.458s
Time for refinements:                19.082s
Average time for refinement:          0.018s
Max time for refinement:              0.070s

Code Coverage
-----------------------------
  Function coverage:      0.454
  Visited lines:          1487
  Total lines:            2753
  Line coverage:          0.540
  Visited conditions:     244
  Total conditions:       754
  Condition coverage:     0.324

CPAchecker general statistics
-----------------------------
Number of program locations:     3883
Number of CFA edges:             4384
Number of relevant variables:    473
Number of functions:             141
Number of loops:                 9
Size of reached set:             1720
  Number of reached locations:   858 (22%)
    Avg states per location:     2
    Max states per location:     26 (at node N3193)
  Number of reached functions:   64 (45%)
  Number of partitions:          1715
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2666 (before line 6257), Function imon_probe called from node N2860, stack depth 2 [195660d6], stack [main, imon_probe]])
  Number of target states:       0

Time for analysis setup:          5.461s
  Time for loading CPAs:          0.857s
  Time for loading parser:        0.656s
  Time for CFA construction:      3.792s
    Time for parsing file(s):     0.992s
    Time for AST to CFA:          1.373s
    Time for CFA sanity check:    0.288s
    Time for post-processing:     0.947s
      Time for var class.:        0.498s
Time for Analysis:               43.458s
CPU time for analysis:           43.460s
Time for analyzing result:        0.001s
Total time for CPAchecker:       48.924s
Total CPU time for CPAchecker:   48.910s
Time for statistics:              0.143s

Time for Garbage Collector:       0.727s (in 126 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 69MB (    66 MiB) max;     48MB (    46 MiB) avg;     72MB (    69 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     37MB (    35 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   8020MB (  7648 MiB) max;   8012MB (  7641 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
