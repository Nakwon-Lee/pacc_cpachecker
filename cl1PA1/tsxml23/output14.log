scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-media-rc-imon--32_7a--a9e7fb5.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_s17216mz/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3303: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3306: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3309: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2036;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4049: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 4054: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 4059: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___2 = get_current();
  __ptr = (u8 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26644;
  case 2UL:
  tmp___3 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___3->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26644;
  case 4UL:
  tmp___4 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___4->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26644;
  case 8UL:
  tmp___5 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___5->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26644;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6563: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6797: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_ifnum_to_if to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcat to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_allocate_device to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rc_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            19537 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  18071 (92%)
  Because of loop head:            1168 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         298 (2%)
  Times precision was empty:       5062 (26%)
  Times precision was {false}:     157 (1%)
  Times result was cached:         13964 (71%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      354 (2%)
  Times result was 'false':        1310 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         26418
  BDD entailment checks:           5352
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       31
Number of predicates discovered:          8
Number of abstraction locations:          119
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         26192
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 51.26
Number of irrelevant predicates:          13207 (50%)
Number of preds handled by boolean abs:   566 (2%)
  Total number of models for allsat:      346
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.98

Time for post operator:                  2.971s
  Time for path formula creation:        2.768s
Time for strengthen operator:            0.244s
Time for prec operator:                  5.442s
  Time for abstraction:                  4.767s (Max:     0.031s, Count: 19537)
    Boolean abstraction:                 0.458s
    Solving time:                        0.537s (Max:     0.019s)
    Model enumeration time:              0.020s
    Time for BDD construction:           0.048s (Max:     0.016s)
Time for merge operator:                 0.198s
Time for coverage check:                 0.061s
  Time for BDD entailment checks:        0.044s
Total time for SMT solver (w/o itp):     0.557s

Number of path formula cache hits:   183517 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.753s

Total number of created targets for pointer analysis: 668
   Number of created targets for uf: *unsigned_short_int is 2
   Number of created targets for uf: *(struct_usb_device)* is 2
   Number of created targets for uf: *unsigned_char is 201
   Number of created targets for uf: *(struct_input_dev)* is 6
   Number of created targets for uf: *(struct_urb)* is 3
   Number of created targets for uf: *(struct_rc_dev)* is 8
   Number of created targets for uf: *_Bool is 21
   Number of created targets for uf: *unsigned_long_long_int is 5
   Number of created targets for uf: *(struct_device)* is 2


Number of BDD nodes:                               239
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         795 (count: 13505, min: 0, max: 122, avg: 0.06)
Time for BDD node cleanup:                             0.018s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.574s
  Time for transition matches:                         0.219s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                       162041 (count: 162041, min: 1, max: 1, avg: 1.00) [1 x 162041]

CPA algorithm statistics
------------------------
Number of iterations:            98812
Max size of waitlist:            25
Average size of waitlist:        11
Number of computed successors:   114875
Max successors for one state:    2
Number of times merged:          10533
Number of times stopped:         13862
Number of times breaked:         298

Total time for CPA algorithm:        16.072s (Max:     0.566s)
  Time for choose from waitlist:      0.163s
  Time for precision adjustment:      6.912s
  Time for transfer relation:         6.596s
  Time for merge operator:            0.594s
  Time for stop operator:             0.414s
  Time for adding to reached set:     0.392s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   298
Avg. length of target path (in blocks):               14930 (count: 298, min: 9, max: 85, avg: 50.10)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   7.602s
  Counterexample analysis:                             6.628s (Max:     0.060s, Calls: 298)
    Refinement sat check:                              4.381s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.022s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.140s
  Precision update:                                    0.177s
  ARG update:                                          0.378s

Length of refined path (in blocks):                   14549 (count: 298, min: 8, max: 84, avg: 48.82)
Number of affected states:                             4258 (count: 298, min: 1, max: 43, avg: 14.29)
Length (states) of path with itp 'true':               9993 (count: 298, min: 1, max: 73, avg: 33.53)
Length (states) of path with itp non-trivial itp:      4258 (count: 298, min: 1, max: 43, avg: 14.29)
Length (states) of path with itp 'false':               298 (count: 298, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 298, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3960 (count: 298, min: 0, max: 42, avg: 13.29)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                298
Number of successful refinements:     298
Number of failed refinements:         0
Max. size of reached set before ref.: 2184
Max. size of reached set after ref.:  2129
Avg. size of reached set before ref.: 1126.14
Avg. size of reached set after ref.:  793.44

Total time for CEGAR algorithm:      24.533s
Time for refinements:                 8.233s
Average time for refinement:          0.027s
Max time for refinement:              0.073s

Code Coverage
-----------------------------
  Function coverage:      0.248
  Visited lines:          996
  Total lines:            2753
  Line coverage:          0.362
  Visited conditions:     120
  Total conditions:       754
  Condition coverage:     0.159

CPAchecker general statistics
-----------------------------
Number of program locations:     3883
Number of CFA edges:             4384
Number of relevant variables:    473
Number of functions:             141
Number of loops:                 9
Size of reached set:             559
  Number of reached locations:   392 (10%)
    Avg states per location:     1
    Max states per location:     9 (at node N3193)
  Number of reached functions:   35 (25%)
  Number of partitions:          558
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2303 (before line 5860), Function imon_find_endpoints called from node N2515, stack depth 4 [1d49853e], stack [main, imon_probe, imon_init_intf1, imon_find_endpoints]])
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          5.719s
  Time for loading CPAs:          0.926s
  Time for loading parser:        0.678s
  Time for CFA construction:      3.958s
    Time for parsing file(s):     1.015s
    Time for AST to CFA:          1.441s
    Time for CFA sanity check:    0.329s
    Time for post-processing:     1.016s
      Time for var class.:        0.514s
Time for Analysis:               24.533s
CPU time for analysis:           24.530s
Total time for CPAchecker:       30.256s
Total CPU time for CPAchecker:   30.240s
Time for statistics:              0.110s

Time for Garbage Collector:       0.417s (in 52 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 68MB (    65 MiB) max;     46MB (    44 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   8008MB (  7637 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
