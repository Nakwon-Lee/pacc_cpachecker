scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_sound-core-oss-snd-mixer-oss-ko--143_7a--506218e.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ru5z2krd/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3101: Dead code detected: [size > 8192UL] (CFACreationUtils.addEdgeToCFA, INFO)

line 3101: Dead code detected: [!(size > 8192UL)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3102: Dead code detected: tmp = kmalloc_large(size, flags); (CFACreationUtils.addEdgeToCFA, INFO)

line 3107: Dead code detected: [(flags & 1U) == 0U] (CFACreationUtils.addEdgeToCFA, INFO)

line 3107: Dead code detected: [!((flags & 1U) == 0U)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3108: Dead code detected: tmp___0 = kmalloc_slab(size); (CFACreationUtils.addEdgeToCFA, INFO)

line 3110: Dead code detected: [!(((unsigned long)s) == ((unsigned long)((struct kmem_cache *)0)))] (CFACreationUtils.addEdgeToCFA, INFO)

line 3111: Dead code detected: return (16); (CFACreationUtils.addEdgeToCFA, INFO)

line 3115: Dead code detected: ret = kmem_cache_alloc_notrace(s, flags); (CFACreationUtils.addEdgeToCFA, INFO)

line 3234: Dead code detected: pao_ID__ = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3237: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3237: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3238: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3240: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3240: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3241: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3243: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3247: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3247: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3248: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3250: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3250: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3251: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3253: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3256: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3257: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3258: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3260: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3260: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3261: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3263: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3267: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3267: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3268: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3270: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3270: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3271: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3273: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12606;
      case 2UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 4UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 8UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12606;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3282: Dead code detected: pao_ID_____0 = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3285: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3285: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3286: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3288: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3288: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3289: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3291: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3295: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3295: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3296: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3298: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3298: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3299: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3301: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3304: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3305: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3306: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3308: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3308: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3309: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3311: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3315: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3315: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3316: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3318: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3318: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3319: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3321: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12617;
      case 2UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 4UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 8UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12617;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3333: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3333: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3334: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3336: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3336: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3337: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3339: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3343: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3343: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3344: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3346: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3346: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3347: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3349: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3363: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3363: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3364: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3366: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3366: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3367: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3369: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12627;
      case 2UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 4UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 8UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12627;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3378: Dead code detected: pao_ID_____2 = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3381: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3381: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3382: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3384: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3384: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3385: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3387: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3391: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3391: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3392: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3394: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3394: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3395: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3397: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3400: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3401: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3402: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3404: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3404: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3405: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3407: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3411: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3411: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3412: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3414: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3414: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3415: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3417: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12637;
      case 2UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 4UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 8UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12637;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      pao_ID__ = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12606;
      case 2UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 4UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 8UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12606;
      default:
      __bad_percpu_size();
      }
      ldv_12606: ;
      goto ldv_12611;
      case 2UL:
      pao_ID_____0 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12617;
      case 2UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 4UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 8UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12617;
      default:
      __bad_percpu_size();
      }
      ldv_12617: ;
      goto ldv_12611;
      case 4UL:
      pao_ID_____1 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12627;
      case 2UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 4UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 8UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12627;
      default:
      __bad_percpu_size();
      }
      ldv_12627: ;
      goto ldv_12611;
      case 8UL:
      pao_ID_____2 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12637;
      case 2UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 4UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 8UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12637;
      default:
      __bad_percpu_size();
      }
      ldv_12637: ;
      goto ldv_12611;
      default:
      __bad_size_call_parameter();
      goto ldv_12611;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 4083: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4086: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4092: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 2UL:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 4UL:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 8UL:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 4115: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4118: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4124: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4137-4138: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4141-4142: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4149-4150: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4164-4165: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4168-4169: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4176-4177: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4197-4198: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4201-4202: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4209-4210: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4230-4231: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4234-4235: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4242-4243: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4263-4264: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4267-4268: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4275-4276: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4296-4297: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4300-4301: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4308-4309: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4329-4330: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4333-4334: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4341-4342: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 4359: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4362: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4368: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 2UL:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 4UL:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 8UL:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4391-4392: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4395-4396: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4403-4404: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4425-4426: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4429-4430: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4437-4438: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5443: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5472: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5251: Function pointer *(kcontrol->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5060: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5066: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4669: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4675: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4598: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4604: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5152: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5209: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4853: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4872: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4778: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4797: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 2911-2913: Function pointer *((void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ))it_func) with type void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3186-3187: Function pointer *((void (*)(void *, struct module *, unsigned long))it_func) with type void (*)(void *, struct module *, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_oss_info_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_unregister_oss_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_info_free_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function module_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_file_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_register_oss_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_lookup_oss_minor_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_file_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3919: Ignoring function call through function pointer *(pslot->get_volume): result = (*(pslot->get_volume))(fmixer, pslot, &left, &right); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4004: Ignoring function call through function pointer *(pslot->put_volume): result = (*(pslot->put_volume))(fmixer, pslot, left, right); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3768: Ignoring function call through function pointer *(mixer->get_recsrc): err = (*(mixer->get_recsrc))(fmixer, (unsigned int *)(&result)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3784: Ignoring function call through function pointer *(pslot->get_recsrc): (*(pslot->get_recsrc))(fmixer, pslot, &active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3847: Ignoring function call through function pointer *(pslot->put_recsrc): (*(pslot->put_recsrc))(fmixer, pslot, active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3833: Ignoring function call through function pointer *(mixer->put_recsrc): (*(mixer->put_recsrc))(fmixer, (unsigned int)tmp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3834: Ignoring function call through function pointer *(mixer->get_recsrc): (*(mixer->get_recsrc))(fmixer, (unsigned int *)(&result)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3868: Ignoring function call through function pointer *(pslot->get_recsrc): (*(pslot->get_recsrc))(fmixer, pslot, &active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_info_create_card_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_info_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5926: Ignoring function call through function pointer *(chn->private_free): (*(chn->private_free))(chn); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function down_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_find_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_find_numid to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5251: Ignoring function call through function pointer *(kcontrol->info): err = (*(kcontrol->info))(kcontrol, info); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function up_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3186-3187: Ignoring call via function pointer trace_module_get::it_func for which no suitable target was found in line: (*((void (*)(void *, struct module *, unsigned long))it_func))(__data, mod, ip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 3186-3187: Ignoring function call through function pointer *((void (*)(void *, struct module *, unsigned long))it_func): (*((void (*)(void *, struct module *, unsigned long))it_func))(__data, mod, ip); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function lockdep_rcu_dereference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4598: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4604: Ignoring function call through function pointer *(kctl->get): tmp___2 = (*(kctl->get))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4669: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4675: Ignoring function call through function pointer *(kctl->get): tmp___2 = (*(kctl->get))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4778: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4853: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4872: Ignoring function call through function pointer *(kctl->put): res = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_ctl_notify to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5060: Ignoring function call through function pointer *(kctl->info): err = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5066: Ignoring function call through function pointer *(kctl->get): err = (*(kctl->get))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5152: Ignoring function call through function pointer *(kctl->info): err = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4797: Ignoring function call through function pointer *(kctl->put): res = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5209: Ignoring function call through function pointer *(kctl->put): err = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1264300 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1230095 (97%)
  Because of loop head:            30517 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3688 (0%)
  Times precision was empty:       64422 (5%)
  Times precision was {false}:     686 (0%)
  Times result was cached:         1194759 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4433 (0%)
  Times result was 'false':        116972 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         805921
  BDD entailment checks:           334143
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       117
Number of predicates discovered:          44
Number of abstraction locations:          256
Max number of predicates per location:    9
Avg number of predicates per location:    2
Total predicates per abstraction:         3361576
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 656.69
Number of irrelevant predicates:          1406476 (42%)
Number of preds handled by boolean abs:   11910 (0%)
  Total number of models for allsat:      6127
  Max number of models for allsat:        12
  Avg number of models for allsat:        1.38

Time for post operator:                 30.892s
  Time for path formula creation:       27.848s
Time for strengthen operator:            4.833s
Time for prec operator:                215.451s
  Time for abstraction:                202.765s (Max:     1.301s, Count: 1264300)
    Boolean abstraction:                11.647s
    Solving time:                       10.603s (Max:     1.200s)
    Model enumeration time:              0.791s
    Time for BDD construction:           0.245s (Max:     0.012s)
Time for merge operator:                 1.433s
Time for coverage check:                 0.433s
  Time for BDD entailment checks:        0.313s
Total time for SMT solver (w/o itp):    11.394s

Number of path formula cache hits:   7795107 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    13.069s

Total number of created targets for pointer analysis: 154418
   Number of created targets for uf: *signed_int is 841
   Number of created targets for uf: *(char)* is 1081
   Number of created targets for uf: *signed_long_int is 941
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[unsigned_int],_VarArgs:_false)* is 123
   Number of created targets for uf: *(struct_snd_mixer_oss)* is 9
   Number of created targets for uf: *(struct_snd_card)* is 169
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(unsigned_int)*],_VarArgs:_false)* is 123
   Number of created targets for uf: *unsigned_int is 869
   Number of created targets for uf: *char is 3901


Number of BDD nodes:                               1896
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       11339 (count: 430615, min: 0, max: 164, avg: 0.03)
Time for BDD node cleanup:                             0.101s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.783s
  Time for transition matches:                         4.999s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.022s
Automaton transfers with branching:                0
Automaton transfer successors:                      6540678 (count: 6540678, min: 1, max: 1, avg: 1.00) [1 x 6540678]

CPA algorithm statistics
------------------------
Number of iterations:            4244202
Max size of waitlist:            822
Average size of waitlist:        278
Number of computed successors:   4850459
Max successors for one state:    2
Number of times merged:          235889
Number of times stopped:         393063
Number of times breaked:         3688

Total time for CPA algorithm:       361.903s (Max:     1.968s)
  Time for choose from waitlist:      1.772s
  Time for precision adjustment:    245.389s
  Time for transfer relation:        87.930s
  Time for merge operator:            4.521s
  Time for stop operator:             5.390s
  Time for adding to reached set:     6.090s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3688
Avg. length of target path (in blocks):              162173 (count: 3688, min: 8, max: 132, avg: 43.97)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 412.907s
  Counterexample analysis:                           399.644s (Max:     0.593s, Calls: 3688)
    Refinement sat check:                            347.060s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.094s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.493s
  Precision update:                                    2.532s
  ARG update:                                          8.932s

Length of refined path (in blocks):                  145473 (count: 3687, min: 5, max: 131, avg: 39.46)
Number of affected states:                            37442 (count: 3687, min: 1, max: 129, avg: 10.16)
Length (states) of path with itp 'true':             104344 (count: 3687, min: 1, max: 121, avg: 28.30)
Length (states) of path with itp non-trivial itp:     37442 (count: 3687, min: 1, max: 129, avg: 10.16)
Length (states) of path with itp 'false':              3687 (count: 3687, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        3362 (count: 3687, min: 0, max: 10, avg: 0.91)
Equal non-trivial interpolants along paths:           30393 (count: 3687, min: 0, max: 128, avg: 8.24)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3688
Number of successful refinements:     3687
Number of failed refinements:         0
Max. size of reached set before ref.: 43055
Max. size of reached set after ref.:  42965
Avg. size of reached set before ref.: 19308.64
Avg. size of reached set after ref.:  18136.66

Total time for CEGAR algorithm:     894.656s
Time for refinements:               480.587s
Average time for refinement:          0.130s
Max time for refinement:              0.646s

Code Coverage
-----------------------------
  Function coverage:      0.670
  Visited lines:          1674
  Total lines:            2287
  Line coverage:          0.732
  Visited conditions:     406
  Total conditions:       700
  Condition coverage:     0.580

CPAchecker general statistics
-----------------------------
Number of program locations:     3181
Number of CFA edges:             3629
Number of relevant variables:    468
Number of functions:             103
Number of loops:                 22
Size of reached set:             7655
  Number of reached locations:   1021 (32%)
    Avg states per location:     7
    Max states per location:     161 (at node N3237)
  Number of reached functions:   69 (67%)
  Number of partitions:          7545
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N906 (before line 3853), Function snd_mixer_oss_set_recsrc called from node N1140, stack depth 4 [3ce0fe0d], stack [main, snd_mixer_oss_ioctl, snd_mixer_oss_ioctl1, snd_mixer_oss_set_recsrc]])
  Number of target states:       1
  Size of final wait list        195

Time for analysis setup:          5.699s
  Time for loading CPAs:          1.014s
  Time for loading parser:        0.692s
  Time for CFA construction:      3.838s
    Time for parsing file(s):     1.037s
    Time for AST to CFA:          1.332s
    Time for CFA sanity check:    0.268s
    Time for post-processing:     1.008s
      Time for var class.:        0.487s
Time for Analysis:              894.656s
CPU time for analysis:          894.540s
Total time for CPAchecker:      900.359s
Total CPU time for CPAchecker:  900.230s
Time for statistics:              0.209s

Time for Garbage Collector:      43.402s (in 2527 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                202MB (   193 MiB) max;    108MB (   103 MiB) avg;    209MB (   200 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           210MB (   200 MiB) max;    161MB (   154 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8356MB (  7969 MiB) max;   8171MB (  7792 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
