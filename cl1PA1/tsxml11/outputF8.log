scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_sound-core-oss-snd-mixer-oss-ko--143_7a--506218e.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_5mkga577/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3101: Dead code detected: [size > 8192UL] (CFACreationUtils.addEdgeToCFA, INFO)

line 3101: Dead code detected: [!(size > 8192UL)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3102: Dead code detected: tmp = kmalloc_large(size, flags); (CFACreationUtils.addEdgeToCFA, INFO)

line 3107: Dead code detected: [(flags & 1U) == 0U] (CFACreationUtils.addEdgeToCFA, INFO)

line 3107: Dead code detected: [!((flags & 1U) == 0U)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3108: Dead code detected: tmp___0 = kmalloc_slab(size); (CFACreationUtils.addEdgeToCFA, INFO)

line 3110: Dead code detected: [!(((unsigned long)s) == ((unsigned long)((struct kmem_cache *)0)))] (CFACreationUtils.addEdgeToCFA, INFO)

line 3111: Dead code detected: return (16); (CFACreationUtils.addEdgeToCFA, INFO)

line 3115: Dead code detected: ret = kmem_cache_alloc_notrace(s, flags); (CFACreationUtils.addEdgeToCFA, INFO)

line 3234: Dead code detected: pao_ID__ = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3237: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3237: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3238: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3240: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3240: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3241: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3243: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3247: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3247: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3248: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3250: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3250: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3251: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3253: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3256: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3257: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3258: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3260: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3260: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3261: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3263: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3267: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3267: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3268: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3270: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3270: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3271: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3273: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12606;
      case 2UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 4UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 8UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12606;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3282: Dead code detected: pao_ID_____0 = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3285: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3285: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3286: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3288: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3288: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3289: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3291: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3295: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3295: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3296: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3298: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3298: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3299: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3301: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3304: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3305: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3306: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3308: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3308: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3309: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3311: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3315: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3315: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3316: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3318: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3318: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3319: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3321: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12617;
      case 2UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 4UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 8UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12617;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3333: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3333: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3334: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3336: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3336: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3337: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3339: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3343: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3343: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3344: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3346: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3346: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3347: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3349: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3363: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3363: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3364: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3366: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3366: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3367: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3369: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12627;
      case 2UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 4UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 8UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12627;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 3378: Dead code detected: pao_ID_____2 = 1; (CFACreationUtils.addEdgeToCFA, INFO)

line 3381: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3381: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3382: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3384: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3384: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3385: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3387: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3391: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3391: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3392: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3394: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3394: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3395: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3397: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3400: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 3401: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3402: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3404: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3404: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3405: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3407: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3411: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3411: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3412: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3414: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 3414: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 3415: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3417: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12637;
      case 2UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 4UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 8UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12637;
      default:
      __bad_percpu_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      pao_ID__ = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12606;
      case 2UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 4UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12606;
      case 8UL: ;
      if (pao_ID__ == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID__ == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12606;
      default:
      __bad_percpu_size();
      }
      ldv_12606: ;
      goto ldv_12611;
      case 2UL:
      pao_ID_____0 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12617;
      case 2UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 4UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12617;
      case 8UL: ;
      if (pao_ID_____0 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____0 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12617;
      default:
      __bad_percpu_size();
      }
      ldv_12617: ;
      goto ldv_12611;
      case 4UL:
      pao_ID_____1 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12627;
      case 2UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 4UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12627;
      case 8UL: ;
      if (pao_ID_____1 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____1 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12627;
      default:
      __bad_percpu_size();
      }
      ldv_12627: ;
      goto ldv_12611;
      case 8UL:
      pao_ID_____2 = 1;
      switch (4UL) {
      case 1UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decb %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addb %1, %%gs:%P0": "+m" ((module->refptr)->incs): "qi" (1U));
      }
      goto ldv_12637;
      case 2UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decw %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addw %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 4UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decl %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addl %1, %%gs:%P0": "+m" ((module->refptr)->incs): "ri" (1U));
      }
      goto ldv_12637;
      case 8UL: ;
      if (pao_ID_____2 == 1) {
        __asm__ ("incq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else
      if (pao_ID_____2 == -1) {
        __asm__ ("decq %%gs:%P0": "+m" ((module->refptr)->incs));
      } else {
        __asm__ ("addq %1, %%gs:%P0": "+m" ((module->refptr)->incs): "re" (1U));
      }
      goto ldv_12637;
      default:
      __bad_percpu_size();
      }
      ldv_12637: ;
      goto ldv_12611;
      default:
      __bad_size_call_parameter();
      goto ldv_12611;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 4083: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4086: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4092: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 2UL:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 4UL:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    case 8UL:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (p));
    goto ldv_21734;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 4115: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4118: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4124: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (p): "ebx");
    goto ldv_21743;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4137-4138: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4141-4142: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4149-4150: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                         "c" (p): "ebx");
    goto ldv_21753;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4164-4165: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4168-4169: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4176-4177: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                         "c" (p): "ebx");
    goto ldv_21763;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4197-4198: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4201-4202: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4209-4210: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" (p): "ebx");
    goto ldv_21773;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4230-4231: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4234-4235: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4242-4243: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                         "c" (p): "ebx");
    goto ldv_21783;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4263-4264: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4267-4268: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4275-4276: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                         "c" (p): "ebx");
    goto ldv_21793;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4296-4297: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4300-4301: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4308-4309: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___5): "0" (__pu_val___5),
                         "c" (p): "ebx");
    goto ldv_21803;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4329-4330: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4333-4334: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4341-4342: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___6): "0" (__pu_val___6),
                         "c" (p): "ebx");
    goto ldv_21813;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 4359: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4362: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4368: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 2UL:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 4UL:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    case 8UL:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (p));
    goto ldv_21822;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4391-4392: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4395-4396: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4403-4404: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___7): "0" (__pu_val___7),
                         "c" (p): "ebx");
    goto ldv_21831;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4425-4426: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4429-4430: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4437-4438: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___8): "0" (__pu_val___8),
                         "c" (p): "ebx");
    goto ldv_21840;
    } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5443: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5472: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5251: Function pointer *(kcontrol->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5060: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5066: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4669: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4675: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4598: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4604: Function pointer *(kctl->get) with type snd_kcontrol_get_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5152: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5209: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4853: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4872: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4778: Function pointer *(kctl->info) with type snd_kcontrol_info_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4797: Function pointer *(kctl->put) with type snd_kcontrol_put_t * is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 2911-2913: Function pointer *((void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ))it_func) with type void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 3186-3187: Function pointer *((void (*)(void *, struct module *, unsigned long))it_func) with type void (*)(void *, struct module *, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_oss_info_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_unregister_oss_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_info_free_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5926: Ignoring function call through function pointer *(chn->private_free): (*(chn->private_free))(chn); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_register_oss_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __snd_printk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_ctl_find_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5251: Ignoring function call through function pointer *(kcontrol->info): err = (*(kcontrol->info))(kcontrol, info); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5443: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5472: Ignoring function call through function pointer *(kctl->info): tmp___4 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5298: Ignoring function call through function pointer *(rslot->private_free): (*(rslot->private_free))(rslot); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_info_create_card_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_info_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_lookup_oss_minor_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_file_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snd_card_file_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_rcu_dereference to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 3186-3187: Ignoring call via function pointer trace_module_get::it_func for which no suitable target was found in line: (*((void (*)(void *, struct module *, unsigned long))it_func))(__data, mod, ip); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 3186-3187: Ignoring function call through function pointer *((void (*)(void *, struct module *, unsigned long))it_func): (*((void (*)(void *, struct module *, unsigned long))it_func))(__data, mod, ip); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function module_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3833: Ignoring function call through function pointer *(mixer->put_recsrc): (*(mixer->put_recsrc))(fmixer, (unsigned int)tmp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3834: Ignoring function call through function pointer *(mixer->get_recsrc): (*(mixer->get_recsrc))(fmixer, (unsigned int *)(&result)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5060: Ignoring function call through function pointer *(kctl->info): err = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5066: Ignoring function call through function pointer *(kctl->get): err = (*(kctl->get))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5152: Ignoring function call through function pointer *(kctl->info): err = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5209: Ignoring function call through function pointer *(kctl->put): err = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_ctl_notify to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3847: Ignoring function call through function pointer *(pslot->put_recsrc): (*(pslot->put_recsrc))(fmixer, pslot, active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snd_ctl_find_numid to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4853: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4872: Ignoring function call through function pointer *(kctl->put): res = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3868: Ignoring function call through function pointer *(pslot->get_recsrc): (*(pslot->get_recsrc))(fmixer, pslot, &active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4669: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4675: Ignoring function call through function pointer *(kctl->get): tmp___2 = (*(kctl->get))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3768: Ignoring function call through function pointer *(mixer->get_recsrc): err = (*(mixer->get_recsrc))(fmixer, (unsigned int *)(&result)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3784: Ignoring function call through function pointer *(pslot->get_recsrc): (*(pslot->get_recsrc))(fmixer, pslot, &active); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4004: Ignoring function call through function pointer *(pslot->put_volume): result = (*(pslot->put_volume))(fmixer, pslot, left, right); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4778: Ignoring function call through function pointer *(kctl->info): tmp___1 = (*(kctl->info))(kctl, uinfo); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4797: Ignoring function call through function pointer *(kctl->put): res = (*(kctl->put))(kctl, uctl); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            348359 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  339317 (97%)
  Because of loop head:            7765 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1277 (0%)
  Times precision was empty:       9827 (3%)
  Times precision was {false}:     1248 (0%)
  Times result was cached:         325631 (93%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11653 (3%)
  Times result was 'false':        66341 (19%)
Number of strengthen sat checks:   0
Number of coverage checks:         140356
  BDD entailment checks:           79430
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       117
Number of predicates discovered:          61
Number of abstraction locations:          174
Max number of predicates per location:    14
Avg number of predicates per location:    4
Total predicates per abstraction:         2060644
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 159.73
Number of irrelevant predicates:          446112 (22%)
Number of preds handled by boolean abs:   59447 (3%)
  Total number of models for allsat:      22074
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.89

Time for post operator:                 22.555s
  Time for path formula creation:       21.879s
Time for strengthen operator:            1.437s
Time for prec operator:                270.742s
  Time for abstraction:                266.862s (Max:     4.388s, Count: 348359)
    Boolean abstraction:               122.548s
    Solving time:                      107.446s (Max:     4.323s)
    Model enumeration time:             16.127s
    Time for BDD construction:           0.566s (Max:     0.012s)
Time for merge operator:                 1.449s
Time for coverage check:                 0.110s
  Time for BDD entailment checks:        0.086s
Total time for SMT solver (w/o itp):   123.573s

Number of path formula cache hits:   1720576 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    17.110s

Total number of created targets for pointer analysis: 313973
   Number of created targets for uf: *(void)* is 41
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_4,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(struct_snd_mixer_oss_slot)*],_Parameter_3_type:_[signed_int],_Parameter_4_type:_[signed_int],_VarArgs:_false)* is 3121
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(struct_snd_mixer_oss_slot)*],_Parameter_3_type:_[signed_int],_VarArgs:_false)* is 3121
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[unsigned_int],_VarArgs:_false)* is 217
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_snd_mixer_oss_slot)*],_VarArgs:_false)* is 3121
   Number of created targets for uf: *(struct_snd_mixer_oss_assign_table)* is 38
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_4,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(struct_snd_mixer_oss_slot)*],_Parameter_3_type:_[(signed_int)*],_Parameter_4_type:_[(signed_int)*],_VarArgs:_false)* is 3121
   Number of created targets for uf: *signed_int is 560
   Number of created targets for uf: *(char)* is 1261
   Number of created targets for uf: *signed_long_int is 621
   Number of created targets for uf: *(struct_snd_mixer_oss)* is 14
   Number of created targets for uf: *(struct_snd_card)* is 287
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(unsigned_int)*],_VarArgs:_false)* is 217
   Number of created targets for uf: *unsigned_int is 109
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_snd_mixer_oss_file)*],_Parameter_2_type:_[(struct_snd_mixer_oss_slot)*],_Parameter_3_type:_[(signed_int)*],_VarArgs:_false)* is 3121
   Number of created targets for uf: *char is 10701


Number of BDD nodes:                               5001
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       26892 (count: 172473, min: 0, max: 706, avg: 0.16)
Time for BDD node cleanup:                             0.048s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.535s
  Time for transition matches:                         1.423s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.010s
Automaton transfers with branching:                0
Automaton transfer successors:                      1566530 (count: 1566530, min: 1, max: 1, avg: 1.00) [1 x 1566530]

CPA algorithm statistics
------------------------
Number of iterations:            1064792
Max size of waitlist:            45
Average size of waitlist:        9
Number of computed successors:   1193341
Max successors for one state:    2
Number of times merged:          30463
Number of times stopped:         57721
Number of times breaked:         1277

Total time for CPA algorithm:       324.437s (Max:     6.813s)
  Time for choose from waitlist:      0.484s
  Time for precision adjustment:    277.837s
  Time for transfer relation:        38.158s
  Time for merge operator:            2.027s
  Time for stop operator:             1.336s
  Time for adding to reached set:     1.729s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1277
Avg. length of target path (in blocks):              252749 (count: 1277, min: 8, max: 361, avg: 197.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 556.378s
  Counterexample analysis:                           552.629s (Max:     1.345s, Calls: 1277)
    Refinement sat check:                            406.918s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.118s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.395s
  Precision update:                                    0.553s
  ARG update:                                          1.591s

Length of refined path (in blocks):                  247242 (count: 1276, min: 6, max: 358, avg: 193.76)
Number of affected states:                            47304 (count: 1276, min: 1, max: 195, avg: 37.07)
Length (states) of path with itp 'true':             198662 (count: 1276, min: 1, max: 338, avg: 155.69)
Length (states) of path with itp non-trivial itp:     47304 (count: 1276, min: 1, max: 195, avg: 37.07)
Length (states) of path with itp 'false':              1276 (count: 1276, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        2700 (count: 1276, min: 0, max: 10, avg: 2.12)
Equal non-trivial interpolants along paths:           43328 (count: 1276, min: 0, max: 194, avg: 33.96)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1277
Number of successful refinements:     1276
Number of failed refinements:         0
Max. size of reached set before ref.: 17947
Max. size of reached set after ref.:  16404
Avg. size of reached set before ref.: 7427.76
Avg. size of reached set after ref.:  6595.59

Total time for CEGAR algorithm:     894.758s
Time for refinements:               565.306s
Average time for refinement:          0.442s
Max time for refinement:              1.353s

Code Coverage
-----------------------------
  Function coverage:      0.689
  Visited lines:          1693
  Total lines:            2287
  Line coverage:          0.740
  Visited conditions:     408
  Total conditions:       700
  Condition coverage:     0.583

CPAchecker general statistics
-----------------------------
Number of program locations:     3181
Number of CFA edges:             3629
Number of relevant variables:    468
Number of functions:             103
Number of loops:                 22
Size of reached set:             14722
  Number of reached locations:   1113 (35%)
    Avg states per location:     13
    Max states per location:     363 (at node N3208)
  Number of reached functions:   71 (69%)
  Number of partitions:          14481
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N2906 (before line 6037), Function alsa_mixer_oss_init called from node N2947, stack depth 2 [16a3d61d], stack [main, alsa_mixer_oss_init]])
  Number of target states:       1
  Size of final wait list        20

Time for analysis setup:          5.580s
  Time for loading CPAs:          0.988s
  Time for loading parser:        0.731s
  Time for CFA construction:      3.725s
    Time for parsing file(s):     1.001s
    Time for AST to CFA:          1.325s
    Time for CFA sanity check:    0.275s
    Time for post-processing:     0.928s
      Time for var class.:        0.435s
Time for Analysis:              894.758s
CPU time for analysis:          894.570s
Total time for CPAchecker:      900.342s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              0.316s

Time for Garbage Collector:      11.460s (in 1134 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                178MB (   169 MiB) max;     92MB (    87 MiB) avg;    180MB (   172 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           182MB (   173 MiB) max;    150MB (   143 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8963MB (  8548 MiB) max;   8559MB (  8163 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
