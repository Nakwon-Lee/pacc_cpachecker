scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_670x-ko--107_1a--adbbc36.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_frm28g86/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 1687: Dead code detected: [size > 8192UL] (CFACreationUtils.addEdgeToCFA, INFO)

line 1687: Dead code detected: [!(size > 8192UL)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1688: Dead code detected: tmp = kmalloc_large(size, flags); (CFACreationUtils.addEdgeToCFA, INFO)

line 1693: Dead code detected: [(flags & 1U) == 0U] (CFACreationUtils.addEdgeToCFA, INFO)

line 1693: Dead code detected: [!((flags & 1U) == 0U)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1694: Dead code detected: tmp___0 = kmalloc_slab(size); (CFACreationUtils.addEdgeToCFA, INFO)

line 1696: Dead code detected: [!(((unsigned long)s) == ((unsigned long)((struct kmem_cache *)0)))] (CFACreationUtils.addEdgeToCFA, INFO)

line 1697: Dead code detected: return (16); (CFACreationUtils.addEdgeToCFA, INFO)

line 1701: Dead code detected: ret = kmem_cache_alloc_notrace(s, flags); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 1497-1502: Function pointer *((void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ))it_func) with type void (*)(void *, unsigned long, const void *, size_t , size_t , gfp_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_unsetup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_list_devices to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            103 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  84 (82%)
  Because of loop head:            13 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (6%)
  Times precision was empty:       87 (84%)
  Times precision was {false}:     3 (3%)
  Times result was cached:         10 (10%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3 (3%)
  Times result was 'false':        6 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         41
  BDD entailment checks:           17
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       15
Number of predicates discovered:          4
Number of abstraction locations:          4
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         16
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.67
Number of irrelevant predicates:          10 (63%)
Number of preds handled by boolean abs:   3 (19%)
  Total number of models for allsat:      3
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  0.478s
  Time for path formula creation:        0.459s
Time for strengthen operator:            0.011s
Time for prec operator:                  0.067s
  Time for abstraction:                  0.029s (Max:     0.014s, Count: 103)
    Boolean abstraction:                 0.008s
    Solving time:                        0.001s (Max:     0.001s)
    Model enumeration time:              0.000s
    Time for BDD construction:           0.006s (Max:     0.006s)
Time for merge operator:                 0.012s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.001s

Number of path formula cache hits:   73 (9%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.445s

Total number of created targets for pointer analysis: 4
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *(struct_mite_struct)* is 2


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                           0 (count: 146, min: 0, max: 0, avg: 0.00)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.050s
Automaton transfers with branching:                0
Automaton transfer successors:                          807 (count: 807, min: 1, max: 1, avg: 1.00) [1 x 807]

CPA algorithm statistics
------------------------
Number of iterations:            313
Max size of waitlist:            5
Average size of waitlist:        2
Number of computed successors:   351
Max successors for one state:    2
Number of times merged:          12
Number of times stopped:         29
Number of times breaked:         6

Total time for CPA algorithm:         0.868s (Max:     0.355s)
  Time for choose from waitlist:      0.001s
  Time for precision adjustment:      0.157s
  Time for transfer relation:         0.654s
  Time for merge operator:            0.014s
  Time for stop operator:             0.012s
  Time for adding to reached set:     0.008s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  63 (count: 6, min: 7, max: 14, avg: 10.50)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.095s
  Counterexample analysis:                             0.069s (Max:     0.021s, Calls: 6)
    Refinement sat check:                              0.037s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.003s
  ARG update:                                          0.004s

Length of refined path (in blocks):                      57 (count: 6, min: 6, max: 13, avg: 9.50)
Number of affected states:                                6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                 45 (count: 6, min: 4, max: 11, avg: 7.50)
Length (states) of path with itp non-trivial itp:         6 (count: 6, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 6, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 106
Max. size of reached set after ref.:  97
Avg. size of reached set before ref.: 69.83
Avg. size of reached set after ref.:  58.50

Total time for CEGAR algorithm:       0.980s
Time for refinements:                 0.112s
Average time for refinement:          0.018s
Max time for refinement:              0.046s

Code Coverage
-----------------------------
  Function coverage:      0.528
  Visited lines:          481
  Total lines:            653
  Line coverage:          0.737
  Visited conditions:     62
  Total conditions:       142
  Condition coverage:     0.437

CPAchecker general statistics
-----------------------------
Number of program locations:     904
Number of CFA edges:             975
Number of relevant variables:    121
Number of functions:             36
Number of loops:                 8
Size of reached set:             249
  Number of reached locations:   201 (22%)
    Avg states per location:     1
    Max states per location:     5 (at node N341)
  Number of reached functions:   19 (53%)
  Number of partitions:          249
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.776s
  Time for loading CPAs:          0.857s
  Time for loading parser:        0.725s
  Time for CFA construction:      2.056s
    Time for parsing file(s):     0.689s
    Time for AST to CFA:          0.625s
    Time for CFA sanity check:    0.098s
    Time for post-processing:     0.482s
      Time for var class.:        0.233s
Time for Analysis:                0.980s
CPU time for analysis:            0.980s
Time for analyzing result:        0.000s
Total time for CPAchecker:        4.771s
Total CPU time for CPAchecker:    4.760s
Time for statistics:              0.095s

Time for Garbage Collector:       0.122s (in 5 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 46MB (    44 MiB) max;     27MB (    26 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             32MB (    31 MiB) max;     24MB (    23 MiB) avg;     34MB (    32 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        35MB (    33 MiB) max;     25MB (    24 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8019MB (  7648 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
