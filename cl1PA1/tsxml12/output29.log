scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-commit-tester/main3_true-unreach-call_drivers-media-video-tlg2300-poseidon-ko--32_7a--4a349aa-1_false-termination.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lfd2s4x4/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5250: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5253: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5256: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_1982;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6886: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6891: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6896: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29173;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29173;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29173;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29173;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6985: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6990: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6995: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29212;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29212;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29212;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29212;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7433: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7438: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7443: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_29340;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_29340;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_29340;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_29340;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8231: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9085: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9250: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9255: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 9260: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_25814;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_25814;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_25814;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_25814;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10048: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10053: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10058: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_26025;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_26025;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_26025;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_26025;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10224: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10461: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10466: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10471: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28568;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28568;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28568;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28568;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10691: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10696: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10701: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28619;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28619;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28619;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28619;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10790: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10795: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 10800: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __ptr = (u8 volatile *)(& tmp->state);
  __asm__ volatile ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
  goto ldv_28648;
  case 2UL:
  tmp___0 = get_current();
  __ptr___0 = (u16 volatile *)(& tmp___0->state);
  __asm__ volatile ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
  goto ldv_28648;
  case 4UL:
  tmp___1 = get_current();
  __ptr___1 = (u32 volatile *)(& tmp___1->state);
  __asm__ volatile ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
  goto ldv_28648;
  case 8UL:
  tmp___2 = get_current();
  __ptr___2 = (u64 volatile *)(& tmp___2->state);
  __asm__ volatile ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
  goto ldv_28648;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11363: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12581: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 11164: Destroying the void* pointer ldv_successful_malloc::p produces garbage or the memory pointed by it is unused: v4l2_querymenu_p1 = ldv_successful_malloc(44); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11167: Destroying the void* pointer ldv_successful_malloc::p produces garbage or the memory pointed by it is unused: v4l2_control_p1 = ldv_successful_malloc(8); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function video_devdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function v4l2_ctrl_query_fill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            4020 (10% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3304 (82%)
  Because of loop head:            638 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         78 (2%)
  Times precision was empty:       1867 (46%)
  Times precision was {false}:     119 (3%)
  Times result was cached:         1865 (46%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      169 (4%)
  Times result was 'false':        154 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         3641
  BDD entailment checks:           799
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       139
Number of predicates discovered:          8
Number of abstraction locations:          63
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         2669
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 9.27
Number of irrelevant predicates:          1146 (43%)
Number of preds handled by boolean abs:   226 (8%)
  Total number of models for allsat:      169
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.337s
  Time for path formula creation:        4.291s
Time for strengthen operator:            0.089s
Time for prec operator:                  7.491s
  Time for abstraction:                  7.249s (Max:     0.526s, Count: 4020)
    Boolean abstraction:                 3.321s
    Solving time:                        4.179s (Max:     0.482s)
    Model enumeration time:              0.152s
    Time for BDD construction:           0.021s (Max:     0.008s)
Time for merge operator:                 0.123s
Time for coverage check:                 0.033s
  Time for BDD entailment checks:        0.024s
Total time for SMT solver (w/o itp):     4.331s

Number of path formula cache hits:   37699 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.882s

Total number of created targets for pointer analysis: 67251
   Number of created targets for uf: *(void)* is 2
   Number of created targets for uf: *signed_char is 101
   Number of created targets for uf: *(struct_v4l2_ext_control)* is 2
   Number of created targets for uf: *signed_int is 132
   Number of created targets for uf: *(struct_list_head)* is 11
   Number of created targets for uf: *(struct_file)* is 2
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_poseidon)*],_VarArgs:_false)* is 3
   Number of created targets for uf: *unsigned_int is 15


Number of BDD nodes:                               218
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         423 (count: 4337, min: 0, max: 122, avg: 0.10)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.286s
Automaton transfers with branching:                0
Automaton transfer successors:                        38877 (count: 38877, min: 1, max: 1, avg: 1.00) [1 x 38877]

CPA algorithm statistics
------------------------
Number of iterations:            17510
Max size of waitlist:            40
Average size of waitlist:        21
Number of computed successors:   20239
Max successors for one state:    2
Number of times merged:          1421
Number of times stopped:         2145
Number of times breaked:         78

Total time for CPA algorithm:        14.657s (Max:     1.297s)
  Time for choose from waitlist:      0.072s
  Time for precision adjustment:      7.959s
  Time for transfer relation:         5.795s
  Time for merge operator:            0.227s
  Time for stop operator:             0.143s
  Time for adding to reached set:     0.131s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   78
Avg. length of target path (in blocks):                3476 (count: 78, min: 32, max: 58, avg: 44.56)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   8.139s
  Counterexample analysis:                             7.866s (Max:     0.376s, Calls: 78)
    Refinement sat check:                              6.900s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.062s
  Precision update:                                    0.060s
  ARG update:                                          0.088s

Length of refined path (in blocks):                    3311 (count: 77, min: 31, max: 57, avg: 43.00)
Number of affected states:                              764 (count: 77, min: 3, max: 22, avg: 9.92)
Length (states) of path with itp 'true':               2470 (count: 77, min: 27, max: 34, avg: 32.08)
Length (states) of path with itp non-trivial itp:       764 (count: 77, min: 3, max: 22, avg: 9.92)
Length (states) of path with itp 'false':                77 (count: 77, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 77, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             687 (count: 77, min: 2, max: 21, avg: 8.92)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                78
Number of successful refinements:     77
Number of failed refinements:         0
Max. size of reached set before ref.: 1286
Max. size of reached set after ref.:  869
Avg. size of reached set before ref.: 630.65
Avg. size of reached set after ref.:  405.84

Total time for CEGAR algorithm:      23.014s
Time for refinements:                 8.336s
Average time for refinement:          0.106s
Max time for refinement:              0.391s

Code Coverage
-----------------------------
  Function coverage:      0.123
  Visited lines:          1565
  Total lines:            4921
  Line coverage:          0.318
  Visited conditions:     166
  Total conditions:       1216
  Condition coverage:     0.137

CPAchecker general statistics
-----------------------------
Number of program locations:     6914
Number of CFA edges:             7728
Number of relevant variables:    977
Number of functions:             317
Number of loops:                 37
Size of reached set:             928
  Number of reached locations:   505 (7%)
    Avg states per location:     1
    Max states per location:     16 (at node N5115)
  Number of reached functions:   39 (12%)
  Number of partitions:          927
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N4431 (before line 10717), Function tlg_fm_vidioc_g_tuner called from node N4947, stack depth 2 [2d28114b], stack [main, tlg_fm_vidioc_g_tuner]])
  Number of target states:       1
  Size of final wait list        20

Time for analysis setup:          7.253s
  Time for loading CPAs:          1.126s
  Time for loading parser:        0.701s
  Time for CFA construction:      5.284s
    Time for parsing file(s):     1.259s
    Time for AST to CFA:          2.018s
    Time for CFA sanity check:    0.435s
    Time for post-processing:     1.398s
      Time for var class.:        0.682s
Time for Analysis:               23.015s
CPU time for analysis:           23.010s
Total time for CPAchecker:       30.276s
Total CPU time for CPAchecker:   30.260s
Time for statistics:              0.114s

Time for Garbage Collector:       0.432s (in 43 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 73MB (    69 MiB) max;     51MB (    49 MiB) avg;     77MB (    73 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
