scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--mtd--ubi--ubi.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_t9g03631/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3471: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3474: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3477: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4805: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6100: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8488: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9433: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9436: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9442: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25764;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25764;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25764;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25764;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25764;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9506: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9509: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9515: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp));
  goto ldv_25779;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp));
  goto ldv_25779;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp));
  goto ldv_25779;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp));
  goto ldv_25779;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int32_t *)argp));
  goto ldv_25779;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9536: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9539: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9545: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp));
  goto ldv_25790;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp));
  goto ldv_25790;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp));
  goto ldv_25790;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp));
  goto ldv_25790;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((int32_t *)argp));
  goto ldv_25790;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10082: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 10085: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 10091: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_25890;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_25890;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_25890;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_25890;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
  goto ldv_25890;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10123: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10126: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10132: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25902;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25902;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25902;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25902;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25902;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10337: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 10340: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 10346: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_25932;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_25932;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_25932;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_25932;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int32_t *)argp): "ebx");
    goto ldv_25932;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 10374: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10377: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10383: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25944;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25944;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25944;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25944;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int32_t *)argp));
  goto ldv_25944;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10673: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11831: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13892: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16073: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18596: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 18601: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 18606: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      tmp___3 = get_current();
      __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___3->state): : "memory",
                           "cc");
      goto ldv_23898;
      case 2UL:
      tmp___4 = get_current();
      __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                           "cc");
      goto ldv_23898;
      case 4UL:
      tmp___5 = get_current();
      __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                           "cc");
      goto ldv_23898;
      case 8UL:
      tmp___6 = get_current();
      __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                           "cc");
      goto ldv_23898;
      default:
      __xchg_wrong_size();
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 19304: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21855: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 22140: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 22822: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 25414: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 10872: Function pointer *(mtd->_sync) with type void (*)(struct mtd_info *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7084: Function pointer *(nb->notifier_call) with type int (*)(struct notifier_block *, unsigned long, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dump_stack to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blocking_notifier_call_chain to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7084: Ignoring function call through function pointer *(nb->notifier_call): (*(nb->notifier_call))(nb, (unsigned long)ntype, (void *)(&nt)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function rb_first to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdev_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_chrdev_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 18681: Ignoring function call through function pointer *(wrk->func): (*(wrk->func))(ubi, wrk, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function kmem_cache_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_mtd_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_last to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_next to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_erase to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17442: Destroying the void* pointer ubi_zalloc_vid_hdr::vid_hdr produces garbage or the memory pointed by it is unused: vid_hdr = ubi_zalloc_vid_hdr((const struct ubi_device *)ubi, 80U); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 22881: Destroying the void* pointer ubi_zalloc_vid_hdr::vid_hdr produces garbage or the memory pointed by it is unused: new = ubi_zalloc_vid_hdr((const struct ubi_device *)ubi, 208U); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function up_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_insert_color to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_le to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2113742 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1857992 (88%)
  Because of loop head:            249905 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         5845 (0%)
  Times precision was empty:       205248 (10%)
  Times precision was {false}:     1236 (0%)
  Times result was cached:         1895457 (90%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11801 (1%)
  Times result was 'false':        43015 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         980544
  BDD entailment checks:           461166
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       86
Number of predicates discovered:          16
Number of abstraction locations:          296
Max number of predicates per location:    13
Avg number of predicates per location:    11
Total predicates per abstraction:         20878087
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 1601.45
Number of irrelevant predicates:          12670384 (61%)
Number of preds handled by boolean abs:   69679 (0%)
  Total number of models for allsat:      11698
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.99

Time for post operator:                 40.343s
  Time for path formula creation:       37.514s
Time for strengthen operator:            7.001s
Time for prec operator:                329.421s
  Time for abstraction:                313.991s (Max:     0.030s, Count: 2113742)
    Boolean abstraction:                 7.420s
    Solving time:                        6.331s (Max:     0.014s)
    Model enumeration time:              0.503s
    Time for BDD construction:           0.215s (Max:     0.008s)
Time for merge operator:                 1.361s
Time for coverage check:                 0.500s
  Time for BDD entailment checks:        0.355s
Total time for SMT solver (w/o itp):     6.834s

Number of path formula cache hits:   14687573 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.877s

Total number of created targets for pointer analysis: 15532
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_ubi_device)*],_Parameter_2_type:_[(struct_ubi_work)*],_Parameter_3_type:_[signed_int],_VarArgs:_false)* is 97
   Number of created targets for uf: *(struct_ubi_wl_entry)* is 301
   Number of created targets for uf: *signed_int is 45
   Number of created targets for uf: *unsigned_char is 217
   Number of created targets for uf: *(struct_ubi_device)* is 61
   Number of created targets for uf: *unsigned_long_long_int is 3
   Number of created targets for uf: *unsigned_int is 36


Number of BDD nodes:                               1426
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       25336 (count: 744311, min: 0, max: 429, avg: 0.03)
Time for BDD node cleanup:                             0.115s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 11.368s
  Time for transition matches:                         6.767s
  Time for transition assertions:                      0.010s
  Time for transition actions:                         0.027s
Automaton transfers with branching:                0
Automaton transfer successors:                     12559572 (count: 12559572, min: 1, max: 1, avg: 1.00) [1 x 12559572]

CPA algorithm statistics
------------------------
Number of iterations:            6754400
Max size of waitlist:            149
Average size of waitlist:        59
Number of computed successors:   7573637
Max successors for one state:    2
Number of times merged:          259689
Number of times stopped:         544564
Number of times breaked:         5845

Total time for CPA algorithm:       708.246s (Max:     1.162s)
  Time for choose from waitlist:      1.642s
  Time for precision adjustment:    354.038s
  Time for transfer relation:       327.894s
  Time for merge operator:            3.552s
  Time for stop operator:             5.147s
  Time for adding to reached set:     5.488s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5845
Avg. length of target path (in blocks):              770391 (count: 5845, min: 9, max: 195, avg: 131.80)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 164.720s
  Counterexample analysis:                           147.553s (Max:     0.090s, Calls: 5845)
    Refinement sat check:                             69.964s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.333s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.056s
  Precision update:                                    5.267s
  ARG update:                                          8.200s

Length of refined path (in blocks):                  574724 (count: 5845, min: 8, max: 190, avg: 98.33)
Number of affected states:                           232730 (count: 5845, min: 5, max: 188, avg: 39.82)
Length (states) of path with itp 'true':             336149 (count: 5845, min: 1, max: 180, avg: 57.51)
Length (states) of path with itp non-trivial itp:    232730 (count: 5845, min: 5, max: 188, avg: 39.82)
Length (states) of path with itp 'false':              5845 (count: 5845, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 5845, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          226885 (count: 5845, min: 4, max: 187, avg: 38.82)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5845
Number of successful refinements:     5845
Number of failed refinements:         0
Max. size of reached set before ref.: 6192
Max. size of reached set after ref.:  6119
Avg. size of reached set before ref.: 3120.44
Avg. size of reached set after ref.:  1925.90

Total time for CEGAR algorithm:     893.072s
Time for refinements:               178.935s
Average time for refinement:          0.030s
Max time for refinement:              0.106s

Code Coverage
-----------------------------
  Function coverage:      0.151
  Visited lines:          1971
  Total lines:            14352
  Line coverage:          0.137
  Visited conditions:     306
  Total conditions:       4304
  Condition coverage:     0.071

CPAchecker general statistics
-----------------------------
Number of program locations:     19340
Number of CFA edges:             23101
Number of relevant variables:    3335
Number of functions:             524
Number of loops:                 168
Size of reached set:             3978
  Number of reached locations:   1031 (5%)
    Avg states per location:     3
    Max states per location:     160 (at node N19217)
  Number of reached functions:   79 (15%)
  Number of partitions:          3978
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        69

Time for analysis setup:          7.252s
  Time for loading CPAs:          0.890s
  Time for loading parser:        0.475s
  Time for CFA construction:      5.766s
    Time for parsing file(s):     1.023s
    Time for AST to CFA:          2.054s
    Time for CFA sanity check:    0.690s
    Time for post-processing:     1.784s
      Time for var class.:        0.977s
Time for Analysis:              893.072s
CPU time for analysis:          892.990s
Total time for CPAchecker:      900.327s
Total CPU time for CPAchecker:  900.220s
Time for statistics:              0.162s

Time for Garbage Collector:      26.014s (in 4511 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                215MB (   205 MiB) max;    139MB (   132 MiB) avg;    233MB (   222 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           274MB (   261 MiB) max;    203MB (   193 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   8219MB (  7838 MiB) max;   8156MB (  7778 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
