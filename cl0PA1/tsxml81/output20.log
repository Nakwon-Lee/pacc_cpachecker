scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--tuners--tda18271.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7j8tztge/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4795: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5973: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8196: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7059: Function pointer *(fe->callback) with type int (*)(void *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7187: Function pointer *(fe->ops.analog_ops.standby) with type void (*)(struct dvb_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5610-5611: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_standby_mode", "sm = %d, sm_lt = %d, sm_xt = %d\n", sm, sm_lt, sm_xt) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function i2c_unlock_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5362-5363: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "__tda18271_write_regs", "ERROR: idx = 0x%x, len = %d, i2c_transfer returned: %d\n", idx, max, ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6987: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 871) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5196-5197: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_read_regs", "ERROR: i2c_transfer returned: %d\n", ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6955-6956: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_ir_cal_init", "error %d on line %d\n", ret, 852) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6999: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 876) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6602-6603: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan_init", "error %d on line %d\n", ret, 591) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6758-6759: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_rf_filter_curve", "error %d on line %d\n", ret, 694) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6821-6822: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_cal_init", "error %d on line %d\n", ret, 727) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6376: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 353) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6834-6835: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271c2_rf_cal_init", "error %d on line %d\n", ret, 731) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6616-6617: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_powerscan_init", "error %d on line %d\n", ret, 596) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4434-4435: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_rf_band", "(%d) rf_band = %02x\n", i, __CPAchecker_TMP_1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4402-4408: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_lookup_rf_band", "(%d) rfmax = %d < freq = %d, rf1_def = %d, rf2_def = %d, rf3_def = %d, rf1 = %d, rf2 = %d, rf3 = %d, rf_a1 = %d, rf_a2 = %d, rf_b1 = %d, rf_b2 = %d\n", i, ((map + ((unsigned long)i))->rfmax) * 1000U, *freq, (map + ((unsigned long)i))->rf1_def, (map + ((unsigned long)i))->rf2_def, (map + ((unsigned long)i))->rf3_def, (map + ((unsigned long)i))->rf1, (map + ((unsigned long)i))->rf2, (map + ((unsigned long)i))->rf3, (map + ((unsigned long)i))->rf_a1, (map + ((unsigned long)i))->rf_a2, (map + ((unsigned long)i))->rf_b1, (map + ((unsigned long)i))->rf_b2) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6658-6659: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_rf_tracking_filters_init", "error %d on line %d\n", i, 627) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6774-6775: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_calc_rf_filter_curve", "error %d on line %d\n", ret, 702) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6680-6681: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_rf_tracking_filters_init", "freq = %d, rf = %d\n", freq, rf) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5899: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6390: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 359) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6403: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_por", "error %d on line %d\n", ret, 366) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1938 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1696 (88%)
  Because of loop head:            188 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         54 (3%)
  Times precision was empty:       963 (50%)
  Times precision was {false}:     112 (6%)
  Times result was cached:         784 (40%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      79 (4%)
  Times result was 'false':        83 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         1066
  BDD entailment checks:           302
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          4
Number of abstraction locations:          48
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         1221
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 6.39
Number of irrelevant predicates:          707 (58%)
Number of preds handled by boolean abs:   105 (9%)
  Total number of models for allsat:      79
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.039s
  Time for path formula creation:        2.013s
Time for strengthen operator:            0.049s
Time for prec operator:                  6.974s
  Time for abstraction:                  6.856s (Max:     0.430s, Count: 1938)
    Boolean abstraction:                 0.882s
    Solving time:                        6.097s (Max:     0.421s)
    Model enumeration time:              0.050s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                 0.117s
Time for coverage check:                 0.018s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     6.147s

Number of path formula cache hits:   6632 (56%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.939s

Total number of created targets for pointer analysis: 14168
   Number of created targets for uf: *signed_int is 517
   Number of created targets for uf: *unsigned_char is 363
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 266


Number of BDD nodes:                               203
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         172 (count: 2325, min: 0, max: 110, avg: 0.07)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.111s
Automaton transfers with branching:                0
Automaton transfer successors:                        10559 (count: 10559, min: 1, max: 1, avg: 1.00) [1 x 10559]

CPA algorithm statistics
------------------------
Number of iterations:            7290
Max size of waitlist:            83
Average size of waitlist:        30
Number of computed successors:   8412
Max successors for one state:    2
Number of times merged:          382
Number of times stopped:         548
Number of times breaked:         54

Total time for CPA algorithm:        10.216s (Max:     1.676s)
  Time for choose from waitlist:      0.030s
  Time for precision adjustment:      7.239s
  Time for transfer relation:         2.552s
  Time for merge operator:            0.143s
  Time for stop operator:             0.108s
  Time for adding to reached set:     0.052s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   54
Avg. length of target path (in blocks):                1915 (count: 54, min: 8, max: 124, avg: 35.46)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.669s
  Counterexample analysis:                            15.521s (Max:     1.161s, Calls: 54)
    Refinement sat check:                             14.590s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.009s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.030s
  ARG update:                                          0.036s

Length of refined path (in blocks):                    1547 (count: 53, min: 7, max: 99, avg: 29.19)
Number of affected states:                              356 (count: 53, min: 0, max: 37, avg: 6.72)
Length (states) of path with itp 'true':               1138 (count: 53, min: 1, max: 98, avg: 21.47)
Length (states) of path with itp non-trivial itp:       356 (count: 53, min: 0, max: 37, avg: 6.72)
Length (states) of path with itp 'false':                53 (count: 53, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 53, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             312 (count: 53, min: 0, max: 36, avg: 5.89)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                54
Number of successful refinements:     53
Number of failed refinements:         0
Max. size of reached set before ref.: 1220
Max. size of reached set after ref.:  1014
Avg. size of reached set before ref.: 376.06
Avg. size of reached set after ref.:  236.32

Total time for CEGAR algorithm:      26.027s
Time for refinements:                15.799s
Average time for refinement:          0.292s
Max time for refinement:              1.164s

Code Coverage
-----------------------------
  Function coverage:      0.303
  Visited lines:          1099
  Total lines:            3050
  Line coverage:          0.360
  Visited conditions:     176
  Total conditions:       906
  Condition coverage:     0.194

CPAchecker general statistics
-----------------------------
Number of program locations:     4267
Number of CFA edges:             5026
Number of relevant variables:    590
Number of functions:             132
Number of loops:                 19
Size of reached set:             1220
  Number of reached locations:   479 (11%)
    Avg states per location:     2
    Max states per location:     27 (at node N1324)
  Number of reached functions:   40 (30%)
  Number of partitions:          1215
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3333 (before line 8143), Function main called from node N3259, stack depth 1 [413bef78], stack [main]])
  Number of target states:       1
  Size of final wait list        81

Time for analysis setup:          3.835s
  Time for loading CPAs:          0.615s
  Time for loading parser:        0.429s
  Time for CFA construction:      2.713s
    Time for parsing file(s):     0.641s
    Time for AST to CFA:          1.052s
    Time for CFA sanity check:    0.194s
    Time for post-processing:     0.691s
      Time for var class.:        0.368s
Time for Analysis:               26.027s
CPU time for analysis:           26.020s
Total time for CPAchecker:       29.865s
Total CPU time for CPAchecker:   29.850s
Time for statistics:              0.109s

Time for Garbage Collector:       0.208s (in 17 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 68MB (    64 MiB) max;     49MB (    47 MiB) avg;     72MB (    68 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     36MB (    35 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8027MB (  7655 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
