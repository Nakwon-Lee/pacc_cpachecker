scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--tuners--tda18271.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_oye3af2g/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4795: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5973: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8196: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 7059: Function pointer *(fe->callback) with type int (*)(void *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7187: Function pointer *(fe->ops.analog_ops.standby) with type void (*)(struct dvb_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7261-7262: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_analog_params", "setting tda18271 to system %s\n", mode) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7182: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_set_params", "modulation type not supported!\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7187: Ignoring function call through function pointer *(fe->ops.analog_ops.standby): (*(fe->ops.analog_ops.standby))(fe); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5899: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7086-7087: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_tune", "freq = %d, ifc = %d, bw = %d, agc_mode = %d, std = %d\n", freq, __CPAchecker_TMP_1, bw, __CPAchecker_TMP_2, __CPAchecker_TMP_3) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7508-7509: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"fm") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7526-7527: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv b") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7544-7545: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv dk") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7562-7563: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv gh") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7580-7581: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv i") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7598-7599: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv l") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7616-7617: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv l\'") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7634-7635: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atv mn") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7652-7653: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"atsc 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7670-7671: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7688-7689: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 7") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7706-7707: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"dvbt 8") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7724-7725: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"qam 6") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 7742-7743: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_update_std_map", "Using custom std config for %s\n", (char *)"qam 8") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7067: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_agc", "unsupported configuration: %d\n", priv->config) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7053: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_agc", "invoking callback\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7059: Ignoring function call through function pointer *(fe->callback): ret = (*(fe->callback))(priv->i2c_props.adap->algo_data, 0, 0, __CPAchecker_TMP_2); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7043: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_agc", "no agc configuration provided\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7094: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_tune", "error %d on line %d\n", ret, 945) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7099: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\f", "tda18271_tune", "failed to configure agc\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5610-5611: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_set_standby_mode", "sm = %d, sm_lt = %d, sm_xt = %d\n", sm, sm_lt, sm_xt) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_unlock_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5362-5363: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "__tda18271_write_regs", "ERROR: idx = 0x%x, len = %d, i2c_transfer returned: %d\n", idx, max, ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6987: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 871) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5196-5197: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_read_regs", "ERROR: i2c_transfer returned: %d\n", ret) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6955-6956: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_ir_cal_init", "error %d on line %d\n", ret, 852) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6999: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_init", "error %d on line %d\n", ret, 876) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4926: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "=== TDA18271 REG DUMP ===\n") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4931-4932: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "ID_BYTE            = 0x%02x\n", (int)(*regs)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4937-4938: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "THERMO_BYTE        = 0x%02x\n", (int)(*(regs + 1UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4943-4944: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "POWER_LEVEL_BYTE   = 0x%02x\n", (int)(*(regs + 2UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4949-4950: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_1   = 0x%02x\n", (int)(*(regs + 3UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4955-4956: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_2   = 0x%02x\n", (int)(*(regs + 4UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4961-4962: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_3   = 0x%02x\n", (int)(*(regs + 5UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4967-4968: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_4   = 0x%02x\n", (int)(*(regs + 6UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4973-4974: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EASY_PROG_BYTE_5   = 0x%02x\n", (int)(*(regs + 7UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4979-4980: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_POST_DIV_BYTE  = 0x%02x\n", (int)(*(regs + 8UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4985-4986: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_1     = 0x%02x\n", (int)(*(regs + 9UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4991-4992: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_2     = 0x%02x\n", (int)(*(regs + 10UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4997-4998: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "CAL_DIV_BYTE_3     = 0x%02x\n", (int)(*(regs + 11UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5003-5004: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_POST_DIV_BYTE = 0x%02x\n", (int)(*(regs + 12UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5009-5010: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_1    = 0x%02x\n", (int)(*(regs + 13UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5015-5016: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_2    = 0x%02x\n", (int)(*(regs + 14UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5021-5022: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "MAIN_DIV_BYTE_3    = 0x%02x\n", (int)(*(regs + 15UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5032-5033: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_1    = 0x%02x\n", (int)(*(regs + 16UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5038-5039: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_2    = 0x%02x\n", (int)(*(regs + 17UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5044-5045: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_3    = 0x%02x\n", (int)(*(regs + 18UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5050-5051: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_4    = 0x%02x\n", (int)(*(regs + 19UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5056-5057: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_5    = 0x%02x\n", (int)(*(regs + 20UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5062-5063: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_6    = 0x%02x\n", (int)(*(regs + 21UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5068-5069: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_7    = 0x%02x\n", (int)(*(regs + 22UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5074-5075: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_8    = 0x%02x\n", (int)(*(regs + 23UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5080-5081: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_9  W = 0x%02x\n", (int)(*(regs + 24UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5086-5087: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_10   = 0x%02x\n", (int)(*(regs + 25UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5092-5093: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_11   = 0x%02x\n", (int)(*(regs + 26UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5098-5099: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_12   = 0x%02x\n", (int)(*(regs + 27UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5104-5105: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_13   = 0x%02x\n", (int)(*(regs + 28UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5110-5111: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_14   = 0x%02x\n", (int)(*(regs + 29UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5116-5117: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_15   = 0x%02x\n", (int)(*(regs + 30UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5122-5123: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_16 W = 0x%02x\n", (int)(*(regs + 31UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5128-5129: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_17 W = 0x%02x\n", (int)(*(regs + 32UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5134-5135: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_18   = 0x%02x\n", (int)(*(regs + 33UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5140-5141: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_19 W = 0x%02x\n", (int)(*(regs + 34UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5146-5147: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_20 W = 0x%02x\n", (int)(*(regs + 35UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5152-5153: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_21   = 0x%02x\n", (int)(*(regs + 36UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5158-5159: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_22   = 0x%02x\n", (int)(*(regs + 37UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5164-5165: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_dump_regs", "EXTENDED_BYTE_23   = 0x%02x\n", (int)(*(regs + 38UL))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 5418-5419: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_init_regs", "initializing registers for device @ %d-%04x\n", tmp, (int)(priv->i2c_props.addr)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function i2c_lock_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 6085-6086: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\v", "tda18271_toggle_output", "error %d on line %d\n", ret, 87) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 6096-6098: Ignoring parameters passed as varargs to function _tda_printk: _tda_printk(priv, "\017", "tda18271_toggle_output", "%s mode: xtal oscillator %s, slave tuner loop thru %s\n", __CPAchecker_TMP_3, __CPAchecker_TMP_5, __CPAchecker_TMP_7) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 4904: Unsupported feature (recursion): ret = tda18271_set_config(fe, enable); (line was originally pointer call(tda18271_set_config) ret = (*(fe->ops.i2c_gate_ctrl))(fe, enable);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            731795 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  666044 (91%)
  Because of loop head:            64518 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1233 (0%)
  Times precision was empty:       36143 (5%)
  Times precision was {false}:     1522 (0%)
  Times result was cached:         686184 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7946 (1%)
  Times result was 'false':        327260 (45%)
Number of strengthen sat checks:   0
Number of coverage checks:         667700
  BDD entailment checks:           128044
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       76
Number of predicates discovered:          13
Number of abstraction locations:          183
Max number of predicates per location:    9
Avg number of predicates per location:    4
Total predicates per abstraction:         3938796
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 416.01
Number of irrelevant predicates:          1641608 (42%)
Number of preds handled by boolean abs:   22541 (1%)
  Total number of models for allsat:      6575
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.83

Time for post operator:                 41.022s
  Time for path formula creation:       39.899s
Time for strengthen operator:            2.746s
Time for prec operator:                422.665s
  Time for abstraction:                416.521s (Max:    14.474s, Count: 731795)
    Boolean abstraction:               207.122s
    Solving time:                      255.815s (Max:    14.389s)
    Model enumeration time:              4.696s
    Time for BDD construction:           0.152s (Max:     0.008s)
Time for merge operator:                 2.343s
Time for coverage check:                 0.198s
  Time for BDD entailment checks:        0.127s
Total time for SMT solver (w/o itp):   260.511s

Number of path formula cache hits:   5510024 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    20.032s

Total number of created targets for pointer analysis: 420635
   Number of created targets for uf: *signed_int is 33
   Number of created targets for uf: *unsigned_char is 2535
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 30563


Number of BDD nodes:                               433
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       14705 (count: 369884, min: 0, max: 214, avg: 0.04)
Time for BDD node cleanup:                             0.051s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  4.447s
  Time for transition matches:                         2.545s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                      5015556 (count: 5015556, min: 1, max: 1, avg: 1.00) [1 x 5015556]

CPA algorithm statistics
------------------------
Number of iterations:            3486182
Max size of waitlist:            1041
Average size of waitlist:        427
Number of computed successors:   4249597
Max successors for one state:    2
Number of times merged:          269828
Number of times stopped:         359510
Number of times breaked:         1233

Total time for CPA algorithm:       529.689s (Max:    15.191s)
  Time for choose from waitlist:      0.729s
  Time for precision adjustment:    437.484s
  Time for transfer relation:        77.061s
  Time for merge operator:            4.193s
  Time for stop operator:             2.444s
  Time for adding to reached set:     2.712s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1233
Avg. length of target path (in blocks):               40339 (count: 1233, min: 6, max: 203, avg: 32.72)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 273.137s
  Counterexample analysis:                           266.712s (Max:     5.010s, Calls: 1233)
    Refinement sat check:                            243.868s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.022s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.170s
  Precision update:                                    0.490s
  ARG update:                                          5.366s

Length of refined path (in blocks):                   33837 (count: 1233, min: 5, max: 202, avg: 27.44)
Number of affected states:                            15957 (count: 1233, min: 0, max: 200, avg: 12.94)
Length (states) of path with itp 'true':              16647 (count: 1233, min: 1, max: 29, avg: 13.50)
Length (states) of path with itp non-trivial itp:     15957 (count: 1233, min: 0, max: 200, avg: 12.94)
Length (states) of path with itp 'false':              1233 (count: 1233, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1233, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           14725 (count: 1233, min: 0, max: 199, avg: 11.94)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1233
Number of successful refinements:     1233
Number of failed refinements:         0
Max. size of reached set before ref.: 66714
Max. size of reached set after ref.:  66501
Avg. size of reached set before ref.: 12723.86
Avg. size of reached set after ref.:  9891.01

Total time for CEGAR algorithm:     823.293s
Time for refinements:               285.772s
Average time for refinement:          0.231s
Max time for refinement:              5.085s

Code Coverage
-----------------------------
  Function coverage:      0.326
  Visited lines:          1538
  Total lines:            3050
  Line coverage:          0.504
  Visited conditions:     410
  Total conditions:       906
  Condition coverage:     0.453

CPAchecker general statistics
-----------------------------
Number of program locations:     4267
Number of CFA edges:             5026
Number of relevant variables:    590
Number of functions:             132
Number of loops:                 19
Size of reached set:             69924
  Number of reached locations:   1032 (24%)
    Avg states per location:     67
    Max states per location:     1381 (at node N1323)
  Number of reached functions:   43 (33%)
  Number of partitions:          69569
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2398 (after line 7094), Function tda18271_tune called from node N2577, stack depth 3 [6e32c0e9], stack [main, tda18271_set_analog_params, tda18271_tune]])
  Number of target states:       0
  Size of final wait list        817

Time for analysis setup:          4.156s
  Time for loading CPAs:          0.596s
  Time for loading parser:        0.473s
  Time for CFA construction:      2.981s
    Time for parsing file(s):     0.685s
    Time for AST to CFA:          1.202s
    Time for CFA sanity check:    0.219s
    Time for post-processing:     0.767s
      Time for var class.:        0.388s
Time for Analysis:              823.293s
CPU time for analysis:          823.160s
Total time for CPAchecker:      827.453s
Total CPU time for CPAchecker:  827.310s
Time for statistics:              0.613s

Time for Garbage Collector:      29.769s (in 2046 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                270MB (   258 MiB) max;    119MB (   114 MiB) avg;    276MB (   264 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           274MB (   262 MiB) max;    180MB (   171 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8554MB (  8158 MiB) max;   8396MB (  8007 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
