scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--smscufx.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9xbxmis6/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7471: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            30034 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  24697 (82%)
  Because of loop head:            5322 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         15 (0%)
  Times precision was empty:       24177 (80%)
  Times precision was {false}:     768 (3%)
  Times result was cached:         5024 (17%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      65 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         15388
  BDD entailment checks:           6820
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       33
Number of predicates discovered:          2
Number of abstraction locations:          59
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         5857
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 7.03
Number of irrelevant predicates:          4691 (80%)
Number of preds handled by boolean abs:   65 (1%)
  Total number of models for allsat:      65
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 13.030s
  Time for path formula creation:       12.919s
Time for strengthen operator:            0.261s
Time for prec operator:                  4.132s
  Time for abstraction:                  3.355s (Max:     0.049s, Count: 30034)
    Boolean abstraction:                 0.081s
    Solving time:                        0.862s (Max:     0.017s)
    Model enumeration time:              0.002s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.404s
Time for coverage check:                 0.056s
  Time for BDD entailment checks:        0.042s
Total time for SMT solver (w/o itp):     0.864s

Number of path formula cache hits:   21903 (15%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    12.331s

Total number of created targets for pointer analysis: 39505
   Number of created targets for uf: *unsigned_int is 449


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         133 (count: 35231, min: 0, max: 32, avg: 0.00)
Time for BDD node cleanup:                             0.027s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.573s
  Time for transition matches:                         0.270s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       137979 (count: 138009, min: 0, max: 1, avg: 1.00) [0 x 30, 1 x 137979]

CPA algorithm statistics
------------------------
Number of iterations:            93616
Max size of waitlist:            54
Average size of waitlist:        29
Number of computed successors:   104765
Max successors for one state:    2
Number of times merged:          4284
Number of times stopped:         10840
Number of times breaked:         15

Total time for CPA algorithm:        25.054s (Max:     3.402s)
  Time for choose from waitlist:      0.216s
  Time for precision adjustment:      5.504s
  Time for transfer relation:        16.734s
  Time for merge operator:            0.694s
  Time for stop operator:             0.392s
  Time for adding to reached set:     0.326s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   15
Avg. length of target path (in blocks):                 281 (count: 15, min: 6, max: 45, avg: 18.73)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.736s
  Counterexample analysis:                             0.214s (Max:     0.040s, Calls: 15)
    Refinement sat check:                              0.135s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.006s
  ARG update:                                          0.468s

Length of refined path (in blocks):                     266 (count: 15, min: 5, max: 44, avg: 17.73)
Number of affected states:                              236 (count: 15, min: 3, max: 42, avg: 15.73)
Length (states) of path with itp 'true':                 15 (count: 15, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       236 (count: 15, min: 3, max: 42, avg: 15.73)
Length (states) of path with itp 'false':                15 (count: 15, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 15, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             221 (count: 15, min: 2, max: 41, avg: 14.73)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                15
Number of successful refinements:     15
Number of failed refinements:         0
Max. size of reached set before ref.: 6693
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 6080.20
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      25.979s
Time for refinements:                 0.924s
Average time for refinement:          0.061s
Max time for refinement:              0.127s

Code Coverage
-----------------------------
  Function coverage:      0.424
  Visited lines:          1401
  Total lines:            3007
  Line coverage:          0.466
  Visited conditions:     217
  Total conditions:       782
  Condition coverage:     0.277

CPAchecker general statistics
-----------------------------
Number of program locations:     4028
Number of CFA edges:             4596
Number of relevant variables:    609
Number of functions:             118
Number of loops:                 31
Size of reached set:             2813
  Number of reached locations:   656 (16%)
    Avg states per location:     4
    Max states per location:     74 (at node N3229)
  Number of reached functions:   50 (42%)
  Number of partitions:          2806
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3137 (before line 7418), Function main called from node N3012, stack depth 1 [2eadc9f6], stack [main]])
  Number of target states:       0
  Size of final wait list        35

Time for analysis setup:          3.870s
  Time for loading CPAs:          0.718s
  Time for loading parser:        0.478s
  Time for CFA construction:      2.578s
    Time for parsing file(s):     0.677s
    Time for AST to CFA:          0.828s
    Time for CFA sanity check:    0.236s
    Time for post-processing:     0.711s
      Time for var class.:        0.340s
Time for Analysis:               25.979s
CPU time for analysis:           25.980s
Total time for CPAchecker:       29.852s
Total CPU time for CPAchecker:   29.840s
Time for statistics:              0.107s

Time for Garbage Collector:       1.501s (in 62 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                122MB (   116 MiB) max;     72MB (    69 MiB) avg;    133MB (   127 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           147MB (   140 MiB) max;    130MB (   124 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8076MB (  7702 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
