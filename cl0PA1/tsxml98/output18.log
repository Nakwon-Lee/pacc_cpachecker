scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--smscufx.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_z1tddayc/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7471: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_dealloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modedb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            31572 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  25968 (82%)
  Because of loop head:            5588 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         16 (0%)
  Times precision was empty:       22641 (72%)
  Times precision was {false}:     866 (3%)
  Times result was cached:         7999 (25%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      66 (0%)
  Times result was 'false':        0 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         16250
  BDD entailment checks:           7168
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          2
Number of abstraction locations:          70
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         8931
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 9.58
Number of irrelevant predicates:          7749 (87%)
Number of preds handled by boolean abs:   66 (1%)
  Total number of models for allsat:      66
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                 13.160s
  Time for path formula creation:       13.051s
Time for strengthen operator:            0.262s
Time for prec operator:                  4.210s
  Time for abstraction:                  3.580s (Max:     0.039s, Count: 31572)
    Boolean abstraction:                 0.055s
    Solving time:                        1.015s (Max:     0.016s)
    Model enumeration time:              0.005s
    Time for BDD construction:           0.002s (Max:     0.001s)
Time for merge operator:                 0.396s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.059s
Total time for SMT solver (w/o itp):     1.020s

Number of path formula cache hits:   22359 (15%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    12.557s

Total number of created targets for pointer analysis: 41964
   Number of created targets for uf: *unsigned_int is 271


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         135 (count: 34539, min: 0, max: 30, avg: 0.00)
Time for BDD node cleanup:                             0.014s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.418s
Automaton transfers with branching:                0
Automaton transfer successors:                       145610 (count: 145640, min: 0, max: 1, avg: 1.00) [0 x 30, 1 x 145610]

CPA algorithm statistics
------------------------
Number of iterations:            98669
Max size of waitlist:            54
Average size of waitlist:        29
Number of computed successors:   110415
Max successors for one state:    2
Number of times merged:          4541
Number of times stopped:         11426
Number of times breaked:         16

Total time for CPA algorithm:        24.707s (Max:     3.328s)
  Time for choose from waitlist:      0.138s
  Time for precision adjustment:      5.368s
  Time for transfer relation:        16.642s
  Time for merge operator:            0.620s
  Time for stop operator:             0.389s
  Time for adding to reached set:     0.646s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   16
Avg. length of target path (in blocks):                 453 (count: 16, min: 16, max: 55, avg: 28.31)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.727s
  Counterexample analysis:                             0.223s (Max:     0.025s, Calls: 16)
    Refinement sat check:                              0.144s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.028s
  Precision update:                                    0.042s
  ARG update:                                          0.417s

Length of refined path (in blocks):                     437 (count: 16, min: 15, max: 54, avg: 27.31)
Number of affected states:                              405 (count: 16, min: 13, max: 52, avg: 25.31)
Length (states) of path with itp 'true':                 16 (count: 16, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       405 (count: 16, min: 13, max: 52, avg: 25.31)
Length (states) of path with itp 'false':                16 (count: 16, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 16, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             389 (count: 16, min: 12, max: 51, avg: 24.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                16
Number of successful refinements:     16
Number of failed refinements:         0
Max. size of reached set before ref.: 6780
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 6192.50
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      25.683s
Time for refinements:                 0.975s
Average time for refinement:          0.060s
Max time for refinement:              0.110s

Code Coverage
-----------------------------
  Function coverage:      0.017
  Visited lines:          660
  Total lines:            3007
  Line coverage:          0.219
  Visited conditions:     0
  Total conditions:       782
  Condition coverage:     0.000

CPAchecker general statistics
-----------------------------
Number of program locations:     4028
Number of CFA edges:             4596
Number of relevant variables:    609
Number of functions:             118
Number of loops:                 31
Size of reached set:             6
  Number of reached locations:   6 (0%)
    Avg states per location:     1
    Max states per location:     1 (at node N3012)
  Number of reached functions:   2 (2%)
  Number of partitions:          6
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        1

Time for analysis setup:          4.188s
  Time for loading CPAs:          0.704s
  Time for loading parser:        0.498s
  Time for CFA construction:      2.898s
    Time for parsing file(s):     0.693s
    Time for AST to CFA:          0.986s
    Time for CFA sanity check:    0.281s
    Time for post-processing:     0.814s
      Time for var class.:        0.397s
Time for Analysis:               25.683s
CPU time for analysis:           25.670s
Total time for CPAchecker:       29.877s
Total CPU time for CPAchecker:   29.850s
Time for statistics:              0.071s

Time for Garbage Collector:       1.625s (in 66 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                129MB (   123 MiB) max;     72MB (    69 MiB) avg;    136MB (   129 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     36MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           154MB (   147 MiB) max;    132MB (   126 MiB) avg
Allocated non-heap memory:        41MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8076MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
