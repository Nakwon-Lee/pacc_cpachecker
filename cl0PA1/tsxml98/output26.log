scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--smscufx.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1khpm0ri/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7471: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            94477 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  77686 (82%)
  Because of loop head:            16628 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         163 (0%)
  Times precision was empty:       19212 (20%)
  Times precision was {false}:     612 (1%)
  Times result was cached:         72443 (77%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2210 (2%)
  Times result was 'false':        883 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         53073
  BDD entailment checks:           21723
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       33
Number of predicates discovered:          5
Number of abstraction locations:          147
Max number of predicates per location:    4
Avg number of predicates per location:    3
Total predicates per abstraction:         214316
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 75.94
Number of irrelevant predicates:          30339 (14%)
Number of preds handled by boolean abs:   4856 (2%)
  Total number of models for allsat:      2210
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.412s
  Time for path formula creation:        3.226s
Time for strengthen operator:            0.357s
Time for prec operator:                 12.042s
  Time for abstraction:                 11.209s (Max:     0.028s, Count: 94477)
    Boolean abstraction:                 1.457s
    Solving time:                        1.668s (Max:     0.026s)
    Model enumeration time:              0.115s
    Time for BDD construction:           0.069s (Max:     0.009s)
Time for merge operator:                 0.154s
Time for coverage check:                 0.055s
  Time for BDD entailment checks:        0.046s
Total time for SMT solver (w/o itp):     1.783s

Number of path formula cache hits:   560589 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.554s

Total number of created targets for pointer analysis: 2222
   Number of created targets for uf: *unsigned_int is 15


Number of BDD nodes:                               217
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4454 (count: 57287, min: 0, max: 134, avg: 0.08)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.631s
  Time for transition matches:                         0.335s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       471797 (count: 471957, min: 0, max: 1, avg: 1.00) [0 x 160, 1 x 471797]

CPA algorithm statistics
------------------------
Number of iterations:            300306
Max size of waitlist:            23
Average size of waitlist:        10
Number of computed successors:   337921
Max successors for one state:    2
Number of times merged:          15675
Number of times stopped:         33643
Number of times breaked:         163

Total time for CPA algorithm:        23.865s (Max:     1.113s)
  Time for choose from waitlist:      0.131s
  Time for precision adjustment:     13.821s
  Time for transfer relation:         7.761s
  Time for merge operator:            0.451s
  Time for stop operator:             0.446s
  Time for adding to reached set:     0.400s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   163
Avg. length of target path (in blocks):                3636 (count: 163, min: 6, max: 52, avg: 22.31)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.789s
  Counterexample analysis:                             0.970s (Max:     0.023s, Calls: 163)
    Refinement sat check:                              0.621s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.062s
  Precision update:                                    0.095s
  ARG update:                                          0.594s

Length of refined path (in blocks):                    3473 (count: 163, min: 5, max: 51, avg: 21.31)
Number of affected states:                             3147 (count: 163, min: 3, max: 49, avg: 19.31)
Length (states) of path with itp 'true':                163 (count: 163, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:      3147 (count: 163, min: 3, max: 49, avg: 19.31)
Length (states) of path with itp 'false':               163 (count: 163, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 163, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2984 (count: 163, min: 2, max: 48, avg: 18.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                163
Number of successful refinements:     163
Number of failed refinements:         0
Max. size of reached set before ref.: 2648
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 1864.67
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      25.926s
Time for refinements:                 2.055s
Average time for refinement:          0.012s
Max time for refinement:              0.043s

Code Coverage
-----------------------------
  Function coverage:      0.305
  Visited lines:          1000
  Total lines:            3007
  Line coverage:          0.333
  Visited conditions:     113
  Total conditions:       782
  Condition coverage:     0.145

CPAchecker general statistics
-----------------------------
Number of program locations:     4028
Number of CFA edges:             4596
Number of relevant variables:    609
Number of functions:             118
Number of loops:                 31
Size of reached set:             431
  Number of reached locations:   327 (8%)
    Avg states per location:     1
    Max states per location:     16 (at node N3229)
  Number of reached functions:   36 (31%)
  Number of partitions:          431
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        13

Time for analysis setup:          3.889s
  Time for loading CPAs:          0.655s
  Time for loading parser:        0.489s
  Time for CFA construction:      2.641s
    Time for parsing file(s):     0.700s
    Time for AST to CFA:          0.883s
    Time for CFA sanity check:    0.230s
    Time for post-processing:     0.690s
      Time for var class.:        0.334s
Time for Analysis:               25.926s
CPU time for analysis:           25.920s
Total time for CPAchecker:       29.824s
Total CPU time for CPAchecker:   29.810s
Time for statistics:              0.048s

Time for Garbage Collector:       0.848s (in 170 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 74MB (    71 MiB) max;     50MB (    47 MiB) avg;     78MB (    74 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   8010MB (  7639 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
