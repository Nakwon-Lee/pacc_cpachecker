scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--infiniband--hw-cxgb3--iw_cxgb3.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__b867bz_/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 7816: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7819: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7822: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7918: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7921: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7924: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8330: Dead code detected: pao_ID__ = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8333: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8333: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8334: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8336: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8336: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8337: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8339: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8343: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8343: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8344: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8346: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8346: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8347: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8349: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8352: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8353: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8354: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8356: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8356: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8357: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8359: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8363: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8363: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8364: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8366: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8366: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8367: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8369: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37195;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37195;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8378: Dead code detected: pao_ID_____0 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8381: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8381: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8382: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8384: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8384: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8385: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8387: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8391: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8391: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8392: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8394: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8394: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8395: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8397: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8400: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8401: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8402: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8404: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8404: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8405: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8407: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8411: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8411: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8412: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8414: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8414: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8415: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8417: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37206;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37206;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8429: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8429: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8430: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8432: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8432: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8433: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8435: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8439: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8439: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8440: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8442: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8442: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8443: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8445: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8459: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8459: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8460: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8462: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8462: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8463: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8465: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37216;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37216;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8474: Dead code detected: pao_ID_____2 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8477: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8477: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8478: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8480: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8480: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8481: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8483: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8487: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8487: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8488: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8490: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8490: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8491: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8493: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8496: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8497: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8498: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8500: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8500: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8501: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8503: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8507: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8507: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8508: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8510: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8510: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8511: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8513: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37226;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37226;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  pao_ID__ = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37195;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37195;
  default:
  __bad_percpu_size();
  }
  ldv_37195: ;
  goto ldv_37200;
  case 2:
  pao_ID_____0 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37206;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37206;
  default:
  __bad_percpu_size();
  }
  ldv_37206: ;
  goto ldv_37200;
  case 4:
  pao_ID_____1 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37216;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37216;
  default:
  __bad_percpu_size();
  }
  ldv_37216: ;
  goto ldv_37200;
  case 8:
  pao_ID_____2 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37226;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37226;
  default:
  __bad_percpu_size();
  }
  ldv_37226: ;
  goto ldv_37200;
  default:
  __bad_size_call_parameter();
  goto ldv_37200;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12989: Dereferencing of non-pointer type cxgb3_cpl_handler_func  in expression *(work_handlers[tmp >> 24]) (ASTConverter.convert, WARNING)

line 13189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13588: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16096: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16483: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17359: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17362: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17368: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 2:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 4:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 8:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 19436: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20076: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20434: Dead code detected: pao_ID__ = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20437: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20437: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20438: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20440: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20440: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20441: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20443: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20447: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20447: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20448: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20450: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20450: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20451: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20453: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20456: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20457: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20458: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20460: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20460: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20461: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20463: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20467: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20467: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20468: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20470: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20470: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20471: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20473: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36449;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36449;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20482: Dead code detected: pao_ID_____0 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20485: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20485: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20486: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20488: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20488: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20489: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20491: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20495: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20495: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20496: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20498: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20498: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20499: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20501: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20504: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20505: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20506: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20508: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20508: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20509: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20511: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20515: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20515: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20516: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20518: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20518: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20519: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20521: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36460;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36460;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20533: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20533: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20534: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20536: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20536: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20537: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20539: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20543: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20543: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20544: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20546: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20546: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20547: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20549: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20563: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20563: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20564: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20566: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20566: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20567: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20569: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36470;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36470;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20578: Dead code detected: pao_ID_____2 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20581: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20581: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20582: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20584: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20584: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20585: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20587: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20591: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20591: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20592: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20594: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20594: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20595: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20597: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20600: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20601: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20602: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20604: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20604: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20605: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20607: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20611: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20611: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20612: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20614: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20614: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20615: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20617: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36480;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36480;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  pao_ID__ = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36449;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36449;
  default:
  __bad_percpu_size();
  }
  ldv_36449: ;
  goto ldv_36454;
  case 2:
  pao_ID_____0 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36460;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36460;
  default:
  __bad_percpu_size();
  }
  ldv_36460: ;
  goto ldv_36454;
  case 4:
  pao_ID_____1 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36470;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36470;
  default:
  __bad_percpu_size();
  }
  ldv_36470: ;
  goto ldv_36454;
  case 8:
  pao_ID_____2 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36480;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36480;
  default:
  __bad_percpu_size();
  }
  ldv_36480: ;
  goto ldv_36454;
  default:
  __bad_size_call_parameter();
  goto ldv_36454;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 23166: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24161: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15413: Function pointer *(schp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15399: Function pointer *(rchp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10019: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10020: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10172: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10167: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10236: Function pointer *(ep->parent_ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20896: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20800: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20743: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 21568: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22527: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22543: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22551: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20352: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20384: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8542: Function pointer *(dst->ops->mtu) with type unsigned int (*)(const struct dst_entry *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10308: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15439: Function pointer *(rchp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15444: Function pointer *(schp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18912: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12236: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12342: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12445: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12515: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12592: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12645: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12744: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13494: Function pointer *(chp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19181: Function pointer *(dev->rdev.t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11332: Function pointer *(tdev->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10111: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10112: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10066: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13345: Function pointer *(chp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13339: Function pointer *(qhp->ibqp.event_handler) with type void (*)(struct ib_event *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19098: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19128: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function synchronize_net to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_dispatch_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_for_each to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_alloc_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cxgb3_unregister_client to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function t3_register_cpl_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gen_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 20384: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cxgb3_ofld_send to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_dealloc_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_by_name to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev2t3cdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 22527: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 70U, (void *)(&(rdev_p->fw_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22543: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 13U, (void *)(&(rdev_p->rnic_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22551: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 10U, (void *)(&(rdev_p->port_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gen_pool_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gen_pool_add_virt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_in to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_in_r to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_out to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_out_r to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21568: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): tmp = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 15U, (void *)(&setup)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 20352: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1410335 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1278277 (91%)
  Because of loop head:            118641 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         13417 (1%)
  Times precision was empty:       109771 (8%)
  Times precision was {false}:     1496 (0%)
  Times result was cached:         1285152 (91%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      13916 (1%)
  Times result was 'false':        37394 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         605060
  BDD entailment checks:           227902
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          11
Number of abstraction locations:          229
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         5745669
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 372.80
Number of irrelevant predicates:          3509917 (61%)
Number of preds handled by boolean abs:   34865 (1%)
  Total number of models for allsat:      14889
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.07

Time for post operator:                 38.625s
  Time for path formula creation:       37.010s
Time for strengthen operator:            3.921s
Time for prec operator:                119.279s
  Time for abstraction:                106.818s (Max:     0.022s, Count: 1410335)
    Boolean abstraction:                 5.159s
    Solving time:                        4.343s (Max:     0.025s)
    Model enumeration time:              0.472s
    Time for BDD construction:           0.217s (Max:     0.012s)
Time for merge operator:                 1.985s
Time for coverage check:                 0.321s
  Time for BDD entailment checks:        0.241s
Total time for SMT solver (w/o itp):     4.816s

Number of path formula cache hits:   8318070 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.340s

Total number of created targets for pointer analysis: 11087
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 578


Number of BDD nodes:                               576
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       28361 (count: 430551, min: 0, max: 539, avg: 0.07)
Time for BDD node cleanup:                             0.096s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.203s
  Time for transition matches:                         4.179s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                      7064185 (count: 7064185, min: 1, max: 1, avg: 1.00) [1 x 7064185]

CPA algorithm statistics
------------------------
Number of iterations:            4394699
Max size of waitlist:            47
Average size of waitlist:        28
Number of computed successors:   4794936
Max successors for one state:    2
Number of times merged:          188579
Number of times stopped:         338261
Number of times breaked:         13417

Total time for CPA algorithm:       311.993s (Max:     0.915s)
  Time for choose from waitlist:      1.176s
  Time for precision adjustment:    135.463s
  Time for transfer relation:       157.733s
  Time for merge operator:            3.694s
  Time for stop operator:             3.511s
  Time for adding to reached set:     3.771s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   13417
Avg. length of target path (in blocks):             1872013 (count: 13417, min: 15, max: 294, avg: 139.53)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 543.351s
  Counterexample analysis:                           525.502s (Max:     0.144s, Calls: 13417)
    Refinement sat check:                            283.053s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.619s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.558s
  Precision update:                                    5.044s
  ARG update:                                          5.245s

Length of refined path (in blocks):                 1857292 (count: 13417, min: 4, max: 293, avg: 138.43)
Number of affected states:                           380247 (count: 13417, min: 1, max: 186, avg: 28.34)
Length (states) of path with itp 'true':            1463628 (count: 13417, min: 1, max: 235, avg: 109.09)
Length (states) of path with itp non-trivial itp:    380247 (count: 13417, min: 1, max: 186, avg: 28.34)
Length (states) of path with itp 'false':             13417 (count: 13417, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 13417, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          366830 (count: 13417, min: 0, max: 185, avg: 27.34)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13417
Number of successful refinements:     13417
Number of failed refinements:         0
Max. size of reached set before ref.: 4746
Max. size of reached set after ref.:  3642
Avg. size of reached set before ref.: 2041.04
Avg. size of reached set after ref.:  1711.81

Total time for CEGAR algorithm:     893.161s
Time for refinements:               569.933s
Average time for refinement:          0.042s
Max time for refinement:              0.162s

Code Coverage
-----------------------------
  Function coverage:      0.153
  Visited lines:          2287
  Total lines:            11607
  Line coverage:          0.197
  Visited conditions:     204
  Total conditions:       2534
  Condition coverage:     0.081

CPAchecker general statistics
-----------------------------
Number of program locations:     15175
Number of CFA edges:             17549
Number of relevant variables:    2556
Number of functions:             491
Number of loops:                 92
Size of reached set:             2010
  Number of reached locations:   796 (5%)
    Avg states per location:     2
    Max states per location:     34 (at node N14547)
  Number of reached functions:   75 (15%)
  Number of partitions:          2004
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N10743 (before line 19943), Function main called from node N10734, stack depth 1 [37e28b20], stack [main]])
  Number of target states:       0
  Size of final wait list        22

Time for analysis setup:          7.191s
  Time for loading CPAs:          0.893s
  Time for loading parser:        0.472s
  Time for CFA construction:      5.707s
    Time for parsing file(s):     0.937s
    Time for AST to CFA:          2.168s
    Time for CFA sanity check:    0.611s
    Time for post-processing:     1.837s
      Time for var class.:        0.798s
Time for Analysis:              893.161s
CPU time for analysis:          892.960s
Total time for CPAchecker:      900.354s
Total CPU time for CPAchecker:  900.130s
Time for statistics:              0.110s

Time for Garbage Collector:      13.263s (in 2462 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                229MB (   218 MiB) max;    126MB (   120 MiB) avg;    232MB (   222 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           250MB (   238 MiB) max;    182MB (   174 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8420MB (  8030 MiB) max;   8256MB (  7873 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
