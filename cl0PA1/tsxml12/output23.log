scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--infiniband--hw-cxgb3--iw_cxgb3.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zn9lr309/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 7816: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7819: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7822: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7918: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7921: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7924: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6239;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8330: Dead code detected: pao_ID__ = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8333: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8333: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8334: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8336: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8336: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8337: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8339: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8343: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8343: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8344: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8346: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8346: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8347: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8349: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8352: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8353: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8354: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8356: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8356: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8357: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8359: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8363: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8363: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8364: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8366: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8366: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8367: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8369: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37195;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37195;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8378: Dead code detected: pao_ID_____0 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8381: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8381: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8382: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8384: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8384: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8385: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8387: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8391: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8391: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8392: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8394: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8394: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8395: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8397: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8400: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8401: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8402: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8404: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8404: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8405: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8407: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8411: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8411: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8412: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8414: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8414: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8415: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8417: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37206;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37206;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8429: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8429: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8430: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8432: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8432: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8433: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8435: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8439: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8439: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8440: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8442: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8442: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8443: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8445: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8459: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8459: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8460: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8462: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8462: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8463: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8465: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37216;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37216;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8474: Dead code detected: pao_ID_____2 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 8477: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8477: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8478: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8480: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8480: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8481: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8483: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8487: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8487: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8488: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8490: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8490: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8491: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8493: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8496: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 8497: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8498: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8500: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8500: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8501: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8503: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8507: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8507: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8508: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8510: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 8510: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 8511: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 8513: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37226;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37226;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  pao_ID__ = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37195;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37195;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37195;
  default:
  __bad_percpu_size();
  }
  ldv_37195: ;
  goto ldv_37200;
  case 2:
  pao_ID_____0 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37206;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37206;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37206;
  default:
  __bad_percpu_size();
  }
  ldv_37206: ;
  goto ldv_37200;
  case 4:
  pao_ID_____1 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37216;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37216;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37216;
  default:
  __bad_percpu_size();
  }
  ldv_37216: ;
  goto ldv_37200;
  case 8:
  pao_ID_____2 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_37226;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_37226;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_37226;
  default:
  __bad_percpu_size();
  }
  ldv_37226: ;
  goto ldv_37200;
  default:
  __bad_size_call_parameter();
  goto ldv_37200;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12989: Dereferencing of non-pointer type cxgb3_cpl_handler_func  in expression *(work_handlers[tmp >> 24]) (ASTConverter.convert, WARNING)

line 13189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13588: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16096: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16483: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17359: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17362: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

line 17368: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1:
    __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 2:
    __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 4:
    __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    case 8:
    __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    default:
    __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (chp->user_rptr_addr));
    goto ldv_47572;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 19436: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20076: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20434: Dead code detected: pao_ID__ = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20437: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20437: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20438: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20440: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20440: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20441: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20443: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20447: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20447: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20448: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20450: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20450: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20451: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20453: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20456: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20457: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20458: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20460: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20460: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20461: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20463: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20467: Dead code detected: [pao_ID__ == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20467: Dead code detected: [!(pao_ID__ == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20468: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20470: Dead code detected: [pao_ID__ == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20470: Dead code detected: [!(pao_ID__ == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20471: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20473: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36449;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36449;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20482: Dead code detected: pao_ID_____0 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20485: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20485: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20486: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20488: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20488: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20489: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20491: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20495: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20495: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20496: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20498: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20498: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20499: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20501: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20504: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20505: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20506: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20508: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20508: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20509: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20511: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20515: Dead code detected: [pao_ID_____0 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20515: Dead code detected: [!(pao_ID_____0 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20516: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20518: Dead code detected: [pao_ID_____0 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20518: Dead code detected: [!(pao_ID_____0 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20519: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20521: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36460;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36460;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20533: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20533: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20534: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20536: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20536: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20537: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20539: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20543: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20543: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20544: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20546: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20546: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20547: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20549: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20563: Dead code detected: [pao_ID_____1 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20563: Dead code detected: [!(pao_ID_____1 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20564: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20566: Dead code detected: [pao_ID_____1 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20566: Dead code detected: [!(pao_ID_____1 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20567: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20569: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36470;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36470;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 20578: Dead code detected: pao_ID_____2 = -1; (CFACreationUtils.addEdgeToCFA, INFO)

line 20581: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20581: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20582: Dead code detected: __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20584: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20584: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20585: Dead code detected: __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20587: Dead code detected: __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20591: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20591: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20592: Dead code detected: __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20594: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20594: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20595: Dead code detected: __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20597: Dead code detected: __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20600: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 20601: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20602: Dead code detected: __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20604: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20604: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20605: Dead code detected: __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20607: Dead code detected: __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20611: Dead code detected: [pao_ID_____2 == 1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20611: Dead code detected: [!(pao_ID_____2 == 1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20612: Dead code detected: __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20614: Dead code detected: [pao_ID_____2 == -1] (CFACreationUtils.addEdgeToCFA, INFO)

line 20614: Dead code detected: [!(pao_ID_____2 == -1)] (CFACreationUtils.addEdgeToCFA, INFO)

line 20615: Dead code detected: __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt))); (CFACreationUtils.addEdgeToCFA, INFO)

line 20617: Dead code detected: __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36480;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36480;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  pao_ID__ = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID__ == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36449;
  case 2: ;
  if (pao_ID__ == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 4: ;
  if (pao_ID__ == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36449;
  case 8: ;
  if (pao_ID__ == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID__ == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36449;
  default:
  __bad_percpu_size();
  }
  ldv_36449: ;
  goto ldv_36454;
  case 2:
  pao_ID_____0 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36460;
  case 2: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 4: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36460;
  case 8: ;
  if (pao_ID_____0 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____0 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36460;
  default:
  __bad_percpu_size();
  }
  ldv_36460: ;
  goto ldv_36454;
  case 4:
  pao_ID_____1 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36470;
  case 2: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 4: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36470;
  case 8: ;
  if (pao_ID_____1 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____1 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36470;
  default:
  __bad_percpu_size();
  }
  ldv_36470: ;
  goto ldv_36454;
  case 8:
  pao_ID_____2 = -1;
  switch (4UL) {
  case 1: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decb %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addb %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "qi" (-1));
  }
  goto ldv_36480;
  case 2: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decw %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addw %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 4: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decl %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addl %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "ri" (-1));
  }
  goto ldv_36480;
  case 8: ;
  if (pao_ID_____2 == 1) {
    __asm__ ("incq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else
  if (pao_ID_____2 == -1) {
    __asm__ ("decq %%gs:%P0": "+m" (*(dev->pcpu_refcnt)));
  } else {
    __asm__ ("addq %1, %%gs:%P0": "+m" (*(dev->pcpu_refcnt)): "re" (-1));
  }
  goto ldv_36480;
  default:
  __bad_percpu_size();
  }
  ldv_36480: ;
  goto ldv_36454;
  default:
  __bad_size_call_parameter();
  goto ldv_36454;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 23166: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24161: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15413: Function pointer *(schp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15399: Function pointer *(rchp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10019: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10020: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10172: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10167: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10236: Function pointer *(ep->parent_ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20896: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20800: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20743: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 21568: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22527: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22543: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22551: Function pointer *(rdev_p->t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20352: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20384: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8542: Function pointer *(dst->ops->mtu) with type unsigned int (*)(const struct dst_entry *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10308: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15439: Function pointer *(rchp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15444: Function pointer *(schp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18912: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12236: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12342: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12445: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12515: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12592: Function pointer *(cm_id->add_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12645: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12744: Function pointer *(cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13494: Function pointer *(chp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19181: Function pointer *(dev->rdev.t3cdev_p->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11332: Function pointer *(tdev->ctl) with type int (*)(struct t3cdev *, unsigned int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10111: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10112: Function pointer *(ep->com.cm_id->rem_ref) with type void (*)(struct iw_cm_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10066: Function pointer *(ep->com.cm_id->event_handler) with type int (*)(struct iw_cm_id *, struct iw_cm_event *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13345: Function pointer *(chp->ibcq.comp_handler) with type void (*)(struct ib_cq *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13339: Function pointer *(qhp->ibqp.event_handler) with type void (*)(struct ib_event *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19098: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 19128: Function pointer *(lldev->ethtool_ops->get_drvinfo) with type void (*)(struct net_device *, struct ethtool_drvinfo *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function cxgb3_unregister_client to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_alloc_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function synchronize_net to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_dispatch_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function t3_register_cpl_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_delayed_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_for_each to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_dealloc_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gen_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __kfifo_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function idr_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_by_name to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev2t3cdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 22527: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 70U, (void *)(&(rdev_p->fw_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22543: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 13U, (void *)(&(rdev_p->rnic_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 22551: Ignoring function call through function pointer *(rdev_p->t3cdev_p->ctl): err = (*(rdev_p->t3cdev_p->ctl))(rdev_p->t3cdev_p, 10U, (void *)(&(rdev_p->port_info))); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ib_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cxgb3_register_client to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            44791 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  40445 (90%)
  Because of loop head:            4152 (9%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         194 (0%)
  Times precision was empty:       9183 (21%)
  Times precision was {false}:     404 (1%)
  Times result was cached:         33359 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1845 (4%)
  Times result was 'false':        3487 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         32339
  BDD entailment checks:           9647
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          10
Number of abstraction locations:          122
Max number of predicates per location:    8
Avg number of predicates per location:    5
Total predicates per abstraction:         190102
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 84.53
Number of irrelevant predicates:          51205 (27%)
Number of preds handled by boolean abs:   6106 (3%)
  Total number of models for allsat:      1768
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.96

Time for post operator:                  3.495s
  Time for path formula creation:        3.388s
Time for strengthen operator:            0.310s
Time for prec operator:                  8.863s
  Time for abstraction:                  8.204s (Max:     0.017s, Count: 44791)
    Boolean abstraction:                 1.162s
    Solving time:                        0.911s (Max:     0.013s)
    Model enumeration time:              0.087s
    Time for BDD construction:           0.113s (Max:     0.012s)
Time for merge operator:                 0.238s
Time for coverage check:                 0.054s
  Time for BDD entailment checks:        0.045s
Total time for SMT solver (w/o itp):     0.998s

Number of path formula cache hits:   298910 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.751s

Total number of created targets for pointer analysis: 912
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 81


Number of BDD nodes:                               594
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4206 (count: 32653, min: 0, max: 185, avg: 0.13)
Time for BDD node cleanup:                             0.033s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.365s
Automaton transfers with branching:                0
Automaton transfer successors:                       262668 (count: 262668, min: 1, max: 1, avg: 1.00) [1 x 262668]

CPA algorithm statistics
------------------------
Number of iterations:            163169
Max size of waitlist:            61
Average size of waitlist:        19
Number of computed successors:   187344
Max successors for one state:    2
Number of times merged:          11346
Number of times stopped:         15691
Number of times breaked:         194

Total time for CPA algorithm:        18.588s (Max:     1.060s)
  Time for choose from waitlist:      0.088s
  Time for precision adjustment:      9.980s
  Time for transfer relation:         7.032s
  Time for merge operator:            0.411s
  Time for stop operator:             0.253s
  Time for adding to reached set:     0.211s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   194
Avg. length of target path (in blocks):                8344 (count: 194, min: 17, max: 84, avg: 43.01)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.201s
  Counterexample analysis:                             3.508s (Max:     0.046s, Calls: 194)
    Refinement sat check:                              2.621s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.090s
  Precision update:                                    0.152s
  ARG update:                                          0.356s

Length of refined path (in blocks):                    8077 (count: 194, min: 4, max: 83, avg: 41.63)
Number of affected states:                             5896 (count: 194, min: 1, max: 81, avg: 30.39)
Length (states) of path with itp 'true':               1987 (count: 194, min: 1, max: 61, avg: 10.24)
Length (states) of path with itp non-trivial itp:      5896 (count: 194, min: 1, max: 81, avg: 30.39)
Length (states) of path with itp 'false':               194 (count: 194, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 194, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5702 (count: 194, min: 0, max: 80, avg: 29.39)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                194
Number of successful refinements:     194
Number of failed refinements:         0
Max. size of reached set before ref.: 1751
Max. size of reached set after ref.:  1239
Avg. size of reached set before ref.: 1171.36
Avg. size of reached set after ref.:  307.45

Total time for CEGAR algorithm:      23.142s
Time for refinements:                 4.497s
Average time for refinement:          0.023s
Max time for refinement:              0.067s

Code Coverage
-----------------------------
  Function coverage:      0.077
  Visited lines:          1584
  Total lines:            11607
  Line coverage:          0.136
  Visited conditions:     88
  Total conditions:       2534
  Condition coverage:     0.035

CPAchecker general statistics
-----------------------------
Number of program locations:     15175
Number of CFA edges:             17549
Number of relevant variables:    2556
Number of functions:             491
Number of loops:                 92
Size of reached set:             570
  Number of reached locations:   291 (2%)
    Avg states per location:     1
    Max states per location:     7 (at node N10836)
  Number of reached functions:   38 (8%)
  Number of partitions:          568
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N10743 (before line 19943), Function main called from node N10734, stack depth 1 [37e28b20], stack [main]])
  Number of target states:       0
  Size of final wait list        19

Time for analysis setup:          7.189s
  Time for loading CPAs:          1.054s
  Time for loading parser:        0.419s
  Time for CFA construction:      5.610s
    Time for parsing file(s):     0.833s
    Time for AST to CFA:          2.113s
    Time for CFA sanity check:    0.811s
    Time for post-processing:     1.764s
      Time for var class.:        0.756s
Time for Analysis:               23.142s
CPU time for analysis:           23.140s
Total time for CPAchecker:       30.344s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.100s

Time for Garbage Collector:       1.112s (in 122 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                105MB (   100 MiB) max;     78MB (    74 MiB) avg;    110MB (   105 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     41MB (    39 MiB) avg;     47MB (    44 MiB) peak
Allocated heap memory:           133MB (   127 MiB) max;    132MB (   126 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
