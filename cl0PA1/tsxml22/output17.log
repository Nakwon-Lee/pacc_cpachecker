scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pt.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ctpdwjit/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3196: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 3240: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4017: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4207: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4617: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2944: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            63244 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  56058 (89%)
  Because of loop head:            7180 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         6 (0%)
  Times precision was empty:       63150 (100%)
  Times precision was {false}:     25 (0%)
  Times result was cached:         46 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      23 (0%)
  Times result was 'false':        15 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         58890
  BDD entailment checks:           10212
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          4
Number of abstraction locations:          17
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         135
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 2.81
Number of irrelevant predicates:          70 (52%)
Number of preds handled by boolean abs:   31 (23%)
  Total number of models for allsat:      22
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.96

Time for post operator:                 10.111s
  Time for path formula creation:        9.860s
Time for strengthen operator:            0.569s
Time for prec operator:                  1.901s
  Time for abstraction:                  0.780s (Max:     0.062s, Count: 63244)
    Boolean abstraction:                 0.123s
    Solving time:                        0.218s (Max:     0.040s)
    Model enumeration time:              0.009s
    Time for BDD construction:           0.015s (Max:     0.012s)
Time for merge operator:                 0.937s
Time for coverage check:                 0.095s
  Time for BDD entailment checks:        0.075s
Total time for SMT solver (w/o itp):     0.227s

Number of path formula cache hits:   318179 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.439s

Total number of created targets for pointer analysis: 60338
   Number of created targets for uf: *(struct_pi_adapter)* is 13
   Number of created targets for uf: *signed_int is 531
   Number of created targets for uf: *(char)* is 9
   Number of created targets for uf: *char is 17849


Number of BDD nodes:                               205
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          66 (count: 73645, min: 0, max: 26, avg: 0.00)
Time for BDD node cleanup:                             0.032s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.829s
  Time for transition matches:                         0.506s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       356938 (count: 356938, min: 1, max: 1, avg: 1.00) [1 x 356938]

CPA algorithm statistics
------------------------
Number of iterations:            223592
Max size of waitlist:            22
Average size of waitlist:        14
Number of computed successors:   258208
Max successors for one state:    2
Number of times merged:          24339
Number of times stopped:         34534
Number of times breaked:         6

Total time for CPA algorithm:        24.998s (Max:     9.256s)
  Time for choose from waitlist:      0.168s
  Time for precision adjustment:      4.794s
  Time for transfer relation:        15.802s
  Time for merge operator:            1.584s
  Time for stop operator:             0.608s
  Time for adding to reached set:     0.666s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):                  72 (count: 6, min: 8, max: 17, avg: 12.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.198s
  Counterexample analysis:                             0.129s (Max:     0.034s, Calls: 6)
    Refinement sat check:                              0.081s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.002s
  ARG update:                                          1.050s

Length of refined path (in blocks):                      52 (count: 6, min: 4, max: 16, avg: 8.67)
Number of affected states:                               39 (count: 6, min: 1, max: 14, avg: 6.50)
Length (states) of path with itp 'true':                  7 (count: 6, min: 0, max: 2, avg: 1.17)
Length (states) of path with itp non-trivial itp:        39 (count: 6, min: 1, max: 14, avg: 6.50)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              33 (count: 6, min: 0, max: 13, avg: 5.50)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                6
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 53621
Max. size of reached set after ref.:  8
Avg. size of reached set before ref.: 37235.67
Avg. size of reached set after ref.:  6.17

Total time for CEGAR algorithm:      26.515s
Time for refinements:                 1.517s
Average time for refinement:          0.252s
Max time for refinement:              0.354s

Code Coverage
-----------------------------
  Function coverage:      0.176
  Visited lines:          744
  Total lines:            1833
  Line coverage:          0.406
  Visited conditions:     68
  Total conditions:       410
  Condition coverage:     0.166

CPAchecker general statistics
-----------------------------
Number of program locations:     2397
Number of CFA edges:             2680
Number of relevant variables:    297
Number of functions:             91
Number of loops:                 17
Size of reached set:             282
  Number of reached locations:   190 (8%)
    Avg states per location:     1
    Max states per location:     4 (at node N95)
  Number of reached functions:   16 (18%)
  Number of partitions:          282
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        11

Time for analysis setup:          3.801s
  Time for loading CPAs:          0.721s
  Time for loading parser:        0.544s
  Time for CFA construction:      2.404s
    Time for parsing file(s):     0.706s
    Time for AST to CFA:          0.818s
    Time for CFA sanity check:    0.135s
    Time for post-processing:     0.565s
      Time for var class.:        0.250s
Time for Analysis:               26.515s
CPU time for analysis:           26.510s
Total time for CPAchecker:       30.319s
Total CPU time for CPAchecker:   30.310s
Time for statistics:              0.052s

Time for Garbage Collector:       2.646s (in 95 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                125MB (   119 MiB) max;     70MB (    67 MiB) avg;    135MB (   129 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     35MB (    33 MiB) avg;     38MB (    36 MiB) peak
Allocated heap memory:           138MB (   132 MiB) max;    129MB (   123 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8076MB (  7702 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
