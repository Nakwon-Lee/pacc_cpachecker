scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pg.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_b74mfppi/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4031: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2937: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            121787 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  96880 (80%)
  Because of loop head:            24009 (20%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         898 (1%)
  Times precision was empty:       7963 (7%)
  Times precision was {false}:     770 (1%)
  Times result was cached:         108485 (89%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      4569 (4%)
  Times result was 'false':        5696 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         96445
  BDD entailment checks:           31531
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       35
Number of predicates discovered:          9
Number of abstraction locations:          127
Max number of predicates per location:    6
Avg number of predicates per location:    5
Total predicates per abstraction:         537345
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 100.65
Number of irrelevant predicates:          85085 (16%)
Number of preds handled by boolean abs:   17586 (3%)
  Total number of models for allsat:      5061
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.11

Time for post operator:                  6.681s
  Time for path formula creation:        6.487s
Time for strengthen operator:            0.447s
Time for prec operator:                 45.895s
  Time for abstraction:                 44.926s (Max:     0.101s, Count: 121787)
    Boolean abstraction:                20.481s
    Solving time:                       20.516s (Max:     0.097s)
    Model enumeration time:              2.162s
    Time for BDD construction:           0.124s (Max:     0.008s)
Time for merge operator:                 0.512s
Time for coverage check:                 0.053s
  Time for BDD entailment checks:        0.043s
Total time for SMT solver (w/o itp):    22.678s

Number of path formula cache hits:   699412 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.382s

Total number of created targets for pointer analysis: 145160
   Number of created targets for uf: *(struct_pi_adapter)* is 9
   Number of created targets for uf: *(char)* is 213
   Number of created targets for uf: *signed_int is 3100
   Number of created targets for uf: *char is 16635
   Number of created targets for uf: *unsigned_long_int is 93


Number of BDD nodes:                               406
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        9433 (count: 70966, min: 0, max: 280, avg: 0.13)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.761s
  Time for transition matches:                         0.417s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                       655877 (count: 655877, min: 1, max: 1, avg: 1.00) [1 x 655877]

CPA algorithm statistics
------------------------
Number of iterations:            442711
Max size of waitlist:            29
Average size of waitlist:        13
Number of computed successors:   507905
Max successors for one state:    2
Number of times merged:          32457
Number of times stopped:         56321
Number of times breaked:         898

Total time for CPA algorithm:        62.766s (Max:     1.604s)
  Time for choose from waitlist:      0.204s
  Time for precision adjustment:     48.071s
  Time for transfer relation:        11.653s
  Time for merge operator:            0.929s
  Time for stop operator:             0.497s
  Time for adding to reached set:     0.463s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   898
Avg. length of target path (in blocks):               39081 (count: 898, min: 7, max: 96, avg: 43.52)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  21.224s
  Counterexample analysis:                            19.895s (Max:     0.120s, Calls: 898)
    Refinement sat check:                             15.942s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.024s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.112s
  Precision update:                                    0.290s
  ARG update:                                          0.648s

Length of refined path (in blocks):                   37831 (count: 898, min: 4, max: 84, avg: 42.13)
Number of affected states:                            15128 (count: 898, min: 3, max: 77, avg: 16.85)
Length (states) of path with itp 'true':              21805 (count: 898, min: 0, max: 50, avg: 24.28)
Length (states) of path with itp non-trivial itp:     15128 (count: 898, min: 3, max: 77, avg: 16.85)
Length (states) of path with itp 'false':               898 (count: 898, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 898, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           14230 (count: 898, min: 2, max: 76, avg: 15.85)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                898
Number of successful refinements:     898
Number of failed refinements:         0
Max. size of reached set before ref.: 5294
Max. size of reached set after ref.:  4041
Avg. size of reached set before ref.: 1071.52
Avg. size of reached set after ref.:  581.16

Total time for CEGAR algorithm:      85.042s
Time for refinements:                21.958s
Average time for refinement:          0.024s
Max time for refinement:              0.125s

Code Coverage
-----------------------------
  Function coverage:      0.528
  Visited lines:          1165
  Total lines:            1395
  Line coverage:          0.835
  Visited conditions:     214
  Total conditions:       312
  Condition coverage:     0.686

CPAchecker general statistics
-----------------------------
Number of program locations:     1858
Number of CFA edges:             2052
Number of relevant variables:    230
Number of functions:             72
Number of loops:                 15
Size of reached set:             5547
  Number of reached locations:   624 (34%)
    Avg states per location:     8
    Max states per location:     197 (at node N117)
  Number of reached functions:   38 (53%)
  Number of partitions:          5545
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N105 (before line 3024), Function pg_init_units called from node N749, stack depth 3 [3429293e], stack [main, pg_init, pg_init_units]])
  Number of target states:       0

Time for analysis setup:          3.698s
  Time for loading CPAs:          0.789s
  Time for loading parser:        0.579s
  Time for CFA construction:      2.232s
    Time for parsing file(s):     0.609s
    Time for AST to CFA:          0.763s
    Time for CFA sanity check:    0.139s
    Time for post-processing:     0.523s
      Time for var class.:        0.233s
Time for Analysis:               85.042s
CPU time for analysis:           85.040s
Time for analyzing result:        0.003s
Total time for CPAchecker:       88.744s
Total CPU time for CPAchecker:   88.740s
Time for statistics:              0.109s

Time for Garbage Collector:       2.038s (in 386 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                119MB (   113 MiB) max;     58MB (    55 MiB) avg;    122MB (   116 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:   8155MB (  7777 MiB) max;   8096MB (  7721 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
