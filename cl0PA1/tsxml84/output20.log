scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--ethernet--neterion--vxge--vxge.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_n0vclk1q/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7435: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7438: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7441: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8013: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8127: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 13291: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15260: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17744: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

lines 18569-18584: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 18571: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18574: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18576: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 18580: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 18589-18604: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 18591: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18594: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18596: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 18600: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 18611: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18614: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18620: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 18629-18644: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 18631: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18634: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 18636: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 18640: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36545;
    default:
    __bad_percpu_size();
    }
    ldv_36545:
    pscr_ret__ = pfo_ret__;
    goto ldv_36551;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36555;
    default:
    __bad_percpu_size();
    }
    ldv_36555:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_36551;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36564;
    default:
    __bad_percpu_size();
    }
    ldv_36564:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_36551;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36573;
    default:
    __bad_percpu_size();
    }
    ldv_36573:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_36551;
    default:
    __bad_size_call_parameter();
    goto ldv_36551;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 24870: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 18040: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 7604-7605: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 17973-17974: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7658: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18103: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18136: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18070: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7638: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 18007: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15164: Function pointer *(ring->callback) with type enum vxge_hw_status (*)(struct __vxge_hw_ring *, void *, u8 , void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_notice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __netif_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_detach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_device_attach to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netdev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __napi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function disable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function enable_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_trylock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14208: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)(*dtrh)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_prefetch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_prefetch, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 15206-15207: Ignoring function call through function pointer *(fifo->callback): tmp = (*(fifo->callback))(fifo, first_txdlh, t_code, channel->userdata, skb_ptr, nr_skb, more); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15164: Ignoring function call through function pointer *(ring->callback): (*(ring->callback))(ring, first_rxdh, (int)t_code, ring->channel.userdata); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11505: Ignoring function call through function pointer *(fifo->txdl_term): (*(fifo->txdl_term))(txdlh, 2, fifo->channel.userdata); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10933: Ignoring function call through function pointer *(ring->rxd_term): (*(ring->rxd_term))(rxdh, 2, channel->userdata); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10302: Ignoring function call through function pointer *(ring->rxd_init): status = (*(ring->rxd_init))(rxd, channel->userdata); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __netdev_alloc_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __phys_addr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 17973-17974: Ignoring function call through function pointer *(ops->map_page): addr = (*(ops->map_page))(dev, 18446719884453740544ULL + (tmp___2 >> 12), ((unsigned long)ptr) & 4095UL, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_mapping_error to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7658: Ignoring function call through function pointer *(ops->mapping_error): tmp___0 = (*(ops->mapping_error))(dev, dma_addr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7638: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17907: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13767: Ignoring function call through function pointer *(hldev->uld_callbacks->crit_err): (*(hldev->uld_callbacks->crit_err))(hldev, type, (u64 )vp_id); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function synchronize_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_napi_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_msix to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            99106 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  87772 (89%)
  Because of loop head:            11225 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         109 (0%)
  Times precision was empty:       75356 (76%)
  Times precision was {false}:     305 (0%)
  Times result was cached:         22794 (23%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      651 (1%)
  Times result was 'false':        778 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         56688
  BDD entailment checks:           17966
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          5
Number of abstraction locations:          122
Max number of predicates per location:    4
Avg number of predicates per location:    3
Total predicates per abstraction:         76754
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 80.29
Number of irrelevant predicates:          48011 (63%)
Number of preds handled by boolean abs:   1317 (2%)
  Total number of models for allsat:      648
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.615s
  Time for path formula creation:        3.390s
Time for strengthen operator:            0.377s
Time for prec operator:                  5.578s
  Time for abstraction:                  4.600s (Max:     0.023s, Count: 99106)
    Boolean abstraction:                 0.668s
    Solving time:                        0.678s (Max:     0.019s)
    Model enumeration time:              0.045s
    Time for BDD construction:           0.055s (Max:     0.008s)
Time for merge operator:                 0.170s
Time for coverage check:                 0.075s
  Time for BDD entailment checks:        0.046s
Total time for SMT solver (w/o itp):     0.723s

Number of path formula cache hits:   560664 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.362s

Total number of created targets for pointer analysis: 3600
   Number of created targets for uf: *(void)* is 5
   Number of created targets for uf: *unsigned_short_int is 18
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 2
   Number of created targets for uf: *enum_vxge_hw_fifo_tcode is 3
   Number of created targets for uf: *unsigned_long_long_int is 7
   Number of created targets for uf: *unsigned_int is 137


Number of BDD nodes:                               220
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1341 (count: 98786, min: 0, max: 115, avg: 0.01)
Time for BDD node cleanup:                             0.019s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.686s
  Time for transition matches:                         0.336s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       460247 (count: 460247, min: 1, max: 1, avg: 1.00) [1 x 460247]

CPA algorithm statistics
------------------------
Number of iterations:            317871
Max size of waitlist:            59
Average size of waitlist:        36
Number of computed successors:   355754
Max successors for one state:    2
Number of times merged:          19361
Number of times stopped:         34192
Number of times breaked:         109

Total time for CPA algorithm:        19.859s (Max:     1.814s)
  Time for choose from waitlist:      0.167s
  Time for precision adjustment:      7.833s
  Time for transfer relation:         9.278s
  Time for merge operator:            0.450s
  Time for stop operator:             0.504s
  Time for adding to reached set:     0.484s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   109
Avg. length of target path (in blocks):                6894 (count: 109, min: 14, max: 89, avg: 63.25)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.695s
  Counterexample analysis:                             1.757s (Max:     0.040s, Calls: 109)
    Refinement sat check:                              1.088s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.051s
  Precision update:                                    0.061s
  ARG update:                                          0.751s

Length of refined path (in blocks):                    5436 (count: 109, min: 13, max: 88, avg: 49.87)
Number of affected states:                             4057 (count: 109, min: 0, max: 86, avg: 37.22)
Length (states) of path with itp 'true':               1270 (count: 109, min: 1, max: 28, avg: 11.65)
Length (states) of path with itp non-trivial itp:      4057 (count: 109, min: 0, max: 86, avg: 37.22)
Length (states) of path with itp 'false':               109 (count: 109, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 109, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3983 (count: 109, min: 0, max: 85, avg: 36.54)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                109
Number of successful refinements:     109
Number of failed refinements:         0
Max. size of reached set before ref.: 6055
Max. size of reached set after ref.:  4507
Avg. size of reached set before ref.: 4686.77
Avg. size of reached set after ref.:  1766.58

Total time for CEGAR algorithm:      23.339s
Time for refinements:                 3.315s
Average time for refinement:          0.030s
Max time for refinement:              0.068s

Code Coverage
-----------------------------
  Function coverage:      0.330
  Visited lines:          2659
  Total lines:            11756
  Line coverage:          0.226
  Visited conditions:     474
  Total conditions:       2838
  Condition coverage:     0.167

CPAchecker general statistics
-----------------------------
Number of program locations:     15407
Number of CFA edges:             17638
Number of relevant variables:    2635
Number of functions:             457
Number of loops:                 186
Size of reached set:             2483
  Number of reached locations:   1612 (10%)
    Avg states per location:     1
    Max states per location:     24 (at node N91)
  Number of reached functions:   151 (33%)
  Number of partitions:          2478
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N13774 (before line 23388), Function verify_bandwidth called from node N14846, stack depth 3 [12056b98], stack [main, vxge_starter, verify_bandwidth]])
  Number of target states:       0
  Size of final wait list        39

Time for analysis setup:          7.008s
  Time for loading CPAs:          0.825s
  Time for loading parser:        0.507s
  Time for CFA construction:      5.597s
    Time for parsing file(s):     0.919s
    Time for AST to CFA:          2.074s
    Time for CFA sanity check:    0.638s
    Time for post-processing:     1.857s
      Time for var class.:        0.812s
Time for Analysis:               23.339s
CPU time for analysis:           23.340s
Total time for CPAchecker:       30.350s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.112s

Time for Garbage Collector:       1.480s (in 137 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                123MB (   117 MiB) max;     81MB (    77 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             47MB (    44 MiB) max;     41MB (    39 MiB) avg;     47MB (    45 MiB) peak
Allocated heap memory:           131MB (   125 MiB) max;    130MB (   124 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8075MB (  7700 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
