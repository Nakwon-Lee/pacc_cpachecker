scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--platform--x86--ideapad-laptop.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8dds28p_/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5977: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_integer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_hw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i8042_command to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_report_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_force_update to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4007: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            46186 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  38707 (84%)
  Because of loop head:            7319 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         160 (0%)
  Times precision was empty:       31157 (67%)
  Times precision was {false}:     682 (1%)
  Times result was cached:         13931 (30%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      416 (1%)
  Times result was 'false':        1002 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         52885
  BDD entailment checks:           14557
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       78
Number of predicates discovered:          16
Number of abstraction locations:          73
Max number of predicates per location:    14
Avg number of predicates per location:    1
Total predicates per abstraction:         24231
Max number of predicates per abstraction: 14
Avg number of predicates per abstraction: 22.07
Number of irrelevant predicates:          14484 (60%)
Number of preds handled by boolean abs:   994 (4%)
  Total number of models for allsat:      821
  Max number of models for allsat:        128
  Avg number of models for allsat:        1.97

Time for post operator:                  6.451s
  Time for path formula creation:        6.288s
Time for strengthen operator:            0.301s
Time for prec operator:                  5.358s
  Time for abstraction:                  4.666s (Max:     0.135s, Count: 46186)
    Boolean abstraction:                 1.117s
    Solving time:                        1.001s (Max:     0.028s)
    Model enumeration time:              0.361s
    Time for BDD construction:           0.128s (Max:     0.031s)
Time for merge operator:                 0.555s
Time for coverage check:                 0.088s
  Time for BDD entailment checks:        0.066s
Total time for SMT solver (w/o itp):     1.362s

Number of path formula cache hits:   313516 (82%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.341s

Total number of created targets for pointer analysis: 5186
   Number of created targets for uf: *(struct_backlight_device)* is 30
   Number of created targets for uf: *(struct_dentry)* is 16
   Number of created targets for uf: *signed_int is 1679
   Number of created targets for uf: *unsigned_long_long_int is 187
   Number of created targets for uf: *(struct_platform_device)* is 15
   Number of created targets for uf: *(struct_rfkill)* is 79
   Number of created targets for uf: *unsigned_long_int is 7


Number of BDD nodes:                               987
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1759 (count: 52109, min: 0, max: 181, avg: 0.03)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.723s
  Time for transition matches:                         0.333s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       332466 (count: 332466, min: 1, max: 1, avg: 1.00) [1 x 332466]

CPA algorithm statistics
------------------------
Number of iterations:            198888
Max size of waitlist:            39
Average size of waitlist:        15
Number of computed successors:   233155
Max successors for one state:    2
Number of times merged:          19164
Number of times stopped:         32574
Number of times breaked:         160

Total time for CPA algorithm:        20.972s (Max:     2.434s)
  Time for choose from waitlist:      0.164s
  Time for precision adjustment:      7.129s
  Time for transfer relation:        10.916s
  Time for merge operator:            1.031s
  Time for stop operator:             0.458s
  Time for adding to reached set:     0.343s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   160
Avg. length of target path (in blocks):               10665 (count: 160, min: 8, max: 83, avg: 66.66)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.792s
  Counterexample analysis:                             2.883s (Max:     0.042s, Calls: 160)
    Refinement sat check:                              1.825s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.052s
  Precision update:                                    0.078s
  ARG update:                                          0.654s

Length of refined path (in blocks):                    9520 (count: 160, min: 4, max: 74, avg: 59.50)
Number of affected states:                             2296 (count: 160, min: 1, max: 66, avg: 14.35)
Length (states) of path with itp 'true':               7064 (count: 160, min: 0, max: 58, avg: 44.15)
Length (states) of path with itp non-trivial itp:      2296 (count: 160, min: 1, max: 66, avg: 14.35)
Length (states) of path with itp 'false':               160 (count: 160, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 160, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2136 (count: 160, min: 0, max: 65, avg: 13.35)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                160
Number of successful refinements:     160
Number of failed refinements:         0
Max. size of reached set before ref.: 6650
Max. size of reached set after ref.:  3921
Avg. size of reached set before ref.: 4115.24
Avg. size of reached set after ref.:  2885.33

Total time for CEGAR algorithm:      25.710s
Time for refinements:                 4.430s
Average time for refinement:          0.027s
Max time for refinement:              0.129s

Code Coverage
-----------------------------
  Function coverage:      0.370
  Visited lines:          1479
  Total lines:            2094
  Line coverage:          0.706
  Visited conditions:     378
  Total conditions:       632
  Condition coverage:     0.598

CPAchecker general statistics
-----------------------------
Number of program locations:     2853
Number of CFA edges:             3225
Number of relevant variables:    327
Number of functions:             100
Number of loops:                 9
Size of reached set:             2794
  Number of reached locations:   826 (29%)
    Avg states per location:     3
    Max states per location:     84 (at node N106)
  Number of reached functions:   37 (37%)
  Number of partitions:          2792
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1133 (before line 5355), Function main called from node N1108, stack depth 1 [1a5b8489], stack [main]])
  Number of target states:       0
  Size of final wait list        18

Time for analysis setup:          4.073s
  Time for loading CPAs:          0.809s
  Time for loading parser:        0.518s
  Time for CFA construction:      2.654s
    Time for parsing file(s):     0.745s
    Time for AST to CFA:          0.891s
    Time for CFA sanity check:    0.169s
    Time for post-processing:     0.675s
      Time for var class.:        0.284s
Time for Analysis:               25.710s
CPU time for analysis:           25.710s
Total time for CPAchecker:       29.787s
Total CPU time for CPAchecker:   29.770s
Time for statistics:              0.123s

Time for Garbage Collector:       1.077s (in 90 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                110MB (   105 MiB) max;     65MB (    62 MiB) avg;    117MB (   111 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    34 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8076MB (  7702 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
