scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-net--netfilter--ipvs--ip_vs.ko-ldv_main13_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hxhze3b8/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 9397: Dead code detected: e = e->next; (CFACreationUtils.addEdgeToCFA, INFO)

line 10093: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

lines 10167-10168: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 10171-10172: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 10179-10180: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10209: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10212: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10215: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6234;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6234;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6234;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6234;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 13725: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13807: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 13810: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 13813: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16975: Dead code detected: __mptr___1 = (struct list_head const *)svc->s_list.next; (CFACreationUtils.addEdgeToCFA, INFO)

line 17012: Dead code detected: __mptr___4 = (struct list_head const *)svc->f_list.next; (CFACreationUtils.addEdgeToCFA, INFO)

line 19720: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19784: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19808: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19832: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19856: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20315: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20376: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20379: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 20382: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 21681: Dead code detected: skb_forward_csum(skb); (CFACreationUtils.addEdgeToCFA, INFO)

line 22466: Dead code detected: skb_forward_csum(skb); (CFACreationUtils.addEdgeToCFA, INFO)

line 22690: Dead code detected: skb_forward_csum(skb); (CFACreationUtils.addEdgeToCFA, INFO)

line 22891: Dead code detected: skb_forward_csum(skb); (CFACreationUtils.addEdgeToCFA, INFO)

line 23015: Dead code detected: skb_forward_csum(skb); (CFACreationUtils.addEdgeToCFA, INFO)

line 23546: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24355: Dead code detected: __mptr___2 = (struct list_head const *)inc->a_list.next; (CFACreationUtils.addEdgeToCFA, INFO)

line 24551: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 25273: Dead code detected: __ptr = (u8 volatile *)(& cp->sync_endtime); (CFACreationUtils.addEdgeToCFA, INFO)

line 25278: Dead code detected: __ptr___0 = (u16 volatile *)(& cp->sync_endtime); (CFACreationUtils.addEdgeToCFA, INFO)

line 25283: Dead code detected: __ptr___1 = (u32 volatile *)(& cp->sync_endtime); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& cp->sync_endtime);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_46316;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& cp->sync_endtime);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_46316;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& cp->sync_endtime);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_46316;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& cp->sync_endtime);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_46316;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 27574: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 27903: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28525: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28776: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 29989: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 30915: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 31286: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 32493: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 33120: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 21096: Function pointer *(dst->ops->check) with type struct dst_entry *(*)(struct dst_entry *, __u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24194: Function pointer *(app->pkt_in) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *, struct sk_buff *, int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24106: Function pointer *(app->pkt_out) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *, struct sk_buff *, int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 26573: Function pointer *(sock->ops->bind) with type int (*)(struct socket *, struct sockaddr *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20862: Function pointer *(dst->ops->link_failure) with type void (*)(struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24235: Function pointer *(app->pkt_in) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *, struct sk_buff *, int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24147: Function pointer *(app->pkt_out) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *, struct sk_buff *, int *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11213: Function pointer *(p->pe->fill_param) with type int (*)(struct ip_vs_conn_param *, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8191: Function pointer *(p->pe->hashkey_raw) with type u32 (*)(const struct ip_vs_conn_param *, u32 , bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9481: Function pointer *(cp->pe->show_pe_data) with type int (*)(const struct ip_vs_conn *, char *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8471: Function pointer *(p->pe->ct_match) with type bool (*)(const struct ip_vs_conn_param *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11307: Function pointer *(svc->scheduler->schedule) with type struct ip_vs_dest *(*)(struct ip_vs_service *, const struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11453: Function pointer *(svc->scheduler->schedule) with type struct ip_vs_dest *(*)(struct ip_vs_service *, const struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22491: Function pointer *(tmp___7->ops->update_pmtu) with type void (*)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22714: Function pointer *(tmp___6->ops->update_pmtu) with type void (*)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23951: Function pointer *(inc->done_conn) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 23945: Function pointer *(inc->unbind_conn) with type void (*)(struct ip_vs_app *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 26691: Function pointer *(sock->ops->bind) with type int (*)(struct socket *, struct sockaddr *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 26634-26635: Function pointer *(sock->ops->connect) with type int (*)(struct socket *, struct sockaddr *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 27964: Function pointer *(pp->init) with type void (*)(struct ip_vs_protocol *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 32297: Function pointer *(inc->init_conn) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 29773: Function pointer *(inc->init_conn) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 30687: Function pointer *(inc->init_conn) with type int (*)(struct ip_vs_app *, struct ip_vs_conn *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28025: Function pointer *(pp->exit) with type void (*)(struct ip_vs_protocol *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_make_writable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 31660: Ignoring function call through function pointer *(pp->csum_check): tmp___0 = (*(pp->csum_check))(__CPAchecker_TMP_4, skb, pp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 31585: Ignoring function call through function pointer *(pp->csum_check): tmp___0 = (*(pp->csum_check))(__CPAchecker_TMP_4, skb, pp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function skb_copy_bits to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_checksum to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24235: Ignoring function call through function pointer *(app->pkt_in): tmp___0 = (*(app->pkt_in))(app, cp, skb, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 24147: Ignoring function call through function pointer *(app->pkt_out): tmp___0 = (*(app->pkt_out))(app, cp, skb, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmemdup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32c to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function try_module_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_is_cpu_idle to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_lockdep_current_cpu_online to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_is_held to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_read_lock_bh_held to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function csum_ipv6_magic to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 24194: Ignoring function call through function pointer *(app->pkt_in): tmp___3 = (*(app->pkt_in))(app, cp, skb, &diff); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 24106: Ignoring function call through function pointer *(app->pkt_out): tmp___3 = (*(app->pkt_out))(app, cp, skb, &diff); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function net_ratelimit to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 29371: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(af, pp, (const struct sk_buff *)skb, 0, "Failed checksum for"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 30510: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(af, pp, (const struct sk_buff *)skb, 0, "Failed checksum for"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_read_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 31753: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(af, pp, (const struct sk_buff *)skb, 0, "Failed checksum for"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_read_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 29390: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(af, pp, (const struct sk_buff *)skb, 0, "Failed checksum for"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 30529: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(af, pp, (const struct sk_buff *)skb, 0, "Failed checksum for"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11417-11418: Ignoring function call through function pointer *(pp->conn_in_get): cp = (*(pp->conn_in_get))(__CPAchecker_TMP_3, (const struct sk_buff *)skb, (const struct ip_vs_iphdr *)iph, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11453: Ignoring function call through function pointer *(svc->scheduler->schedule): dest = (*(svc->scheduler->schedule))(svc, (const struct sk_buff *)skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 11422-11423: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(__CPAchecker_TMP_4, pp, (const struct sk_buff *)skb, 0, "Not scheduling reply for existing connection"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11408: Ignoring function call through function pointer *(pp->debug_packet): (*(pp->debug_packet))(__CPAchecker_TMP_1, pp, (const struct sk_buff *)skb, 0, "Not scheduling FTPDATA"); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11213: Ignoring function call through function pointer *(p->pe->fill_param): tmp = (*(p->pe->fill_param))(p, skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8191: Ignoring function call through function pointer *(p->pe->hashkey_raw): tmp = (*(p->pe->hashkey_raw))(p, ip_vs_conn_rnd, (int)inverse); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function kmem_cache_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8471: Ignoring function call through function pointer *(p->pe->ct_match): tmp___0 = (*(p->pe->ct_match))(p, cp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function inet_addr_type to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __ipv6_addr_type to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11307: Ignoring function call through function pointer *(svc->scheduler->schedule): dest = (*(svc->scheduler->schedule))(svc, (const struct sk_buff *)skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __module_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function icmp_send to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function icmpv6_send to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_write_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_write_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2122418 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2030127 (96%)
  Because of loop head:            91410 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         881 (0%)
  Times precision was empty:       330537 (16%)
  Times precision was {false}:     1876 (0%)
  Times result was cached:         1778617 (84%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      11388 (1%)
  Times result was 'false':        11284 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1276048
  BDD entailment checks:           358190
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       100
Number of predicates discovered:          7
Number of abstraction locations:          494
Max number of predicates per location:    6
Avg number of predicates per location:    5
Total predicates per abstraction:         10651290
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 803.02
Number of irrelevant predicates:          2027775 (19%)
Number of preds handled by boolean abs:   37750 (0%)
  Total number of models for allsat:      11388
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                129.973s
  Time for path formula creation:      126.995s
Time for strengthen operator:            6.803s
Time for prec operator:                421.070s
  Time for abstraction:                386.268s (Max:     0.455s, Count: 2122418)
    Boolean abstraction:                40.676s
    Solving time:                       45.412s (Max:     0.300s)
    Model enumeration time:              3.173s
    Time for BDD construction:           0.263s (Max:     0.012s)
Time for merge operator:                 9.522s
Time for coverage check:                 0.378s
  Time for BDD entailment checks:        0.275s
Total time for SMT solver (w/o itp):    48.585s

Number of path formula cache hits:   13392246 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    15.203s

Total number of created targets for pointer analysis: 168465
   Number of created targets for uf: *unsigned_short_int is 1035
   Number of created targets for uf: *(struct_ip_vs_pe)* is 151
   Number of created targets for uf: *(struct_net_device)* is 2
   Number of created targets for uf: *(char)* is 59
   Number of created targets for uf: *(struct_net)* is 6
   Number of created targets for uf: *signed_int is 11750
   Number of created targets for uf: *unsigned_char is 136
   Number of created targets for uf: *(union_nf_inet_addr)* is 301
   Number of created targets for uf: *(struct_list_head)* is 75
   Number of created targets for uf: *unsigned_int is 7
   Number of created targets for uf: *char is 121
   Number of created targets for uf: *unsigned_long_int is 101


Number of BDD nodes:                               232
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       22869 (count: 768214, min: 0, max: 103, avg: 0.03)
Time for BDD node cleanup:                             0.102s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 10.096s
  Time for transition matches:                         5.688s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                     10936692 (count: 10936692, min: 1, max: 1, avg: 1.00) [1 x 10936692]

CPA algorithm statistics
------------------------
Number of iterations:            7317310
Max size of waitlist:            214
Average size of waitlist:        59
Number of computed successors:   8153251
Max successors for one state:    2
Number of times merged:          458929
Number of times stopped:         736417
Number of times breaked:         881

Total time for CPA algorithm:       753.831s (Max:     2.931s)
  Time for choose from waitlist:      1.747s
  Time for precision adjustment:    451.331s
  Time for transfer relation:       263.383s
  Time for merge operator:           13.180s
  Time for stop operator:             5.942s
  Time for adding to reached set:     6.195s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   881
Avg. length of target path (in blocks):               43781 (count: 881, min: 6, max: 97, avg: 49.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 134.385s
  Counterexample analysis:                           124.170s (Max:     0.471s, Calls: 881)
    Refinement sat check:                            109.528s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.025s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.248s
  Precision update:                                    0.898s
  ARG update:                                          8.778s

Length of refined path (in blocks):                   42900 (count: 881, min: 5, max: 96, avg: 48.69)
Number of affected states:                            41138 (count: 881, min: 3, max: 94, avg: 46.69)
Length (states) of path with itp 'true':                881 (count: 881, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:     41138 (count: 881, min: 3, max: 94, avg: 46.69)
Length (states) of path with itp 'false':               881 (count: 881, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 881, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           40257 (count: 881, min: 2, max: 93, avg: 45.69)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                881
Number of successful refinements:     881
Number of failed refinements:         0
Max. size of reached set before ref.: 19880
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 8397.35
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:     892.116s
Time for refinements:               138.237s
Average time for refinement:          0.156s
Max time for refinement:              0.492s

Code Coverage
-----------------------------
  Function coverage:      0.163
  Visited lines:          3310
  Total lines:            15668
  Line coverage:          0.211
  Visited conditions:     732
  Total conditions:       4932
  Condition coverage:     0.148

CPAchecker general statistics
-----------------------------
Number of program locations:     23154
Number of CFA edges:             27837
Number of relevant variables:    5460
Number of functions:             804
Number of loops:                 137
Size of reached set:             12775
  Number of reached locations:   2280 (10%)
    Avg states per location:     5
    Max states per location:     243 (at node N22185)
  Number of reached functions:   131 (16%)
  Number of partitions:          12771
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N20671 (before line 31131), Function ah_esp_conn_out_get called from node N23177, stack depth 4 [20bd039f], stack [main, sctp_conn_schedule, ip_vs_schedule, ah_esp_conn_out_get]])
  Number of target states:       0
  Size of final wait list        60

Time for analysis setup:          8.252s
  Time for loading CPAs:          0.731s
  Time for loading parser:        0.430s
  Time for CFA construction:      7.011s
    Time for parsing file(s):     1.020s
    Time for AST to CFA:          2.643s
    Time for CFA sanity check:    1.095s
    Time for post-processing:     2.182s
      Time for var class.:        0.950s
Time for Analysis:              892.116s
CPU time for analysis:          892.010s
Total time for CPAchecker:      900.371s
Total CPU time for CPAchecker:  900.250s
Time for statistics:              0.282s

Time for Garbage Collector:      53.164s (in 4165 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                273MB (   260 MiB) max;    152MB (   145 MiB) avg;    283MB (   270 MiB) peak
Used non-heap memory:             48MB (    46 MiB) max;     42MB (    40 MiB) avg;     48MB (    46 MiB) peak
Allocated heap memory:           284MB (   271 MiB) max;    220MB (   210 MiB) avg
Allocated non-heap memory:        50MB (    48 MiB) max;     50MB (    48 MiB) avg
Total process virtual memory:   8293MB (  7909 MiB) max;   8223MB (  7842 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
