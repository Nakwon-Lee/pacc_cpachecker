scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-fs--ecryptfs--ecryptfs.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_qtf0l9de/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5078: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5081: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5084: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6520;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6520;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6520;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6520;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7126: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7129: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7132: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7166-7167: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7170-7171: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 7178-7179: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8280: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8344: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8778: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8781: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8784: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6379;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6379;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6379;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6379;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9696: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9699: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 9702: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6363;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6363;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6363;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6363;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16309: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17190: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17930: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 17933: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 17936: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx");
  goto ldv_25943;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx");
  goto ldv_25943;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx");
  goto ldv_25943;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx");
  goto ldv_25943;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (buf): "ebx");
  goto ldv_25943;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 17953-17954: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 17957-17958: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 17965-17966: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx");
  goto ldv_25952;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx");
  goto ldv_25952;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx");
  goto ldv_25952;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx");
  goto ldv_25952;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((__be32 *)buf + 1U): "ebx");
  goto ldv_25952;
  } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13465: Function pointer *(tmp___0->decrypt) with type int (*)(struct blkcipher_desc *, struct scatterlist *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10447: Function pointer *(tmp->decrypt) with type int (*)(struct blkcipher_desc *, struct scatterlist *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13450: Function pointer *(tmp___0->encrypt) with type int (*)(struct blkcipher_desc *, struct scatterlist *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10435: Function pointer *(tmp->encrypt) with type int (*)(struct blkcipher_desc *, struct scatterlist *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10423: Function pointer *(tmp->setkey) with type int (*)(struct crypto_tfm *, u8 *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10532: Function pointer *(tmp->final) with type int (*)(struct hash_desc *, u8 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10521: Function pointer *(tmp->update) with type int (*)(struct hash_desc *, struct scatterlist *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17594: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_barrier to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 8034-8035: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: %s: kmem_cache_create failed\n", "ecryptfs_init_kmem_caches", info->name) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function vprintk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7350: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_create_and_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_create_on_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kzfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_filesystem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strsep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7676-7677: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: You must supply at least one valid auth tok signature as a mount parameter; see the eCryptfs README\n", "ecryptfs_parse_options") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function match_token to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtol to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 7716-7717: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: eCryptfs doesn\'t support cipher: %s", "ecryptfs_parse_options", (unsigned char *)(&(mount_crypt_stat->global_default_cipher_name))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crypto_alloc_base to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10423: Ignoring function call through function pointer *(tmp->setkey): tmp___1 = (*(tmp->setkey))(tmp___0, key, keylen); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function request_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 13987-13988: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Minor version number mismatch. Expected [%d]; got [%d]\n", "ecryptfs_verify_version", 4, (int)minor) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 13979-13980: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\v%s: Major version number mismatch. Expected [%d]; got [%d]\n", "ecryptfs_verify_version", 0, (int)major) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function up_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function key_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 13534-13535: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Unknown error code: [0x%.16lx]\n", "process_request_key_err", err_code) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 13530: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Key revoked\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 13526: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: Key expired\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 13522: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: No key\n", "process_request_key_err") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function sget to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bdi_setup_and_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function deactivate_locked_super to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kern_path to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function path_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7845: Ignoring parameters passed as varargs to function __ecryptfs_printk: __ecryptfs_printk("\f%s: kern_path() failed\n", "ecryptfs_mount") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function igrab to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iget5_locked to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iput to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unlock_new_inode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function d_make_root to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kill_anon_super to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bdi_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_filesystem to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1111879 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  997036 (90%)
  Because of loop head:            111860 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2983 (0%)
  Times precision was empty:       60918 (5%)
  Times precision was {false}:     5346 (0%)
  Times result was cached:         988694 (89%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      56921 (5%)
  Times result was 'false':        109132 (10%)
Number of strengthen sat checks:   0
Number of coverage checks:         586804
  BDD entailment checks:           230228
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       84
Number of predicates discovered:          30
Number of abstraction locations:          334
Max number of predicates per location:    25
Avg number of predicates per location:    14
Total predicates per abstraction:         11779372
Max number of predicates per abstraction: 25
Avg number of predicates per abstraction: 189.18
Number of irrelevant predicates:          3016935 (26%)
Number of preds handled by boolean abs:   430766 (4%)
  Total number of models for allsat:      66504
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.17

Time for post operator:                 56.170s
  Time for path formula creation:       54.880s
Time for strengthen operator:            2.999s
Time for prec operator:                620.665s
  Time for abstraction:                607.937s (Max:     0.648s, Count: 1111879)
    Boolean abstraction:               349.441s
    Solving time:                      116.183s (Max:     0.167s)
    Model enumeration time:            229.024s
    Time for BDD construction:           1.093s (Max:     0.015s)
Time for merge operator:                 6.459s
Time for coverage check:                 0.294s
  Time for BDD entailment checks:        0.228s
Total time for SMT solver (w/o itp):   345.208s

Number of path formula cache hits:   5684638 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    26.034s

Total number of created targets for pointer analysis: 370538
   Number of created targets for uf: *(struct_hlist_node)* is 197
   Number of created targets for uf: *(struct_dentry)* is 248
   Number of created targets for uf: *unsigned_long_int is 1981
   Number of created targets for uf: *(char)* is 1535
   Number of created targets for uf: *signed_int is 21
   Number of created targets for uf: *unsigned_char is 88
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *(struct_ecryptfs_auth_tok)* is 227
   Number of created targets for uf: *(struct_kmem_cache)* is 12
   Number of created targets for uf: *unsigned_int is 5881
   Number of created targets for uf: *char is 23053
   Number of created targets for uf: *(struct_vfsmount)* is 147
   Number of created targets for uf: *(struct_ecryptfs_message)* is 95


Number of BDD nodes:                               12107
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                      128729 (count: 672385, min: 0, max: 771, avg: 0.19)
Time for BDD node cleanup:                             0.136s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.213s
  Time for transition matches:                         3.172s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.019s
Automaton transfers with branching:                0
Automaton transfer successors:                      5098395 (count: 5098395, min: 1, max: 1, avg: 1.00) [1 x 5098395]

CPA algorithm statistics
------------------------
Number of iterations:            3750238
Max size of waitlist:            31
Average size of waitlist:        11
Number of computed successors:   4193349
Max successors for one state:    2
Number of times merged:          178288
Number of times stopped:         324008
Number of times breaked:         2983

Total time for CPA algorithm:       747.667s (Max:     4.771s)
  Time for choose from waitlist:      0.976s
  Time for precision adjustment:    635.082s
  Time for transfer relation:        91.441s
  Time for merge operator:            7.926s
  Time for stop operator:             3.010s
  Time for adding to reached set:     3.439s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2983
Avg. length of target path (in blocks):              314308 (count: 2983, min: 10, max: 242, avg: 105.37)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 132.500s
  Counterexample analysis:                           122.609s (Max:     0.201s, Calls: 2983)
    Refinement sat check:                             83.971s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.150s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.461s
  Precision update:                                    3.844s
  ARG update:                                          4.261s

Length of refined path (in blocks):                  305889 (count: 2983, min: 9, max: 241, avg: 102.54)
Number of affected states:                           113568 (count: 2983, min: 0, max: 239, avg: 38.07)
Length (states) of path with itp 'true':             189338 (count: 2983, min: 0, max: 171, avg: 63.47)
Length (states) of path with itp non-trivial itp:    113568 (count: 2983, min: 0, max: 239, avg: 38.07)
Length (states) of path with itp 'false':              2983 (count: 2983, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2983, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          110593 (count: 2983, min: 0, max: 238, avg: 37.07)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2983
Number of successful refinements:     2983
Number of failed refinements:         0
Max. size of reached set before ref.: 8909
Max. size of reached set after ref.:  7897
Avg. size of reached set before ref.: 4689.51
Avg. size of reached set after ref.:  3429.87

Total time for CEGAR algorithm:     894.325s
Time for refinements:               141.305s
Average time for refinement:          0.047s
Max time for refinement:              0.445s

Code Coverage
-----------------------------
  Function coverage:      0.110
  Visited lines:          1537
  Total lines:            9420
  Line coverage:          0.163
  Visited conditions:     202
  Total conditions:       2400
  Condition coverage:     0.084

CPAchecker general statistics
-----------------------------
Number of program locations:     13277
Number of CFA edges:             15369
Number of relevant variables:    2395
Number of functions:             672
Number of loops:                 83
Size of reached set:             2706
  Number of reached locations:   774 (6%)
    Avg states per location:     3
    Max states per location:     22 (at node N13130)
  Number of reached functions:   74 (11%)
  Number of partitions:          2665
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N3189 (before line 8203), Function main called from node N3176, stack depth 1 [36349e29], stack [main]])
  Number of target states:       0
  Size of final wait list        23

Time for analysis setup:          6.004s
  Time for loading CPAs:          0.814s
  Time for loading parser:        0.461s
  Time for CFA construction:      4.657s
    Time for parsing file(s):     0.892s
    Time for AST to CFA:          1.782s
    Time for CFA sanity check:    0.468s
    Time for post-processing:     1.323s
      Time for var class.:        0.627s
Time for Analysis:              894.325s
CPU time for analysis:          894.160s
Total time for CPAchecker:      900.332s
Total CPU time for CPAchecker:  900.150s
Time for statistics:              0.120s

Time for Garbage Collector:      21.238s (in 2403 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                355MB (   338 MiB) max;    217MB (   207 MiB) avg;    360MB (   343 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           368MB (   350 MiB) max;    291MB (   278 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:   9295MB (  8865 MiB) max;   8697MB (  8294 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
