scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/linux-3.8-rc1-32_7a-drivers--hwmon--w83793.ko-ldv_main0_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_m23gk6ar/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

lines 2972-2973: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 2976-2977: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 2984-2985: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5664: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5667: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5673: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5687-5688: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5691-5692: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5699-5700: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5719-5720: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5723-5724: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5731-5732: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5759-5760: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5763-5764: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5771-5772: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 7157: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7531: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3200: Function pointer *(adap->algo->functionality) with type u32 (*)(struct i2c_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_smbus_write_byte_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3200: Ignoring function call through function pointer *(adap->algo->functionality): tmp = (*(adap->algo->functionality))(adap); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_crit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_smbus_read_byte_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_new_dummy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            10856 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  9986 (92%)
  Because of loop head:            567 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         303 (3%)
  Times precision was empty:       3688 (34%)
  Times precision was {false}:     158 (1%)
  Times result was cached:         6671 (61%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      339 (3%)
  Times result was 'false':        856 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         4240
  BDD entailment checks:           882
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       46
Number of predicates discovered:          11
Number of abstraction locations:          149
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         11004
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 22.14
Number of irrelevant predicates:          4650 (42%)
Number of preds handled by boolean abs:   512 (5%)
  Total number of models for allsat:      341
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.01

Time for post operator:                  1.880s
  Time for path formula creation:        1.843s
Time for strengthen operator:            0.090s
Time for prec operator:                  7.131s
  Time for abstraction:                  6.946s (Max:     0.250s, Count: 10856)
    Boolean abstraction:                 3.301s
    Solving time:                        4.975s (Max:     0.238s)
    Model enumeration time:              0.137s
    Time for BDD construction:           0.042s (Max:     0.008s)
Time for merge operator:                 0.572s
Time for coverage check:                 0.029s
  Time for BDD entailment checks:        0.028s
Total time for SMT solver (w/o itp):     5.112s

Number of path formula cache hits:   60234 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.582s

Total number of created targets for pointer analysis: 17477
   Number of created targets for uf: *unsigned_short_int is 141
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 405
   Number of created targets for uf: *(struct_list_head)* is 4
   Number of created targets for uf: *(struct_i2c_client)* is 4
   Number of created targets for uf: *(struct_device)* is 6
   Number of created targets for uf: *unsigned_int is 6


Number of BDD nodes:                               239
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         821 (count: 7471, min: 0, max: 167, avg: 0.11)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.293s
Automaton transfers with branching:                0
Automaton transfer successors:                        55146 (count: 55146, min: 1, max: 1, avg: 1.00) [1 x 55146]

CPA algorithm statistics
------------------------
Number of iterations:            37800
Max size of waitlist:            27
Average size of waitlist:        17
Number of computed successors:   42008
Max successors for one state:    2
Number of times merged:          1679
Number of times stopped:         2437
Number of times breaked:         303

Total time for CPA algorithm:        11.577s (Max:     3.499s)
  Time for choose from waitlist:      0.029s
  Time for precision adjustment:      7.491s
  Time for transfer relation:         2.969s
  Time for merge operator:            0.647s
  Time for stop operator:             0.140s
  Time for adding to reached set:     0.072s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   303
Avg. length of target path (in blocks):                5717 (count: 303, min: 8, max: 89, avg: 18.87)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  13.880s
  Counterexample analysis:                            13.463s (Max:     0.610s, Calls: 303)
    Refinement sat check:                             11.921s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.040s
  Precision update:                                    0.108s
  ARG update:                                          0.150s

Length of refined path (in blocks):                    5243 (count: 302, min: 7, max: 81, avg: 17.36)
Number of affected states:                             2473 (count: 302, min: 4, max: 79, avg: 8.19)
Length (states) of path with itp 'true':               2468 (count: 302, min: 0, max: 20, avg: 8.17)
Length (states) of path with itp non-trivial itp:      2473 (count: 302, min: 4, max: 79, avg: 8.19)
Length (states) of path with itp 'false':               302 (count: 302, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          29 (count: 302, min: 0, max: 2, avg: 0.10)
Equal non-trivial interpolants along paths:            2142 (count: 302, min: 3, max: 78, avg: 7.09)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                303
Number of successful refinements:     302
Number of failed refinements:         0
Max. size of reached set before ref.: 2211
Max. size of reached set after ref.:  1251
Avg. size of reached set before ref.: 714.31
Avg. size of reached set after ref.:  588.47

Total time for CEGAR algorithm:      25.895s
Time for refinements:                14.170s
Average time for refinement:          0.046s
Max time for refinement:              0.619s

Code Coverage
-----------------------------
  Function coverage:      0.337
  Visited lines:          1426
  Total lines:            2909
  Line coverage:          0.490
  Visited conditions:     278
  Total conditions:       674
  Condition coverage:     0.412

CPAchecker general statistics
-----------------------------
Number of program locations:     4113
Number of CFA edges:             4623
Number of relevant variables:    722
Number of functions:             172
Number of loops:                 40
Size of reached set:             1793
  Number of reached locations:   861 (21%)
    Avg states per location:     2
    Max states per location:     28 (at node N155)
  Number of reached functions:   58 (34%)
  Number of partitions:          1792
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2087 (before line 6177), Function w83793_probe called from node N2907, stack depth 2 [21f104b8], stack [main, w83793_probe]])
  Number of target states:       1
  Size of final wait list        15

Time for analysis setup:          3.953s
  Time for loading CPAs:          0.737s
  Time for loading parser:        0.412s
  Time for CFA construction:      2.699s
    Time for parsing file(s):     0.628s
    Time for AST to CFA:          0.978s
    Time for CFA sanity check:    0.193s
    Time for post-processing:     0.757s
      Time for var class.:        0.411s
Time for Analysis:               25.895s
CPU time for analysis:           25.900s
Total time for CPAchecker:       29.856s
Total CPU time for CPAchecker:   29.840s
Time for statistics:              0.089s

Time for Garbage Collector:       0.341s (in 39 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     50MB (    47 MiB) avg;     72MB (    69 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     36MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8084MB (  7710 MiB) max;   8011MB (  7640 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
