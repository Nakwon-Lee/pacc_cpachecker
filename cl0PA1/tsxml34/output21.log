scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-fs--ceph--ceph.ko-ldv_main7_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_03i61hvi/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 4475-4476: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4479-4480: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4483-4484: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5576;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5576;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5576;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5576;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 15945: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 15948: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 15951: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16651: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16654: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16657: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6230;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6230;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6230;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6230;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 27875: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 29871: Dead code detected: return (0UL); (CFACreationUtils.addEdgeToCFA, INFO)

line 31510: Dead code detected: __ptr = (u8 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 31515: Dead code detected: __ptr___0 = (u16 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 31525: Dead code detected: __ptr___2 = (u64 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 31689: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 31692: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 31695: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6618;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6618;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6618;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6618;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 40892: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

lines 11547-11548: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 32638-32639: Function pointer *(s->s_mdsc->fsc->client->monc.auth->ops->destroy_authorizer) with type void (*)(struct ceph_auth_client *, struct ceph_authorizer *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12037-12039: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11814: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 11783: Function pointer *filldir with type int (*)(void *, const char *, int, loff_t , u64 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 35238: Function pointer *(req->r_callback) with type void (*)(struct ceph_mds_client *, struct ceph_mds_request *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 38530: Function pointer *(ac->ops->create_authorizer) with type int (*)(struct ceph_auth_client *, int, struct ceph_auth_handshake *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 38519: Function pointer *(ac->ops->destroy_authorizer) with type void (*)(struct ceph_auth_client *, struct ceph_authorizer *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 38573: Function pointer *(ac->ops->invalidate_authorizer) with type void (*)(struct ceph_auth_client *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 38556: Function pointer *(ac->ops->verify_authorizer_reply) with type int (*)(struct ceph_auth_client *, struct ceph_authorizer *, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function d_find_alias to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dput to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ceph_str_hash to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ilookup5 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function d_obtain_alias to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ihold to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kmem_cache_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_insert_color to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 32638-32639: Ignoring function call through function pointer *(s->s_mdsc->fsc->client->monc.auth->ops->destroy_authorizer): (*(s->s_mdsc->fsc->client->monc.auth->ops->destroy_authorizer))(s->s_mdsc->fsc->client->monc.auth, s->s_auth.authorizer); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function get_random_bytes to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rb_first to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ceph_con_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ceph_con_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function complete_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 35238: Ignoring function call through function pointer *(req->r_callback): (*(req->r_callback))(mdsc, req); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ceph_msg_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ceph_con_send to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_acquire to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_is_cpu_idle to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_rcu_suspicious to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            8616 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  7754 (90%)
  Because of loop head:            833 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         29 (0%)
  Times precision was empty:       3403 (39%)
  Times precision was {false}:     474 (6%)
  Times result was cached:         4438 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      301 (3%)
  Times result was 'false':        88 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         4374
  BDD entailment checks:           1220
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       54
Number of predicates discovered:          4
Number of abstraction locations:          170
Max number of predicates per location:    3
Avg number of predicates per location:    1
Total predicates per abstraction:         7920
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 10.22
Number of irrelevant predicates:          2862 (36%)
Number of preds handled by boolean abs:   370 (5%)
  Total number of models for allsat:      301
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  5.821s
  Time for path formula creation:        5.773s
Time for strengthen operator:            0.149s
Time for prec operator:                  2.816s
  Time for abstraction:                  2.509s (Max:     0.023s, Count: 8616)
    Boolean abstraction:                 0.355s
    Solving time:                        0.535s (Max:     0.016s)
    Model enumeration time:              0.036s
    Time for BDD construction:           0.019s (Max:     0.004s)
Time for merge operator:                 0.972s
Time for coverage check:                 0.025s
  Time for BDD entailment checks:        0.022s
Total time for SMT solver (w/o itp):     0.571s

Number of path formula cache hits:   30404 (58%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.237s

Total number of created targets for pointer analysis: 63645
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(struct_inode)* is 32
   Number of created targets for uf: *(struct_rb_node)* is 21
   Number of created targets for uf: *(struct_ceph_cap)* is 2
   Number of created targets for uf: *unsigned_long_int is 17
   Number of created targets for uf: *(struct_ceph_mds_session)* is 13
   Number of created targets for uf: *(struct_ceph_mds_client)* is 2
   Number of created targets for uf: *signed_int is 14
   Number of created targets for uf: *(char)* is 31
   Number of created targets for uf: *(struct_list_head)* is 110
   Number of created targets for uf: *unsigned_long_long_int is 16
   Number of created targets for uf: *char is 6401
   Number of created targets for uf: *unsigned_int is 3


Number of BDD nodes:                               205
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         619 (count: 8814, min: 0, max: 116, avg: 0.07)
Time for BDD node cleanup:                             0.028s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.167s
Automaton transfers with branching:                0
Automaton transfer successors:                        46754 (count: 46754, min: 1, max: 1, avg: 1.00) [1 x 46754]

CPA algorithm statistics
------------------------
Number of iterations:            28420
Max size of waitlist:            34
Average size of waitlist:        12
Number of computed successors:   31583
Max successors for one state:    2
Number of times merged:          1577
Number of times stopped:         2711
Number of times breaked:         29

Total time for CPA algorithm:        17.913s (Max:     4.160s)
  Time for choose from waitlist:      0.043s
  Time for precision adjustment:      3.364s
  Time for transfer relation:        12.893s
  Time for merge operator:            1.063s
  Time for stop operator:             0.115s
  Time for adding to reached set:     0.131s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   29
Avg. length of target path (in blocks):                2581 (count: 29, min: 32, max: 143, avg: 89.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.257s
  Counterexample analysis:                             2.024s (Max:     0.124s, Calls: 29)
    Refinement sat check:                              1.442s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.055s
  Precision update:                                    0.030s
  ARG update:                                          0.122s

Length of refined path (in blocks):                    2552 (count: 29, min: 31, max: 142, avg: 88.00)
Number of affected states:                             2089 (count: 29, min: 22, max: 108, avg: 72.03)
Length (states) of path with itp 'true':                434 (count: 29, min: 1, max: 82, avg: 14.97)
Length (states) of path with itp non-trivial itp:      2089 (count: 29, min: 22, max: 108, avg: 72.03)
Length (states) of path with itp 'false':                29 (count: 29, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 29, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2060 (count: 29, min: 21, max: 107, avg: 71.03)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                29
Number of successful refinements:     29
Number of failed refinements:         0
Max. size of reached set before ref.: 1441
Max. size of reached set after ref.:  1109
Avg. size of reached set before ref.: 1009.72
Avg. size of reached set after ref.:  196.17

Total time for CEGAR algorithm:      20.354s
Time for refinements:                 2.431s
Average time for refinement:          0.083s
Max time for refinement:              0.142s

Code Coverage
-----------------------------
  Function coverage:      0.142
  Visited lines:          2697
  Total lines:            23511
  Line coverage:          0.115
  Visited conditions:     496
  Total conditions:       5878
  Condition coverage:     0.084

CPAchecker general statistics
-----------------------------
Number of program locations:     31235
Number of CFA edges:             36993
Number of relevant variables:    5612
Number of functions:             847
Number of loops:                 227
Size of reached set:             5192
  Number of reached locations:   1608 (5%)
    Avg states per location:     3
    Max states per location:     102 (at node N30895)
  Number of reached functions:   120 (14%)
  Number of partitions:          5192
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        31

Time for analysis setup:          9.974s
  Time for loading CPAs:          1.065s
  Time for loading parser:        0.493s
  Time for CFA construction:      8.270s
    Time for parsing file(s):     1.251s
    Time for AST to CFA:          2.960s
    Time for CFA sanity check:    0.933s
    Time for post-processing:     2.893s
      Time for var class.:        1.495s
Time for Analysis:               20.354s
CPU time for analysis:           20.350s
Total time for CPAchecker:       30.331s
Total CPU time for CPAchecker:   30.290s
Time for statistics:              0.230s

Time for Garbage Collector:       1.151s (in 53 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                180MB (   172 MiB) max;    125MB (   119 MiB) avg;    186MB (   177 MiB) peak
Used non-heap memory:             49MB (    46 MiB) max;     40MB (    38 MiB) avg;     49MB (    47 MiB) peak
Allocated heap memory:           191MB (   182 MiB) max;    177MB (   169 MiB) avg
Allocated non-heap memory:        50MB (    48 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
