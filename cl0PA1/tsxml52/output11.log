scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--usb--host--ohci-hcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_c2ibwdza/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 8619: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8652: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8685: Dead code detected: __ms___1 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8712: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10787: Dead code detected: pci_unregister_driver(& ohci_pci_driver); (CFACreationUtils.addEdgeToCFA, INFO)

line 11947: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4155: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4187: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5595: Function pointer *(ohci->start_hnp) with type void (*)(struct ohci_hcd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10652: Function pointer *(pdata->power_off) with type void (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10672: Function pointer *(pdata->power_off) with type void (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10689: Function pointer *(pdata->power_suspend) with type void (*)(struct platform_device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function usb_hcd_pci_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_pci_shutdown to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_pci_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_platform_shutdown to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function default_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ohci_platform_pm_ops_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_read_from_buffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_set_wakeup_capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_check_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hcd_poll_rh_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_hc_died to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scnprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_amd_dev_put to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5595: Ignoring function call through function pointer *(ohci->start_hnp): (*(ohci->start_hnp))(ohci); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10689: Ignoring function call through function pointer *(pdata->power_suspend): (*(pdata->power_suspend))(pdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10712: Ignoring function call through function pointer *(pdata->power_on): tmp___0 = (*(pdata->power_on))(pdev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_disabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10614: Ignoring function call through function pointer *(pdata->power_on): err = (*(pdata->power_on))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 10614: Unsupported feature (recursion): err = ohci_platform_probe(dev); (line was originally pointer call(ohci_platform_probe) err = (*(pdata->power_on))(dev);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            6516 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  6335 (97%)
  Because of loop head:            158 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         23 (0%)
  Times precision was empty:       3782 (58%)
  Times precision was {false}:     660 (10%)
  Times result was cached:         2039 (31%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      35 (1%)
  Times result was 'false':        581 (9%)
Number of strengthen sat checks:   0
Number of coverage checks:         12073
  BDD entailment checks:           247
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       107
Number of predicates discovered:          6
Number of abstraction locations:          22
Max number of predicates per location:    5
Avg number of predicates per location:    1
Total predicates per abstraction:         2923
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 4.21
Number of irrelevant predicates:          2676 (92%)
Number of preds handled by boolean abs:   74 (3%)
  Total number of models for allsat:      123
  Max number of models for allsat:        32
  Avg number of models for allsat:        3.51

Time for post operator:                  3.313s
  Time for path formula creation:        3.214s
Time for strengthen operator:            0.103s
Time for prec operator:                  2.457s
  Time for abstraction:                  2.186s (Max:     0.056s, Count: 6516)
    Boolean abstraction:                 0.324s
    Solving time:                        0.465s (Max:     0.015s)
    Model enumeration time:              0.099s
    Time for BDD construction:           0.043s (Max:     0.019s)
Time for merge operator:                 0.387s
Time for coverage check:                 0.028s
  Time for BDD entailment checks:        0.028s
Total time for SMT solver (w/o itp):     0.564s

Number of path formula cache hits:   22156 (39%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.023s

Total number of created targets for pointer analysis: 23
   Number of created targets for uf: *signed_int is 17
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *(struct_ohci_hcd)* is 4
   Number of created targets for uf: *(Return_type:_[signed_long_int],_Parameters:_1,_Parameter_1_type:_[(struct_debug_buffer)*],_VarArgs:_false)* is 4


Number of BDD nodes:                               307
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         141 (count: 7752, min: 0, max: 33, avg: 0.02)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.249s
Automaton transfers with branching:                0
Automaton transfer successors:                        52129 (count: 52129, min: 1, max: 1, avg: 1.00) [1 x 52129]

CPA algorithm statistics
------------------------
Number of iterations:            36900
Max size of waitlist:            289
Average size of waitlist:        126
Number of computed successors:   48605
Max successors for one state:    2
Number of times merged:          5913
Number of times stopped:         6021
Number of times breaked:         23

Total time for CPA algorithm:         9.193s (Max:     0.919s)
  Time for choose from waitlist:      0.063s
  Time for precision adjustment:      3.000s
  Time for transfer relation:         4.749s
  Time for merge operator:            0.615s
  Time for stop operator:             0.158s
  Time for adding to reached set:     0.206s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   23
Avg. length of target path (in blocks):                 667 (count: 23, min: 12, max: 122, avg: 29.00)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.560s
  Counterexample analysis:                             0.349s (Max:     0.048s, Calls: 23)
    Refinement sat check:                              0.242s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.004s
  Precision update:                                    0.025s
  ARG update:                                          0.152s

Length of refined path (in blocks):                      92 (count: 23, min: 4, max: 4, avg: 4.00)
Number of affected states:                               23 (count: 23, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'true':                 46 (count: 23, min: 2, max: 2, avg: 2.00)
Length (states) of path with itp non-trivial itp:        23 (count: 23, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp 'false':                23 (count: 23, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 23, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:               0 (count: 23, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                23
Number of successful refinements:     23
Number of failed refinements:         0
Max. size of reached set before ref.: 2619
Max. size of reached set after ref.:  8
Avg. size of reached set before ref.: 1806.09
Avg. size of reached set after ref.:  8.00

Total time for CEGAR algorithm:       9.841s
Time for refinements:                 0.648s
Average time for refinement:          0.028s
Max time for refinement:              0.071s

Code Coverage
-----------------------------
  Function coverage:      0.111
  Visited lines:          1163
  Total lines:            5946
  Line coverage:          0.196
  Visited conditions:     400
  Total conditions:       1922
  Condition coverage:     0.208

CPAchecker general statistics
-----------------------------
Number of program locations:     8261
Number of CFA edges:             9836
Number of relevant variables:    1328
Number of functions:             199
Number of loops:                 44
Size of reached set:             648
  Number of reached locations:   620 (8%)
    Avg states per location:     1
    Max states per location:     3 (at node N939)
  Number of reached functions:   22 (11%)
  Number of partitions:          648
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        55

Time for analysis setup:          4.646s
  Time for loading CPAs:          0.778s
  Time for loading parser:        0.400s
  Time for CFA construction:      3.386s
    Time for parsing file(s):     0.719s
    Time for AST to CFA:          1.104s
    Time for CFA sanity check:    0.356s
    Time for post-processing:     1.103s
      Time for var class.:        0.465s
Time for Analysis:                9.842s
CPU time for analysis:            9.840s
Total time for CPAchecker:       14.490s
Total CPU time for CPAchecker:   14.480s
Time for statistics:              0.082s

Time for Garbage Collector:       0.423s (in 34 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 81MB (    77 MiB) max;     53MB (    50 MiB) avg;     85MB (    82 MiB) peak
Used non-heap memory:             38MB (    37 MiB) max;     33MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     34MB (    33 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8067MB (  7693 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
