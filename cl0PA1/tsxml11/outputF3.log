scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cciss.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_a1ehihik/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4581: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4584: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 4587: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10969: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10975: Dead code detected: __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10978: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (2UL) {
  case 1:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36852;
  case 2:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36852;
  case 4:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36852;
  case 8:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36852;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36852;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10990: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10993: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

line 10999: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf));
  goto ldv_36861;
  case 2:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf));
  goto ldv_36861;
  case 4:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf));
  goto ldv_36861;
  case 8:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf));
  goto ldv_36861;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->buf));
  goto ldv_36861;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11073: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11076: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11082: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36881;
  case 2:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36881;
  case 4:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36881;
  case 8:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36881;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (& arg32->buf_size));
  goto ldv_36881;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11094: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11097: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11103: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size));
  goto ldv_36890;
  case 2:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size));
  goto ldv_36890;
  case 4:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size));
  goto ldv_36890;
  case 8:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size));
  goto ldv_36890;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" (& arg32->malloc_size));
  goto ldv_36890;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11115: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11118: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11124: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf));
  goto ldv_36899;
  case 2:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf));
  goto ldv_36899;
  case 4:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf));
  goto ldv_36899;
  case 8:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf));
  goto ldv_36899;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" (& arg32->buf));
  goto ldv_36899;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 14595: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 14600: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 14605: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  tmp = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp->state): : "memory",
                       "cc");
  goto ldv_37675;
  case 2:
  tmp___0 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_37675;
  case 4:
  tmp___1 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_37675;
  case 8:
  tmp___2 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_37675;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 17789: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17922: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 9614: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9602: Function pointer *done with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8945: Function pointer *(cmd->scsi_done) with type void (*)(struct scsi_cmnd *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5288: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5320: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5180: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5115-5116: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5209: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5148: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_cciss_host_type_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_cciss_dev_type_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __get_free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __bus_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_create_on_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bus_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4861: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function scsi_cmd_get_serial to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function compat_alloc_user_space to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            325215 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  312244 (96%)
  Because of loop head:            12868 (4%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         103 (0%)
  Times precision was empty:       265020 (81%)
  Times precision was {false}:     2911 (1%)
  Times result was cached:         53966 (17%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3318 (1%)
  Times result was 'false':        4705 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         624814
  BDD entailment checks:           117320
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       151
Number of predicates discovered:          22
Number of abstraction locations:          37
Max number of predicates per location:    21
Avg number of predicates per location:    5
Total predicates per abstraction:         345604
Max number of predicates per abstraction: 21
Avg number of predicates per abstraction: 55.48
Number of irrelevant predicates:          228511 (66%)
Number of preds handled by boolean abs:   17298 (5%)
  Total number of models for allsat:      860027
  Max number of models for allsat:        13824
  Avg number of models for allsat:        259.20

Time for post operator:                 36.806s
  Time for path formula creation:       36.029s
Time for strengthen operator:            1.883s
Time for prec operator:                477.071s
  Time for abstraction:                473.777s (Max:     7.761s, Count: 325215)
    Boolean abstraction:               458.429s
    Solving time:                        5.892s (Max:     0.023s)
    Model enumeration time:            434.943s
    Time for BDD construction:          18.553s (Max:     0.521s)
Time for merge operator:                 2.480s
Time for coverage check:                 0.213s
  Time for BDD entailment checks:        0.165s
Total time for SMT solver (w/o itp):   440.835s

Number of path formula cache hits:   3244529 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    24.353s

Total number of created targets for pointer analysis: 25378
   Number of created targets for uf: *signed_int is 1661
   Number of created targets for uf: *unsigned_char is 65
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *unsigned_int is 3025


Number of BDD nodes:                               224378
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       12813 (count: 420050, min: 0, max: 403, avg: 0.03)
Time for BDD node cleanup:                             0.080s
Time for BDD garbage collection:                       0.105s (in 7 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  3.087s
  Time for transition matches:                         1.850s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                      2887205 (count: 2887205, min: 1, max: 1, avg: 1.00) [1 x 2887205]

CPA algorithm statistics
------------------------
Number of iterations:            1679048
Max size of waitlist:            1808
Average size of waitlist:        883
Number of computed successors:   2064426
Max successors for one state:    2
Number of times merged:          253747
Number of times stopped:         301413
Number of times breaked:         103

Total time for CPA algorithm:       549.789s (Max:   100.232s)
  Time for choose from waitlist:      0.599s
  Time for precision adjustment:    484.918s
  Time for transfer relation:        53.738s
  Time for merge operator:            4.185s
  Time for stop operator:             1.609s
  Time for adding to reached set:     1.801s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   103
Avg. length of target path (in blocks):                1338 (count: 103, min: 8, max: 17, avg: 12.99)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 343.512s
  Counterexample analysis:                           340.925s (Max:     3.939s, Calls: 103)
    Refinement sat check:                            333.293s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.022s
  Precision update:                                    0.027s
  ARG update:                                          2.489s

Length of refined path (in blocks):                    1072 (count: 103, min: 4, max: 13, avg: 10.41)
Number of affected states:                              826 (count: 103, min: 1, max: 11, avg: 8.02)
Length (states) of path with itp 'true':                143 (count: 103, min: 1, max: 5, avg: 1.39)
Length (states) of path with itp non-trivial itp:       826 (count: 103, min: 1, max: 11, avg: 8.02)
Length (states) of path with itp 'false':               103 (count: 103, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 103, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             723 (count: 103, min: 0, max: 10, avg: 7.02)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                103
Number of successful refinements:     103
Number of failed refinements:         0
Max. size of reached set before ref.: 37242
Max. size of reached set after ref.:  1973
Avg. size of reached set before ref.: 16982.46
Avg. size of reached set after ref.:  84.61

Total time for CEGAR algorithm:     894.153s
Time for refinements:               344.350s
Average time for refinement:          3.343s
Max time for refinement:              3.949s

Code Coverage
-----------------------------
  Function coverage:      0.184
  Visited lines:          1881
  Total lines:            8012
  Line coverage:          0.235
  Visited conditions:     420
  Total conditions:       2370
  Condition coverage:     0.177

CPAchecker general statistics
-----------------------------
Number of program locations:     10968
Number of CFA edges:             12695
Number of relevant variables:    1824
Number of functions:             358
Number of loops:                 94
Size of reached set:             17830
  Number of reached locations:   826 (8%)
    Avg states per location:     21
    Max states per location:     108 (at node N133)
  Number of reached functions:   66 (18%)
  Number of partitions:          17790
    Avg size of partitions:      1
    Max size of partitions:      26 (with key [N9269 (before line 16960), Function main called from node N9222, stack depth 1 [57283fac], stack [main]])
  Number of target states:       0
  Size of final wait list        1395

Time for analysis setup:          6.191s
  Time for loading CPAs:          0.812s
  Time for loading parser:        0.476s
  Time for CFA construction:      4.780s
    Time for parsing file(s):     0.932s
    Time for AST to CFA:          1.771s
    Time for CFA sanity check:    0.475s
    Time for post-processing:     1.439s
      Time for var class.:        0.764s
Time for Analysis:              894.153s
CPU time for analysis:          894.010s
Total time for CPAchecker:      900.347s
Total CPU time for CPAchecker:  900.180s
Time for statistics:              0.292s

Time for Garbage Collector:      11.098s (in 681 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                259MB (   247 MiB) max;    144MB (   138 MiB) avg;    265MB (   253 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           265MB (   252 MiB) max;    212MB (   202 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8559MB (  8162 MiB) max;   8378MB (  7990 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
