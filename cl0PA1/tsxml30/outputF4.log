scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--md--persistent-data--dm-persistent-data.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_am53edre/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3552: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3555: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3558: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3855: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3860: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3865: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 2UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 4UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 8UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_29462;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3889: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3894: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3899: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 2UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 4UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 8UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_29472;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4744: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5942: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6511: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7495: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8151: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9285: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10277: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10769: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8567: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10167: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8321: Function pointer *(vt->inc) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9096: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9090: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5368: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, index, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5148: Ignoring function call through function pointer *(ll->max_entries): tmp = (*(ll->max_entries))(ll); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5292: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, i, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5207: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, index, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5491: Ignoring function call through function pointer *(ll->commit): r = (*(ll->commit))(ll); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7567: Ignoring function call through function pointer *(sm->count_is_more_than_one): tmp = (*(sm->count_is_more_than_one))(sm, b, result); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7603: Ignoring function call through function pointer *(sm->new_block): tmp = (*(sm->new_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_get_block_number to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7594: Ignoring function call through function pointer *(sm->dec_block): tmp = (*(sm->dec_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7594: Unsupported feature (recursion): tmp = sm_disk_extend(sm, b); (line was originally pointer call(sm_disk_extend) tmp = (*(sm->dec_block))(sm, b);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            35381 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  32810 (93%)
  Because of loop head:            2517 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         54 (0%)
  Times precision was empty:       27969 (79%)
  Times precision was {false}:     175 (0%)
  Times result was cached:         6901 (20%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      336 (1%)
  Times result was 'false':        210 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         13321
  BDD entailment checks:           6039
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       35
Number of predicates discovered:          4
Number of abstraction locations:          49
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         20583
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 40.28
Number of irrelevant predicates:          13713 (67%)
Number of preds handled by boolean abs:   603 (3%)
  Total number of models for allsat:      336
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.600s
  Time for path formula creation:        3.482s
Time for strengthen operator:            0.257s
Time for prec operator:                  3.320s
  Time for abstraction:                  2.651s (Max:     0.025s, Count: 35381)
    Boolean abstraction:                 0.384s
    Solving time:                        0.364s (Max:     0.016s)
    Model enumeration time:              0.025s
    Time for BDD construction:           0.064s (Max:     0.009s)
Time for merge operator:                 0.078s
Time for coverage check:                 0.034s
  Time for BDD entailment checks:        0.032s
Total time for SMT solver (w/o itp):     0.389s

Number of path formula cache hits:   241399 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.069s

Total number of created targets for pointer analysis: 181
   Number of created targets for uf: *signed_int is 2
   Number of created targets for uf: *(struct_dm_block)* is 29
   Number of created targets for uf: *(struct_dm_btree_info)* is 15
   Number of created targets for uf: *unsigned_long_long_int is 6


Number of BDD nodes:                               208
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         696 (count: 36919, min: 0, max: 48, avg: 0.02)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.416s
Automaton transfers with branching:                0
Automaton transfer successors:                       216295 (count: 216295, min: 1, max: 1, avg: 1.00) [1 x 216295]

CPA algorithm statistics
------------------------
Number of iterations:            106378
Max size of waitlist:            286
Average size of waitlist:        124
Number of computed successors:   123762
Max successors for one state:    2
Number of times merged:          3641
Number of times stopped:         7640
Number of times breaked:         54

Total time for CPA algorithm:        11.691s (Max:     0.626s)
  Time for choose from waitlist:      0.154s
  Time for precision adjustment:      4.200s
  Time for transfer relation:         6.019s
  Time for merge operator:            0.189s
  Time for stop operator:             0.271s
  Time for adding to reached set:     0.259s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   54
Avg. length of target path (in blocks):                 597 (count: 54, min: 6, max: 13, avg: 11.06)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.903s
  Counterexample analysis:                             0.482s (Max:     0.016s, Calls: 54)
    Refinement sat check:                              0.337s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.059s
  Precision update:                                    0.021s
  ARG update:                                          0.303s

Length of refined path (in blocks):                     543 (count: 54, min: 5, max: 12, avg: 10.06)
Number of affected states:                              435 (count: 54, min: 3, max: 10, avg: 8.06)
Length (states) of path with itp 'true':                 54 (count: 54, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       435 (count: 54, min: 3, max: 10, avg: 8.06)
Length (states) of path with itp 'false':                54 (count: 54, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 54, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             381 (count: 54, min: 2, max: 9, avg: 7.06)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                54
Number of successful refinements:     54
Number of failed refinements:         0
Max. size of reached set before ref.: 3626
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 2090.15
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      12.745s
Time for refinements:                 1.053s
Average time for refinement:          0.019s
Max time for refinement:              0.043s

Code Coverage
-----------------------------
  Function coverage:      0.264
  Visited lines:          1487
  Total lines:            4721
  Line coverage:          0.315
  Visited conditions:     254
  Total conditions:       1230
  Condition coverage:     0.207

CPAchecker general statistics
-----------------------------
Number of program locations:     6707
Number of CFA edges:             7894
Number of relevant variables:    1501
Number of functions:             318
Number of loops:                 62
Size of reached set:             3369
  Number of reached locations:   704 (10%)
    Avg states per location:     4
    Max states per location:     48 (at node N57)
  Number of reached functions:   84 (26%)
  Number of partitions:          3349
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2322 (before line 6438), Function main called from node N2224, stack depth 1 [350ec690], stack [main]])
  Number of target states:       0
  Size of final wait list        261

Time for analysis setup:          5.004s
  Time for loading CPAs:          0.724s
  Time for loading parser:        0.494s
  Time for CFA construction:      3.693s
    Time for parsing file(s):     0.900s
    Time for AST to CFA:          1.256s
    Time for CFA sanity check:    0.366s
    Time for post-processing:     1.035s
      Time for var class.:        0.473s
Time for Analysis:               12.745s
CPU time for analysis:           12.750s
Total time for CPAchecker:       17.752s
Total CPU time for CPAchecker:   17.740s
Time for statistics:              0.105s

Time for Garbage Collector:       0.478s (in 55 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 76MB (    73 MiB) max;     49MB (    47 MiB) avg;     80MB (    76 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     33MB (    31 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    39 MiB) max;     35MB (    33 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8068MB (  7694 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
