scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--md--persistent-data--dm-persistent-data.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_x56lgck4/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3552: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3555: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3558: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3855: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3860: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3865: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 2UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 4UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 8UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_29462;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3889: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3894: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3899: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 2UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 4UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 8UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_29472;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4744: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5942: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6511: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7495: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8151: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9285: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10277: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10769: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8567: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10167: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8321: Function pointer *(vt->inc) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9096: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9090: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5491: Ignoring function call through function pointer *(ll->commit): r = (*(ll->commit))(ll); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_get_block_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_get_block_number to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_get_aux_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_mark_buffer_dirty to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __put_task_struct to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7567: Ignoring function call through function pointer *(sm->count_is_more_than_one): tmp = (*(sm->count_is_more_than_one))(sm, b, result); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_get_block_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5207: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, index, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 7603: Ignoring function call through function pointer *(sm->new_block): tmp = (*(sm->new_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7594: Ignoring function call through function pointer *(sm->dec_block): tmp = (*(sm->dec_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function print_stack_trace to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function save_stack_trace to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4359: Ignoring function call through function pointer *(v->check): r = (*(v->check))(v, (struct dm_block *)buf, (size_t )tmp); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function ___ratelimit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32c to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            7682561 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  6439438 (84%)
  Because of loop head:            1243075 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         48 (0%)
  Times precision was empty:       6374598 (83%)
  Times precision was {false}:     379 (0%)
  Times result was cached:         1307282 (17%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      302 (0%)
  Times result was 'false':        276 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         2661697
  BDD entailment checks:           1211387
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       28
Number of predicates discovered:          4
Number of abstraction locations:          77
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         3691548
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 5420.78
Number of irrelevant predicates:          3683676 (100%)
Number of preds handled by boolean abs:   583 (0%)
  Total number of models for allsat:      301
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                219.746s
  Time for path formula creation:      210.027s
Time for strengthen operator:           22.265s
Time for prec operator:                152.316s
  Time for abstraction:                 75.327s (Max:     2.242s, Count: 7682561)
    Boolean abstraction:                 0.178s
    Solving time:                        0.193s (Max:     0.012s)
    Model enumeration time:              0.011s
    Time for BDD construction:           0.022s (Max:     0.003s)
Time for merge operator:                 8.374s
Time for coverage check:                 0.869s
  Time for BDD entailment checks:        0.541s
Total time for SMT solver (w/o itp):     0.204s

Number of path formula cache hits:   39575696 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    27.864s

Total number of created targets for pointer analysis: 6216
   Number of created targets for uf: *(struct_hlist_node)* is 4
   Number of created targets for uf: *signed_int is 281
   Number of created targets for uf: *(struct_dm_block)* is 204
   Number of created targets for uf: *(struct_dm_btree_info)* is 72
   Number of created targets for uf: *unsigned_long_long_int is 258
   Number of created targets for uf: *unsigned_int is 44


Number of BDD nodes:                               208
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         627 (count: 7589750, min: 0, max: 74, avg: 0.00)
Time for BDD node cleanup:                             0.830s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 33.109s
  Time for transition matches:                        15.807s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     31928533 (count: 31928533, min: 1, max: 1, avg: 1.00) [1 x 31928533]

CPA algorithm statistics
------------------------
Number of iterations:            21781820
Max size of waitlist:            666
Average size of waitlist:        564
Number of computed successors:   23746999
Max successors for one state:    2
Number of times merged:          725155
Number of times stopped:         1934705
Number of times breaked:         48

Total time for CPA algorithm:       830.842s (Max:    55.886s)
  Time for choose from waitlist:      5.746s
  Time for precision adjustment:    284.011s
  Time for transfer relation:       444.672s
  Time for merge operator:           14.853s
  Time for stop operator:            17.479s
  Time for adding to reached set:    23.290s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   48
Avg. length of target path (in blocks):                 927 (count: 48, min: 6, max: 56, avg: 19.31)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  50.978s
  Counterexample analysis:                             0.366s (Max:     0.020s, Calls: 48)
    Refinement sat check:                              0.249s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.024s
  Precision update:                                    0.018s
  ARG update:                                         50.544s

Length of refined path (in blocks):                     879 (count: 48, min: 5, max: 55, avg: 18.31)
Number of affected states:                              783 (count: 48, min: 3, max: 53, avg: 16.31)
Length (states) of path with itp 'true':                 48 (count: 48, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       783 (count: 48, min: 3, max: 53, avg: 16.31)
Length (states) of path with itp 'false':                48 (count: 48, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 48, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             735 (count: 48, min: 2, max: 52, avg: 15.31)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                48
Number of successful refinements:     48
Number of failed refinements:         0
Max. size of reached set before ref.: 482557
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 452292.79
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:     895.207s
Time for refinements:                64.361s
Average time for refinement:          1.340s
Max time for refinement:              4.183s

Code Coverage
-----------------------------
  Function coverage:      0.387
  Visited lines:          1870
  Total lines:            4721
  Line coverage:          0.396
  Visited conditions:     326
  Total conditions:       1230
  Condition coverage:     0.265

CPAchecker general statistics
-----------------------------
Number of program locations:     6707
Number of CFA edges:             7894
Number of relevant variables:    1501
Number of functions:             318
Number of loops:                 62
Size of reached set:             102252
  Number of reached locations:   1162 (17%)
    Avg states per location:     87
    Max states per location:     1987 (at node N5852)
  Number of reached functions:   123 (39%)
  Number of partitions:          102234
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N2322 (before line 6438), Function main called from node N2224, stack depth 1 [203d1d93], stack [main]])
  Number of target states:       0
  Size of final wait list        431

Time for analysis setup:          4.825s
  Time for loading CPAs:          0.784s
  Time for loading parser:        0.537s
  Time for CFA construction:      3.401s
    Time for parsing file(s):     0.779s
    Time for AST to CFA:          1.169s
    Time for CFA sanity check:    0.387s
    Time for post-processing:     0.925s
      Time for var class.:        0.490s
Time for Analysis:              895.207s
CPU time for analysis:          895.160s
Total time for CPAchecker:      900.035s
Total CPU time for CPAchecker:  899.980s
Time for statistics:              0.992s

Time for Garbage Collector:     191.251s (in 910 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1514MB (  1444 MiB) max;    716MB (   682 MiB) avg;   1550MB (  1478 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1529MB (  1458 MiB) max;   1056MB (  1007 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8084MB (  7710 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
