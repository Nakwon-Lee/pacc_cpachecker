scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--md--persistent-data--dm-persistent-data.ko-ldv_main2_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_9o1p4fsj/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3552: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3555: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3558: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3855: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3860: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3865: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 2UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 4UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_29462;
  case 8UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_29462;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3889: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3894: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 3899: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 2UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 4UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_29472;
  case 8UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_29472;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4744: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5942: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6511: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7495: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8151: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9285: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10277: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10769: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8567: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10167: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8321: Function pointer *(vt->inc) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9096: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9090: Function pointer *(info->value_type.dec) with type void (*)(void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5368: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, index, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5148: Ignoring function call through function pointer *(ll->max_entries): tmp = (*(ll->max_entries))(ll); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5491: Ignoring function call through function pointer *(ll->commit): r = (*(ll->commit))(ll); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5292: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, i, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5207: Ignoring function call through function pointer *(ll->load_ie): r = (*(ll->load_ie))(ll, index, &ie_disk); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7603: Ignoring function call through function pointer *(sm->new_block): tmp = (*(sm->new_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dm_bufio_get_block_number to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dm_bufio_new to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7594: Ignoring function call through function pointer *(sm->dec_block): tmp = (*(sm->dec_block))(sm, b); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 7594: Unsupported feature (recursion): tmp = sm_disk_extend(sm, b); (line was originally pointer call(sm_disk_extend) tmp = (*(sm->dec_block))(sm, b);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            17605 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  15110 (86%)
  Because of loop head:            2408 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         87 (0%)
  Times precision was empty:       6512 (37%)
  Times precision was {false}:     330 (2%)
  Times result was cached:         9860 (56%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      903 (5%)
  Times result was 'false':        306 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         8819
  BDD entailment checks:           4815
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       35
Number of predicates discovered:          4
Number of abstraction locations:          67
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         28722
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 23.29
Number of irrelevant predicates:          9084 (32%)
Number of preds handled by boolean abs:   1512 (5%)
  Total number of models for allsat:      903
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.060s
  Time for path formula creation:        3.926s
Time for strengthen operator:            0.169s
Time for prec operator:                  5.892s
  Time for abstraction:                  5.410s (Max:     0.022s, Count: 17605)
    Boolean abstraction:                 1.182s
    Solving time:                        1.204s (Max:     0.013s)
    Model enumeration time:              0.098s
    Time for BDD construction:           0.080s (Max:     0.010s)
Time for merge operator:                 0.136s
Time for coverage check:                 0.046s
  Time for BDD entailment checks:        0.039s
Total time for SMT solver (w/o itp):     1.302s

Number of path formula cache hits:   105502 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.144s

Total number of created targets for pointer analysis: 155
   Number of created targets for uf: *unsigned_long_long_int is 7


Number of BDD nodes:                               209
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1812 (count: 18415, min: 0, max: 128, avg: 0.10)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.497s
Automaton transfers with branching:                0
Automaton transfer successors:                       106763 (count: 106763, min: 1, max: 1, avg: 1.00) [1 x 106763]

CPA algorithm statistics
------------------------
Number of iterations:            55426
Max size of waitlist:            100
Average size of waitlist:        31
Number of computed successors:   65590
Max successors for one state:    2
Number of times merged:          2002
Number of times stopped:         4973
Number of times breaked:         87

Total time for CPA algorithm:        14.035s (Max:     0.990s)
  Time for choose from waitlist:      0.077s
  Time for precision adjustment:      6.584s
  Time for transfer relation:         6.144s
  Time for merge operator:            0.245s
  Time for stop operator:             0.215s
  Time for adding to reached set:     0.221s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   87
Avg. length of target path (in blocks):                1125 (count: 87, min: 6, max: 20, avg: 12.93)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.266s
  Counterexample analysis:                             0.929s (Max:     0.023s, Calls: 87)
    Refinement sat check:                              0.699s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.042s
  Precision update:                                    0.101s
  ARG update:                                          0.156s

Length of refined path (in blocks):                    1038 (count: 87, min: 5, max: 19, avg: 11.93)
Number of affected states:                              864 (count: 87, min: 3, max: 17, avg: 9.93)
Length (states) of path with itp 'true':                 87 (count: 87, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       864 (count: 87, min: 3, max: 17, avg: 9.93)
Length (states) of path with itp 'false':                87 (count: 87, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 87, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             777 (count: 87, min: 2, max: 16, avg: 8.93)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                87
Number of successful refinements:     87
Number of failed refinements:         0
Max. size of reached set before ref.: 1229
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 689.91
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      15.508s
Time for refinements:                 1.462s
Average time for refinement:          0.016s
Max time for refinement:              0.067s

Code Coverage
-----------------------------
  Function coverage:      0.214
  Visited lines:          1196
  Total lines:            4721
  Line coverage:          0.253
  Visited conditions:     190
  Total conditions:       1230
  Condition coverage:     0.154

CPAchecker general statistics
-----------------------------
Number of program locations:     6707
Number of CFA edges:             7894
Number of relevant variables:    1501
Number of functions:             318
Number of loops:                 62
Size of reached set:             812
  Number of reached locations:   477 (7%)
    Avg states per location:     1
    Max states per location:     11 (at node N2320)
  Number of reached functions:   68 (21%)
  Number of partitions:          812
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        70

Time for analysis setup:          4.808s
  Time for loading CPAs:          0.800s
  Time for loading parser:        0.565s
  Time for CFA construction:      3.317s
    Time for parsing file(s):     0.753s
    Time for AST to CFA:          1.080s
    Time for CFA sanity check:    0.370s
    Time for post-processing:     0.979s
      Time for var class.:        0.485s
Time for Analysis:               15.508s
CPU time for analysis:           15.510s
Total time for CPAchecker:       20.320s
Total CPU time for CPAchecker:   20.300s
Time for statistics:              0.086s

Time for Garbage Collector:       0.436s (in 46 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 78MB (    75 MiB) max;     52MB (    49 MiB) avg;     81MB (    77 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     34MB (    32 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    40 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8069MB (  7695 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
