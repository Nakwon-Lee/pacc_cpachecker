scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--media--firewire--firedtv.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_itq1b_y5/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5780: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5783: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5786: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7651: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8371: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8774: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8814: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8836: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9117: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9993: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10217: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8673: Function pointer *(fdtv->demux.dmx.add_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8679: Function pointer *(fdtv->demux.dmx.connect_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8708: Function pointer *(fdtv->demux.dmx.close) with type int (*)(struct dmx_demux *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8710: Function pointer *(fdtv->demux.dmx.remove_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8729: Function pointer *(fdtv->demux.dmx.close) with type int (*)(struct dmx_demux *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8730: Function pointer *(fdtv->demux.dmx.remove_frontend) with type int (*)(struct dmx_demux *, struct dmx_frontend *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function dvb_generic_ioctl to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_generic_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function noop_llseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_generic_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_add_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fw_core_remove_address_handler to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_frontend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_net_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8729: Ignoring function call through function pointer *(fdtv->demux.dmx.close): (*(fdtv->demux.dmx.close))(&(fdtv->demux.dmx)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8730: Ignoring function call through function pointer *(fdtv->demux.dmx.remove_frontend): (*(fdtv->demux.dmx.remove_frontend))(&(fdtv->demux.dmx), &(fdtv->frontend)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dvb_dmxdev_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_dmx_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_adapter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function print_hex_dump to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function crc32_be to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            48057 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  44930 (93%)
  Because of loop head:            2857 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         270 (1%)
  Times precision was empty:       23509 (49%)
  Times precision was {false}:     430 (1%)
  Times result was cached:         22949 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1169 (2%)
  Times result was 'false':        2962 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         49656
  BDD entailment checks:           11830
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       47
Number of predicates discovered:          15
Number of abstraction locations:          66
Max number of predicates per location:    12
Avg number of predicates per location:    3
Total predicates per abstraction:         70719
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 44.23
Number of irrelevant predicates:          32847 (46%)
Number of preds handled by boolean abs:   4244 (6%)
  Total number of models for allsat:      2667
  Max number of models for allsat:        36
  Avg number of models for allsat:        2.28

Time for post operator:                  5.631s
  Time for path formula creation:        5.465s
Time for strengthen operator:            0.339s
Time for prec operator:                  7.321s
  Time for abstraction:                  6.746s (Max:     0.042s, Count: 48057)
    Boolean abstraction:                 1.658s
    Solving time:                        1.255s (Max:     0.039s)
    Model enumeration time:              0.331s
    Time for BDD construction:           0.157s (Max:     0.012s)
Time for merge operator:                 0.318s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.048s
Total time for SMT solver (w/o itp):     1.586s

Number of path formula cache hits:   374296 (88%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.593s

Total number of created targets for pointer analysis: 9169
   Number of created targets for uf: *unsigned_short_int is 821
   Number of created targets for uf: *(char)* is 481
   Number of created targets for uf: *signed_int is 213
   Number of created targets for uf: *unsigned_char is 21
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *unsigned_int is 21


Number of BDD nodes:                               4561
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3689 (count: 45383, min: 0, max: 187, avg: 0.08)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.741s
  Time for transition matches:                         0.419s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       368689 (count: 368689, min: 1, max: 1, avg: 1.00) [1 x 368689]

CPA algorithm statistics
------------------------
Number of iterations:            196484
Max size of waitlist:            216
Average size of waitlist:        82
Number of computed successors:   233430
Max successors for one state:    2
Number of times merged:          18913
Number of times stopped:         22880
Number of times breaked:         270

Total time for CPA algorithm:        20.850s (Max:     0.885s)
  Time for choose from waitlist:      0.190s
  Time for precision adjustment:      8.835s
  Time for transfer relation:         9.560s
  Time for merge operator:            0.703s
  Time for stop operator:             0.392s
  Time for adding to reached set:     0.387s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   270
Avg. length of target path (in blocks):                6126 (count: 270, min: 8, max: 33, avg: 22.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.490s
  Counterexample analysis:                             3.609s (Max:     0.038s, Calls: 270)
    Refinement sat check:                              2.718s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.005s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.049s
  Precision update:                                    0.143s
  ARG update:                                          0.555s

Length of refined path (in blocks):                    5671 (count: 270, min: 4, max: 32, avg: 21.00)
Number of affected states:                             2451 (count: 270, min: 1, max: 22, avg: 9.08)
Length (states) of path with itp 'true':               2950 (count: 270, min: 0, max: 21, avg: 10.93)
Length (states) of path with itp non-trivial itp:      2451 (count: 270, min: 1, max: 22, avg: 9.08)
Length (states) of path with itp 'false':               270 (count: 270, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 270, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2181 (count: 270, min: 0, max: 21, avg: 8.08)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                270
Number of successful refinements:     270
Number of failed refinements:         0
Max. size of reached set before ref.: 5540
Max. size of reached set after ref.:  2828
Avg. size of reached set before ref.: 2266.07
Avg. size of reached set after ref.:  1500.22

Total time for CEGAR algorithm:      26.227s
Time for refinements:                 5.097s
Average time for refinement:          0.018s
Max time for refinement:              0.069s

Code Coverage
-----------------------------
  Function coverage:      0.135
  Visited lines:          1282
  Total lines:            3754
  Line coverage:          0.342
  Visited conditions:     124
  Total conditions:       794
  Condition coverage:     0.156

CPAchecker general statistics
-----------------------------
Number of program locations:     5085
Number of CFA edges:             5579
Number of relevant variables:    683
Number of functions:             230
Number of loops:                 22
Size of reached set:             810
  Number of reached locations:   271 (5%)
    Avg states per location:     2
    Max states per location:     9 (at node N1098)
  Number of reached functions:   31 (13%)
  Number of partitions:          807
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N3612 (before line 9818), Function main called from node N3599, stack depth 1 [24386839], stack [main]])
  Number of target states:       0
  Size of final wait list        55

Time for analysis setup:          4.096s
  Time for loading CPAs:          0.696s
  Time for loading parser:        0.452s
  Time for CFA construction:      2.871s
    Time for parsing file(s):     0.675s
    Time for AST to CFA:          1.034s
    Time for CFA sanity check:    0.224s
    Time for post-processing:     0.766s
      Time for var class.:        0.329s
Time for Analysis:               26.227s
CPU time for analysis:           26.230s
Total time for CPAchecker:       30.326s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.079s

Time for Garbage Collector:       0.748s (in 103 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 88MB (    84 MiB) max;     56MB (    53 MiB) avg;     93MB (    88 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     36MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8020MB (  7648 MiB) max;   8011MB (  7640 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
