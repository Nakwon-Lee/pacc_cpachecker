scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--misc--sgi-xp--xpc.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_6_z615py/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3535: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3538: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3541: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 3611-3612: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3615-3616: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3623-3624: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 2:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 4:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 8:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 3655: Dead code detected: __ptr = (u8 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 3660: Dead code detected: __ptr___0 = (u16 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 3670: Dead code detected: __ptr___2 = (u64 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __ptr = (u8 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 2:
  __ptr___0 = (u16 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 4:
  __ptr___1 = (u32 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  case 8:
  __ptr___2 = (u64 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5494;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5352: Dead code detected: __ptr = (u8 volatile *)(& xpc_die_disconnecting); (CFACreationUtils.addEdgeToCFA, INFO)

line 5357: Dead code detected: __ptr___0 = (u16 volatile *)(& xpc_die_disconnecting); (CFACreationUtils.addEdgeToCFA, INFO)

line 5367: Dead code detected: __ptr___2 = (u64 volatile *)(& xpc_die_disconnecting); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __ptr = (u8 volatile *)(& xpc_die_disconnecting);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_24538;
  case 2:
  __ptr___0 = (u16 volatile *)(& xpc_die_disconnecting);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_24538;
  case 4:
  __ptr___1 = (u32 volatile *)(& xpc_die_disconnecting);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_24538;
  case 8:
  __ptr___2 = (u64 volatile *)(& xpc_die_disconnecting);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_24538;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5771: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6880: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6920: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 6975: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6978: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6981: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6484;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6484;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6484;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6484;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7170-7185: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7172: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7175: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7177: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7181: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7190-7205: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7192: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7195: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7197: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7201: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7212: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7215: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7221: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 7230-7245: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 7232: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7235: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7237: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 7241: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1: ;
  switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
  goto ldv_20983;
  default:
  __bad_percpu_size();
  }
  ldv_20983:
  pscr_ret__ = pfo_ret__;
  goto ldv_20989;
  case 2: ;
  switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
  goto ldv_20993;
  default:
  __bad_percpu_size();
  }
  ldv_20993:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_20989;
  case 4: ;
  switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
  goto ldv_21002;
  default:
  __bad_percpu_size();
  }
  ldv_21002:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_20989;
  case 8: ;
  switch (4UL) {
  case 1:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 2:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 4:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  case 8:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
  goto ldv_21011;
  default:
  __bad_percpu_size();
  }
  ldv_21011:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_20989;
  default:
  __bad_size_call_parameter();
  goto ldv_20989;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7818: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9715: Dead code detected: __ptr = (u8 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

line 9720: Dead code detected: __ptr___0 = (u16 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

line 9725: Dead code detected: __ptr___1 = (u32 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1:
    __ptr = (u8 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                         "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
    goto ldv_29362;
    case 2:
    __ptr___0 = (u16 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                         "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
    goto ldv_29362;
    case 4:
    __ptr___1 = (u32 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                         "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
    goto ldv_29362;
    case 8:
    __ptr___2 = (u64 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                         "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
    goto ldv_29362;
    default:
    __cmpxchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 10033: Dead code detected: __ptr = (u8 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

line 10038: Dead code detected: __ptr___0 = (u16 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

line 10043: Dead code detected: __ptr___1 = (u32 volatile *)(& msg_slot->func); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1:
    __ptr = (u8 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret___0),
                         "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
    goto ldv_29441;
    case 2:
    __ptr___0 = (u16 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret___0),
                         "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
    goto ldv_29441;
    case 4:
    __ptr___1 = (u32 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret___0),
                         "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
    goto ldv_29441;
    case 8:
    __ptr___2 = (u64 volatile *)(& msg_slot->func);
    __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret___0),
                         "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
    goto ldv_29441;
    default:
    __cmpxchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 10948: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 8878: Function pointer *xp_remote_memcpy with type enum xp_retval (*)(unsigned long, const unsigned long, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6513-6514: Function pointer *(ch->func) with type void (*)(enum xp_retval , short, int, void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8434: Function pointer *xp_expand_memprotect with type enum xp_retval (*)(unsigned long, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6807: Function pointer *(ch->func) with type void (*)(enum xp_retval , short, int, void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8470: Function pointer *xp_restrict_memprotect with type enum xp_retval (*)(unsigned long, unsigned long) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6659: Function pointer *(ch->func) with type void (*)(enum xp_retval , short, int, void *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9118: Function pointer *xp_remote_memcpy with type enum xp_retval (*)(unsigned long, const unsigned long, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7340: Function pointer *xp_remote_memcpy with type enum xp_retval (*)(unsigned long, const unsigned long, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7103: Function pointer *xp_remote_memcpy with type enum xp_retval (*)(unsigned long, const unsigned long, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7777: Function pointer *xp_remote_memcpy with type enum xp_retval (*)(unsigned long, const unsigned long, size_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6730-6732: Function pointer *(xpc_arch_ops.send_payload) with type enum xp_retval (*)(struct xpc_channel *, u32 , void *, u16 , u8 , void (*)(enum xp_retval , short, int, void *), void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 6770-6772: Function pointer *(xpc_arch_ops.send_payload) with type enum xp_retval (*)(struct xpc_channel *, u32 , void *, u16 , u8 , void (*)(enum xp_retval , short, int, void *), void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9753: Function pointer *func with type void (*)(enum xp_retval , short, int, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_xpc_arch_ops_uv_probe_1 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_name to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function is_uv_system to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5381: Ignoring function call through function pointer *(xpc_arch_ops.disallow_all_hbs): (*(xpc_arch_ops.disallow_all_hbs))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5386: Ignoring function call through function pointer *(xpc_arch_ops.partition_engaged): tmp = (*(xpc_arch_ops.partition_engaged))((int)partid); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5388: Ignoring function call through function pointer *(xpc_arch_ops.request_partition_deactivation): (*(xpc_arch_ops.request_partition_deactivation))(part); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5389: Ignoring function call through function pointer *(xpc_arch_ops.indicate_partition_disengaged): (*(xpc_arch_ops.indicate_partition_disengaged))(part); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5404: Ignoring function call through function pointer *(xpc_arch_ops.any_partition_engaged): any_engaged = (*(xpc_arch_ops.any_partition_engaged))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wait_for_completion to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5417: Ignoring function call through function pointer *(xpc_arch_ops.partition_engaged): tmp___0 = (*(xpc_arch_ops.partition_engaged))((int)partid); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5254: Ignoring function call through function pointer *(xpc_arch_ops.any_partition_engaged): tmp___0 = (*(xpc_arch_ops.any_partition_engaged))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function uv_bios_reserved_page_pa to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            79058 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  69889 (88%)
  Because of loop head:            9118 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         51 (0%)
  Times precision was empty:       68404 (87%)
  Times precision was {false}:     126 (0%)
  Times result was cached:         9999 (13%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      529 (1%)
  Times result was 'false':        485 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         65426
  BDD entailment checks:           23330
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       94
Number of predicates discovered:          9
Number of abstraction locations:          21
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         49884
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 76.16
Number of irrelevant predicates:          34700 (70%)
Number of preds handled by boolean abs:   1599 (3%)
  Total number of models for allsat:      609
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.15

Time for post operator:                  7.737s
  Time for path formula creation:        7.561s
Time for strengthen operator:            0.440s
Time for prec operator:                  6.406s
  Time for abstraction:                  5.284s (Max:     0.569s, Count: 79058)
    Boolean abstraction:                 2.495s
    Solving time:                        2.651s (Max:     0.545s)
    Model enumeration time:              0.100s
    Time for BDD construction:           0.050s (Max:     0.010s)
Time for merge operator:                 0.352s
Time for coverage check:                 0.060s
  Time for BDD entailment checks:        0.047s
Total time for SMT solver (w/o itp):     2.752s

Number of path formula cache hits:   546903 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.205s

Total number of created targets for pointer analysis: 66080
   Number of created targets for uf: *unsigned_char is 41
   Number of created targets for uf: *unsigned_long_int is 13201


Number of BDD nodes:                               894
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1559 (count: 95822, min: 0, max: 119, avg: 0.02)
Time for BDD node cleanup:                             0.023s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.602s
  Time for transition matches:                         0.323s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       483150 (count: 483150, min: 1, max: 1, avg: 1.00) [1 x 483150]

CPA algorithm statistics
------------------------
Number of iterations:            302199
Max size of waitlist:            1000
Average size of waitlist:        543
Number of computed successors:   372472
Max successors for one state:    2
Number of times merged:          21048
Number of times stopped:         33414
Number of times breaked:         51

Total time for CPA algorithm:        22.747s (Max:     1.777s)
  Time for choose from waitlist:      0.166s
  Time for precision adjustment:      8.265s
  Time for transfer relation:        11.837s
  Time for merge operator:            0.749s
  Time for stop operator:             0.488s
  Time for adding to reached set:     0.495s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   51
Avg. length of target path (in blocks):                 786 (count: 51, min: 8, max: 19, avg: 15.41)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.652s
  Counterexample analysis:                             1.898s (Max:     0.151s, Calls: 51)
    Refinement sat check:                              1.610s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.038s
  Precision update:                                    0.028s
  ARG update:                                          0.657s

Length of refined path (in blocks):                     716 (count: 51, min: 4, max: 18, avg: 14.04)
Number of affected states:                              608 (count: 51, min: 1, max: 16, avg: 11.92)
Length (states) of path with itp 'true':                 57 (count: 51, min: 1, max: 5, avg: 1.12)
Length (states) of path with itp non-trivial itp:       608 (count: 51, min: 1, max: 16, avg: 11.92)
Length (states) of path with itp 'false':                51 (count: 51, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 51, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             557 (count: 51, min: 0, max: 15, avg: 10.92)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                51
Number of successful refinements:     51
Number of failed refinements:         0
Max. size of reached set before ref.: 9212
Max. size of reached set after ref.:  216
Avg. size of reached set before ref.: 6566.08
Avg. size of reached set after ref.:  10.20

Total time for CEGAR algorithm:      25.687s
Time for refinements:                 2.938s
Average time for refinement:          0.057s
Max time for refinement:              0.167s

Code Coverage
-----------------------------
  Function coverage:      0.268
  Visited lines:          1313
  Total lines:            5084
  Line coverage:          0.258
  Visited conditions:     420
  Total conditions:       1948
  Condition coverage:     0.216

CPAchecker general statistics
-----------------------------
Number of program locations:     7915
Number of CFA edges:             9590
Number of relevant variables:    1155
Number of functions:             257
Number of loops:                 58
Size of reached set:             4223
  Number of reached locations:   725 (9%)
    Avg states per location:     5
    Max states per location:     26 (at node N3997)
  Number of reached functions:   69 (27%)
  Number of partitions:          4213
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N1737 (before line 5633), Function main called from node N1725, stack depth 1 [585513a8], stack [main]])
  Number of target states:       0
  Size of final wait list        637

Time for analysis setup:          4.666s
  Time for loading CPAs:          0.705s
  Time for loading parser:        0.480s
  Time for CFA construction:      3.401s
    Time for parsing file(s):     0.731s
    Time for AST to CFA:          1.140s
    Time for CFA sanity check:    0.353s
    Time for post-processing:     1.053s
      Time for var class.:        0.509s
Time for Analysis:               25.687s
CPU time for analysis:           25.680s
Total time for CPAchecker:       30.356s
Total CPU time for CPAchecker:   30.340s
Time for statistics:              0.137s

Time for Garbage Collector:       1.397s (in 128 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                123MB (   118 MiB) max;     64MB (    61 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     36MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8075MB (  7700 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
