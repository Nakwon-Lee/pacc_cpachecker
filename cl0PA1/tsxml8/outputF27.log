scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--aty--radeonfb.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_m5i61h9r/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5096: Dead code detected: v.bits_per_pixel = 8U; (CFACreationUtils.addEdgeToCFA, INFO)

line 5098: Dead code detected: v.bits_per_pixel = 16U; (CFACreationUtils.addEdgeToCFA, INFO)

line 5100: Dead code detected: return (-22); (CFACreationUtils.addEdgeToCFA, INFO)

line 5101: Dead code detected: v.bits_per_pixel = 32U; (CFACreationUtils.addEdgeToCFA, INFO)

line 5272: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5275: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5281: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg));
  goto ldv_33448;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg));
  goto ldv_33448;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg));
  goto ldv_33448;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg));
  goto ldv_33448;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((__u32 *)arg));
  goto ldv_33448;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5337: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5340: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5346: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_33458;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_33458;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_33458;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_33458;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((__u32 *)arg): "ebx");
  goto ldv_33458;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7270: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7918: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 7937: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 7956: Dead code detected: __ms___1 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8139: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8177: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8216: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8239: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8262: Dead code detected: __ms___1 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8285: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8329: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8410: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8429: Dead code detected: __ms___1 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8448: Dead code detected: __ms___2 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8467: Dead code detected: __ms___3 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8486: Dead code detected: __ms___4 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8505: Dead code detected: __ms___5 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8573: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8592: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8711: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8861: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9076: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9097: Dead code detected: __ms___1 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9135: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9153: Dead code detected: __ms___0 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9188: Dead code detected: __ms___2 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9256: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9285: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9304: Dead code detected: __ms___1 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9323: Dead code detected: __ms___2 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9342: Dead code detected: __ms___3 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9501: Dead code detected: __ms___0 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9527: Dead code detected: __ms___1 = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9583: Dead code detected: __ms___2 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9791: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 9810: Dead code detected: __ms___1 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10079: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10765: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 11680: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12119: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12512: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12889: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_validate_mode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2177099 (25% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2014922 (93%)
  Because of loop head:            162098 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         79 (0%)
  Times precision was empty:       361201 (17%)
  Times precision was {false}:     6239 (0%)
  Times result was cached:         1800074 (83%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9585 (0%)
  Times result was 'false':        2382 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         822834
  BDD entailment checks:           569270
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       51
Number of predicates discovered:          11
Number of abstraction locations:          204
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         5864129
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 370.58
Number of irrelevant predicates:          5002036 (85%)
Number of preds handled by boolean abs:   14016 (0%)
  Total number of models for allsat:      10860
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.13

Time for post operator:                248.878s
  Time for path formula creation:      246.405s
Time for strengthen operator:            5.658s
Time for prec operator:                204.369s
  Time for abstraction:                143.098s (Max:     0.856s, Count: 2177099)
    Boolean abstraction:                 7.491s
    Solving time:                       15.499s (Max:     0.264s)
    Model enumeration time:              0.769s
    Time for BDD construction:           0.162s (Max:     0.018s)
Time for merge operator:                 7.830s
Time for coverage check:                 0.474s
  Time for BDD entailment checks:        0.368s
Total time for SMT solver (w/o itp):    16.268s

Number of path formula cache hits:   6917731 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   132.787s

Total number of created targets for pointer analysis: 752617
   Number of created targets for uf: *unsigned_int is 3621
   Number of created targets for uf: *unsigned_long_int is 3301


Number of BDD nodes:                               280
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       19257 (count: 1019449, min: 0, max: 1258, avg: 0.02)
Time for BDD node cleanup:                             0.139s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.870s
  Time for transition matches:                         4.398s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                      8799124 (count: 8799124, min: 1, max: 1, avg: 1.00) [1 x 8799124]

CPA algorithm statistics
------------------------
Number of iterations:            6468472
Max size of waitlist:            324
Average size of waitlist:        204
Number of computed successors:   7014759
Max successors for one state:    2
Number of times merged:          126782
Number of times stopped:         537019
Number of times breaked:         79

Total time for CPA algorithm:       857.761s (Max:    26.321s)
  Time for choose from waitlist:      2.269s
  Time for precision adjustment:    240.302s
  Time for transfer relation:       577.903s
  Time for merge operator:           11.872s
  Time for stop operator:             5.486s
  Time for adding to reached set:     7.936s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   79
Avg. length of target path (in blocks):               38625 (count: 79, min: 7, max: 835, avg: 488.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  33.822s
  Counterexample analysis:                            21.138s (Max:     0.571s, Calls: 79)
    Refinement sat check:                              7.052s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.031s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.134s
  Precision update:                                    0.052s
  ARG update:                                         12.319s

Length of refined path (in blocks):                   35702 (count: 79, min: 6, max: 833, avg: 451.92)
Number of affected states:                            22039 (count: 79, min: 1, max: 831, avg: 278.97)
Length (states) of path with itp 'true':              13584 (count: 79, min: 0, max: 776, avg: 171.95)
Length (states) of path with itp non-trivial itp:     22039 (count: 79, min: 1, max: 831, avg: 278.97)
Length (states) of path with itp 'false':                79 (count: 79, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 79, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           21960 (count: 79, min: 0, max: 830, avg: 277.97)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                79
Number of successful refinements:     79
Number of failed refinements:         0
Max. size of reached set before ref.: 142336
Max. size of reached set after ref.:  10229
Avg. size of reached set before ref.: 83203.70
Avg. size of reached set after ref.:  1554.84

Total time for CEGAR algorithm:     894.982s
Time for refinements:                37.148s
Average time for refinement:          0.470s
Max time for refinement:              0.978s

Code Coverage
-----------------------------
  Function coverage:      0.204
  Visited lines:          1517
  Total lines:            6139
  Line coverage:          0.247
  Visited conditions:     356
  Total conditions:       1546
  Condition coverage:     0.230

CPAchecker general statistics
-----------------------------
Number of program locations:     8772
Number of CFA edges:             10682
Number of relevant variables:    995
Number of functions:             226
Number of loops:                 60
Size of reached set:             25098
  Number of reached locations:   946 (11%)
    Avg states per location:     26
    Max states per location:     1138 (at node N68)
  Number of reached functions:   46 (20%)
  Number of partitions:          24635
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N2386 (before line 6464), Function radeonfb_set_par called from node N3079, stack depth 2 [d9f7363], stack [main, radeonfb_set_par]])
  Number of target states:       0
  Size of final wait list        293

Time for analysis setup:          5.383s
  Time for loading CPAs:          0.891s
  Time for loading parser:        0.503s
  Time for CFA construction:      3.870s
    Time for parsing file(s):     0.778s
    Time for AST to CFA:          1.341s
    Time for CFA sanity check:    0.460s
    Time for post-processing:     1.149s
      Time for var class.:        0.527s
Time for Analysis:              894.982s
CPU time for analysis:          894.930s
Total time for CPAchecker:      900.368s
Total CPU time for CPAchecker:  900.300s
Time for statistics:              0.487s

Time for Garbage Collector:      82.127s (in 864 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1785MB (  1702 MiB) max;    836MB (   797 MiB) avg;   1910MB (  1821 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     39MB (    37 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:          2122MB (  2023 MiB) max;   1211MB (  1155 MiB) avg
Allocated non-heap memory:        41MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8491MB (  8097 MiB) max;   8290MB (  7906 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
