scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cpqarray.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1hw_sc5g/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6409: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6412: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6418: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6449-6450: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6453-6454: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6457-6458: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7659: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4626: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4658: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4519: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4454-4455: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4548: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4487: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_zero_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5399: Ignoring function call through function pointer *((hba[i])->access.set_intr_mask): (*((hba[i])->access.set_intr_mask))(hba[i], 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            67964 (15% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  58091 (85%)
  Because of loop head:            9805 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         68 (0%)
  Times precision was empty:       43908 (65%)
  Times precision was {false}:     411 (1%)
  Times result was cached:         22241 (33%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1404 (2%)
  Times result was 'false':        1187 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         74163
  BDD entailment checks:           18509
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          11
Number of abstraction locations:          50
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         100527
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 55.39
Number of irrelevant predicates:          51596 (51%)
Number of preds handled by boolean abs:   3704 (4%)
  Total number of models for allsat:      1842
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.31

Time for post operator:                  6.184s
  Time for path formula creation:        5.994s
Time for strengthen operator:            0.376s
Time for prec operator:                  8.781s
  Time for abstraction:                  7.843s (Max:     0.030s, Count: 67964)
    Boolean abstraction:                 1.855s
    Solving time:                        1.542s (Max:     0.020s)
    Model enumeration time:              0.276s
    Time for BDD construction:           0.130s (Max:     0.009s)
Time for merge operator:                 0.428s
Time for coverage check:                 0.110s
  Time for BDD entailment checks:        0.065s
Total time for SMT solver (w/o itp):     1.818s

Number of path formula cache hits:   486182 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.319s

Total number of created targets for pointer analysis: 14114
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_ctlr_info)*],_Parameter_2_type:_[unsigned_long_int],_VarArgs:_false)* is 147
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_ctlr_info)*],_Parameter_2_type:_[(struct_cmdlist)*],_VarArgs:_false)* is 147
   Number of created targets for uf: *(struct_gendisk)* is 4609
   Number of created targets for uf: *signed_int is 289
   Number of created targets for uf: *(struct_pci_dev)* is 3
   Number of created targets for uf: *(Return_type:_[unsigned_long_int],_Parameters:_1,_Parameter_1_type:_[(struct_ctlr_info)*],_VarArgs:_false)* is 439
   Number of created targets for uf: *(struct_ctlr_info)* is 897
   Number of created targets for uf: *unsigned_int is 543
   Number of created targets for uf: *unsigned_long_int is 87


Number of BDD nodes:                               1239
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3352 (count: 73227, min: 0, max: 163, avg: 0.05)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.693s
  Time for transition matches:                         0.364s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       446873 (count: 446873, min: 1, max: 1, avg: 1.00) [1 x 446873]

CPA algorithm statistics
------------------------
Number of iterations:            286249
Max size of waitlist:            452
Average size of waitlist:        176
Number of computed successors:   343290
Max successors for one state:    2
Number of times merged:          27827
Number of times stopped:         38193
Number of times breaked:         68

Total time for CPA algorithm:        24.062s (Max:     1.243s)
  Time for choose from waitlist:      0.192s
  Time for precision adjustment:     10.717s
  Time for transfer relation:        10.330s
  Time for merge operator:            0.911s
  Time for stop operator:             0.450s
  Time for adding to reached set:     0.490s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   68
Avg. length of target path (in blocks):                1048 (count: 68, min: 8, max: 24, avg: 15.41)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.047s
  Counterexample analysis:                             1.279s (Max:     0.034s, Calls: 68)
    Refinement sat check:                              0.930s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.032s
  Precision update:                                    0.035s
  ARG update:                                          0.675s

Length of refined path (in blocks):                     905 (count: 68, min: 4, max: 23, avg: 13.31)
Number of affected states:                              734 (count: 68, min: 1, max: 21, avg: 10.79)
Length (states) of path with itp 'true':                103 (count: 68, min: 1, max: 9, avg: 1.51)
Length (states) of path with itp non-trivial itp:       734 (count: 68, min: 1, max: 21, avg: 10.79)
Length (states) of path with itp 'false':                68 (count: 68, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 68, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             666 (count: 68, min: 0, max: 20, avg: 9.79)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                68
Number of successful refinements:     68
Number of failed refinements:         0
Max. size of reached set before ref.: 7951
Max. size of reached set after ref.:  5087
Avg. size of reached set before ref.: 4638.07
Avg. size of reached set after ref.:  202.74

Total time for CEGAR algorithm:      26.398s
Time for refinements:                 2.320s
Average time for refinement:          0.034s
Max time for refinement:              0.069s

Code Coverage
-----------------------------
  Function coverage:      0.411
  Visited lines:          1443
  Total lines:            2966
  Line coverage:          0.487
  Visited conditions:     274
  Total conditions:       916
  Condition coverage:     0.299

CPAchecker general statistics
-----------------------------
Number of program locations:     4325
Number of CFA edges:             4995
Number of relevant variables:    549
Number of functions:             163
Number of loops:                 37
Size of reached set:             2308
  Number of reached locations:   631 (15%)
    Avg states per location:     3
    Max states per location:     16 (at node N60)
  Number of reached functions:   67 (41%)
  Number of partitions:          2294
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2621 (before line 7196), Function main called from node N2600, stack depth 1 [5580d62f], stack [main]])
  Number of target states:       0
  Size of final wait list        140

Time for analysis setup:          3.921s
  Time for loading CPAs:          0.670s
  Time for loading parser:        0.420s
  Time for CFA construction:      2.723s
    Time for parsing file(s):     0.715s
    Time for AST to CFA:          0.876s
    Time for CFA sanity check:    0.228s
    Time for post-processing:     0.774s
      Time for var class.:        0.322s
Time for Analysis:               26.398s
CPU time for analysis:           26.400s
Total time for CPAchecker:       30.329s
Total CPU time for CPAchecker:   30.310s
Time for statistics:              0.118s

Time for Garbage Collector:       1.050s (in 130 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 93MB (    88 MiB) max;     56MB (    53 MiB) avg;     96MB (    91 MiB) peak
Used non-heap memory:             39MB (    38 MiB) max;     36MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8077MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
