scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cpqarray.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8m72anx7/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6409: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6412: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6418: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6449-6450: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6453-6454: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6457-6458: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7659: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4626: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4658: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4519: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4454-4455: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4548: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4487: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function capable to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4658: Ignoring function call through function pointer *(ops->free): (*(ops->free))(dev, size, vaddr, bus, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_dma_map_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6749: Ignoring function call through function pointer *(info_p->access.set_intr_mask): (*(info_p->access.set_intr_mask))(info_p, 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6753: Ignoring function call through function pointer *(info_p->access.fifo_full): temp = (*(info_p->access.fifo_full))(info_p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6769: Ignoring function call through function pointer *(info_p->access.submit_command): (*(info_p->access.submit_command))(info_p, c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6898: Ignoring function call through function pointer *((hba[ctlr])->access.command_completed): tmp = (*((hba[ctlr])->access.command_completed))(hba[ctlr]); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4487: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4626: Ignoring function call through function pointer *(ops->alloc): memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function find_first_zero_bit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4791: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memdup_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6126: Ignoring function call through function pointer *(h->access.fifo_full): tmp = (*(h->access.fifo_full))(h); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6134: Ignoring function call through function pointer *(h->access.submit_command): (*(h->access.submit_command))(h, c); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 6381-6382: Destroying the void* pointer ida_ctlr_ioctl::p produces garbage or the memory pointed by it is unused: error = ida_ctlr_ioctl(host, (int)((((long)drv) - ((long)(&(host->drv)))) / 24L), my_io); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6845: Ignoring function call through function pointer *(host->access.set_intr_mask): (*(host->access.set_intr_mask))(host, 0UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6847: Ignoring function call through function pointer *(host->access.set_intr_mask): (*(host->access.set_intr_mask))(host, 1UL); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function blk_queue_logical_block_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2075187 (23% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1818879 (88%)
  Because of loop head:            254819 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1489 (0%)
  Times precision was empty:       58206 (3%)
  Times precision was {false}:     1494 (0%)
  Times result was cached:         1998531 (96%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      16956 (1%)
  Times result was 'false':        16634 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         928136
  BDD entailment checks:           588080
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          31
Number of abstraction locations:          291
Max number of predicates per location:    20
Avg number of predicates per location:    5
Total predicates per abstraction:         16514580
Max number of predicates per abstraction: 20
Avg number of predicates per abstraction: 895.10
Number of irrelevant predicates:          6440891 (39%)
Number of preds handled by boolean abs:   84805 (1%)
  Total number of models for allsat:      1136241
  Max number of models for allsat:        8192
  Avg number of models for allsat:        67.01

Time for post operator:                 53.880s
  Time for path formula creation:       51.700s
Time for strengthen operator:            5.590s
Time for prec operator:                632.213s
  Time for abstraction:                613.974s (Max:     1.618s, Count: 2075187)
    Boolean abstraction:                99.578s
    Solving time:                       11.754s (Max:     0.014s)
    Model enumeration time:             62.489s
    Time for BDD construction:          23.792s (Max:     1.615s)
Time for merge operator:                 1.687s
Time for coverage check:                 0.570s
  Time for BDD entailment checks:        0.450s
Total time for SMT solver (w/o itp):    74.243s

Number of path formula cache hits:   10482492 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    22.857s

Total number of created targets for pointer analysis: 7295
   Number of created targets for uf: *signed_int is 705
   Number of created targets for uf: *unsigned_char is 69
   Number of created targets for uf: *(struct_ctlr_info)* is 601
   Number of created targets for uf: *unsigned_long_long_int is 72
   Number of created targets for uf: *unsigned_int is 129
   Number of created targets for uf: *unsigned_long_int is 38


Number of BDD nodes:                               259317
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       37391 (count: 761769, min: 0, max: 745, avg: 0.05)
Time for BDD node cleanup:                             0.083s
Time for BDD garbage collection:                       0.086s (in 6 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.303s
  Time for transition matches:                         4.747s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.006s
Automaton transfers with branching:                0
Automaton transfer successors:                      8956436 (count: 8956436, min: 1, max: 1, avg: 1.00) [1 x 8956436]

CPA algorithm statistics
------------------------
Number of iterations:            6131307
Max size of waitlist:            195
Average size of waitlist:        122
Number of computed successors:   6869314
Max successors for one state:    2
Number of times merged:          170028
Number of times stopped:         688268
Number of times breaked:         1489

Total time for CPA algorithm:       792.713s (Max:    53.472s)
  Time for choose from waitlist:      1.880s
  Time for precision adjustment:    656.911s
  Time for transfer relation:       107.879s
  Time for merge operator:            3.839s
  Time for stop operator:             5.329s
  Time for adding to reached set:     5.840s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1489
Avg. length of target path (in blocks):              194181 (count: 1489, min: 9, max: 221, avg: 130.41)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  79.187s
  Counterexample analysis:                            67.548s (Max:     0.156s, Calls: 1489)
    Refinement sat check:                             39.635s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.130s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.430s
  Precision update:                                    0.962s
  ARG update:                                          9.409s

Length of refined path (in blocks):                  181977 (count: 1489, min: 4, max: 205, avg: 122.21)
Number of affected states:                            86399 (count: 1489, min: 1, max: 156, avg: 58.02)
Length (states) of path with itp 'true':              94089 (count: 1489, min: 1, max: 150, avg: 63.19)
Length (states) of path with itp non-trivial itp:     86399 (count: 1489, min: 1, max: 156, avg: 58.02)
Length (states) of path with itp 'false':              1489 (count: 1489, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1489, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           84910 (count: 1489, min: 0, max: 155, avg: 57.02)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1489
Number of successful refinements:     1489
Number of failed refinements:         0
Max. size of reached set before ref.: 336828
Max. size of reached set after ref.:  230128
Avg. size of reached set before ref.: 14260.32
Avg. size of reached set after ref.:  10340.83

Total time for CEGAR algorithm:     896.346s
Time for refinements:                94.715s
Average time for refinement:          0.063s
Max time for refinement:              0.876s

Code Coverage
-----------------------------
  Function coverage:      0.577
  Visited lines:          1998
  Total lines:            2966
  Line coverage:          0.674
  Visited conditions:     554
  Total conditions:       916
  Condition coverage:     0.605

CPAchecker general statistics
-----------------------------
Number of program locations:     4325
Number of CFA edges:             4995
Number of relevant variables:    549
Number of functions:             163
Number of loops:                 37
Size of reached set:             328292
  Number of reached locations:   1434 (33%)
    Avg states per location:     228
    Max states per location:     12056 (at node N2374)
  Number of reached functions:   94 (58%)
  Number of partitions:          327689
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N2621 (before line 7196), Function main called from node N2600, stack depth 1 [5580d62f], stack [main]])
  Number of target states:       0
  Size of final wait list        146

Time for analysis setup:          4.041s
  Time for loading CPAs:          0.706s
  Time for loading parser:        0.473s
  Time for CFA construction:      2.786s
    Time for parsing file(s):     0.619s
    Time for AST to CFA:          0.917s
    Time for CFA sanity check:    0.216s
    Time for post-processing:     0.900s
      Time for var class.:        0.378s
Time for Analysis:              896.347s
CPU time for analysis:          896.240s
Total time for CPAchecker:      900.390s
Total CPU time for CPAchecker:  900.270s
Time for statistics:              2.188s

Time for Garbage Collector:      51.852s (in 2083 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1094MB (  1043 MiB) max;    473MB (   451 MiB) avg;   1126MB (  1074 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1137MB (  1084 MiB) max;    693MB (   661 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8220MB (  7839 MiB) max;   8153MB (  7775 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
