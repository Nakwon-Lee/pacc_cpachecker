scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--cpqarray.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zlur3lu_/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6409: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6412: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 6418: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_33133;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6449-6450: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6453-6454: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6457-6458: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 2:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 4:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  case 8:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)arg): "ebx");
  goto ldv_33144;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7659: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4626: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4658: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4519: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4454-4455: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4548: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4487: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            89613 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  82002 (92%)
  Because of loop head:            7515 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         96 (0%)
  Times precision was empty:       44815 (50%)
  Times precision was {false}:     800 (1%)
  Times result was cached:         43122 (48%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      876 (1%)
  Times result was 'false':        2928 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         123655
  BDD entailment checks:           35173
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       53
Number of predicates discovered:          11
Number of abstraction locations:          72
Max number of predicates per location:    10
Avg number of predicates per location:    3
Total predicates per abstraction:         159641
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 95.25
Number of irrelevant predicates:          92845 (58%)
Number of preds handled by boolean abs:   2443 (2%)
  Total number of models for allsat:      1764
  Max number of models for allsat:        64
  Avg number of models for allsat:        2.01

Time for post operator:                  4.225s
  Time for path formula creation:        4.003s
Time for strengthen operator:            0.511s
Time for prec operator:                  8.817s
  Time for abstraction:                  7.724s (Max:     0.044s, Count: 89613)
    Boolean abstraction:                 1.099s
    Solving time:                        0.820s (Max:     0.019s)
    Model enumeration time:              0.399s
    Time for BDD construction:           0.085s (Max:     0.009s)
Time for merge operator:                 0.502s
Time for coverage check:                 0.119s
  Time for BDD entailment checks:        0.087s
Total time for SMT solver (w/o itp):     1.219s

Number of path formula cache hits:   658634 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.074s

Total number of created targets for pointer analysis: 16
   Number of created targets for uf: *signed_int is 17


Number of BDD nodes:                               3470
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2357 (count: 90164, min: 0, max: 122, avg: 0.03)
Time for BDD node cleanup:                             0.033s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.808s
  Time for transition matches:                         0.379s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       568130 (count: 568130, min: 1, max: 1, avg: 1.00) [1 x 568130]

CPA algorithm statistics
------------------------
Number of iterations:            389267
Max size of waitlist:            356
Average size of waitlist:        170
Number of computed successors:   468686
Max successors for one state:    2
Number of times merged:          44241
Number of times stopped:         56748
Number of times breaked:         96

Total time for CPA algorithm:        22.931s (Max:     1.078s)
  Time for choose from waitlist:      0.164s
  Time for precision adjustment:     11.110s
  Time for transfer relation:         8.583s
  Time for merge operator:            0.973s
  Time for stop operator:             0.569s
  Time for adding to reached set:     0.496s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   96
Avg. length of target path (in blocks):                1410 (count: 96, min: 8, max: 16, avg: 14.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.365s
  Counterexample analysis:                             1.523s (Max:     0.035s, Calls: 96)
    Refinement sat check:                              1.230s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.029s
  Precision update:                                    0.041s
  ARG update:                                          0.726s

Length of refined path (in blocks):                    1138 (count: 96, min: 4, max: 15, avg: 11.85)
Number of affected states:                              924 (count: 96, min: 1, max: 13, avg: 9.63)
Length (states) of path with itp 'true':                118 (count: 96, min: 1, max: 2, avg: 1.23)
Length (states) of path with itp non-trivial itp:       924 (count: 96, min: 1, max: 13, avg: 9.63)
Length (states) of path with itp 'false':                96 (count: 96, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 96, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             828 (count: 96, min: 0, max: 12, avg: 8.63)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                96
Number of successful refinements:     96
Number of failed refinements:         0
Max. size of reached set before ref.: 5853
Max. size of reached set after ref.:  8
Avg. size of reached set before ref.: 4239.02
Avg. size of reached set after ref.:  6.46

Total time for CEGAR algorithm:      25.605s
Time for refinements:                 2.672s
Average time for refinement:          0.027s
Max time for refinement:              0.097s

Code Coverage
-----------------------------
  Function coverage:      0.313
  Visited lines:          1247
  Total lines:            2966
  Line coverage:          0.420
  Visited conditions:     202
  Total conditions:       916
  Condition coverage:     0.221

CPAchecker general statistics
-----------------------------
Number of program locations:     4325
Number of CFA edges:             4995
Number of relevant variables:    549
Number of functions:             163
Number of loops:                 37
Size of reached set:             2685
  Number of reached locations:   510 (12%)
    Avg states per location:     5
    Max states per location:     30 (at node N60)
  Number of reached functions:   51 (31%)
  Number of partitions:          2679
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N2621 (before line 7196), Function main called from node N2600, stack depth 1 [5580d62f], stack [main]])
  Number of target states:       0
  Size of final wait list        193

Time for analysis setup:          4.227s
  Time for loading CPAs:          0.693s
  Time for loading parser:        0.539s
  Time for CFA construction:      2.915s
    Time for parsing file(s):     0.690s
    Time for AST to CFA:          0.962s
    Time for CFA sanity check:    0.279s
    Time for post-processing:     0.875s
      Time for var class.:        0.368s
Time for Analysis:               25.606s
CPU time for analysis:           25.600s
Total time for CPAchecker:       29.836s
Total CPU time for CPAchecker:   29.820s
Time for statistics:              0.087s

Time for Garbage Collector:       1.069s (in 167 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 77MB (    74 MiB) max;     52MB (    50 MiB) avg;     79MB (    76 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    33 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     37MB (    36 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
