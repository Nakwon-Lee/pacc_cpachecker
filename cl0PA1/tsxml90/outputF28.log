scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--isdn--i4l--isdn.ko-ldv_main3_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lj2912xz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 6458: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6461: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6464: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6203;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10363: Dead code detected: tmp___1 = phones; (CFACreationUtils.addEdgeToCFA, INFO)

line 10368: Dead code detected: tmp___2 = phones; (CFACreationUtils.addEdgeToCFA, INFO)

line 10373: Dead code detected: tmp___3 = phones; (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
    case 1UL:
    tmp___0 = phones;
    phones = phones + 1;
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___0): "ebx");
    goto ldv_45739;
    case 2UL:
    tmp___1 = phones;
    phones = phones + 1;
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___1): "ebx");
    goto ldv_45739;
    case 4UL:
    tmp___2 = phones;
    phones = phones + 1;
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___2): "ebx");
    goto ldv_45739;
    case 8UL:
    tmp___3 = phones;
    phones = phones + 1;
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___3): "ebx");
    goto ldv_45739;
    default:
    tmp___4 = phones;
    phones = phones + 1;
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___4): "ebx");
    goto ldv_45739;
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 10415-10416: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 10419-10420: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 10423-10424: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx");
  goto ldv_45751;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx");
  goto ldv_45751;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx");
  goto ldv_45751;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx");
  goto ldv_45751;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (phones): "ebx");
  goto ldv_45751;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10947: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12695: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12698: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 12704: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_44732;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_44732;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_44732;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_44732;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_44732;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 15848: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16766: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 16880: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16921: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16924: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16927: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16984: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16987: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 16990: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6330;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6330;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6330;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6330;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 19018: Dead code detected: tmp___2 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

line 19023: Dead code detected: tmp___3 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

line 19028: Dead code detected: tmp___4 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      tmp___2 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___2): "ebx");
      goto ldv_44974;
      case 2UL:
      tmp___3 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___3): "ebx");
      goto ldv_44974;
      case 4UL:
      tmp___4 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___4): "ebx");
      goto ldv_44974;
      case 8UL:
      tmp___5 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___5): "ebx");
      goto ldv_44974;
      default:
      tmp___6 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (tmp___6): "ebx");
      goto ldv_44974;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 19048: Dead code detected: tmp___7 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

line 19054: Dead code detected: tmp___8 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

line 19060: Dead code detected: tmp___9 = p___0; (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
      case 1UL:
      tmp___7 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" (tmp___7): "ebx");
      goto ldv_44983;
      case 2UL:
      tmp___8 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" (tmp___8): "ebx");
      goto ldv_44983;
      case 4UL:
      tmp___9 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" (tmp___9): "ebx");
      goto ldv_44983;
      case 8UL:
      tmp___10 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" (tmp___10): "ebx");
      goto ldv_44983;
      default:
      tmp___11 = p___0;
      p___0 = p___0 + 1;
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                           "c" (tmp___11): "ebx");
      goto ldv_44983;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 19609: Dead code detected: tmp___55 = p; (CFACreationUtils.addEdgeToCFA, INFO)

line 19614: Dead code detected: tmp___56 = p; (CFACreationUtils.addEdgeToCFA, INFO)

line 19619: Dead code detected: tmp___57 = p; (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
        case 1UL:
        tmp___54 = p;
        p = p + 1;
        __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" (tmp___54));
        goto ldv_45048;
        case 2UL:
        tmp___55 = p;
        p = p + 1;
        __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" (tmp___55));
        goto ldv_45048;
        case 4UL:
        tmp___56 = p;
        p = p + 1;
        __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" (tmp___56));
        goto ldv_45048;
        case 8UL:
        tmp___57 = p;
        p = p + 1;
        __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" (tmp___57));
        goto ldv_45048;
        default:
        tmp___58 = p;
        p = p + 1;
        __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" (tmp___58));
        goto ldv_45048;
        } (CFACreationUtils.addEdgeToCFA, INFO)

line 20959: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21063: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21087: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21111: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21135: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21159: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21183: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24923: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 25106: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 25507: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26831: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28339: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6916: Function pointer *(dst->ops->link_failure) with type void (*)(struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24452: Function pointer *(compressor->compress) with type int (*)(void *, struct sk_buff *, struct sk_buff *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24397: Function pointer *(ipc->incomp) with type void (*)(void *, struct sk_buff *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24369: Function pointer *(ipc->decompress) with type int (*)(void *, struct sk_buff *, struct sk_buff *, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 24587-24589: Function pointer *(is->link_compressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 24582-24584: Function pointer *(mis->compressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 24564-24566: Function pointer *(is->link_decompressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 24554-24556: Function pointer *(mis->decompressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24739: Function pointer *(is->link_compressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24732: Function pointer *(is->compressor->reset) with type void (*)(void *, unsigned char, unsigned char, unsigned char *, unsigned int, struct isdn_ppp_resetparams *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24816: Function pointer *(ipc->alloc) with type void *(*)(struct isdn_ppp_comp_data *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24818: Function pointer *(ipc->init) with type int (*)(void *, struct isdn_ppp_comp_data *, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 18696-18697: Function pointer *(((dev->drv)[drvidx])->interface->readstat) with type int (*)(u_char *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 16807-16808: Function pointer *(((dev->drv)[c->driver])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 16725-16726: Function pointer *(((dev->drv)[c->driver])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 18797-18799: Function pointer *(((dev->drv)[drvidx])->interface->writecmd) with type int (*)(u_char *, int, int, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 20249-20250: Function pointer *(((dev->drv)[drvidx])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 20241-20242: Function pointer *(((dev->drv)[drvidx])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20229: Function pointer *(((dev->drv)[drvidx])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20180: Function pointer *(((dev->drv)[drvidx])->interface->writebuf_skb) with type int (*)(int, int, int, struct sk_buff *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17049: Function pointer *(p->_qproc) with type void (*)(struct file *, wait_queue_head_t *, struct poll_table_struct *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vzalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function interruptible_sleep_on to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function nonseekable_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strncpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6609: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17049: Ignoring function call through function pointer *(p->_qproc): (*(p->_qproc))(filp, wait_address, p); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function module_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function slhc_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 21743: Ignoring function call through function pointer *(is->compressor->free): (*(is->compressor->free))(is->comp_stat); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21748: Ignoring function call through function pointer *(is->link_compressor->free): (*(is->link_compressor->free))(is->link_comp_stat); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21753: Ignoring function call through function pointer *(is->link_decompressor->free): (*(is->link_decompressor->free))(is->link_decomp_stat); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 21758: Ignoring function call through function pointer *(is->decompressor->free): (*(is->decompressor->free))(is->decomp_stat); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10626: Ignoring function call through function pointer *(p->cprot->pops->proto_del): (*(p->cprot->pops->proto_del))(p->cprot); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_queue_purge to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 10663: Unsupported feature (recursion): isdn_net_realrm(n, q); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            13328 (17% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  12077 (91%)
  Because of loop head:            1119 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         132 (1%)
  Times precision was empty:       9709 (73%)
  Times precision was {false}:     191 (1%)
  Times result was cached:         2789 (21%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      639 (5%)
  Times result was 'false':        281 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         7385
  BDD entailment checks:           1119
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       88
Number of predicates discovered:          8
Number of abstraction locations:          78
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         8895
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 10.72
Number of irrelevant predicates:          3631 (41%)
Number of preds handled by boolean abs:   1856 (21%)
  Total number of models for allsat:      639
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  3.040s
  Time for path formula creation:        2.984s
Time for strengthen operator:            0.079s
Time for prec operator:                  2.797s
  Time for abstraction:                  2.524s (Max:     0.124s, Count: 13328)
    Boolean abstraction:                 0.748s
    Solving time:                        0.923s (Max:     0.119s)
    Model enumeration time:              0.041s
    Time for BDD construction:           0.049s (Max:     0.008s)
Time for merge operator:                 0.301s
Time for coverage check:                 0.020s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     0.964s

Number of path formula cache hits:   81413 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.419s

Total number of created targets for pointer analysis: 6268
   Number of created targets for uf: *signed_int is 199
   Number of created targets for uf: *(char)* is 7
   Number of created targets for uf: *unsigned_char is 301
   Number of created targets for uf: *char is 193
   Number of created targets for uf: *unsigned_long_int is 25


Number of BDD nodes:                               247
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1399 (count: 15721, min: 0, max: 134, avg: 0.09)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.291s
Automaton transfers with branching:                0
Automaton transfer successors:                        76901 (count: 76901, min: 1, max: 1, avg: 1.00) [1 x 76901]

CPA algorithm statistics
------------------------
Number of iterations:            47421
Max size of waitlist:            149
Average size of waitlist:        65
Number of computed successors:   55533
Max successors for one state:    2
Number of times merged:          3133
Number of times stopped:         4189
Number of times breaked:         132

Total time for CPA algorithm:         8.726s (Max:     0.995s)
  Time for choose from waitlist:      0.063s
  Time for precision adjustment:      3.403s
  Time for transfer relation:         4.364s
  Time for merge operator:            0.397s
  Time for stop operator:             0.151s
  Time for adding to reached set:     0.067s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   132
Avg. length of target path (in blocks):                2922 (count: 132, min: 10, max: 46, avg: 22.14)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  10.932s
  Counterexample analysis:                            10.590s (Max:     0.198s, Calls: 132)
    Refinement sat check:                              9.588s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.042s
  Precision update:                                    0.056s
  ARG update:                                          0.179s

Length of refined path (in blocks):                    2790 (count: 132, min: 9, max: 45, avg: 21.14)
Number of affected states:                             1234 (count: 132, min: 4, max: 43, avg: 9.35)
Length (states) of path with itp 'true':               1424 (count: 132, min: 1, max: 26, avg: 10.79)
Length (states) of path with itp non-trivial itp:      1234 (count: 132, min: 4, max: 43, avg: 9.35)
Length (states) of path with itp 'false':               132 (count: 132, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 132, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1102 (count: 132, min: 3, max: 42, avg: 8.35)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                132
Number of successful refinements:     132
Number of failed refinements:         0
Max. size of reached set before ref.: 2254
Max. size of reached set after ref.:  2162
Avg. size of reached set before ref.: 1089.59
Avg. size of reached set after ref.:  709.02

Total time for CEGAR algorithm:      19.968s
Time for refinements:                11.157s
Average time for refinement:          0.084s
Max time for refinement:              0.201s

Code Coverage
-----------------------------
  Function coverage:      0.120
  Visited lines:          1584
  Total lines:            14319
  Line coverage:          0.111
  Visited conditions:     268
  Total conditions:       5730
  Condition coverage:     0.047

CPAchecker general statistics
-----------------------------
Number of program locations:     20438
Number of CFA edges:             24597
Number of relevant variables:    2841
Number of functions:             509
Number of loops:                 183
Size of reached set:             828
  Number of reached locations:   650 (3%)
    Avg states per location:     1
    Max states per location:     8 (at node N114)
  Number of reached functions:   61 (12%)
  Number of partitions:          828
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        78

Time for analysis setup:          7.917s
  Time for loading CPAs:          0.998s
  Time for loading parser:        0.520s
  Time for CFA construction:      6.283s
    Time for parsing file(s):     1.044s
    Time for AST to CFA:          2.490s
    Time for CFA sanity check:    0.672s
    Time for post-processing:     1.904s
      Time for var class.:        0.951s
Time for Analysis:               19.969s
CPU time for analysis:           19.960s
Total time for CPAchecker:       27.888s
Total CPU time for CPAchecker:   27.850s
Time for statistics:              0.097s

Time for Garbage Collector:       0.668s (in 48 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                103MB (    98 MiB) max;     64MB (    61 MiB) avg;    110MB (   105 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8071MB (  7697 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
