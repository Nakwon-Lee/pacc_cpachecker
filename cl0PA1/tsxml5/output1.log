scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--staging--comedi--drivers--ni_660x.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_6hwbt213/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4093: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

line 5365: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_ni_660x_driver_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ni_660x_driver_attach_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ni_660x_driver_close_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ni_660x_driver_open_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ni_660x_driver_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ni_gpct_device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_pci_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_auto_config to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_pci_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_free_ring to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_unsetup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_auto_unconfig to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_setup2 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function comedi_alloc_subdevices to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mite_alloc_ring to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ni_gpct_device_construct to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ni_tio_init_counter to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            118262 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  97004 (82%)
  Because of loop head:            21164 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         94 (0%)
  Times precision was empty:       34239 (29%)
  Times precision was {false}:     409 (0%)
  Times result was cached:         82485 (70%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1129 (1%)
  Times result was 'false':        1920 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         74833
  BDD entailment checks:           22329
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       22
Number of predicates discovered:          7
Number of abstraction locations:          121
Max number of predicates per location:    6
Avg number of predicates per location:    3
Total predicates per abstraction:         247711
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 161.06
Number of irrelevant predicates:          77507 (31%)
Number of preds handled by boolean abs:   2298 (1%)
  Total number of models for allsat:      1194
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.06

Time for post operator:                  2.956s
  Time for path formula creation:        2.666s
Time for strengthen operator:            0.484s
Time for prec operator:                 11.298s
  Time for abstraction:                 10.123s (Max:     0.037s, Count: 118262)
    Boolean abstraction:                 0.817s
    Solving time:                        0.662s (Max:     0.017s)
    Model enumeration time:              0.099s
    Time for BDD construction:           0.097s (Max:     0.009s)
Time for merge operator:                 0.204s
Time for coverage check:                 0.069s
  Time for BDD entailment checks:        0.058s
Total time for SMT solver (w/o itp):     0.761s

Number of path formula cache hits:   733596 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.727s

Total number of created targets for pointer analysis: 474
   Number of created targets for uf: *unsigned_short_int is 101
   Number of created targets for uf: *(struct_mite_dma_descriptor_ring)* is 41
   Number of created targets for uf: *unsigned_int is 21
   Number of created targets for uf: *(struct_mite_struct)* is 6
   Number of created targets for uf: *(struct_ni_gpct_device)* is 6


Number of BDD nodes:                               588
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2540 (count: 66306, min: 0, max: 130, avg: 0.04)
Time for BDD node cleanup:                             0.013s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.855s
  Time for transition matches:                         0.422s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       617525 (count: 617525, min: 1, max: 1, avg: 1.00) [1 x 617525]

CPA algorithm statistics
------------------------
Number of iterations:            394329
Max size of waitlist:            725
Average size of waitlist:        186
Number of computed successors:   448064
Max successors for one state:    2
Number of times merged:          26252
Number of times stopped:         42203
Number of times breaked:         94

Total time for CPA algorithm:        24.336s (Max:     1.329s)
  Time for choose from waitlist:      0.179s
  Time for precision adjustment:     13.606s
  Time for transfer relation:         7.725s
  Time for merge operator:            0.565s
  Time for stop operator:             0.616s
  Time for adding to reached set:     0.475s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   94
Avg. length of target path (in blocks):                3496 (count: 94, min: 8, max: 84, avg: 37.19)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.948s
  Counterexample analysis:                             1.033s (Max:     0.031s, Calls: 94)
    Refinement sat check:                              0.710s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.005s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.050s
  Precision update:                                    0.065s
  ARG update:                                          0.752s

Length of refined path (in blocks):                    3338 (count: 94, min: 4, max: 83, avg: 35.51)
Number of affected states:                             3138 (count: 94, min: 1, max: 81, avg: 33.38)
Length (states) of path with itp 'true':                106 (count: 94, min: 1, max: 5, avg: 1.13)
Length (states) of path with itp non-trivial itp:      3138 (count: 94, min: 1, max: 81, avg: 33.38)
Length (states) of path with itp 'false':                94 (count: 94, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 94, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3044 (count: 94, min: 0, max: 80, avg: 32.38)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                94
Number of successful refinements:     94
Number of failed refinements:         0
Max. size of reached set before ref.: 32517
Max. size of reached set after ref.:  172
Avg. size of reached set before ref.: 4180.34
Avg. size of reached set after ref.:  9.55

Total time for CEGAR algorithm:      26.600s
Time for refinements:                 2.258s
Average time for refinement:          0.024s
Max time for refinement:              0.113s

Code Coverage
-----------------------------
  Function coverage:      0.414
  Visited lines:          1175
  Total lines:            1860
  Line coverage:          0.632
  Visited conditions:     184
  Total conditions:       430
  Condition coverage:     0.428

CPAchecker general statistics
-----------------------------
Number of program locations:     2409
Number of CFA edges:             2689
Number of relevant variables:    273
Number of functions:             99
Number of loops:                 23
Size of reached set:             11886
  Number of reached locations:   574 (24%)
    Avg states per location:     20
    Max states per location:     143 (at node N1694)
  Number of reached functions:   41 (41%)
  Number of partitions:          11881
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1458 (before line 5147), Function main called from node N1447, stack depth 1 [49096b06], stack [main]])
  Number of target states:       0
  Size of final wait list        333

Time for analysis setup:          3.206s
  Time for loading CPAs:          0.588s
  Time for loading parser:        0.509s
  Time for CFA construction:      2.003s
    Time for parsing file(s):     0.555s
    Time for AST to CFA:          0.694s
    Time for CFA sanity check:    0.142s
    Time for post-processing:     0.494s
      Time for var class.:        0.241s
Time for Analysis:               26.600s
CPU time for analysis:           26.600s
Total time for CPAchecker:       29.808s
Total CPU time for CPAchecker:   29.800s
Time for statistics:              0.215s

Time for Garbage Collector:       1.931s (in 193 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                116MB (   111 MiB) max;     55MB (    53 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             38MB (    36 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   8011MB (  7640 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
