scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--ethernet--chelsio--cxgb4--cxgb4.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_dryejpby/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 7101: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7104: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7107: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12116: Dead code detected: tmp = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12121: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12126: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp->state): : "memory",
                       "cc");
  goto ldv_45796;
  case 2UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_45796;
  case 4UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_45796;
  case 8UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_45796;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 15410: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

lines 15608-15609: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 15612-15613: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 15620-15621: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5474;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 16705: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21686: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21787: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21790: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21793: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 21847-21862: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 21849: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21852: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21854: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 21858: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 21867-21882: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 21869: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21872: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21874: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 21878: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 21889: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21892: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21898: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 21907-21922: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 21909: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21912: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

line 21914: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 21918: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (numa_node));
  goto ldv_12733;
  default:
  __bad_percpu_size();
  }
  ldv_12733:
  pscr_ret__ = pfo_ret__;
  goto ldv_12739;
  case 2UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (numa_node));
  goto ldv_12743;
  default:
  __bad_percpu_size();
  }
  ldv_12743:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_12739;
  case 4UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (numa_node));
  goto ldv_12752;
  default:
  __bad_percpu_size();
  }
  ldv_12752:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_12739;
  case 8UL: ;
  switch (4UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (numa_node));
  goto ldv_12761;
  default:
  __bad_percpu_size();
  }
  ldv_12761:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_12739;
  default:
  __bad_size_call_parameter();
  goto ldv_12739;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 22922-22937: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 22924: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22927: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22929: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 22933: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 22942-22957: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 22944: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22947: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22949: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 22953: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 22964: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22967: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22973: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

lines 22982-22997: Dead code detected: switch (4UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 22984: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22987: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

line 22989: Dead code detected:  (CFACreationUtils.addEdgeToCFA, INFO)

line 22993: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    default:
    __bad_percpu_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
    goto ldv_36563;
    default:
    __bad_percpu_size();
    }
    ldv_36563:
    pscr_ret__ = pfo_ret__;
    goto ldv_36569;
    case 2UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
    goto ldv_36573;
    default:
    __bad_percpu_size();
    }
    ldv_36573:
    pscr_ret__ = pfo_ret_____0;
    goto ldv_36569;
    case 4UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
    goto ldv_36582;
    default:
    __bad_percpu_size();
    }
    ldv_36582:
    pscr_ret__ = pfo_ret_____1;
    goto ldv_36569;
    case 8UL: ;
    switch (4UL) {
    case 1UL:
    __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 2UL:
    __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 4UL:
    __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    case 8UL:
    __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
    goto ldv_36591;
    default:
    __bad_percpu_size();
    }
    ldv_36591:
    pscr_ret__ = pfo_ret_____2;
    goto ldv_36569;
    default:
    __bad_size_call_parameter();
    goto ldv_36569;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 26269: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 22371: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22404: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22212: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 22145-22146: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22295: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22275: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22242: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 22179: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12344: Function pointer *((ulds[0]).control) with type int (*)(void *, enum cxgb4_control , ...) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12561: Function pointer *((ulds[i]).state_change) with type int (*)(void *, enum cxgb4_state ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 25115: Function pointer *(q->handler) with type int (*)(struct sge_rspq *, __be64 *, const struct pkt_gl *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 25113: Function pointer *(q->handler) with type int (*)(struct sge_rspq *, __be64 *, const struct pkt_gl *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12460: Function pointer *((ulds[uld]).add) with type void *(*)(const struct cxgb4_lld_info *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_request_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_release_regions to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_save_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_sriov to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vlan_dev_real_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function flush_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_set_mask to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_sriov to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_cleanup_aer_uncorrect_error_status to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rtnl_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_pcie_error_reporting to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_pcie_error_reporting to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_supported to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            38181 (11% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  35496 (93%)
  Because of loop head:            2589 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         96 (0%)
  Times precision was empty:       25043 (66%)
  Times precision was {false}:     221 (1%)
  Times result was cached:         12230 (32%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      687 (2%)
  Times result was 'false':        913 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         21148
  BDD entailment checks:           6960
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       437
Number of predicates discovered:          5
Number of abstraction locations:          65
Max number of predicates per location:    4
Avg number of predicates per location:    3
Total predicates per abstraction:         46549
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 51.27
Number of irrelevant predicates:          22541 (48%)
Number of preds handled by boolean abs:   1524 (3%)
  Total number of models for allsat:      687
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  9.712s
  Time for path formula creation:        9.539s
Time for strengthen operator:            0.321s
Time for prec operator:                  5.130s
  Time for abstraction:                  4.554s (Max:     0.017s, Count: 38181)
    Boolean abstraction:                 0.928s
    Solving time:                        0.895s (Max:     0.014s)
    Model enumeration time:              0.081s
    Time for BDD construction:           0.064s (Max:     0.008s)
Time for merge operator:                 0.140s
Time for coverage check:                 0.037s
  Time for BDD entailment checks:        0.036s
Total time for SMT solver (w/o itp):     0.976s

Number of path formula cache hits:   337778 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.636s

Total number of created targets for pointer analysis: 347663
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *unsigned_long_long_int is 2
   Number of created targets for uf: *unsigned_int is 801


Number of BDD nodes:                               214
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        1408 (count: 37262, min: 0, max: 66, avg: 0.04)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.654s
  Time for transition matches:                         0.333s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       332779 (count: 332779, min: 1, max: 1, avg: 1.00) [1 x 332779]

CPA algorithm statistics
------------------------
Number of iterations:            127837
Max size of waitlist:            155
Average size of waitlist:        84
Number of computed successors:   150731
Max successors for one state:    2
Number of times merged:          7094
Number of times stopped:         10602
Number of times breaked:         96

Total time for CPA algorithm:        21.530s (Max:     1.861s)
  Time for choose from waitlist:      0.125s
  Time for precision adjustment:      6.357s
  Time for transfer relation:        13.460s
  Time for merge operator:            0.317s
  Time for stop operator:             0.323s
  Time for adding to reached set:     0.279s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   96
Avg. length of target path (in blocks):                1370 (count: 96, min: 7, max: 19, avg: 14.27)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.319s
  Counterexample analysis:                             0.819s (Max:     0.018s, Calls: 96)
    Refinement sat check:                              0.517s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.065s
  Precision update:                                    0.030s
  ARG update:                                          0.355s

Length of refined path (in blocks):                    1274 (count: 96, min: 6, max: 18, avg: 13.27)
Number of affected states:                             1082 (count: 96, min: 4, max: 16, avg: 11.27)
Length (states) of path with itp 'true':                 96 (count: 96, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:      1082 (count: 96, min: 4, max: 16, avg: 11.27)
Length (states) of path with itp 'false':                96 (count: 96, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 96, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             986 (count: 96, min: 3, max: 15, avg: 10.27)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                96
Number of successful refinements:     96
Number of failed refinements:         0
Max. size of reached set before ref.: 2173
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 1437.15
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      23.037s
Time for refinements:                 1.503s
Average time for refinement:          0.015s
Max time for refinement:              0.050s

Code Coverage
-----------------------------
  Function coverage:      0.145
  Visited lines:          2489
  Total lines:            12530
  Line coverage:          0.199
  Visited conditions:     340
  Total conditions:       2932
  Condition coverage:     0.116

CPAchecker general statistics
-----------------------------
Number of program locations:     17367
Number of CFA edges:             19972
Number of relevant variables:    3362
Number of functions:             621
Number of loops:                 190
Size of reached set:             1827
  Number of reached locations:   815 (5%)
    Avg states per location:     2
    Max states per location:     74 (at node N415)
  Number of reached functions:   90 (14%)
  Number of partitions:          1817
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N7074 (before line 15354), Function main called from node N6731, stack depth 1 [7cd239f6], stack [main]])
  Number of target states:       0
  Size of final wait list        149

Time for analysis setup:          7.303s
  Time for loading CPAs:          0.812s
  Time for loading parser:        0.459s
  Time for CFA construction:      5.920s
    Time for parsing file(s):     0.959s
    Time for AST to CFA:          2.350s
    Time for CFA sanity check:    0.576s
    Time for post-processing:     1.872s
      Time for var class.:        0.958s
Time for Analysis:               23.037s
CPU time for analysis:           23.030s
Total time for CPAchecker:       30.342s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.129s

Time for Garbage Collector:       1.056s (in 119 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                117MB (   111 MiB) max;     69MB (    66 MiB) avg;    121MB (   115 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    33 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8083MB (  7709 MiB) max;   8073MB (  7699 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
