scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--tty--mxser.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_w50efpx8/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3488: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3491: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 3494: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5101: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5104: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5110: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_30293;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_30293;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_30293;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_30293;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (value): "ebx");
  goto ldv_30293;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5435: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5438: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5444: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
  goto ldv_30374;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
  goto ldv_30374;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
  goto ldv_30374;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
  goto ldv_30374;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
  goto ldv_30374;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5483-5484: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5487-5488: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5491-5492: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx");
  goto ldv_30390;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx");
  goto ldv_30390;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx");
  goto ldv_30390;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx");
  goto ldv_30390;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((unsigned long *)argp): "ebx");
  goto ldv_30390;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5795: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5798: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5804: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp));
      goto ldv_30454;
      case 2UL:
      __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp));
      goto ldv_30454;
      case 4UL:
      __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp));
      goto ldv_30454;
      case 8UL:
      __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp));
      goto ldv_30454;
      default:
      __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((int *)argp));
      goto ldv_30454;
      } (CFACreationUtils.addEdgeToCFA, INFO)

line 5841: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5844: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5850: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
      case 1UL:
      __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
      goto ldv_30463;
      case 2UL:
      __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
      goto ldv_30463;
      case 4UL:
      __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
      goto ldv_30463;
      case 8UL:
      __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
      goto ldv_30463;
      default:
      __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)argp): "ebx");
      goto ldv_30463;
      } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5936-5937: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5940-5941: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5948-5949: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx");
  goto ldv_30486;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx");
  goto ldv_30486;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx");
  goto ldv_30486;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx");
  goto ldv_30486;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)argp): "ebx");
  goto ldv_30486;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5975-5976: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5979-5980: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5987-5988: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx");
  goto ldv_30499;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx");
  goto ldv_30499;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx");
  goto ldv_30499;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx");
  goto ldv_30499;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)argp): "ebx");
  goto ldv_30499;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6036-6037: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6040-6041: Dead code detected: __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6044-6045: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx");
  goto ldv_30512;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx");
  goto ldv_30512;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx");
  goto ldv_30512;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx");
  goto ldv_30512;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" ((unsigned char *)argp): "ebx");
  goto ldv_30512;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6064: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6067: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6073: Dead code detected: __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp));
  goto ldv_30523;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp));
  goto ldv_30523;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp));
  goto ldv_30523;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp));
  goto ldv_30523;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((int *)argp));
  goto ldv_30523;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 6091-6092: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6095-6096: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 6103-6104: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx");
  goto ldv_30532;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx");
  goto ldv_30532;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx");
  goto ldv_30532;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx");
  goto ldv_30532;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" ((int *)argp): "ebx");
  goto ldv_30532;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6374: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6379: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 6384: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_30614;
  case 2UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_30614;
  case 4UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_30614;
  case 8UL:
  tmp___7 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___7->state): : "memory",
                       "cc");
  goto ldv_30614;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7773: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tty_alloc_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_set_operations to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_close_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_pages to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_close_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_set to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            5494 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  4646 (85%)
  Because of loop head:            802 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         46 (1%)
  Times precision was empty:       1455 (26%)
  Times precision was {false}:     69 (1%)
  Times result was cached:         3619 (66%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      351 (6%)
  Times result was 'false':        245 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         2422
  BDD entailment checks:           754
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       43
Number of predicates discovered:          6
Number of abstraction locations:          77
Max number of predicates per location:    5
Avg number of predicates per location:    3
Total predicates per abstraction:         11695
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 27.85
Number of irrelevant predicates:          2028 (17%)
Number of preds handled by boolean abs:   694 (6%)
  Total number of models for allsat:      352
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  1.709s
  Time for path formula creation:        1.648s
Time for strengthen operator:            0.054s
Time for prec operator:                  6.929s
  Time for abstraction:                  6.787s (Max:     0.482s, Count: 5494)
    Boolean abstraction:                 4.204s
    Solving time:                        4.379s (Max:     0.463s)
    Model enumeration time:              0.122s
    Time for BDD construction:           0.047s (Max:     0.012s)
Time for merge operator:                 0.101s
Time for coverage check:                 0.012s
  Time for BDD entailment checks:        0.012s
Total time for SMT solver (w/o itp):     4.501s

Number of path formula cache hits:   28169 (89%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.546s

Total number of created targets for pointer analysis: 4023
   Number of created targets for uf: *signed_int is 481
   Number of created targets for uf: *unsigned_char is 660
   Number of created targets for uf: *(unsigned_char)* is 33
   Number of created targets for uf: *unsigned_int is 227


Number of BDD nodes:                               241
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         824 (count: 4730, min: 0, max: 172, avg: 0.17)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.097s
Automaton transfers with branching:                0
Automaton transfer successors:                        26060 (count: 26060, min: 1, max: 1, avg: 1.00) [1 x 26060]

CPA algorithm statistics
------------------------
Number of iterations:            17626
Max size of waitlist:            61
Average size of waitlist:        30
Number of computed successors:   20666
Max successors for one state:    2
Number of times merged:          834
Number of times stopped:         1428
Number of times breaked:         46

Total time for CPA algorithm:        10.049s (Max:     1.296s)
  Time for choose from waitlist:      0.029s
  Time for precision adjustment:      7.160s
  Time for transfer relation:         2.431s
  Time for merge operator:            0.138s
  Time for stop operator:             0.071s
  Time for adding to reached set:     0.056s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   46
Avg. length of target path (in blocks):                1648 (count: 46, min: 13, max: 74, avg: 35.83)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  15.077s
  Counterexample analysis:                            14.932s (Max:     0.559s, Calls: 46)
    Refinement sat check:                             13.602s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.027s
  Precision update:                                    0.032s
  ARG update:                                          0.055s

Length of refined path (in blocks):                    1534 (count: 45, min: 12, max: 73, avg: 34.09)
Number of affected states:                             1200 (count: 45, min: 4, max: 71, avg: 26.67)
Length (states) of path with itp 'true':                289 (count: 45, min: 1, max: 63, avg: 6.42)
Length (states) of path with itp non-trivial itp:      1200 (count: 45, min: 4, max: 71, avg: 26.67)
Length (states) of path with itp 'false':                45 (count: 45, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 45, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            1155 (count: 45, min: 3, max: 70, avg: 25.67)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                46
Number of successful refinements:     45
Number of failed refinements:         0
Max. size of reached set before ref.: 817
Max. size of reached set after ref.:  503
Avg. size of reached set before ref.: 524.04
Avg. size of reached set after ref.:  113.60

Total time for CEGAR algorithm:      25.257s
Time for refinements:                15.195s
Average time for refinement:          0.330s
Max time for refinement:              0.560s

Code Coverage
-----------------------------
  Function coverage:      0.372
  Visited lines:          983
  Total lines:            3270
  Line coverage:          0.301
  Visited conditions:     128
  Total conditions:       944
  Condition coverage:     0.136

CPAchecker general statistics
-----------------------------
Number of program locations:     4570
Number of CFA edges:             5362
Number of relevant variables:    478
Number of functions:             137
Number of loops:                 40
Size of reached set:             546
  Number of reached locations:   384 (8%)
    Avg states per location:     1
    Max states per location:     9 (at node N88)
  Number of reached functions:   51 (37%)
  Number of partitions:          542
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N960 (before line 4678), Function mxser_shutdown_port called from node N1071, stack depth 3 [10c95d9b], stack [main, mxser_close, mxser_shutdown_port]])
  Number of target states:       1
  Size of final wait list        28

Time for analysis setup:          4.654s
  Time for loading CPAs:          0.849s
  Time for loading parser:        0.412s
  Time for CFA construction:      3.300s
    Time for parsing file(s):     0.885s
    Time for AST to CFA:          1.186s
    Time for CFA sanity check:    0.317s
    Time for post-processing:     0.830s
      Time for var class.:        0.395s
Time for Analysis:               25.257s
CPU time for analysis:           25.260s
Total time for CPAchecker:       29.914s
Total CPU time for CPAchecker:   29.910s
Time for statistics:              0.133s

Time for Garbage Collector:       0.301s (in 32 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 68MB (    65 MiB) max;     47MB (    45 MiB) avg;     71MB (    68 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8020MB (  7649 MiB) max;   8010MB (  7639 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
