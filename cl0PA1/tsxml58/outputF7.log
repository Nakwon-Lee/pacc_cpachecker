scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--mfd--sm501.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_4tx2y26f/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5817: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5244: Function pointer *(pd->set_power) with type int (*)(struct device *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5207: Function pointer *(pd->get_power) with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5207: Ignoring function call through function pointer *(pd->get_power): tmp___0 = (*(pd->get_power))(sm->dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5244: Ignoring function call through function pointer *(pd->set_power): (*(pd->set_power))(sm->dev, (unsigned int)on); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1926591 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1770280 (92%)
  Because of loop head:            135987 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         20324 (1%)
  Times precision was empty:       504779 (26%)
  Times precision was {false}:     746 (0%)
  Times result was cached:         1419604 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1462 (0%)
  Times result was 'false':        49369 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         902935
  BDD entailment checks:           299615
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          13
Number of abstraction locations:          234
Max number of predicates per location:    8
Avg number of predicates per location:    2
Total predicates per abstraction:         3168754
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 1435.12
Number of irrelevant predicates:          2107046 (66%)
Number of preds handled by boolean abs:   2769 (0%)
  Total number of models for allsat:      1595
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.09

Time for post operator:                 33.198s
  Time for path formula creation:       30.849s
Time for strengthen operator:            5.614s
Time for prec operator:                 88.889s
  Time for abstraction:                 75.375s (Max:     0.318s, Count: 1926591)
    Boolean abstraction:                 1.067s
    Solving time:                        1.346s (Max:     0.018s)
    Model enumeration time:              0.093s
    Time for BDD construction:           0.065s (Max:     0.009s)
Time for merge operator:                 2.039s
Time for coverage check:                 0.338s
  Time for BDD entailment checks:        0.222s
Total time for SMT solver (w/o itp):     1.439s

Number of path formula cache hits:   11816830 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     8.731s

Total number of created targets for pointer analysis: 15858
   Number of created targets for uf: *(void)* is 24
   Number of created targets for uf: *signed_int is 253
   Number of created targets for uf: *(struct_sm501_platdata)* is 24
   Number of created targets for uf: *signed_long_int is 77
   Number of created targets for uf: *(struct_list_head)* is 93
   Number of created targets for uf: *(struct_resource)* is 934
   Number of created targets for uf: *unsigned_char_:_1 is 203
   Number of created targets for uf: *unsigned_long_long_int is 370
   Number of created targets for uf: *(struct_device)* is 24
   Number of created targets for uf: *unsigned_int is 139
   Number of created targets for uf: *unsigned_long_int is 70


Number of BDD nodes:                               875
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3305 (count: 819094, min: 0, max: 136, avg: 0.00)
Time for BDD node cleanup:                             0.120s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  9.342s
  Time for transition matches:                         5.471s
  Time for transition assertions:                      0.016s
  Time for transition actions:                         0.036s
Automaton transfers with branching:                0
Automaton transfer successors:                      9847048 (count: 9847048, min: 1, max: 1, avg: 1.00) [1 x 9847048]

CPA algorithm statistics
------------------------
Number of iterations:            6367209
Max size of waitlist:            30
Average size of waitlist:        15
Number of computed successors:   6997983
Max successors for one state:    2
Number of times merged:          301660
Number of times stopped:         524382
Number of times breaked:         20324

Total time for CPA algorithm:       234.580s (Max:     2.575s)
  Time for choose from waitlist:      1.703s
  Time for precision adjustment:    116.900s
  Time for transfer relation:        90.516s
  Time for merge operator:            4.640s
  Time for stop operator:             5.808s
  Time for adding to reached set:     5.208s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   20324
Avg. length of target path (in blocks):             2096759 (count: 20324, min: 10, max: 167, avg: 103.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 388.979s
  Counterexample analysis:                           364.364s (Max:     0.073s, Calls: 20324)
    Refinement sat check:                            194.339s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.853s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.841s
  Precision update:                                    7.445s
  ARG update:                                          8.614s

Length of refined path (in blocks):                 2038576 (count: 20324, min: 4, max: 166, avg: 100.30)
Number of affected states:                           416611 (count: 20324, min: 1, max: 96, avg: 20.50)
Length (states) of path with itp 'true':            1601641 (count: 20324, min: 1, max: 147, avg: 78.81)
Length (states) of path with itp non-trivial itp:    416611 (count: 20324, min: 1, max: 96, avg: 20.50)
Length (states) of path with itp 'false':             20324 (count: 20324, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         888 (count: 20324, min: 0, max: 1, avg: 0.04)
Equal non-trivial interpolants along paths:          395399 (count: 20324, min: 0, max: 95, avg: 19.45)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                20324
Number of successful refinements:     20324
Number of failed refinements:         0
Max. size of reached set before ref.: 26696
Max. size of reached set after ref.:  23583
Avg. size of reached set before ref.: 11258.24
Avg. size of reached set after ref.:  10943.22

Total time for CEGAR algorithm:     896.248s
Time for refinements:               539.226s
Average time for refinement:          0.026s
Max time for refinement:              0.326s

Code Coverage
-----------------------------
  Function coverage:      0.675
  Visited lines:          1949
  Total lines:            2197
  Line coverage:          0.887
  Visited conditions:     338
  Total conditions:       440
  Condition coverage:     0.768

CPAchecker general statistics
-----------------------------
Number of program locations:     2964
Number of CFA edges:             3321
Number of relevant variables:    321
Number of functions:             114
Number of loops:                 12
Size of reached set:             21788
  Number of reached locations:   1201 (41%)
    Avg states per location:     18
    Max states per location:     490 (at node N26)
  Number of reached functions:   77 (68%)
  Number of partitions:          21780
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N1737 (before line 5563), Function main called from node N1722, stack depth 1 [d176a31], stack [main]])
  Number of target states:       0
  Size of final wait list        8

Time for analysis setup:          4.071s
  Time for loading CPAs:          0.839s
  Time for loading parser:        0.562s
  Time for CFA construction:      2.562s
    Time for parsing file(s):     0.732s
    Time for AST to CFA:          0.886s
    Time for CFA sanity check:    0.173s
    Time for post-processing:     0.649s
      Time for var class.:        0.309s
Time for Analysis:              896.248s
CPU time for analysis:          896.150s
Total time for CPAchecker:      900.330s
Total CPU time for CPAchecker:  900.220s
Time for statistics:              0.323s

Time for Garbage Collector:      24.381s (in 3244 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                200MB (   191 MiB) max;    119MB (   113 MiB) avg;    209MB (   199 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           207MB (   197 MiB) max;    173MB (   165 MiB) avg
Allocated non-heap memory:        44MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8287MB (  7904 MiB) max;   8164MB (  7785 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
