scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--mfd--sm501.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_e_5dskqy/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5817: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5244: Function pointer *(pd->set_power) with type int (*)(struct device *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5207: Function pointer *(pd->get_power) with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5207: Ignoring function call through function pointer *(pd->get_power): tmp___0 = (*(pd->get_power))(sm->dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5244: Ignoring function call through function pointer *(pd->set_power): (*(pd->set_power))(sm->dev, (unsigned int)on); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1545435 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1352286 (88%)
  Because of loop head:            174163 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18986 (1%)
  Times precision was empty:       194572 (13%)
  Times precision was {false}:     920 (0%)
  Times result was cached:         1348064 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1879 (0%)
  Times result was 'false':        60554 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         683212
  BDD entailment checks:           303704
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          223
Max number of predicates per location:    8
Avg number of predicates per location:    1
Total predicates per abstraction:         2370502
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 846.91
Number of irrelevant predicates:          1018994 (43%)
Number of preds handled by boolean abs:   3065 (0%)
  Total number of models for allsat:      1916
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.02

Time for post operator:                 24.095s
  Time for path formula creation:       22.408s
Time for strengthen operator:            4.258s
Time for prec operator:                 77.131s
  Time for abstraction:                 66.967s (Max:     0.317s, Count: 1545435)
    Boolean abstraction:                 1.614s
    Solving time:                        2.083s (Max:     0.016s)
    Model enumeration time:              0.135s
    Time for BDD construction:           0.077s (Max:     0.008s)
Time for merge operator:                 1.339s
Time for coverage check:                 0.306s
  Time for BDD entailment checks:        0.222s
Total time for SMT solver (w/o itp):     2.218s

Number of path formula cache hits:   8881507 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.959s

Total number of created targets for pointer analysis: 24944
   Number of created targets for uf: *(void)* is 751
   Number of created targets for uf: *signed_int is 952
   Number of created targets for uf: *(struct_sm501_platdata)* is 47
   Number of created targets for uf: *(struct_list_head)* is 97
   Number of created targets for uf: *signed_long_int is 342
   Number of created targets for uf: *(struct_resource)* is 1559
   Number of created targets for uf: *unsigned_char_:_1 is 252
   Number of created targets for uf: *unsigned_long_long_int is 319
   Number of created targets for uf: *(struct_device)* is 47
   Number of created targets for uf: *unsigned_int is 3208
   Number of created targets for uf: *unsigned_long_int is 34


Number of BDD nodes:                               421
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        4027 (count: 518784, min: 0, max: 208, avg: 0.01)
Time for BDD node cleanup:                             0.076s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  7.502s
  Time for transition matches:                         3.977s
  Time for transition assertions:                      0.012s
  Time for transition actions:                         0.039s
Automaton transfers with branching:                0
Automaton transfer successors:                      7447745 (count: 7447745, min: 1, max: 1, avg: 1.00) [1 x 7447745]

CPA algorithm statistics
------------------------
Number of iterations:            5033193
Max size of waitlist:            51
Average size of waitlist:        35
Number of computed successors:   5520915
Max successors for one state:    2
Number of times merged:          189754
Number of times stopped:         399549
Number of times breaked:         18986

Total time for CPA algorithm:       189.009s (Max:     1.141s)
  Time for choose from waitlist:      1.189s
  Time for precision adjustment:     99.040s
  Time for transfer relation:        69.740s
  Time for merge operator:            2.954s
  Time for stop operator:             3.969s
  Time for adding to reached set:     4.123s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   18986
Avg. length of target path (in blocks):             2065197 (count: 18986, min: 10, max: 203, avg: 108.77)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 374.070s
  Counterexample analysis:                           353.827s (Max:     0.067s, Calls: 18986)
    Refinement sat check:                            181.669s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.727s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.593s
  Precision update:                                    5.530s
  ARG update:                                          6.732s

Length of refined path (in blocks):                 1971177 (count: 18986, min: 4, max: 202, avg: 103.82)
Number of affected states:                           376377 (count: 18986, min: 1, max: 138, avg: 19.82)
Length (states) of path with itp 'true':            1575814 (count: 18986, min: 1, max: 183, avg: 83.00)
Length (states) of path with itp non-trivial itp:    376377 (count: 18986, min: 1, max: 138, avg: 19.82)
Length (states) of path with itp 'false':             18986 (count: 18986, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        2136 (count: 18986, min: 0, max: 1, avg: 0.11)
Equal non-trivial interpolants along paths:          355255 (count: 18986, min: 0, max: 137, avg: 18.71)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                18986
Number of successful refinements:     18986
Number of failed refinements:         0
Max. size of reached set before ref.: 42124
Max. size of reached set after ref.:  42079
Avg. size of reached set before ref.: 14407.93
Avg. size of reached set after ref.:  14143.59

Total time for CEGAR algorithm:     896.535s
Time for refinements:               554.420s
Average time for refinement:          0.029s
Max time for refinement:              0.393s

Code Coverage
-----------------------------
  Function coverage:      0.675
  Visited lines:          1930
  Total lines:            2197
  Line coverage:          0.878
  Visited conditions:     332
  Total conditions:       440
  Condition coverage:     0.755

CPAchecker general statistics
-----------------------------
Number of program locations:     2964
Number of CFA edges:             3321
Number of relevant variables:    321
Number of functions:             114
Number of loops:                 12
Size of reached set:             42079
  Number of reached locations:   1180 (40%)
    Avg states per location:     35
    Max states per location:     972 (at node N26)
  Number of reached functions:   77 (68%)
  Number of partitions:          41988
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1737 (before line 5563), Function main called from node N1722, stack depth 1 [7dd00705], stack [main]])
  Number of target states:       0
  Size of final wait list        37

Time for analysis setup:          3.788s
  Time for loading CPAs:          0.806s
  Time for loading parser:        0.490s
  Time for CFA construction:      2.359s
    Time for parsing file(s):     0.674s
    Time for AST to CFA:          0.777s
    Time for CFA sanity check:    0.156s
    Time for post-processing:     0.587s
      Time for var class.:        0.284s
Time for Analysis:              896.535s
CPU time for analysis:          896.460s
Total time for CPAchecker:      900.326s
Total CPU time for CPAchecker:  900.240s
Time for statistics:              0.601s

Time for Garbage Collector:      24.885s (in 2888 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                254MB (   242 MiB) max;    129MB (   123 MiB) avg;    258MB (   246 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     40MB (    38 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           258MB (   246 MiB) max;    191MB (   182 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     48MB (    46 MiB) avg
Total process virtual memory:   8155MB (  7777 MiB) max;   8098MB (  7723 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
