scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--mfd--sm501.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_owv9787b/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5817: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5244: Function pointer *(pd->set_power) with type int (*)(struct device *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5207: Function pointer *(pd->get_power) with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5207: Ignoring function call through function pointer *(pd->get_power): tmp___0 = (*(pd->get_power))(sm->dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5244: Ignoring function call through function pointer *(pd->set_power): (*(pd->set_power))(sm->dev, (unsigned int)on); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3030836 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2878725 (95%)
  Because of loop head:            142277 (5%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         9834 (0%)
  Times precision was empty:       66195 (2%)
  Times precision was {false}:     1447 (0%)
  Times result was cached:         2957935 (98%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      5259 (0%)
  Times result was 'false':        45867 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         2062965
  BDD entailment checks:           665143
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          14
Number of abstraction locations:          291
Max number of predicates per location:    9
Avg number of predicates per location:    4
Total predicates per abstraction:         13939070
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 2078.60
Number of irrelevant predicates:          4872214 (35%)
Number of preds handled by boolean abs:   14312 (0%)
  Total number of models for allsat:      7638
  Max number of models for allsat:        24
  Avg number of models for allsat:        1.45

Time for post operator:                 42.346s
  Time for path formula creation:       38.422s
Time for strengthen operator:            8.607s
Time for prec operator:                283.377s
  Time for abstraction:                263.442s (Max:     0.301s, Count: 3030836)
    Boolean abstraction:                 4.290s
    Solving time:                        3.594s (Max:     0.015s)
    Model enumeration time:              0.763s
    Time for BDD construction:           0.204s (Max:     0.010s)
Time for merge operator:                 2.850s
Time for coverage check:                 0.695s
  Time for BDD entailment checks:        0.476s
Total time for SMT solver (w/o itp):     4.357s

Number of path formula cache hits:   19173289 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.421s

Total number of created targets for pointer analysis: 13377
   Number of created targets for uf: *(void)* is 511
   Number of created targets for uf: *signed_int is 96
   Number of created targets for uf: *(struct_sm501_platdata)* is 7
   Number of created targets for uf: *(struct_list_head)* is 25
   Number of created targets for uf: *signed_long_int is 49
   Number of created targets for uf: *(struct_resource)* is 943
   Number of created targets for uf: *unsigned_char_:_1 is 37
   Number of created targets for uf: *unsigned_long_long_int is 61
   Number of created targets for uf: *(struct_device)* is 8
   Number of created targets for uf: *unsigned_int is 2152
   Number of created targets for uf: *unsigned_long_int is 2217


Number of BDD nodes:                               2065
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       11267 (count: 771465, min: 0, max: 193, avg: 0.01)
Time for BDD node cleanup:                             0.110s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.731s
  Time for transition matches:                         8.006s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                     15934305 (count: 15934305, min: 1, max: 1, avg: 1.00) [1 x 15934305]

CPA algorithm statistics
------------------------
Number of iterations:            10125350
Max size of waitlist:            262
Average size of waitlist:        97
Number of computed successors:   11372867
Max successors for one state:    2
Number of times merged:          698911
Number of times stopped:         924164
Number of times breaked:         9834

Total time for CPA algorithm:       490.722s (Max:     1.132s)
  Time for choose from waitlist:      2.776s
  Time for precision adjustment:    321.497s
  Time for transfer relation:       126.517s
  Time for merge operator:            7.869s
  Time for stop operator:             7.691s
  Time for adding to reached set:     8.896s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9834
Avg. length of target path (in blocks):             1318776 (count: 9834, min: 10, max: 203, avg: 134.10)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 223.245s
  Counterexample analysis:                           198.185s (Max:     0.084s, Calls: 9834)
    Refinement sat check:                             88.111s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.478s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.125s
  Precision update:                                    6.031s
  ARG update:                                         13.442s

Length of refined path (in blocks):                 1298531 (count: 9833, min: 4, max: 202, avg: 132.06)
Number of affected states:                           258527 (count: 9833, min: 1, max: 193, avg: 26.29)
Length (states) of path with itp 'true':            1030171 (count: 9833, min: 1, max: 165, avg: 104.77)
Length (states) of path with itp non-trivial itp:    258527 (count: 9833, min: 1, max: 193, avg: 26.29)
Length (states) of path with itp 'false':              9833 (count: 9833, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 9833, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          248694 (count: 9833, min: 0, max: 192, avg: 25.29)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9834
Number of successful refinements:     9833
Number of failed refinements:         0
Max. size of reached set before ref.: 38464
Max. size of reached set after ref.:  37129
Avg. size of reached set before ref.: 15650.29
Avg. size of reached set after ref.:  14593.93

Total time for CEGAR algorithm:     896.863s
Time for refinements:               328.447s
Average time for refinement:          0.033s
Max time for refinement:              0.296s

Code Coverage
-----------------------------
  Function coverage:      0.675
  Visited lines:          1885
  Total lines:            2197
  Line coverage:          0.858
  Visited conditions:     316
  Total conditions:       440
  Condition coverage:     0.718

CPAchecker general statistics
-----------------------------
Number of program locations:     2964
Number of CFA edges:             3321
Number of relevant variables:    321
Number of functions:             114
Number of loops:                 12
Size of reached set:             38464
  Number of reached locations:   1141 (38%)
    Avg states per location:     33
    Max states per location:     924 (at node N27)
  Number of reached functions:   77 (68%)
  Number of partitions:          38436
    Avg size of partitions:      1
    Max size of partitions:      9 (with key [N1737 (before line 5563), Function main called from node N1722, stack depth 1 [7dd00705], stack [main]])
  Number of target states:       1
  Size of final wait list        249

Time for analysis setup:          3.467s
  Time for loading CPAs:          0.598s
  Time for loading parser:        0.470s
  Time for CFA construction:      2.297s
    Time for parsing file(s):     0.638s
    Time for AST to CFA:          0.731s
    Time for CFA sanity check:    0.194s
    Time for post-processing:     0.567s
      Time for var class.:        0.289s
Time for Analysis:              896.863s
CPU time for analysis:          896.730s
Total time for CPAchecker:      900.333s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              1.153s

Time for Garbage Collector:      32.816s (in 4925 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                218MB (   208 MiB) max;    133MB (   127 MiB) avg;    223MB (   212 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           224MB (   214 MiB) max;    195MB (   186 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8152MB (  7774 MiB) max;   8072MB (  7698 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
