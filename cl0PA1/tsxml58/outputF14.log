scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--mfd--sm501.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_i69cc0fv/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5817: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5244: Function pointer *(pd->set_power) with type int (*)(struct device *, unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5207: Function pointer *(pd->get_power) with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function release_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5207: Ignoring function call through function pointer *(pd->get_power): tmp___0 = (*(pd->get_power))(sm->dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5244: Ignoring function call through function pointer *(pd->set_power): (*(pd->set_power))(sm->dev, (unsigned int)on); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_ioremap_bar to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_disable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1464485 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1298346 (89%)
  Because of loop head:            146850 (10%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         19289 (1%)
  Times precision was empty:       222489 (15%)
  Times precision was {false}:     1296 (0%)
  Times result was cached:         1239246 (85%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1454 (0%)
  Times result was 'false':        55135 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         647610
  BDD entailment checks:           284426
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          13
Number of abstraction locations:          238
Max number of predicates per location:    8
Avg number of predicates per location:    1
Total predicates per abstraction:         1962325
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 713.57
Number of irrelevant predicates:          821219 (42%)
Number of preds handled by boolean abs:   2297 (0%)
  Total number of models for allsat:      1694
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.17

Time for post operator:                 22.808s
  Time for path formula creation:       21.043s
Time for strengthen operator:            3.811s
Time for prec operator:                 69.306s
  Time for abstraction:                 60.011s (Max:     0.283s, Count: 1464485)
    Boolean abstraction:                 1.500s
    Solving time:                        2.403s (Max:     0.015s)
    Model enumeration time:              0.168s
    Time for BDD construction:           0.061s (Max:     0.008s)
Time for merge operator:                 1.385s
Time for coverage check:                 0.276s
  Time for BDD entailment checks:        0.202s
Total time for SMT solver (w/o itp):     2.571s

Number of path formula cache hits:   8214558 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.533s

Total number of created targets for pointer analysis: 27876
   Number of created targets for uf: *(void)* is 1033
   Number of created targets for uf: *signed_int is 832
   Number of created targets for uf: *(struct_sm501_platdata)* is 52
   Number of created targets for uf: *(struct_list_head)* is 106
   Number of created targets for uf: *signed_long_int is 348
   Number of created targets for uf: *(struct_resource)* is 2105
   Number of created targets for uf: *unsigned_char_:_1 is 96
   Number of created targets for uf: *unsigned_long_long_int is 556
   Number of created targets for uf: *(struct_device)* is 52
   Number of created targets for uf: *unsigned_int is 4586
   Number of created targets for uf: *unsigned_long_int is 33


Number of BDD nodes:                               810
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3266 (count: 525834, min: 0, max: 169, avg: 0.01)
Time for BDD node cleanup:                             0.073s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.468s
  Time for transition matches:                         3.593s
  Time for transition assertions:                      0.006s
  Time for transition actions:                         0.046s
Automaton transfers with branching:                0
Automaton transfer successors:                      6895319 (count: 6895319, min: 1, max: 1, avg: 1.00) [1 x 6895319]

CPA algorithm statistics
------------------------
Number of iterations:            4716985
Max size of waitlist:            45
Average size of waitlist:        22
Number of computed successors:   5166740
Max successors for one state:    2
Number of times merged:          181592
Number of times stopped:         366105
Number of times breaked:         19289

Total time for CPA algorithm:       171.099s (Max:     1.289s)
  Time for choose from waitlist:      0.981s
  Time for precision adjustment:     88.614s
  Time for transfer relation:        63.967s
  Time for merge operator:            3.121s
  Time for stop operator:             3.729s
  Time for adding to reached set:     3.636s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   19289
Avg. length of target path (in blocks):             2020552 (count: 19289, min: 10, max: 187, avg: 104.75)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 380.197s
  Counterexample analysis:                           360.970s (Max:     0.067s, Calls: 19289)
    Refinement sat check:                            193.104s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.722s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.773s
  Precision update:                                    4.859s
  ARG update:                                          6.295s

Length of refined path (in blocks):                 1948551 (count: 19288, min: 4, max: 186, avg: 101.02)
Number of affected states:                           401705 (count: 19288, min: 1, max: 138, avg: 20.83)
Length (states) of path with itp 'true':            1527558 (count: 19288, min: 1, max: 134, avg: 79.20)
Length (states) of path with itp non-trivial itp:    401705 (count: 19288, min: 1, max: 138, avg: 20.83)
Length (states) of path with itp 'false':             19288 (count: 19288, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:        1644 (count: 19288, min: 0, max: 1, avg: 0.09)
Equal non-trivial interpolants along paths:          380773 (count: 19288, min: 0, max: 137, avg: 19.74)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                19289
Number of successful refinements:     19288
Number of failed refinements:         0
Max. size of reached set before ref.: 61519
Max. size of reached set after ref.:  60197
Avg. size of reached set before ref.: 14272.13
Avg. size of reached set after ref.:  14026.83

Total time for CEGAR algorithm:     896.607s
Time for refinements:               565.166s
Average time for refinement:          0.029s
Max time for refinement:              0.296s

Code Coverage
-----------------------------
  Function coverage:      0.675
  Visited lines:          1871
  Total lines:            2197
  Line coverage:          0.852
  Visited conditions:     318
  Total conditions:       440
  Condition coverage:     0.723

CPAchecker general statistics
-----------------------------
Number of program locations:     2964
Number of CFA edges:             3321
Number of relevant variables:    321
Number of functions:             114
Number of loops:                 12
Size of reached set:             6009
  Number of reached locations:   1109 (37%)
    Avg states per location:     5
    Max states per location:     118 (at node N26)
  Number of reached functions:   77 (68%)
  Number of partitions:          5977
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1930 (before line 5743), Function main called from node N1722, stack depth 1 [7dd00705], stack [main]])
  Number of target states:       1
  Size of final wait list        33

Time for analysis setup:          3.715s
  Time for loading CPAs:          0.681s
  Time for loading parser:        0.463s
  Time for CFA construction:      2.464s
    Time for parsing file(s):     0.688s
    Time for AST to CFA:          0.794s
    Time for CFA sanity check:    0.161s
    Time for post-processing:     0.659s
      Time for var class.:        0.335s
Time for Analysis:              896.607s
CPU time for analysis:          896.540s
Total time for CPAchecker:      900.325s
Total CPU time for CPAchecker:  900.250s
Time for statistics:              0.171s

Time for Garbage Collector:      23.916s (in 3002 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                243MB (   231 MiB) max;    122MB (   116 MiB) avg;    268MB (   256 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           322MB (   307 MiB) max;    180MB (   172 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8220MB (  7840 MiB) max;   8170MB (  7792 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
