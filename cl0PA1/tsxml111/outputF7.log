scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--usb--hso.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jfzzvjmj/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5545: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5548: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5551: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7753: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7758: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7763: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 2UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 4UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 8UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_42871;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10384: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tty_alloc_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_set_operations to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function alloc_netdev_mqs to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_netdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_set to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8018: Ignoring function call through function pointer *(serial->write_data): res = (*(serial->write_data))(serial); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __tasklet_hi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2588939 (19% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2281345 (88%)
  Because of loop head:            292236 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         15358 (1%)
  Times precision was empty:       174430 (7%)
  Times precision was {false}:     2818 (0%)
  Times result was cached:         2394165 (92%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17526 (1%)
  Times result was 'false':        100827 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         1781783
  BDD entailment checks:           500525
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          10
Number of abstraction locations:          408
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         7683930
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 377.70
Number of irrelevant predicates:          3030665 (39%)
Number of preds handled by boolean abs:   48624 (1%)
  Total number of models for allsat:      17592
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 96.053s
  Time for path formula creation:       92.035s
Time for strengthen operator:            8.438s
Time for prec operator:                238.414s
  Time for abstraction:                217.791s (Max:     2.133s, Count: 2588939)
    Boolean abstraction:                12.012s
    Solving time:                       12.279s (Max:     0.035s)
    Model enumeration time:              0.981s
    Time for BDD construction:           0.255s (Max:     0.009s)
Time for merge operator:                 5.053s
Time for coverage check:                 0.530s
  Time for BDD entailment checks:        0.356s
Total time for SMT solver (w/o itp):    13.260s

Number of path formula cache hits:   14908551 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    61.523s

Total number of created targets for pointer analysis: 291120
   Number of created targets for uf: *(void)* is 82
   Number of created targets for uf: *(struct_usb_device)* is 145
   Number of created targets for uf: *(unsigned_char)* is 29
   Number of created targets for uf: *(struct_usb_endpoint_descriptor)* is 13
   Number of created targets for uf: *unsigned_long_int is 1921
   Number of created targets for uf: *unsigned_short_int is 4085
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_hso_serial)*],_VarArgs:_false)* is 94
   Number of created targets for uf: *(struct_hso_device)* is 8866
   Number of created targets for uf: *(struct_hso_serial)* is 336
   Number of created targets for uf: *signed_int is 607
   Number of created targets for uf: *unsigned_char is 141
   Number of created targets for uf: *(struct_hso_tiocmget)* is 1447
   Number of created targets for uf: *(struct_urb)* is 3371
   Number of created targets for uf: *(struct_usb_interface)* is 780
   Number of created targets for uf: *(struct_hso_shared_int)* is 94
   Number of created targets for uf: *enum_rx_ctrl_state is 7
   Number of created targets for uf: *unsigned_int is 159
   Number of created targets for uf: *(struct_device)* is 31
   Number of created targets for uf: *(struct_hso_net)* is 343


Number of BDD nodes:                               389
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       35357 (count: 795006, min: 0, max: 1046, avg: 0.04)
Time for BDD node cleanup:                             0.140s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.693s
  Time for transition matches:                         8.114s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.020s
Automaton transfers with branching:                0
Automaton transfer successors:                     13636324 (count: 13636324, min: 1, max: 1, avg: 1.00) [1 x 13636324]

CPA algorithm statistics
------------------------
Number of iterations:            9751437
Max size of waitlist:            73
Average size of waitlist:        41
Number of computed successors:   10939010
Max successors for one state:    2
Number of times merged:          640629
Number of times stopped:         1040158
Number of times breaked:         15358

Total time for CPA algorithm:       503.824s (Max:     3.554s)
  Time for choose from waitlist:      2.401s
  Time for precision adjustment:    280.439s
  Time for transfer relation:       178.663s
  Time for merge operator:            9.919s
  Time for stop operator:             7.481s
  Time for adding to reached set:     8.522s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   15358
Avg. length of target path (in blocks):             1141884 (count: 15358, min: 16, max: 155, avg: 74.35)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 249.129s
  Counterexample analysis:                           222.594s (Max:     0.069s, Calls: 15358)
    Refinement sat check:                            137.312s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.493s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.805s
  Precision update:                                    7.798s
  ARG update:                                         12.839s

Length of refined path (in blocks):                 1116830 (count: 15358, min: 15, max: 154, avg: 72.72)
Number of affected states:                           397924 (count: 15358, min: 2, max: 100, avg: 25.91)
Length (states) of path with itp 'true':             703548 (count: 15358, min: 0, max: 108, avg: 45.81)
Length (states) of path with itp non-trivial itp:    397924 (count: 15358, min: 2, max: 100, avg: 25.91)
Length (states) of path with itp 'false':             15358 (count: 15358, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 15358, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          382566 (count: 15358, min: 1, max: 99, avg: 24.91)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                15358
Number of successful refinements:     15358
Number of failed refinements:         0
Max. size of reached set before ref.: 22402
Max. size of reached set after ref.:  20063
Avg. size of reached set before ref.: 8173.09
Avg. size of reached set after ref.:  7536.41

Total time for CEGAR algorithm:     895.696s
Time for refinements:               329.029s
Average time for refinement:          0.021s
Max time for refinement:              0.618s

Code Coverage
-----------------------------
  Function coverage:      0.646
  Visited lines:          2715
  Total lines:            3653
  Line coverage:          0.743
  Visited conditions:     615
  Total conditions:       1024
  Condition coverage:     0.601

CPAchecker general statistics
-----------------------------
Number of program locations:     5169
Number of CFA edges:             5867
Number of relevant variables:    707
Number of functions:             198
Number of loops:                 29
Size of reached set:             19806
  Number of reached locations:   1935 (37%)
    Avg states per location:     10
    Max states per location:     178 (at node N2680)
  Number of reached functions:   128 (65%)
  Number of partitions:          19801
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3982 (before line 10308), Function main called from node N3779, stack depth 1 [6e3eb0cd], stack [main]])
  Number of target states:       0
  Size of final wait list        41

Time for analysis setup:          4.635s
  Time for loading CPAs:          0.718s
  Time for loading parser:        0.455s
  Time for CFA construction:      3.364s
    Time for parsing file(s):     0.685s
    Time for AST to CFA:          1.228s
    Time for CFA sanity check:    0.290s
    Time for post-processing:     0.988s
      Time for var class.:        0.438s
Time for Analysis:              895.696s
CPU time for analysis:          895.610s
Total time for CPAchecker:      900.334s
Total CPU time for CPAchecker:  900.240s
Time for statistics:              0.313s

Time for Garbage Collector:      47.002s (in 2744 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                918MB (   875 MiB) max;    268MB (   256 MiB) avg;    933MB (   890 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          1266MB (  1207 MiB) max;    399MB (   380 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8356MB (  7969 MiB) max;   8195MB (  7815 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
