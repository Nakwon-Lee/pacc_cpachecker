scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--media--pci--bt8xx--dst.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_c2j17mc6/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6345: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 6443: Dead code detected: __ms___0 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 8083: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dvb_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __symbol_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bt878_device_control to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            15937 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  14127 (89%)
  Because of loop head:            1704 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         106 (1%)
  Times precision was empty:       2817 (18%)
  Times precision was {false}:     205 (1%)
  Times result was cached:         12701 (80%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      214 (1%)
  Times result was 'false':        421 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         186481
  BDD entailment checks:           2337
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       48
Number of predicates discovered:          3
Number of abstraction locations:          26
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         13120
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 31.31
Number of irrelevant predicates:          1474 (11%)
Number of preds handled by boolean abs:   214 (2%)
  Total number of models for allsat:      214
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.199s
  Time for path formula creation:        4.018s
Time for strengthen operator:            0.321s
Time for prec operator:                  5.346s
  Time for abstraction:                  4.801s (Max:     0.136s, Count: 15937)
    Boolean abstraction:                 0.858s
    Solving time:                        2.057s (Max:     0.132s)
    Model enumeration time:              0.029s
    Time for BDD construction:           0.011s (Max:     0.005s)
Time for merge operator:                 0.759s
Time for coverage check:                 0.063s
  Time for BDD entailment checks:        0.031s
Total time for SMT solver (w/o itp):     2.086s

Number of path formula cache hits:   438521 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.243s

Total number of created targets for pointer analysis: 13355
   Number of created targets for uf: *unsigned_char is 167
   Number of created targets for uf: *unsigned_int is 1171


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         422 (count: 7470, min: 0, max: 54, avg: 0.06)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.599s
  Time for transition matches:                         0.316s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       381187 (count: 381187, min: 1, max: 1, avg: 1.00) [1 x 381187]

CPA algorithm statistics
------------------------
Number of iterations:            260371
Max size of waitlist:            103
Average size of waitlist:        85
Number of computed successors:   356229
Max successors for one state:    2
Number of times merged:          92072
Number of times stopped:         94224
Number of times breaked:         106

Total time for CPA algorithm:        18.413s (Max:     1.258s)
  Time for choose from waitlist:      0.162s
  Time for precision adjustment:      7.085s
  Time for transfer relation:         7.615s
  Time for merge operator:            1.671s
  Time for stop operator:             0.472s
  Time for adding to reached set:     0.445s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   106
Avg. length of target path (in blocks):                5051 (count: 106, min: 11, max: 72, avg: 47.65)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   7.371s
  Counterexample analysis:                             6.386s (Max:     0.198s, Calls: 106)
    Refinement sat check:                              5.212s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.101s
  Precision update:                                    0.055s
  ARG update:                                          0.683s

Length of refined path (in blocks):                    4945 (count: 106, min: 10, max: 71, avg: 46.65)
Number of affected states:                             3624 (count: 106, min: 8, max: 56, avg: 34.19)
Length (states) of path with itp 'true':               1215 (count: 106, min: 1, max: 30, avg: 11.46)
Length (states) of path with itp non-trivial itp:      3624 (count: 106, min: 8, max: 56, avg: 34.19)
Length (states) of path with itp 'false':               106 (count: 106, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 106, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3518 (count: 106, min: 7, max: 55, avg: 33.19)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                106
Number of successful refinements:     106
Number of failed refinements:         0
Max. size of reached set before ref.: 5623
Max. size of reached set after ref.:  1086
Avg. size of reached set before ref.: 3075.92
Avg. size of reached set after ref.:  619.40

Total time for CEGAR algorithm:      26.364s
Time for refinements:                 7.904s
Average time for refinement:          0.074s
Max time for refinement:              0.213s

Code Coverage
-----------------------------
  Function coverage:      0.310
  Visited lines:          1171
  Total lines:            3269
  Line coverage:          0.358
  Visited conditions:     376
  Total conditions:       2328
  Condition coverage:     0.162

CPAchecker general statistics
-----------------------------
Number of program locations:     4977
Number of CFA edges:             6246
Number of relevant variables:    374
Number of functions:             100
Number of loops:                 11
Size of reached set:             1193
  Number of reached locations:   604 (12%)
    Avg states per location:     1
    Max states per location:     11 (at node N3874)
  Number of reached functions:   31 (31%)
  Number of partitions:          1189
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N4493 (before line 8010), Function main called from node N4239, stack depth 1 [2f054f70], stack [main]])
  Number of target states:       0
  Size of final wait list        93

Time for analysis setup:          3.966s
  Time for loading CPAs:          0.717s
  Time for loading parser:        0.484s
  Time for CFA construction:      2.691s
    Time for parsing file(s):     0.699s
    Time for AST to CFA:          0.921s
    Time for CFA sanity check:    0.285s
    Time for post-processing:     0.679s
      Time for var class.:        0.344s
Time for Analysis:               26.364s
CPU time for analysis:           26.380s
Total time for CPAchecker:       30.333s
Total CPU time for CPAchecker:   30.330s
Time for statistics:              0.108s

Time for Garbage Collector:       0.912s (in 115 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 82MB (    78 MiB) max;     54MB (    51 MiB) avg;     85MB (    81 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     36MB (    34 MiB) avg;     39MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8018MB (  7647 MiB) max;   8009MB (  7638 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
