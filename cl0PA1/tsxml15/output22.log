scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_uuj7kdnj/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4029: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4099: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4150: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4890: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 5595: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function delayed_work_timer_fn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3676: Ignoring call via function pointer ps_ready for which no suitable target was found in line: tmp___0 = (*ps_ready)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3676: Ignoring function call through function pointer *ps_ready: tmp___0 = (*ps_ready)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3686: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3686: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3680: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3680: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3673: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3673: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_do_claimed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdrom_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdrom_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            57130 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  49873 (87%)
  Because of loop head:            7160 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         97 (0%)
  Times precision was empty:       39633 (69%)
  Times precision was {false}:     989 (2%)
  Times result was cached:         15374 (27%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1134 (2%)
  Times result was 'false':        2940 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         51014
  BDD entailment checks:           13558
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          15
Number of abstraction locations:          53
Max number of predicates per location:    10
Avg number of predicates per location:    3
Total predicates per abstraction:         54638
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 25.74
Number of irrelevant predicates:          29427 (54%)
Number of preds handled by boolean abs:   3035 (6%)
  Total number of models for allsat:      1432
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.26

Time for post operator:                  4.151s
  Time for path formula creation:        3.982s
Time for strengthen operator:            0.339s
Time for prec operator:                 11.635s
  Time for abstraction:                 10.983s (Max:     0.127s, Count: 57130)
    Boolean abstraction:                 4.996s
    Solving time:                        5.013s (Max:     0.116s)
    Model enumeration time:              0.558s
    Time for BDD construction:           0.089s (Max:     0.009s)
Time for merge operator:                 0.410s
Time for coverage check:                 0.065s
  Time for BDD entailment checks:        0.046s
Total time for SMT solver (w/o itp):     5.571s

Number of path formula cache hits:   451884 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.076s

Total number of created targets for pointer analysis: 26848
   Number of created targets for uf: *(void)* is 125
   Number of created targets for uf: *(struct_pi_adapter)* is 125
   Number of created targets for uf: *signed_int is 1246
   Number of created targets for uf: *(char)* is 125
   Number of created targets for uf: *(struct_gendisk)* is 125
   Number of created targets for uf: *char is 1265


Number of BDD nodes:                               2516
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        3220 (count: 65901, min: 0, max: 146, avg: 0.05)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.715s
  Time for transition matches:                         0.418s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       426454 (count: 426454, min: 1, max: 1, avg: 1.00) [1 x 426454]

CPA algorithm statistics
------------------------
Number of iterations:            219252
Max size of waitlist:            485
Average size of waitlist:        141
Number of computed successors:   258949
Max successors for one state:    2
Number of times merged:          18728
Number of times stopped:         24575
Number of times breaked:         97

Total time for CPA algorithm:        23.410s (Max:     1.089s)
  Time for choose from waitlist:      0.177s
  Time for precision adjustment:     13.205s
  Time for transfer relation:         7.943s
  Time for merge operator:            0.728s
  Time for stop operator:             0.334s
  Time for adding to reached set:     0.310s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   97
Avg. length of target path (in blocks):                1716 (count: 97, min: 8, max: 30, avg: 17.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.873s
  Counterexample analysis:                             2.151s (Max:     0.061s, Calls: 97)
    Refinement sat check:                              1.790s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.065s
  Precision update:                                    0.100s
  ARG update:                                          0.527s

Length of refined path (in blocks):                    1350 (count: 96, min: 4, max: 23, avg: 14.06)
Number of affected states:                              737 (count: 96, min: 0, max: 18, avg: 7.68)
Length (states) of path with itp 'true':                517 (count: 96, min: 0, max: 22, avg: 5.39)
Length (states) of path with itp non-trivial itp:       737 (count: 96, min: 0, max: 18, avg: 7.68)
Length (states) of path with itp 'false':                96 (count: 96, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 96, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             654 (count: 96, min: 0, max: 17, avg: 6.81)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                97
Number of successful refinements:     96
Number of failed refinements:         0
Max. size of reached set before ref.: 10775
Max. size of reached set after ref.:  10713
Avg. size of reached set before ref.: 3962.03
Avg. size of reached set after ref.:  1592.52

Total time for CEGAR algorithm:      26.803s
Time for refinements:                 3.260s
Average time for refinement:          0.033s
Max time for refinement:              0.076s

Code Coverage
-----------------------------
  Function coverage:      0.543
  Visited lines:          1583
  Total lines:            2092
  Line coverage:          0.757
  Visited conditions:     276
  Total conditions:       494
  Condition coverage:     0.559

CPAchecker general statistics
-----------------------------
Number of program locations:     2772
Number of CFA edges:             3091
Number of relevant variables:    271
Number of functions:             94
Number of loops:                 20
Size of reached set:             9117
  Number of reached locations:   735 (27%)
    Avg states per location:     12
    Max states per location:     175 (at node N234)
  Number of reached functions:   51 (54%)
  Number of partitions:          9054
    Avg size of partitions:      1
    Max size of partitions:      19 (with key [N1518 (before line 5250), Function main called from node N1505, stack depth 1 [f973499], stack [main]])
  Number of target states:       1
  Size of final wait list        483

Time for analysis setup:          3.529s
  Time for loading CPAs:          0.630s
  Time for loading parser:        0.547s
  Time for CFA construction:      2.240s
    Time for parsing file(s):     0.646s
    Time for AST to CFA:          0.748s
    Time for CFA sanity check:    0.154s
    Time for post-processing:     0.538s
      Time for var class.:        0.246s
Time for Analysis:               26.803s
CPU time for analysis:           26.800s
Total time for CPAchecker:       30.336s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.191s

Time for Garbage Collector:       0.907s (in 114 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 98MB (    93 MiB) max;     53MB (    51 MiB) avg;    108MB (   103 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7711 MiB) max;   8075MB (  7701 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
