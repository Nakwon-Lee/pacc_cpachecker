scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_bi9a1rmk/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4029: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4099: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4150: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4890: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 5595: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function delayed_work_timer_fn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            2625266 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2168377 (83%)
  Because of loop head:            456212 (17%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         677 (0%)
  Times precision was empty:       319167 (12%)
  Times precision was {false}:     3441 (0%)
  Times result was cached:         2290147 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      12511 (0%)
  Times result was 'false':        109364 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         3098041
  BDD entailment checks:           1226503
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          14
Number of abstraction locations:          105
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         12396034
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 777.08
Number of irrelevant predicates:          8796679 (71%)
Number of preds handled by boolean abs:   37864 (0%)
  Total number of models for allsat:      12847
  Max number of models for allsat:        9
  Avg number of models for allsat:        1.03

Time for post operator:                102.977s
  Time for path formula creation:       97.996s
Time for strengthen operator:           13.662s
Time for prec operator:                557.377s
  Time for abstraction:                538.105s (Max:     1.800s, Count: 2625266)
    Boolean abstraction:                81.781s
    Solving time:                       93.035s (Max:     0.230s)
    Model enumeration time:             13.696s
    Time for BDD construction:           0.227s (Max:     0.009s)
Time for merge operator:                 8.029s
Time for coverage check:                 1.053s
  Time for BDD entailment checks:        0.680s
Total time for SMT solver (w/o itp):   106.731s

Number of path formula cache hits:   22237399 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    59.070s

Total number of created targets for pointer analysis: 2656513
   Number of created targets for uf: *(void)* is 3469
   Number of created targets for uf: *(struct_pi_adapter)* is 5641
   Number of created targets for uf: *signed_int is 58381
   Number of created targets for uf: *(char)* is 5641
   Number of created targets for uf: *(struct_gendisk)* is 5641
   Number of created targets for uf: *char is 251693


Number of BDD nodes:                               3900
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       25592 (count: 1657890, min: 0, max: 315, avg: 0.02)
Time for BDD node cleanup:                             0.187s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 17.083s
  Time for transition matches:                         9.895s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                     20820584 (count: 20820584, min: 1, max: 1, avg: 1.00) [1 x 20820584]

CPA algorithm statistics
------------------------
Number of iterations:            10719502
Max size of waitlist:            1927
Average size of waitlist:        484
Number of computed successors:   12557542
Max successors for one state:    2
Number of times merged:          935769
Number of times stopped:         1406458
Number of times breaked:         677

Total time for CPA algorithm:       853.734s (Max:    21.965s)
  Time for choose from waitlist:      2.323s
  Time for precision adjustment:    599.524s
  Time for transfer relation:       203.007s
  Time for merge operator:           15.188s
  Time for stop operator:             8.390s
  Time for adding to reached set:     8.779s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   677
Avg. length of target path (in blocks):               25731 (count: 677, min: 8, max: 61, avg: 38.01)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  31.151s
  Counterexample analysis:                            16.518s (Max:     0.055s, Calls: 677)
    Refinement sat check:                             13.344s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.023s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.104s
  Precision update:                                    0.260s
  ARG update:                                         14.093s

Length of refined path (in blocks):                   20926 (count: 677, min: 4, max: 54, avg: 30.91)
Number of affected states:                            12851 (count: 677, min: 0, max: 50, avg: 18.98)
Length (states) of path with itp 'true':               7398 (count: 677, min: 0, max: 32, avg: 10.93)
Length (states) of path with itp non-trivial itp:     12851 (count: 677, min: 0, max: 50, avg: 18.98)
Length (states) of path with itp 'false':               677 (count: 677, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 677, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           12188 (count: 677, min: 0, max: 49, avg: 18.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                677
Number of successful refinements:     677
Number of failed refinements:         0
Max. size of reached set before ref.: 257400
Max. size of reached set after ref.:  178524
Avg. size of reached set before ref.: 24957.25
Avg. size of reached set after ref.:  8763.07

Total time for CEGAR algorithm:     897.033s
Time for refinements:                39.642s
Average time for refinement:          0.058s
Max time for refinement:              0.476s

Code Coverage
-----------------------------
  Function coverage:      0.447
  Visited lines:          1635
  Total lines:            2092
  Line coverage:          0.782
  Visited conditions:     330
  Total conditions:       494
  Condition coverage:     0.668

CPAchecker general statistics
-----------------------------
Number of program locations:     2772
Number of CFA edges:             3091
Number of relevant variables:    271
Number of functions:             94
Number of loops:                 20
Size of reached set:             78257
  Number of reached locations:   830 (30%)
    Avg states per location:     94
    Max states per location:     2933 (at node N228)
  Number of reached functions:   42 (45%)
  Number of partitions:          78033
    Avg size of partitions:      1
    Max size of partitions:      23 (with key [N1518 (before line 5250), Function main called from node N1505, stack depth 1 [68809cc7], stack [main]])
  Number of target states:       0
  Size of final wait list        1015

Time for analysis setup:          3.312s
  Time for loading CPAs:          0.683s
  Time for loading parser:        0.475s
  Time for CFA construction:      2.064s
    Time for parsing file(s):     0.587s
    Time for AST to CFA:          0.690s
    Time for CFA sanity check:    0.136s
    Time for post-processing:     0.516s
      Time for var class.:        0.245s
Time for Analysis:              897.033s
CPU time for analysis:          896.960s
Total time for CPAchecker:      900.348s
Total CPU time for CPAchecker:  900.270s
Time for statistics:              0.763s

Time for Garbage Collector:      80.140s (in 3006 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               1280MB (  1220 MiB) max;    388MB (   370 MiB) avg;   1368MB (  1305 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          1496MB (  1427 MiB) max;    570MB (   544 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8363MB (  7975 MiB) max;   8213MB (  7833 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
