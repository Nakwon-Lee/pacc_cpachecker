scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zkd1ku83/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4029: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4099: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4150: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4890: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 5595: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function delayed_work_timer_fn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3676: Ignoring call via function pointer ps_ready for which no suitable target was found in line: tmp___0 = (*ps_ready)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3676: Ignoring function call through function pointer *ps_ready: tmp___0 = (*ps_ready)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3686: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3686: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pi_do_claimed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __blk_end_request_cur to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_fetch_request to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __blk_end_request_all to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3680: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3680: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3673: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3673: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            67865 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  59333 (87%)
  Because of loop head:            8520 (13%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         12 (0%)
  Times precision was empty:       67646 (100%)
  Times precision was {false}:     77 (0%)
  Times result was cached:         101 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      41 (0%)
  Times result was 'false':        52 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         70794
  BDD entailment checks:           12966
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          7
Number of abstraction locations:          24
Max number of predicates per location:    4
Avg number of predicates per location:    1
Total predicates per abstraction:         297
Max number of predicates per abstraction: 4
Avg number of predicates per abstraction: 2.52
Number of irrelevant predicates:          190 (64%)
Number of preds handled by boolean abs:   62 (21%)
  Total number of models for allsat:      43
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.05

Time for post operator:                  9.865s
  Time for path formula creation:        9.467s
Time for strengthen operator:            0.666s
Time for prec operator:                  2.226s
  Time for abstraction:                  1.021s (Max:     0.073s, Count: 67865)
    Boolean abstraction:                 0.360s
    Solving time:                        0.505s (Max:     0.088s)
    Model enumeration time:              0.018s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                 0.984s
Time for coverage check:                 0.101s
  Time for BDD entailment checks:        0.094s
Total time for SMT solver (w/o itp):     0.524s

Number of path formula cache hits:   409557 (83%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.420s

Total number of created targets for pointer analysis: 46829
   Number of created targets for uf: *(void)* is 33
   Number of created targets for uf: *(struct_pi_adapter)* is 17
   Number of created targets for uf: *signed_int is 161
   Number of created targets for uf: *(char)* is 17
   Number of created targets for uf: *(struct_gendisk)* is 17
   Number of created targets for uf: *char is 14313


Number of BDD nodes:                               214
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         122 (count: 81304, min: 0, max: 31, avg: 0.00)
Time for BDD node cleanup:                             0.033s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.904s
  Time for transition matches:                         0.514s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.008s
Automaton transfers with branching:                0
Automaton transfer successors:                       413234 (count: 413234, min: 1, max: 1, avg: 1.00) [1 x 413234]

CPA algorithm statistics
------------------------
Number of iterations:            264632
Max size of waitlist:            57
Average size of waitlist:        30
Number of computed successors:   306764
Max successors for one state:    2
Number of times merged:          28914
Number of times stopped:         41847
Number of times breaked:         12

Total time for CPA algorithm:        25.082s (Max:     6.590s)
  Time for choose from waitlist:      0.199s
  Time for precision adjustment:      4.821s
  Time for transfer relation:        15.867s
  Time for merge operator:            1.564s
  Time for stop operator:             0.626s
  Time for adding to reached set:     0.691s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   12
Avg. length of target path (in blocks):                 179 (count: 12, min: 8, max: 39, avg: 14.92)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.263s
  Counterexample analysis:                             0.258s (Max:     0.041s, Calls: 12)
    Refinement sat check:                              0.197s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.008s
  Precision update:                                    0.024s
  ARG update:                                          0.956s

Length of refined path (in blocks):                     113 (count: 12, min: 4, max: 32, avg: 9.42)
Number of affected states:                               37 (count: 12, min: 0, max: 13, avg: 3.08)
Length (states) of path with itp 'true':                 64 (count: 12, min: 0, max: 31, avg: 5.33)
Length (states) of path with itp non-trivial itp:        37 (count: 12, min: 0, max: 13, avg: 3.08)
Length (states) of path with itp 'false':                12 (count: 12, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 12, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              27 (count: 12, min: 0, max: 12, avg: 2.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                12
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 49515
Max. size of reached set after ref.:  20903
Avg. size of reached set before ref.: 27022.25
Avg. size of reached set after ref.:  6317.33

Total time for CEGAR algorithm:      26.839s
Time for refinements:                 1.699s
Average time for refinement:          0.141s
Max time for refinement:              0.288s

Code Coverage
-----------------------------
  Function coverage:      0.287
  Visited lines:          1359
  Total lines:            2092
  Line coverage:          0.650
  Visited conditions:     236
  Total conditions:       494
  Condition coverage:     0.478

CPAchecker general statistics
-----------------------------
Number of program locations:     2772
Number of CFA edges:             3091
Number of relevant variables:    271
Number of functions:             94
Number of loops:                 20
Size of reached set:             16406
  Number of reached locations:   578 (21%)
    Avg states per location:     28
    Max states per location:     820 (at node N227)
  Number of reached functions:   27 (29%)
  Number of partitions:          16404
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N197 (before line 3829), Function pcd_init_units called from node N1397, stack depth 3 [6dc654d1], stack [main, pcd_init, pcd_init_units]])
  Number of target states:       0
  Size of final wait list        23

Time for analysis setup:          3.480s
  Time for loading CPAs:          0.681s
  Time for loading parser:        0.496s
  Time for CFA construction:      2.194s
    Time for parsing file(s):     0.632s
    Time for AST to CFA:          0.734s
    Time for CFA sanity check:    0.131s
    Time for post-processing:     0.558s
      Time for var class.:        0.260s
Time for Analysis:               26.839s
CPU time for analysis:           26.830s
Total time for CPAchecker:       30.322s
Total CPU time for CPAchecker:   30.310s
Time for statistics:              0.275s

Time for Garbage Collector:       2.170s (in 100 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                123MB (   118 MiB) max;     73MB (    70 MiB) avg;    142MB (   135 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    33 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           140MB (   134 MiB) max;    131MB (   125 MiB) avg
Allocated non-heap memory:        40MB (    38 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8087MB (  7713 MiB) max;   8077MB (  7703 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
