scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ndw5rgdd/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            391560 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  383940 (98%)
  Because of loop head:            6457 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1163 (0%)
  Times precision was empty:       13064 (3%)
  Times precision was {false}:     1122 (0%)
  Times result was cached:         367966 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9408 (2%)
  Times result was 'false':        20331 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         205536
  BDD entailment checks:           35110
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          200
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         2048243
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 194.52
Number of irrelevant predicates:          534934 (26%)
Number of preds handled by boolean abs:   31240 (2%)
  Total number of models for allsat:      9805
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.04

Time for post operator:                 10.743s
  Time for path formula creation:       10.124s
Time for strengthen operator:            1.262s
Time for prec operator:                 86.140s
  Time for abstraction:                 83.130s (Max:     0.184s, Count: 391560)
    Boolean abstraction:                22.033s
    Solving time:                       21.984s (Max:     0.082s)
    Model enumeration time:              1.421s
    Time for BDD construction:           0.218s (Max:     0.010s)
Time for merge operator:                 0.519s
Time for coverage check:                 0.101s
  Time for BDD entailment checks:        0.071s
Total time for SMT solver (w/o itp):    23.405s

Number of path formula cache hits:   2319935 (96%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.137s

Total number of created targets for pointer analysis: 111846
   Number of created targets for uf: *(void)* is 1643
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 7
   Number of created targets for uf: *(struct_dentry)* is 46
   Number of created targets for uf: *enum_rfkill_type is 12
   Number of created targets for uf: *(struct_rfkill)* is 12
   Number of created targets for uf: *(struct_platform_device)* is 74
   Number of created targets for uf: *unsigned_short_int is 369
   Number of created targets for uf: *(struct_backlight_device)* is 84
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 3037
   Number of created targets for uf: *_Bool is 49
   Number of created targets for uf: *(struct_workqueue_struct)* is 40
   Number of created targets for uf: *char is 61
   Number of created targets for uf: *unsigned_int is 193


Number of BDD nodes:                               1090
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       20589 (count: 112318, min: 0, max: 418, avg: 0.18)
Time for BDD node cleanup:                             0.031s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.255s
  Time for transition matches:                         1.224s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.012s
Automaton transfers with branching:                0
Automaton transfer successors:                      1972697 (count: 1972697, min: 1, max: 1, avg: 1.00) [1 x 1972697]

CPA algorithm statistics
------------------------
Number of iterations:            1299372
Max size of waitlist:            68
Average size of waitlist:        18
Number of computed successors:   1445467
Max successors for one state:    2
Number of times merged:          85213
Number of times stopped:         107667
Number of times breaked:         1163

Total time for CPA algorithm:       123.121s (Max:     1.055s)
  Time for choose from waitlist:      0.398s
  Time for precision adjustment:     92.219s
  Time for transfer relation:        23.992s
  Time for merge operator:            1.323s
  Time for stop operator:             1.143s
  Time for adding to reached set:     1.505s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1163
Avg. length of target path (in blocks):               82989 (count: 1163, min: 7, max: 269, avg: 71.36)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  23.424s
  Counterexample analysis:                            20.432s (Max:     0.074s, Calls: 1163)
    Refinement sat check:                             13.100s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.051s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.230s
  Precision update:                                    0.645s
  ARG update:                                          1.657s

Length of refined path (in blocks):                   80318 (count: 1163, min: 6, max: 268, avg: 69.06)
Number of affected states:                            33088 (count: 1163, min: 2, max: 266, avg: 28.45)
Length (states) of path with itp 'true':              46067 (count: 1163, min: 0, max: 246, avg: 39.61)
Length (states) of path with itp non-trivial itp:     33088 (count: 1163, min: 2, max: 266, avg: 28.45)
Length (states) of path with itp 'false':              1163 (count: 1163, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1163, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           31925 (count: 1163, min: 1, max: 265, avg: 27.45)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1163
Number of successful refinements:     1163
Number of failed refinements:         0
Max. size of reached set before ref.: 14832
Max. size of reached set after ref.:  14036
Avg. size of reached set before ref.: 4066.34
Avg. size of reached set after ref.:  2944.39

Total time for CEGAR algorithm:     151.692s
Time for refinements:                26.637s
Average time for refinement:          0.022s
Max time for refinement:              0.095s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             12639
  Number of reached locations:   886 (33%)
    Avg states per location:     14
    Max states per location:     426 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          12638
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N933 (before line 4898), Function samsung_leds_init called from node N1448, stack depth 3 [2bdeed52], stack [main, samsung_init, samsung_leds_init]])
  Number of target states:       0

Time for analysis setup:          3.591s
  Time for loading CPAs:          0.724s
  Time for loading parser:        0.498s
  Time for CFA construction:      2.244s
    Time for parsing file(s):     0.613s
    Time for AST to CFA:          0.762s
    Time for CFA sanity check:    0.144s
    Time for post-processing:     0.583s
      Time for var class.:        0.300s
Time for Analysis:              151.692s
CPU time for analysis:          151.620s
Time for analyzing result:        0.010s
Total time for CPAchecker:      155.291s
Total CPU time for CPAchecker:  155.210s
Time for statistics:              0.238s

Time for Garbage Collector:       7.121s (in 1007 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                150MB (   143 MiB) max;     73MB (    70 MiB) avg;    152MB (   145 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           153MB (   145 MiB) max;    130MB (   124 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8227MB (  7846 MiB) max;   8119MB (  7743 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
