scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lixqcf1d/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            422332 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  414446 (98%)
  Because of loop head:            6345 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1541 (0%)
  Times precision was empty:       63051 (15%)
  Times precision was {false}:     1147 (0%)
  Times result was cached:         348492 (83%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9642 (2%)
  Times result was 'false':        19777 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         223617
  BDD entailment checks:           43197
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          200
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         1827182
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 169.36
Number of irrelevant predicates:          626977 (34%)
Number of preds handled by boolean abs:   32422 (2%)
  Total number of models for allsat:      10147
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.05

Time for post operator:                  9.415s
  Time for path formula creation:        8.834s
Time for strengthen operator:            1.490s
Time for prec operator:                 73.643s
  Time for abstraction:                 70.370s (Max:     0.145s, Count: 422332)
    Boolean abstraction:                14.549s
    Solving time:                       14.026s (Max:     0.040s)
    Model enumeration time:              1.178s
    Time for BDD construction:           0.197s (Max:     0.008s)
Time for merge operator:                 0.598s
Time for coverage check:                 0.076s
  Time for BDD entailment checks:        0.057s
Total time for SMT solver (w/o itp):    15.204s

Number of path formula cache hits:   2501472 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.598s

Total number of created targets for pointer analysis: 70157
   Number of created targets for uf: *(void)* is 1527
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 7
   Number of created targets for uf: *(struct_dentry)* is 23
   Number of created targets for uf: *enum_rfkill_type is 19
   Number of created targets for uf: *(struct_rfkill)* is 19
   Number of created targets for uf: *(struct_platform_device)* is 56
   Number of created targets for uf: *unsigned_short_int is 102
   Number of created targets for uf: *(struct_backlight_device)* is 34
   Number of created targets for uf: *signed_int is 83
   Number of created targets for uf: *unsigned_char is 673
   Number of created targets for uf: *_Bool is 49
   Number of created targets for uf: *(struct_workqueue_struct)* is 19
   Number of created targets for uf: *char is 41
   Number of created targets for uf: *unsigned_int is 113


Number of BDD nodes:                               1552
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       21728 (count: 172497, min: 0, max: 581, avg: 0.13)
Time for BDD node cleanup:                             0.028s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.338s
  Time for transition matches:                         1.225s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.024s
Automaton transfers with branching:                0
Automaton transfer successors:                      2104845 (count: 2104845, min: 1, max: 1, avg: 1.00) [1 x 2104845]

CPA algorithm statistics
------------------------
Number of iterations:            1401785
Max size of waitlist:            92
Average size of waitlist:        30
Number of computed successors:   1554912
Max successors for one state:    2
Number of times merged:          90210
Number of times stopped:         114752
Number of times breaked:         1541

Total time for CPA algorithm:       110.977s (Max:     0.974s)
  Time for choose from waitlist:      0.543s
  Time for precision adjustment:     80.105s
  Time for transfer relation:        23.713s
  Time for merge operator:            1.449s
  Time for stop operator:             1.271s
  Time for adding to reached set:     1.385s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1541
Avg. length of target path (in blocks):               99793 (count: 1541, min: 7, max: 261, avg: 64.76)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  27.639s
  Counterexample analysis:                            24.034s (Max:     0.135s, Calls: 1541)
    Refinement sat check:                             16.175s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.031s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.206s
  Precision update:                                    0.878s
  ARG update:                                          2.039s

Length of refined path (in blocks):                   96404 (count: 1541, min: 6, max: 260, avg: 62.56)
Number of affected states:                            37786 (count: 1541, min: 2, max: 258, avg: 24.52)
Length (states) of path with itp 'true':              57077 (count: 1541, min: 0, max: 225, avg: 37.04)
Length (states) of path with itp non-trivial itp:     37786 (count: 1541, min: 2, max: 258, avg: 24.52)
Length (states) of path with itp 'false':              1541 (count: 1541, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1541, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           36245 (count: 1541, min: 1, max: 257, avg: 23.52)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1541
Number of successful refinements:     1541
Number of failed refinements:         0
Max. size of reached set before ref.: 14580
Max. size of reached set after ref.:  13511
Avg. size of reached set before ref.: 4885.82
Avg. size of reached set after ref.:  3971.94

Total time for CEGAR algorithm:     147.313s
Time for refinements:                32.950s
Average time for refinement:          0.021s
Max time for refinement:              0.194s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             12084
  Number of reached locations:   886 (33%)
    Avg states per location:     13
    Max states per location:     379 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          12077
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N933 (before line 4898), Function samsung_leds_init called from node N1448, stack depth 3 [51796ebf], stack [main, samsung_init, samsung_leds_init]])
  Number of target states:       0

Time for analysis setup:          3.444s
  Time for loading CPAs:          0.694s
  Time for loading parser:        0.473s
  Time for CFA construction:      2.165s
    Time for parsing file(s):     0.622s
    Time for AST to CFA:          0.675s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.606s
      Time for var class.:        0.317s
Time for Analysis:              147.313s
CPU time for analysis:          147.280s
Time for analyzing result:        0.009s
Total time for CPAchecker:      150.760s
Total CPU time for CPAchecker:  150.720s
Time for statistics:              0.212s

Time for Garbage Collector:       7.501s (in 995 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                124MB (   119 MiB) max;     75MB (    72 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           129MB (   123 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8222MB (  7841 MiB) max;   8108MB (  7732 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
