scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_zhbygj1g/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1318346 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1311398 (99%)
  Because of loop head:            3606 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         3342 (0%)
  Times precision was empty:       22595 (2%)
  Times precision was {false}:     1211 (0%)
  Times result was cached:         1276726 (97%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17814 (1%)
  Times result was 'false':        93476 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         660916
  BDD entailment checks:           69646
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          13
Number of abstraction locations:          200
Max number of predicates per location:    12
Avg number of predicates per location:    6
Total predicates per abstraction:         9506532
Max number of predicates per abstraction: 12
Avg number of predicates per abstraction: 499.69
Number of irrelevant predicates:          4080788 (43%)
Number of preds handled by boolean abs:   64032 (1%)
  Total number of models for allsat:      19398
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.09

Time for post operator:                 21.921s
  Time for path formula creation:       20.292s
Time for strengthen operator:            3.286s
Time for prec operator:                202.188s
  Time for abstraction:                193.283s (Max:     0.269s, Count: 1318346)
    Boolean abstraction:                24.178s
    Solving time:                       20.801s (Max:     0.033s)
    Model enumeration time:              2.865s
    Time for BDD construction:           0.282s (Max:     0.009s)
Time for merge operator:                 1.568s
Time for coverage check:                 0.142s
  Time for BDD entailment checks:        0.084s
Total time for SMT solver (w/o itp):    23.666s

Number of path formula cache hits:   7285437 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     7.389s

Total number of created targets for pointer analysis: 165982
   Number of created targets for uf: *(void)* is 1891
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 6
   Number of created targets for uf: *(struct_dentry)* is 32
   Number of created targets for uf: *enum_rfkill_type is 163
   Number of created targets for uf: *(struct_platform_device)* is 41
   Number of created targets for uf: *(struct_rfkill)* is 138
   Number of created targets for uf: *unsigned_short_int is 174
   Number of created targets for uf: *(struct_backlight_device)* is 45
   Number of created targets for uf: *signed_int is 103
   Number of created targets for uf: *unsigned_char is 22712
   Number of created targets for uf: *_Bool is 4
   Number of created targets for uf: *(struct_workqueue_struct)* is 78
   Number of created targets for uf: *unsigned_int is 256
   Number of created targets for uf: *char is 61


Number of BDD nodes:                               2452
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       38429 (count: 212392, min: 0, max: 385, avg: 0.18)
Time for BDD node cleanup:                             0.040s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.886s
  Time for transition matches:                         3.430s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                      6000415 (count: 6000415, min: 1, max: 1, avg: 1.00) [1 x 6000415]

CPA algorithm statistics
------------------------
Number of iterations:            4273235
Max size of waitlist:            23
Average size of waitlist:        9
Number of computed successors:   4719566
Max successors for one state:    2
Number of times merged:          295635
Number of times stopped:         345958
Number of times breaked:         3342

Total time for CPA algorithm:       289.969s (Max:     1.959s)
  Time for choose from waitlist:      0.873s
  Time for precision adjustment:    218.245s
  Time for transfer relation:        54.770s
  Time for merge operator:            3.449s
  Time for stop operator:             3.022s
  Time for adding to reached set:     3.417s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   3342
Avg. length of target path (in blocks):              468517 (count: 3342, min: 7, max: 502, avg: 140.19)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 127.071s
  Counterexample analysis:                           118.472s (Max:     0.203s, Calls: 3342)
    Refinement sat check:                             61.845s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.193s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.523s
  Precision update:                                    1.498s
  ARG update:                                          4.921s

Length of refined path (in blocks):                  464389 (count: 3342, min: 6, max: 501, avg: 138.96)
Number of affected states:                           124648 (count: 3342, min: 0, max: 345, avg: 37.30)
Length (states) of path with itp 'true':             336399 (count: 3342, min: 0, max: 429, avg: 100.66)
Length (states) of path with itp non-trivial itp:    124648 (count: 3342, min: 0, max: 345, avg: 37.30)
Length (states) of path with itp 'false':              3342 (count: 3342, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 3342, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:          121307 (count: 3342, min: 0, max: 344, avg: 36.30)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                3342
Number of successful refinements:     3342
Number of failed refinements:         0
Max. size of reached set before ref.: 17657
Max. size of reached set after ref.:  16632
Avg. size of reached set before ref.: 8983.26
Avg. size of reached set after ref.:  7706.10

Total time for CEGAR algorithm:     450.334s
Time for refinements:               147.760s
Average time for refinement:          0.044s
Max time for refinement:              0.305s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             11866
  Number of reached locations:   886 (33%)
    Avg states per location:     13
    Max states per location:     374 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          11860
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N182 (before line 4009), Function sabi_command called from node N408, stack depth 3 [38f3f5ac], stack [main, swsmi_rfkill_set, sabi_command]])
  Number of target states:       0

Time for analysis setup:          3.457s
  Time for loading CPAs:          0.634s
  Time for loading parser:        0.479s
  Time for CFA construction:      2.251s
    Time for parsing file(s):     0.658s
    Time for AST to CFA:          0.735s
    Time for CFA sanity check:    0.179s
    Time for post-processing:     0.556s
      Time for var class.:        0.284s
Time for Analysis:              450.334s
CPU time for analysis:          450.240s
Time for analyzing result:        0.007s
Total time for CPAchecker:      453.794s
Total CPU time for CPAchecker:  453.700s
Time for statistics:              0.185s

Time for Garbage Collector:      25.139s (in 2933 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                191MB (   182 MiB) max;    107MB (   102 MiB) avg;    208MB (   199 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           216MB (   206 MiB) max;    158MB (   150 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8561MB (  8164 MiB) max;   8238MB (  7856 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
