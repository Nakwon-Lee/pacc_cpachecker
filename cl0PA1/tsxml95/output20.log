scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7ztflq3i/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            48521 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  47508 (98%)
  Because of loop head:            875 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         138 (0%)
  Times precision was empty:       3775 (8%)
  Times precision was {false}:     352 (1%)
  Times result was cached:         42228 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2166 (4%)
  Times result was 'false':        3432 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         25827
  BDD entailment checks:           3349
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          9
Number of abstraction locations:          140
Max number of predicates per location:    8
Avg number of predicates per location:    4
Total predicates per abstraction:         243211
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 96.59
Number of irrelevant predicates:          33536 (14%)
Number of preds handled by boolean abs:   6913 (3%)
  Total number of models for allsat:      2212
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  2.990s
  Time for path formula creation:        2.901s
Time for strengthen operator:            0.208s
Time for prec operator:                 14.545s
  Time for abstraction:                 13.972s (Max:     0.035s, Count: 48521)
    Boolean abstraction:                 3.492s
    Solving time:                        3.202s (Max:     0.028s)
    Model enumeration time:              0.312s
    Time for BDD construction:           0.109s (Max:     0.012s)
Time for merge operator:                 0.206s
Time for coverage check:                 0.030s
  Time for BDD entailment checks:        0.014s
Total time for SMT solver (w/o itp):     3.514s

Number of path formula cache hits:   277580 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.239s

Total number of created targets for pointer analysis: 15589
   Number of created targets for uf: *(void)* is 356
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 8
   Number of created targets for uf: *(struct_dentry)* is 4
   Number of created targets for uf: *enum_rfkill_type is 4
   Number of created targets for uf: *(struct_platform_device)* is 8
   Number of created targets for uf: *(struct_rfkill)* is 7
   Number of created targets for uf: *unsigned_short_int is 242
   Number of created targets for uf: *(struct_backlight_device)* is 7
   Number of created targets for uf: *signed_int is 13
   Number of created targets for uf: *unsigned_char is 2182
   Number of created targets for uf: *_Bool is 4
   Number of created targets for uf: *(struct_workqueue_struct)* is 4
   Number of created targets for uf: *char is 21
   Number of created targets for uf: *unsigned_int is 14


Number of BDD nodes:                               561
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5606 (count: 22567, min: 0, max: 348, avg: 0.25)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.464s
Automaton transfers with branching:                0
Automaton transfer successors:                       238230 (count: 238230, min: 1, max: 1, avg: 1.00) [1 x 238230]

CPA algorithm statistics
------------------------
Number of iterations:            162212
Max size of waitlist:            28
Average size of waitlist:        10
Number of computed successors:   181361
Max successors for one state:    2
Number of times merged:          11239
Number of times stopped:         13747
Number of times breaked:         138

Total time for CPA algorithm:        22.943s (Max:     0.609s)
  Time for choose from waitlist:      0.119s
  Time for precision adjustment:     15.596s
  Time for transfer relation:         5.735s
  Time for merge operator:            0.393s
  Time for stop operator:             0.238s
  Time for adding to reached set:     0.208s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   138
Avg. length of target path (in blocks):                8444 (count: 138, min: 7, max: 187, avg: 61.19)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.285s
  Counterexample analysis:                             2.546s (Max:     0.048s, Calls: 138)
    Refinement sat check:                              1.675s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.002s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.089s
  Precision update:                                    0.141s
  ARG update:                                          0.400s

Length of refined path (in blocks):                    8265 (count: 138, min: 6, max: 186, avg: 59.89)
Number of affected states:                             6654 (count: 138, min: 4, max: 184, avg: 48.22)
Length (states) of path with itp 'true':               1473 (count: 138, min: 1, max: 121, avg: 10.67)
Length (states) of path with itp non-trivial itp:      6654 (count: 138, min: 4, max: 184, avg: 48.22)
Length (states) of path with itp 'false':               138 (count: 138, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 138, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            6516 (count: 138, min: 3, max: 183, avg: 47.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                138
Number of successful refinements:     138
Number of failed refinements:         0
Max. size of reached set before ref.: 3751
Max. size of reached set after ref.:  3168
Avg. size of reached set before ref.: 1464.40
Avg. size of reached set after ref.:  290.20

Total time for CEGAR algorithm:      26.552s
Time for refinements:                 3.573s
Average time for refinement:          0.025s
Max time for refinement:              0.059s

Code Coverage
-----------------------------
  Function coverage:      0.403
  Visited lines:          1102
  Total lines:            1928
  Line coverage:          0.572
  Visited conditions:     146
  Total conditions:       440
  Condition coverage:     0.332

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             2143
  Number of reached locations:   496 (18%)
    Avg states per location:     4
    Max states per location:     56 (at node N32)
  Number of reached functions:   50 (40%)
  Number of partitions:          2137
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N182 (before line 4009), Function sabi_command called from node N408, stack depth 3 [675602b2], stack [main, swsmi_rfkill_set, sabi_command]])
  Number of target states:       0
  Size of final wait list        7

Time for analysis setup:          3.750s
  Time for loading CPAs:          0.758s
  Time for loading parser:        0.549s
  Time for CFA construction:      2.359s
    Time for parsing file(s):     0.678s
    Time for AST to CFA:          0.768s
    Time for CFA sanity check:    0.162s
    Time for post-processing:     0.603s
      Time for var class.:        0.312s
Time for Analysis:               26.552s
CPU time for analysis:           26.550s
Total time for CPAchecker:       30.304s
Total CPU time for CPAchecker:   30.290s
Time for statistics:              0.082s

Time for Garbage Collector:       0.769s (in 132 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 70MB (    67 MiB) max;     48MB (    45 MiB) avg;     74MB (    71 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     35MB (    34 MiB) avg;     39MB (    37 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:   8019MB (  7647 MiB) max;   8010MB (  7639 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
