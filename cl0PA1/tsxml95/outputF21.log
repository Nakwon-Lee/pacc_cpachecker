scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_mzce2u3v/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            459155 (20% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  450164 (98%)
  Because of loop head:            6963 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         2028 (0%)
  Times precision was empty:       17118 (4%)
  Times precision was {false}:     1106 (0%)
  Times result was cached:         431675 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9256 (2%)
  Times result was 'false':        22399 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         233199
  BDD entailment checks:           41387
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          200
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         2337578
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 225.59
Number of irrelevant predicates:          883383 (38%)
Number of preds handled by boolean abs:   31080 (1%)
  Total number of models for allsat:      9665
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.04

Time for post operator:                 11.320s
  Time for path formula creation:       10.648s
Time for strengthen operator:            1.610s
Time for prec operator:                 89.302s
  Time for abstraction:                 85.745s (Max:     0.189s, Count: 459155)
    Boolean abstraction:                21.149s
    Solving time:                       21.307s (Max:     0.045s)
    Model enumeration time:              1.390s
    Time for BDD construction:           0.195s (Max:     0.009s)
Time for merge operator:                 0.662s
Time for coverage check:                 0.122s
  Time for BDD entailment checks:        0.090s
Total time for SMT solver (w/o itp):    22.697s

Number of path formula cache hits:   2752210 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.211s

Total number of created targets for pointer analysis: 106323
   Number of created targets for uf: *(void)* is 1724
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 7
   Number of created targets for uf: *(struct_dentry)* is 43
   Number of created targets for uf: *enum_rfkill_type is 36
   Number of created targets for uf: *(struct_platform_device)* is 66
   Number of created targets for uf: *(struct_rfkill)* is 99
   Number of created targets for uf: *unsigned_short_int is 1043
   Number of created targets for uf: *(struct_backlight_device)* is 78
   Number of created targets for uf: *signed_int is 13
   Number of created targets for uf: *unsigned_char is 12037
   Number of created targets for uf: *_Bool is 4
   Number of created targets for uf: *(struct_workqueue_struct)* is 37
   Number of created targets for uf: *unsigned_int is 68
   Number of created targets for uf: *char is 41


Number of BDD nodes:                               1014
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       20133 (count: 121353, min: 0, max: 315, avg: 0.17)
Time for BDD node cleanup:                             0.028s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.816s
  Time for transition matches:                         1.474s
  Time for transition assertions:                      0.006s
  Time for transition actions:                         0.019s
Automaton transfers with branching:                0
Automaton transfer successors:                      2327571 (count: 2327571, min: 1, max: 1, avg: 1.00) [1 x 2327571]

CPA algorithm statistics
------------------------
Number of iterations:            1512026
Max size of waitlist:            91
Average size of waitlist:        20
Number of computed successors:   1680163
Max successors for one state:    2
Number of times merged:          95906
Number of times stopped:         121687
Number of times breaked:         2028

Total time for CPA algorithm:       130.773s (Max:     1.287s)
  Time for choose from waitlist:      0.394s
  Time for precision adjustment:     96.356s
  Time for transfer relation:        26.642s
  Time for merge operator:            1.519s
  Time for stop operator:             1.503s
  Time for adding to reached set:     1.362s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   2028
Avg. length of target path (in blocks):              135292 (count: 2028, min: 7, max: 277, avg: 66.71)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  38.815s
  Counterexample analysis:                            34.669s (Max:     0.076s, Calls: 2028)
    Refinement sat check:                             23.218s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.078s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.338s
  Precision update:                                    1.105s
  ARG update:                                          1.891s

Length of refined path (in blocks):                  131953 (count: 2028, min: 6, max: 276, avg: 65.07)
Number of affected states:                            42238 (count: 2028, min: 2, max: 274, avg: 20.83)
Length (states) of path with itp 'true':              87687 (count: 2028, min: 0, max: 233, avg: 43.24)
Length (states) of path with itp non-trivial itp:     42238 (count: 2028, min: 2, max: 274, avg: 20.83)
Length (states) of path with itp 'false':              2028 (count: 2028, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 2028, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           40210 (count: 2028, min: 1, max: 273, avg: 19.83)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                2028
Number of successful refinements:     2028
Number of failed refinements:         0
Max. size of reached set before ref.: 14556
Max. size of reached set after ref.:  13417
Avg. size of reached set before ref.: 3631.00
Avg. size of reached set after ref.:  2879.79

Total time for CEGAR algorithm:     177.881s
Time for refinements:                43.864s
Average time for refinement:          0.021s
Max time for refinement:              0.094s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             12639
  Number of reached locations:   886 (33%)
    Avg states per location:     14
    Max states per location:     426 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          12638
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N933 (before line 4898), Function samsung_leds_init called from node N1448, stack depth 3 [5632916b], stack [main, samsung_init, samsung_leds_init]])
  Number of target states:       0

Time for analysis setup:          3.796s
  Time for loading CPAs:          0.763s
  Time for loading parser:        0.502s
  Time for CFA construction:      2.452s
    Time for parsing file(s):     0.667s
    Time for AST to CFA:          0.848s
    Time for CFA sanity check:    0.164s
    Time for post-processing:     0.618s
      Time for var class.:        0.332s
Time for Analysis:              177.881s
CPU time for analysis:          177.840s
Time for analyzing result:        0.005s
Total time for CPAchecker:      181.680s
Total CPU time for CPAchecker:  181.620s
Time for statistics:              0.238s

Time for Garbage Collector:       8.480s (in 1157 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                127MB (   122 MiB) max;     74MB (    71 MiB) avg;    140MB (   134 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           150MB (   143 MiB) max;    129MB (   123 MiB) avg
Allocated non-heap memory:        44MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8157MB (  7780 MiB) max;   8049MB (  7676 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
