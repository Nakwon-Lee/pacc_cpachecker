scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_pdx2dxwd/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            489612 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  483606 (99%)
  Because of loop head:            4999 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1007 (0%)
  Times precision was empty:       9251 (2%)
  Times precision was {false}:     919 (0%)
  Times result was cached:         469184 (96%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      10258 (2%)
  Times result was 'false':        29076 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         240349
  BDD entailment checks:           33063
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          200
Max number of predicates per location:    9
Avg number of predicates per location:    5
Total predicates per abstraction:         2760985
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 247.02
Number of irrelevant predicates:          638663 (23%)
Number of preds handled by boolean abs:   33604 (1%)
  Total number of models for allsat:      10576
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.03

Time for post operator:                 10.424s
  Time for path formula creation:        9.784s
Time for strengthen operator:            1.411s
Time for prec operator:                 96.163s
  Time for abstraction:                 92.695s (Max:     0.221s, Count: 489612)
    Boolean abstraction:                19.355s
    Solving time:                       18.153s (Max:     0.056s)
    Model enumeration time:              1.236s
    Time for BDD construction:           0.203s (Max:     0.008s)
Time for merge operator:                 0.569s
Time for coverage check:                 0.105s
  Time for BDD entailment checks:        0.072s
Total time for SMT solver (w/o itp):    19.389s

Number of path formula cache hits:   2787254 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.370s

Total number of created targets for pointer analysis: 100232
   Number of created targets for uf: *(void)* is 1437
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 6
   Number of created targets for uf: *(struct_dentry)* is 41
   Number of created targets for uf: *enum_rfkill_type is 26
   Number of created targets for uf: *(struct_rfkill)* is 26
   Number of created targets for uf: *(struct_platform_device)* is 63
   Number of created targets for uf: *unsigned_short_int is 297
   Number of created targets for uf: *(struct_backlight_device)* is 74
   Number of created targets for uf: *signed_int is 119
   Number of created targets for uf: *unsigned_char is 2230
   Number of created targets for uf: *_Bool is 29
   Number of created targets for uf: *(struct_workqueue_struct)* is 35
   Number of created targets for uf: *char is 61
   Number of created targets for uf: *unsigned_int is 195


Number of BDD nodes:                               983
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       21824 (count: 109948, min: 0, max: 349, avg: 0.20)
Time for BDD node cleanup:                             0.022s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.272s
  Time for transition matches:                         1.261s
  Time for transition assertions:                      0.005s
  Time for transition actions:                         0.015s
Automaton transfers with branching:                0
Automaton transfer successors:                      2329960 (count: 2329960, min: 1, max: 1, avg: 1.00) [1 x 2329960]

CPA algorithm statistics
------------------------
Number of iterations:            1593451
Max size of waitlist:            73
Average size of waitlist:        18
Number of computed successors:   1761895
Max successors for one state:    2
Number of times merged:          103643
Number of times stopped:         128024
Number of times breaked:         1007

Total time for CPA algorithm:       136.112s (Max:     2.608s)
  Time for choose from waitlist:      0.354s
  Time for precision adjustment:    104.393s
  Time for transfer relation:        24.647s
  Time for merge operator:            1.328s
  Time for stop operator:             1.292s
  Time for adding to reached set:     1.374s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1007
Avg. length of target path (in blocks):               98476 (count: 1007, min: 7, max: 280, avg: 97.79)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  26.542s
  Counterexample analysis:                            23.506s (Max:     0.087s, Calls: 1007)
    Refinement sat check:                             14.216s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.026s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.207s
  Precision update:                                    0.548s
  ARG update:                                          1.836s

Length of refined path (in blocks):                   96805 (count: 1007, min: 6, max: 279, avg: 96.13)
Number of affected states:                            35047 (count: 1007, min: 2, max: 277, avg: 34.80)
Length (states) of path with itp 'true':              60751 (count: 1007, min: 0, max: 245, avg: 60.33)
Length (states) of path with itp non-trivial itp:     35047 (count: 1007, min: 2, max: 277, avg: 34.80)
Length (states) of path with itp 'false':              1007 (count: 1007, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1007, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           34040 (count: 1007, min: 1, max: 276, avg: 33.80)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1007
Number of successful refinements:     1007
Number of failed refinements:         0
Max. size of reached set before ref.: 13705
Max. size of reached set after ref.:  12595
Avg. size of reached set before ref.: 5591.90
Avg. size of reached set after ref.:  4010.81

Total time for CEGAR algorithm:     168.276s
Time for refinements:                30.092s
Average time for refinement:          0.029s
Max time for refinement:              0.111s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             12639
  Number of reached locations:   886 (33%)
    Avg states per location:     14
    Max states per location:     426 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          12638
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N933 (before line 4898), Function samsung_leds_init called from node N1448, stack depth 3 [6c0a1d98], stack [main, samsung_init, samsung_leds_init]])
  Number of target states:       0

Time for analysis setup:          3.634s
  Time for loading CPAs:          0.778s
  Time for loading parser:        0.485s
  Time for CFA construction:      2.268s
    Time for parsing file(s):     0.657s
    Time for AST to CFA:          0.738s
    Time for CFA sanity check:    0.148s
    Time for post-processing:     0.600s
      Time for var class.:        0.304s
Time for Analysis:              168.276s
CPU time for analysis:          168.230s
Time for analyzing result:        0.004s
Total time for CPAchecker:      171.917s
Total CPU time for CPAchecker:  171.860s
Time for statistics:              0.190s

Time for Garbage Collector:       9.081s (in 1233 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                142MB (   135 MiB) max;     79MB (    75 MiB) avg;    146MB (   139 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    40 MiB) peak
Allocated heap memory:           145MB (   139 MiB) max;    132MB (   126 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8159MB (  7781 MiB) max;   8069MB (  7695 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
