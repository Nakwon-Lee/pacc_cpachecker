scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_l6gk2uaz/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            297144 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  293403 (99%)
  Because of loop head:            3439 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         302 (0%)
  Times precision was empty:       5711 (2%)
  Times precision was {false}:     724 (0%)
  Times result was cached:         284020 (96%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      6689 (2%)
  Times result was 'false':        20595 (7%)
Number of strengthen sat checks:   0
Number of coverage checks:         167223
  BDD entailment checks:           20849
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          11
Number of abstraction locations:          200
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         1752166
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 236.36
Number of irrelevant predicates:          192539 (11%)
Number of preds handled by boolean abs:   26676 (2%)
  Total number of models for allsat:      7046
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.05

Time for post operator:                  7.534s
  Time for path formula creation:        7.124s
Time for strengthen operator:            0.958s
Time for prec operator:                 61.991s
  Time for abstraction:                 59.717s (Max:     0.140s, Count: 297144)
    Boolean abstraction:                 9.479s
    Solving time:                        8.483s (Max:     0.052s)
    Model enumeration time:              0.871s
    Time for BDD construction:           0.206s (Max:     0.010s)
Time for merge operator:                 0.639s
Time for coverage check:                 0.062s
  Time for BDD entailment checks:        0.040s
Total time for SMT solver (w/o itp):     9.354s

Number of path formula cache hits:   1720071 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.146s

Total number of created targets for pointer analysis: 47035
   Number of created targets for uf: *(void)* is 1435
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 6
   Number of created targets for uf: *(struct_dentry)* is 38
   Number of created targets for uf: *enum_rfkill_type is 35
   Number of created targets for uf: *(struct_rfkill)* is 35
   Number of created targets for uf: *(struct_platform_device)* is 62
   Number of created targets for uf: *unsigned_short_int is 301
   Number of created targets for uf: *(struct_backlight_device)* is 72
   Number of created targets for uf: *signed_int is 151
   Number of created targets for uf: *unsigned_char is 24
   Number of created targets for uf: *_Bool is 17
   Number of created targets for uf: *(struct_workqueue_struct)* is 34
   Number of created targets for uf: *char is 61
   Number of created targets for uf: *unsigned_int is 27


Number of BDD nodes:                               1424
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       16241 (count: 73112, min: 0, max: 534, avg: 0.22)
Time for BDD node cleanup:                             0.027s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.708s
  Time for transition matches:                         0.951s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.007s
Automaton transfers with branching:                0
Automaton transfer successors:                      1427272 (count: 1427272, min: 1, max: 1, avg: 1.00) [1 x 1427272]

CPA algorithm statistics
------------------------
Number of iterations:            1001274
Max size of waitlist:            39
Average size of waitlist:        10
Number of computed successors:   1114683
Max successors for one state:    2
Number of times merged:          73187
Number of times stopped:         88684
Number of times breaked:         302

Total time for CPA algorithm:        89.885s (Max:     2.382s)
  Time for choose from waitlist:      0.312s
  Time for precision adjustment:     66.847s
  Time for transfer relation:        17.687s
  Time for merge operator:            1.244s
  Time for stop operator:             0.877s
  Time for adding to reached set:     0.968s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   302
Avg. length of target path (in blocks):               20363 (count: 302, min: 7, max: 301, avg: 67.43)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   7.962s
  Counterexample analysis:                             6.069s (Max:     0.122s, Calls: 302)
    Refinement sat check:                              3.856s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.132s
  Precision update:                                    0.203s
  ARG update:                                          1.328s

Length of refined path (in blocks):                   19906 (count: 302, min: 6, max: 300, avg: 65.91)
Number of affected states:                            15647 (count: 302, min: 4, max: 298, avg: 51.81)
Length (states) of path with itp 'true':               3957 (count: 302, min: 0, max: 248, avg: 13.10)
Length (states) of path with itp non-trivial itp:     15647 (count: 302, min: 4, max: 298, avg: 51.81)
Length (states) of path with itp 'false':               302 (count: 302, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 302, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           15345 (count: 302, min: 3, max: 297, avg: 50.81)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                302
Number of successful refinements:     302
Number of failed refinements:         0
Max. size of reached set before ref.: 12811
Max. size of reached set after ref.:  11460
Avg. size of reached set before ref.: 4125.64
Avg. size of reached set after ref.:  836.45

Total time for CEGAR algorithm:      99.006s
Time for refinements:                 8.925s
Average time for refinement:          0.029s
Max time for refinement:              0.129s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             12072
  Number of reached locations:   886 (33%)
    Avg states per location:     13
    Max states per location:     379 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          12066
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N182 (before line 4009), Function sabi_command called from node N408, stack depth 3 [5e0666a9], stack [main, swsmi_rfkill_set, sabi_command]])
  Number of target states:       0

Time for analysis setup:          3.950s
  Time for loading CPAs:          0.861s
  Time for loading parser:        0.509s
  Time for CFA construction:      2.452s
    Time for parsing file(s):     0.673s
    Time for AST to CFA:          0.800s
    Time for CFA sanity check:    0.153s
    Time for post-processing:     0.681s
      Time for var class.:        0.359s
Time for Analysis:               99.006s
CPU time for analysis:           98.990s
Time for analyzing result:        0.009s
Total time for CPAchecker:      102.962s
Total CPU time for CPAchecker:  102.940s
Time for statistics:              0.231s

Time for Garbage Collector:       5.483s (in 810 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                125MB (   119 MiB) max;     65MB (    62 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8155MB (  7777 MiB) max;   8090MB (  7715 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
