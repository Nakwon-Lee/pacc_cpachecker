scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--platform--x86--samsung-laptop.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_br_t26b9/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 5813: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dmi_check_system to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function destroy_workqueue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_dmi_promote_vendor to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_unregister to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_register_full to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __alloc_workqueue_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function led_classdev_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u16 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_u8 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_blob to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3839: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            347067 (21% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  342649 (99%)
  Because of loop head:            3836 (1%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         582 (0%)
  Times precision was empty:       7904 (2%)
  Times precision was {false}:     779 (0%)
  Times result was cached:         330547 (95%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7837 (2%)
  Times result was 'false':        20281 (6%)
Number of strengthen sat checks:   0
Number of coverage checks:         229021
  BDD entailment checks:           47065
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       39
Number of predicates discovered:          12
Number of abstraction locations:          200
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         1888478
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 219.18
Number of irrelevant predicates:          270177 (14%)
Number of preds handled by boolean abs:   28509 (2%)
  Total number of models for allsat:      8381
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.07

Time for post operator:                  9.283s
  Time for path formula creation:        8.740s
Time for strengthen operator:            1.037s
Time for prec operator:                 72.811s
  Time for abstraction:                 69.820s (Max:     0.167s, Count: 347067)
    Boolean abstraction:                12.764s
    Solving time:                       11.409s (Max:     0.044s)
    Model enumeration time:              1.461s
    Time for BDD construction:           0.213s (Max:     0.013s)
Time for merge operator:                 0.728s
Time for coverage check:                 0.106s
  Time for BDD entailment checks:        0.076s
Total time for SMT solver (w/o itp):    12.870s

Number of path formula cache hits:   2023325 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.853s

Total number of created targets for pointer analysis: 67421
   Number of created targets for uf: *(void)* is 1589
   Number of created targets for uf: *(struct_samsung_quirks)* is 2
   Number of created targets for uf: *(struct_sabi_config)* is 6
   Number of created targets for uf: *(struct_dentry)* is 44
   Number of created targets for uf: *enum_rfkill_type is 38
   Number of created targets for uf: *(struct_platform_device)* is 71
   Number of created targets for uf: *(struct_rfkill)* is 97
   Number of created targets for uf: *unsigned_short_int is 269
   Number of created targets for uf: *(struct_backlight_device)* is 82
   Number of created targets for uf: *signed_int is 171
   Number of created targets for uf: *unsigned_char is 8449
   Number of created targets for uf: *_Bool is 4
   Number of created targets for uf: *(struct_workqueue_struct)* is 39
   Number of created targets for uf: *unsigned_int is 106
   Number of created targets for uf: *char is 61


Number of BDD nodes:                               1585
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       18482 (count: 107473, min: 0, max: 688, avg: 0.17)
Time for BDD node cleanup:                             0.028s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  2.050s
  Time for transition matches:                         1.145s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.006s
Automaton transfers with branching:                0
Automaton transfer successors:                      1678978 (count: 1678978, min: 1, max: 1, avg: 1.00) [1 x 1678978]

CPA algorithm statistics
------------------------
Number of iterations:            1184573
Max size of waitlist:            43
Average size of waitlist:        10
Number of computed successors:   1324186
Max successors for one state:    2
Number of times merged:          90978
Number of times stopped:         113207
Number of times breaked:         582

Total time for CPA algorithm:       106.163s (Max:     1.295s)
  Time for choose from waitlist:      0.306s
  Time for precision adjustment:     78.633s
  Time for transfer relation:        21.081s
  Time for merge operator:            1.508s
  Time for stop operator:             1.181s
  Time for adding to reached set:     1.179s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   582
Avg. length of target path (in blocks):               50348 (count: 582, min: 7, max: 337, avg: 86.51)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  16.317s
  Counterexample analysis:                            13.798s (Max:     0.159s, Calls: 582)
    Refinement sat check:                              8.557s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.024s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.181s
  Precision update:                                    0.424s
  ARG update:                                          1.574s

Length of refined path (in blocks):                   47683 (count: 582, min: 6, max: 336, avg: 81.93)
Number of affected states:                            21778 (count: 582, min: 2, max: 334, avg: 37.42)
Length (states) of path with itp 'true':              25323 (count: 582, min: 0, max: 279, avg: 43.51)
Length (states) of path with itp non-trivial itp:     21778 (count: 582, min: 2, max: 334, avg: 37.42)
Length (states) of path with itp 'false':               582 (count: 582, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 582, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           21196 (count: 582, min: 1, max: 333, avg: 36.42)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                582
Number of successful refinements:     582
Number of failed refinements:         0
Max. size of reached set before ref.: 15550
Max. size of reached set after ref.:  14241
Avg. size of reached set before ref.: 5290.95
Avg. size of reached set after ref.:  3270.58

Total time for CEGAR algorithm:     126.352s
Time for refinements:                19.025s
Average time for refinement:          0.032s
Max time for refinement:              0.204s

Code Coverage
-----------------------------
  Function coverage:      0.548
  Visited lines:          1463
  Total lines:            1928
  Line coverage:          0.759
  Visited conditions:     292
  Total conditions:       440
  Condition coverage:     0.664

CPAchecker general statistics
-----------------------------
Number of program locations:     2715
Number of CFA edges:             3001
Number of relevant variables:    377
Number of functions:             124
Number of loops:                 7
Size of reached set:             14841
  Number of reached locations:   886 (33%)
    Avg states per location:     16
    Max states per location:     491 (at node N32)
  Number of reached functions:   68 (55%)
  Number of partitions:          14702
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N182 (before line 4009), Function sabi_command called from node N408, stack depth 3 [390be9af], stack [main, swsmi_rfkill_set, sabi_command]])
  Number of target states:       0

Time for analysis setup:          3.736s
  Time for loading CPAs:          0.684s
  Time for loading parser:        0.503s
  Time for CFA construction:      2.451s
    Time for parsing file(s):     0.794s
    Time for AST to CFA:          0.757s
    Time for CFA sanity check:    0.149s
    Time for post-processing:     0.602s
      Time for var class.:        0.312s
Time for Analysis:              126.354s
CPU time for analysis:          126.320s
Time for analyzing result:        0.019s
Total time for CPAchecker:      130.094s
Total CPU time for CPAchecker:  130.050s
Time for statistics:              0.332s

Time for Garbage Collector:       6.682s (in 927 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                126MB (   120 MiB) max;     71MB (    68 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     38MB (    36 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     41MB (    39 MiB) avg
Total process virtual memory:   8087MB (  7712 MiB) max;   8032MB (  7659 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
