scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_lt2bvwhr/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3200: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 3245: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4031: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4216: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4605: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2945: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1579889 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1399125 (89%)
  Because of loop head:            179676 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1088 (0%)
  Times precision was empty:       20212 (1%)
  Times precision was {false}:     2238 (0%)
  Times result was cached:         1547506 (98%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9933 (1%)
  Times result was 'false':        11784 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1398616
  BDD entailment checks:           250726
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       35
Number of predicates discovered:          8
Number of abstraction locations:          203
Max number of predicates per location:    7
Avg number of predicates per location:    4
Total predicates per abstraction:         8729652
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 717.25
Number of irrelevant predicates:          1255033 (14%)
Number of preds handled by boolean abs:   32699 (0%)
  Total number of models for allsat:      10527
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.06

Time for post operator:                 28.578s
  Time for path formula creation:       26.499s
Time for strengthen operator:            5.126s
Time for prec operator:                275.346s
  Time for abstraction:                264.130s (Max:     0.509s, Count: 1579889)
    Boolean abstraction:                26.929s
    Solving time:                       29.124s (Max:     0.225s)
    Model enumeration time:              1.997s
    Time for BDD construction:           0.224s (Max:     0.009s)
Time for merge operator:                 2.437s
Time for coverage check:                 0.323s
  Time for BDD entailment checks:        0.209s
Total time for SMT solver (w/o itp):    31.121s

Number of path formula cache hits:   10601039 (98%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     9.865s

Total number of created targets for pointer analysis: 200676
   Number of created targets for uf: *(struct_pi_adapter)* is 193
   Number of created targets for uf: *signed_int is 13766
   Number of created targets for uf: *(char)* is 189
   Number of created targets for uf: *char is 311


Number of BDD nodes:                               328
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       20090 (count: 341859, min: 0, max: 351, avg: 0.06)
Time for BDD node cleanup:                             0.068s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  8.028s
  Time for transition matches:                         4.491s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.015s
Automaton transfers with branching:                0
Automaton transfer successors:                      8709644 (count: 8709644, min: 1, max: 1, avg: 1.00) [1 x 8709644]

CPA algorithm statistics
------------------------
Number of iterations:            5472517
Max size of waitlist:            31
Average size of waitlist:        10
Number of computed successors:   6307518
Max successors for one state:    2
Number of times merged:          573945
Number of times stopped:         815071
Number of times breaked:         1088

Total time for CPA algorithm:       407.439s (Max:     3.406s)
  Time for choose from waitlist:      1.199s
  Time for precision adjustment:    301.269s
  Time for transfer relation:        80.353s
  Time for merge operator:            6.028s
  Time for stop operator:             4.402s
  Time for adding to reached set:     4.849s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1088
Avg. length of target path (in blocks):               84695 (count: 1088, min: 7, max: 162, avg: 77.84)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  68.003s
  Counterexample analysis:                            57.936s (Max:     0.194s, Calls: 1088)
    Refinement sat check:                             43.448s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.047s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.348s
  Precision update:                                    0.599s
  ARG update:                                          8.662s

Length of refined path (in blocks):                   83221 (count: 1088, min: 4, max: 155, avg: 76.49)
Number of affected states:                            68759 (count: 1088, min: 0, max: 153, avg: 63.20)
Length (states) of path with itp 'true':              13374 (count: 1088, min: 0, max: 100, avg: 12.29)
Length (states) of path with itp non-trivial itp:     68759 (count: 1088, min: 0, max: 153, avg: 63.20)
Length (states) of path with itp 'false':              1088 (count: 1088, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1088, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           67700 (count: 1088, min: 0, max: 152, avg: 62.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1088
Number of successful refinements:     1088
Number of failed refinements:         0
Max. size of reached set before ref.: 37632
Max. size of reached set after ref.:  37557
Avg. size of reached set before ref.: 16586.05
Avg. size of reached set after ref.:  11583.20

Total time for CEGAR algorithm:     497.176s
Time for refinements:                81.284s
Average time for refinement:          0.074s
Max time for refinement:              0.517s

Code Coverage
-----------------------------
  Function coverage:      0.614
  Visited lines:          1537
  Total lines:            1760
  Line coverage:          0.873
  Visited conditions:     298
  Total conditions:       394
  Condition coverage:     0.756

CPAchecker general statistics
-----------------------------
Number of program locations:     2330
Number of CFA edges:             2604
Number of relevant variables:    291
Number of functions:             88
Number of loops:                 17
Size of reached set:             37566
  Number of reached locations:   911 (39%)
    Avg states per location:     41
    Max states per location:     2161 (at node N95)
  Number of reached functions:   54 (61%)
  Number of partitions:          37566
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          3.808s
  Time for loading CPAs:          0.761s
  Time for loading parser:        0.505s
  Time for CFA construction:      2.405s
    Time for parsing file(s):     0.679s
    Time for AST to CFA:          0.800s
    Time for CFA sanity check:    0.167s
    Time for post-processing:     0.583s
      Time for var class.:        0.283s
Time for Analysis:              497.177s
CPU time for analysis:          497.070s
Time for analyzing result:        0.030s
Total time for CPAchecker:      501.001s
Total CPU time for CPAchecker:  500.880s
Time for statistics:              0.514s

Time for Garbage Collector:      41.019s (in 2686 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                272MB (   259 MiB) max;    150MB (   143 MiB) avg;    280MB (   267 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    37 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           281MB (   268 MiB) max;    223MB (   213 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8289MB (  7905 MiB) max;   8244MB (  7862 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
