scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--usb--otg--ab8500-usb.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_r1dfcsia/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function abx500_get_register_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function abx500_set_register_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_call_chain to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function abx500_get_chip_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_irq_byname to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_transceiver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1193 (4% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1159 (97%)
  Because of loop head:            25 (2%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         9 (1%)
  Times precision was empty:       411 (34%)
  Times precision was {false}:     98 (8%)
  Times result was cached:         622 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      62 (5%)
  Times result was 'false':        17 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1853
  BDD entailment checks:           311
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       135
Number of predicates discovered:          2
Number of abstraction locations:          43
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         782
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 4.89
Number of irrelevant predicates:          355 (45%)
Number of preds handled by boolean abs:   62 (8%)
  Total number of models for allsat:      62
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.410s
  Time for path formula creation:        2.309s
Time for strengthen operator:            0.118s
Time for prec operator:                  1.266s
  Time for abstraction:                  1.136s (Max:     0.046s, Count: 1193)
    Boolean abstraction:                 0.170s
    Solving time:                        0.318s (Max:     0.030s)
    Model enumeration time:              0.016s
    Time for BDD construction:           0.019s (Max:     0.008s)
Time for merge operator:                 0.356s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.021s
Total time for SMT solver (w/o itp):     0.334s

Number of path formula cache hits:   20250 (61%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.171s

Total number of created targets for pointer analysis: 286
   Number of created targets for uf: *unsigned_char is 23


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         119 (count: 1589, min: 0, max: 68, avg: 0.07)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.209s
Automaton transfers with branching:                0
Automaton transfer successors:                        32162 (count: 32162, min: 1, max: 1, avg: 1.00) [1 x 32162]

CPA algorithm statistics
------------------------
Number of iterations:            8009
Max size of waitlist:            26
Average size of waitlist:        13
Number of computed successors:   9120
Max successors for one state:    2
Number of times merged:          771
Number of times stopped:         1022
Number of times breaked:         9

Total time for CPA algorithm:         6.454s (Max:     1.573s)
  Time for choose from waitlist:      0.041s
  Time for precision adjustment:      1.656s
  Time for transfer relation:         3.817s
  Time for merge operator:            0.483s
  Time for stop operator:             0.097s
  Time for adding to reached set:     0.126s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   9
Avg. length of target path (in blocks):                 154 (count: 9, min: 5, max: 30, avg: 17.11)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.266s
  Counterexample analysis:                             0.130s (Max:     0.031s, Calls: 9)
    Refinement sat check:                              0.087s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.027s
  Precision update:                                    0.005s
  ARG update:                                          0.078s

Length of refined path (in blocks):                     145 (count: 9, min: 4, max: 29, avg: 16.11)
Number of affected states:                              136 (count: 9, min: 3, max: 28, avg: 15.11)
Length (states) of path with itp 'true':                  0 (count: 9, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:       136 (count: 9, min: 3, max: 28, avg: 15.11)
Length (states) of path with itp 'false':                 9 (count: 9, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 9, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             127 (count: 9, min: 2, max: 27, avg: 14.11)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                9
Number of successful refinements:     9
Number of failed refinements:         0
Max. size of reached set before ref.: 1074
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 839.78
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:       6.772s
Time for refinements:                 0.317s
Average time for refinement:          0.035s
Max time for refinement:              0.066s

Code Coverage
-----------------------------
  Function coverage:      0.500
  Visited lines:          1575
  Total lines:            1914
  Line coverage:          0.823
  Visited conditions:     102
  Total conditions:       138
  Condition coverage:     0.739

CPAchecker general statistics
-----------------------------
Number of program locations:     2150
Number of CFA edges:             2225
Number of relevant variables:    371
Number of functions:             38
Number of loops:                 1
Size of reached set:             551
  Number of reached locations:   355 (17%)
    Avg states per location:     1
    Max states per location:     10 (at node N126)
  Number of reached functions:   19 (50%)
  Number of partitions:          551
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.840s
  Time for loading CPAs:          0.964s
  Time for loading parser:        0.799s
  Time for CFA construction:      2.939s
    Time for parsing file(s):     0.909s
    Time for AST to CFA:          0.917s
    Time for CFA sanity check:    0.209s
    Time for post-processing:     0.681s
      Time for var class.:        0.383s
Time for Analysis:                6.772s
CPU time for analysis:            6.770s
Time for analyzing result:        0.000s
Total time for CPAchecker:       11.618s
Total CPU time for CPAchecker:   11.600s
Time for statistics:              0.123s

Time for Garbage Collector:       0.221s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 63MB (    60 MiB) max;     38MB (    36 MiB) avg;     67MB (    64 MiB) peak
Used non-heap memory:             36MB (    35 MiB) max;     29MB (    28 MiB) avg;     37MB (    35 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        38MB (    36 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8132MB (  7756 MiB) max;   8099MB (  7724 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
