scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--input--joystick--twidjoy.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1wcc2egi/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __serio_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function serio_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_set_abs_params to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function serio_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function serio_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            75 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            60 (80%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         15 (20%)
  Times precision was empty:       18 (24%)
  Times precision was {false}:     12 (16%)
  Times result was cached:         33 (44%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      12 (16%)
  Times result was 'false':        10 (13%)
Number of strengthen sat checks:   0
Number of coverage checks:         278
  BDD entailment checks:           30
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       114
Number of predicates discovered:          2
Number of abstraction locations:          6
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         57
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.38
Number of irrelevant predicates:          24 (42%)
Number of preds handled by boolean abs:   12 (21%)
  Total number of models for allsat:      12
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.012s
  Time for path formula creation:        0.958s
Time for strengthen operator:            0.037s
Time for prec operator:                  0.352s
  Time for abstraction:                  0.312s (Max:     0.068s, Count: 75)
    Boolean abstraction:                 0.074s
    Solving time:                        0.075s (Max:     0.025s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.015s (Max:     0.007s)
Time for merge operator:                 0.058s
Time for coverage check:                 0.009s
  Time for BDD entailment checks:        0.009s
Total time for SMT solver (w/o itp):     0.076s

Number of path formula cache hits:   2984 (54%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.883s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          15 (count: 186, min: 0, max: 15, avg: 0.08)
Time for BDD node cleanup:                             0.008s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.082s
Automaton transfers with branching:                0
Automaton transfer successors:                         5447 (count: 5447, min: 1, max: 1, avg: 1.00) [1 x 5447]

CPA algorithm statistics
------------------------
Number of iterations:            1690
Max size of waitlist:            9
Average size of waitlist:        4
Number of computed successors:   1881
Max successors for one state:    2
Number of times merged:          124
Number of times stopped:         147
Number of times breaked:         5

Total time for CPA algorithm:         2.289s (Max:     0.669s)
  Time for choose from waitlist:      0.033s
  Time for precision adjustment:      0.545s
  Time for transfer relation:         1.476s
  Time for merge operator:            0.100s
  Time for stop operator:             0.022s
  Time for adding to reached set:     0.048s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):                  22 (count: 5, min: 2, max: 6, avg: 4.40)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.129s
  Counterexample analysis:                             0.072s (Max:     0.021s, Calls: 5)
    Refinement sat check:                              0.047s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.006s
  Precision update:                                    0.004s
  ARG update:                                          0.030s

Length of refined path (in blocks):                      22 (count: 5, min: 2, max: 6, avg: 4.40)
Number of affected states:                               17 (count: 5, min: 1, max: 5, avg: 3.40)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        17 (count: 5, min: 1, max: 5, avg: 3.40)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 5, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              12 (count: 5, min: 0, max: 4, avg: 2.40)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 388
Max. size of reached set after ref.:  13
Avg. size of reached set before ref.: 306.00
Avg. size of reached set after ref.:  13.00

Total time for CEGAR algorithm:       2.459s
Time for refinements:                 0.169s
Average time for refinement:          0.033s
Max time for refinement:              0.068s

Code Coverage
-----------------------------
  Function coverage:      0.739
  Visited lines:          859
  Total lines:            881
  Line coverage:          0.975
  Visited conditions:     50
  Total conditions:       58
  Condition coverage:     0.862

CPAchecker general statistics
-----------------------------
Number of program locations:     1005
Number of CFA edges:             1035
Number of relevant variables:    137
Number of functions:             23
Number of loops:                 5
Size of reached set:             260
  Number of reached locations:   206 (20%)
    Avg states per location:     1
    Max states per location:     3 (at node N44)
  Number of reached functions:   17 (74%)
  Number of partitions:          260
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          4.222s
  Time for loading CPAs:          0.924s
  Time for loading parser:        0.791s
  Time for CFA construction:      2.337s
    Time for parsing file(s):     0.828s
    Time for AST to CFA:          0.707s
    Time for CFA sanity check:    0.153s
    Time for post-processing:     0.493s
      Time for var class.:        0.206s
Time for Analysis:                2.459s
CPU time for analysis:            2.460s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.688s
Total CPU time for CPAchecker:    6.680s
Time for statistics:              0.089s

Time for Garbage Collector:       0.144s (in 6 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     31MB (    30 MiB) avg;     63MB (    60 MiB) peak
Used non-heap memory:             33MB (    32 MiB) max;     26MB (    25 MiB) avg;     34MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     28MB (    26 MiB) avg
Total process virtual memory:   8133MB (  7757 MiB) max;   8080MB (  7705 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
