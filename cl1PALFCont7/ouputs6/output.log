scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_7iwp3y23/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 3200: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 3245: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4031: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4216: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4605: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __register_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __class_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_create to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __unregister_chrdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 2945: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function class_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1818453 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1618399 (89%)
  Because of loop head:            198790 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         1264 (0%)
  Times precision was empty:       92883 (5%)
  Times precision was {false}:     4834 (0%)
  Times result was cached:         1713032 (94%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      7704 (0%)
  Times result was 'false':        6770 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         1706678
  BDD entailment checks:           307848
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       35
Number of predicates discovered:          7
Number of abstraction locations:          192
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         3928715
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 313.34
Number of irrelevant predicates:          1817750 (46%)
Number of preds handled by boolean abs:   12498 (0%)
  Total number of models for allsat:      9623
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.25

Time for post operator:                116.765s
  Time for path formula creation:      111.473s
Time for strengthen operator:            8.713s
Time for prec operator:                320.703s
  Time for abstraction:                294.544s (Max:     2.593s, Count: 1818453)
    Boolean abstraction:                27.100s
    Solving time:                       41.121s (Max:     0.230s)
    Model enumeration time:              3.675s
    Time for BDD construction:           0.197s (Max:     0.003s)
Time for merge operator:                11.236s
Time for coverage check:                 0.605s
  Time for BDD entailment checks:        0.443s
Total time for SMT solver (w/o itp):    44.796s

Number of path formula cache hits:   11349102 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    68.368s

Total number of created targets for pointer analysis: 805047
   Number of created targets for uf: *(struct_pi_adapter)* is 97
   Number of created targets for uf: *signed_int is 354
   Number of created targets for uf: *(char)* is 53
   Number of created targets for uf: *char is 258245


Number of BDD nodes:                               242
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       15489 (count: 471178, min: 0, max: 1084, avg: 0.03)
Time for BDD node cleanup:                             0.127s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 13.732s
  Time for transition matches:                         7.701s
  Time for transition assertions:                      0.004s
  Time for transition actions:                         0.018s
Automaton transfers with branching:                0
Automaton transfer successors:                     10135453 (count: 10135453, min: 1, max: 1, avg: 1.00) [1 x 10135453]

CPA algorithm statistics
------------------------
Number of iterations:            6363830
Max size of waitlist:            44
Average size of waitlist:        21
Number of computed successors:   7355879
Max successors for one state:    2
Number of times merged:          699415
Number of times stopped:         980200
Number of times breaked:         1264

Total time for CPA algorithm:       679.394s (Max:    20.754s)
  Time for choose from waitlist:      2.538s
  Time for precision adjustment:    377.553s
  Time for transfer relation:       231.250s
  Time for merge operator:           20.535s
  Time for stop operator:             9.456s
  Time for adding to reached set:    16.185s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   1264
Avg. length of target path (in blocks):              156995 (count: 1264, min: 22, max: 367, avg: 124.20)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 109.923s
  Counterexample analysis:                            93.846s (Max:     0.421s, Calls: 1264)
    Refinement sat check:                             60.721s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.106s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.652s
  Precision update:                                    0.517s
  ARG update:                                         13.933s

Length of refined path (in blocks):                  151789 (count: 1263, min: 18, max: 350, avg: 120.18)
Number of affected states:                            91132 (count: 1263, min: 0, max: 215, avg: 72.16)
Length (states) of path with itp 'true':              59394 (count: 1263, min: 0, max: 308, avg: 47.03)
Length (states) of path with itp non-trivial itp:     91132 (count: 1263, min: 0, max: 215, avg: 72.16)
Length (states) of path with itp 'false':              1263 (count: 1263, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 1263, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           89994 (count: 1263, min: 0, max: 214, avg: 71.25)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                1264
Number of successful refinements:     1263
Number of failed refinements:         0
Max. size of reached set before ref.: 98779
Max. size of reached set after ref.:  96822
Avg. size of reached set before ref.: 44255.25
Avg. size of reached set after ref.:  39247.60

Total time for CEGAR algorithm:     895.146s
Time for refinements:               171.291s
Average time for refinement:          0.135s
Max time for refinement:              2.081s

Code Coverage
-----------------------------
  Function coverage:      0.602
  Visited lines:          1498
  Total lines:            1760
  Line coverage:          0.851
  Visited conditions:     280
  Total conditions:       394
  Condition coverage:     0.711

CPAchecker general statistics
-----------------------------
Number of program locations:     2330
Number of CFA edges:             2604
Number of relevant variables:    291
Number of functions:             88
Number of loops:                 17
Size of reached set:             89066
  Number of reached locations:   863 (37%)
    Avg states per location:     103
    Max states per location:     5166 (at node N95)
  Number of reached functions:   53 (60%)
  Number of partitions:          88996
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1279 (before line 4337), Function pt_init called from node N1395, stack depth 2 [aaf10da], stack [main, pt_init]])
  Number of target states:       1
  Size of final wait list        28

Time for analysis setup:          5.097s
  Time for loading CPAs:          0.882s
  Time for loading parser:        0.719s
  Time for CFA construction:      3.357s
    Time for parsing file(s):     0.958s
    Time for AST to CFA:          1.190s
    Time for CFA sanity check:    0.192s
    Time for post-processing:     0.739s
      Time for var class.:        0.348s
Time for Analysis:              895.146s
CPU time for analysis:          895.100s
Total time for CPAchecker:      900.256s
Total CPU time for CPAchecker:  900.190s
Time for statistics:              1.299s

Time for Garbage Collector:      58.300s (in 1033 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                852MB (   812 MiB) max;    436MB (   416 MiB) avg;    898MB (   857 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    37 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           978MB (   932 MiB) max;    633MB (   603 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:   8272MB (  7888 MiB) max;   8197MB (  7817 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
