scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--via--viafb.ko-ldv_main12_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1jx3cgez/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4936: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 4945: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" (argp): "ebx");
  goto ldv_33240;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 4962-4963: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4966-4967: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4974-4975: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" (argp): "ebx");
  goto ldv_33251;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5149-5150: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5153-5154: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5161-5162: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" (argp): "ebx");
  goto ldv_33269;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5182-5183: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5186-5187: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5194-5195: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                       "c" (argp): "ebx");
  goto ldv_33279;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5216-5217: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5220-5221: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5228-5229: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___3): "0" (__pu_val___3),
                       "c" (argp): "ebx");
  goto ldv_33289;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5288-5289: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5292-5293: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5300-5301: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___4): "0" (__pu_val___4),
                       "c" (argp): "ebx");
  goto ldv_33302;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7656: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10102: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10663: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11189: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12295: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12519: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13241: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13655: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14152: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14284: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14728: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15912: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16555: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16800: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17299: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17530: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17847: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18024: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18240: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18436: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18622: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18808: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18984: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19200: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19386: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 15038: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 15071: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5512-5516: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5464-5467: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5573-5577: Function pointer *(shared->hw_bitblt) with type int (*)(void *, u8 , u32 , u32 , u8 , u32 , u32 , u32 , u32 , u32 *, u32 , u32 , u32 , u32 , u32 , u32 , u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9922: Function pointer *(clock.set_engine_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9925: Function pointer *(clock.set_primary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9926: Function pointer *(clock.set_primary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9927: Function pointer *(clock.set_secondary_pll_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9928: Function pointer *(clock.set_secondary_clock_state) with type void (*)(u8 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function simple_strtoul to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 17473: Ignoring function call through function pointer *(pos->get_preferred_mode): mode = (*(pos->get_preferred_mode))(pos); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_power_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_restore_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_enable_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_set_master to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 15621: Ignoring function call through function pointer *(hooks->suspend): (*(hooks->suspend))(hooks->private); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gpiochip_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_get_color_depth to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_bit_add_bus to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_transfer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9367: Ignoring function call through function pointer *(clock.set_primary_pll): (*(clock.set_primary_pll))(config); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9372: Ignoring function call through function pointer *(clock.set_secondary_pll): (*(clock.set_secondary_pll))(config); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9922: Ignoring function call through function pointer *(clock.set_engine_pll_state): (*(clock.set_engine_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9923: Ignoring function call through function pointer *(clock.set_primary_clock_source): (*(clock.set_primary_clock_source))(0, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9924: Ignoring function call through function pointer *(clock.set_secondary_clock_source): (*(clock.set_secondary_clock_source))(0, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9925: Ignoring function call through function pointer *(clock.set_primary_pll_state): (*(clock.set_primary_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9926: Ignoring function call through function pointer *(clock.set_primary_clock_state): (*(clock.set_primary_clock_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9927: Ignoring function call through function pointer *(clock.set_secondary_pll_state): (*(clock.set_secondary_pll_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9928: Ignoring function call through function pointer *(clock.set_secondary_clock_state): (*(clock.set_secondary_clock_state))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function console_lock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_set_suspend to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function console_unlock to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            51344 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  48133 (94%)
  Because of loop head:            3127 (6%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         84 (0%)
  Times precision was empty:       31730 (62%)
  Times precision was {false}:     317 (1%)
  Times result was cached:         18510 (36%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      787 (2%)
  Times result was 'false':        796 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         23722
  BDD entailment checks:           7578
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       141
Number of predicates discovered:          18
Number of abstraction locations:          81
Max number of predicates per location:    9
Avg number of predicates per location:    4
Total predicates per abstraction:         67062
Max number of predicates per abstraction: 9
Avg number of predicates per abstraction: 60.74
Number of irrelevant predicates:          34518 (51%)
Number of preds handled by boolean abs:   2968 (4%)
  Total number of models for allsat:      840
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.07

Time for post operator:                  7.835s
  Time for path formula creation:        7.749s
Time for strengthen operator:            0.195s
Time for prec operator:                874.850s
  Time for abstraction:                873.970s (Max:   808.270s, Count: 51344)
    Boolean abstraction:                 2.885s
    Solving time:                      869.212s (Max:   807.794s)
    Model enumeration time:              0.131s
    Time for BDD construction:           0.072s (Max:     0.012s)
Time for merge operator:                 0.464s
Time for coverage check:                 0.039s
  Time for BDD entailment checks:        0.030s
Total time for SMT solver (w/o itp):   869.343s

Number of path formula cache hits:   196181 (75%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.911s

Total number of created targets for pointer analysis: 33577
   Number of created targets for uf: *unsigned_short_int is 131
   Number of created targets for uf: *(void)* is 6
   Number of created targets for uf: *signed_int is 89
   Number of created targets for uf: *(char)* is 33
   Number of created targets for uf: *unsigned_char is 4825
   Number of created targets for uf: *(struct_list_head)* is 123
   Number of created targets for uf: *(struct_viafb_gpio)* is 13
   Number of created targets for uf: *unsigned_long_long_int is 6
   Number of created targets for uf: *(struct_dma_map_ops)* is 6
   Number of created targets for uf: *(unsigned_long_long_int)* is 6
   Number of created targets for uf: *unsigned_int is 1049


Number of BDD nodes:                               591
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        2314 (count: 45969, min: 0, max: 357, avg: 0.05)
Time for BDD node cleanup:                             0.012s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.324s
Automaton transfers with branching:                0
Automaton transfer successors:                       213008 (count: 213008, min: 1, max: 1, avg: 1.00) [1 x 213008]

CPA algorithm statistics
------------------------
Number of iterations:            148240
Max size of waitlist:            83
Average size of waitlist:        40
Number of computed successors:   164209
Max successors for one state:    2
Number of times merged:          8072
Number of times stopped:         14447
Number of times breaked:         84

Total time for CPA algorithm:       888.771s (Max:   871.759s)
  Time for choose from waitlist:      0.102s
  Time for precision adjustment:    875.854s
  Time for transfer relation:        11.063s
  Time for merge operator:            0.656s
  Time for stop operator:             0.236s
  Time for adding to reached set:     0.295s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   84
Avg. length of target path (in blocks):                2155 (count: 84, min: 13, max: 404, avg: 25.65)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   6.522s
  Counterexample analysis:                             6.157s (Max:     0.685s, Calls: 84)
    Refinement sat check:                              5.510s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.023s
  Precision update:                                    0.048s
  ARG update:                                          0.249s

Length of refined path (in blocks):                    1658 (count: 84, min: 11, max: 90, avg: 19.74)
Number of affected states:                             1379 (count: 84, min: 1, max: 66, avg: 16.42)
Length (states) of path with itp 'true':                195 (count: 84, min: 0, max: 40, avg: 2.32)
Length (states) of path with itp non-trivial itp:      1379 (count: 84, min: 1, max: 66, avg: 16.42)
Length (states) of path with itp 'false':                84 (count: 84, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           7 (count: 84, min: 0, max: 2, avg: 0.08)
Equal non-trivial interpolants along paths:            1288 (count: 84, min: 0, max: 64, avg: 15.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                84
Number of successful refinements:     84
Number of failed refinements:         0
Max. size of reached set before ref.: 49502
Max. size of reached set after ref.:  774
Avg. size of reached set before ref.: 1241.31
Avg. size of reached set after ref.:  43.76

Total time for CEGAR algorithm:     895.444s
Time for refinements:                 6.666s
Average time for refinement:          0.079s
Max time for refinement:              0.893s

Code Coverage
-----------------------------
  Function coverage:      0.231
  Visited lines:          2978
  Total lines:            8588
  Line coverage:          0.347
  Visited conditions:     898
  Total conditions:       2820
  Condition coverage:     0.318

CPAchecker general statistics
-----------------------------
Number of program locations:     12603
Number of CFA edges:             14769
Number of relevant variables:    1342
Number of functions:             650
Number of loops:                 71
Size of reached set:             48372
  Number of reached locations:   2398 (19%)
    Avg states per location:     20
    Max states per location:     4249 (at node N29)
  Number of reached functions:   150 (23%)
  Number of partitions:          48340
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N2503 (before line 7152), Function viafb_init called from node N9249, stack depth 3 [42cf1635], stack [main, via_core_init, viafb_init]])
  Number of target states:       0
  Size of final wait list        50

Time for analysis setup:          5.379s
  Time for loading CPAs:          0.715s
  Time for loading parser:        0.404s
  Time for CFA construction:      4.182s
    Time for parsing file(s):     0.851s
    Time for AST to CFA:          1.483s
    Time for CFA sanity check:    0.482s
    Time for post-processing:     1.256s
      Time for var class.:        0.599s
Time for Analysis:              895.445s
CPU time for analysis:          895.380s
Total time for CPAchecker:      900.826s
Total CPU time for CPAchecker:  900.750s
Time for statistics:              0.478s

Time for Garbage Collector:       0.898s (in 60 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                188MB (   179 MiB) max;    154MB (   147 MiB) avg;    209MB (   199 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     41MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:  13119MB ( 12511 MiB) max;  12700MB ( 12112 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
