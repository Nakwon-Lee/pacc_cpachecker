scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--arcnet--arcnet.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_r5wfefyf/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5088: Dead code detected: i = lp->next_buf; (CFACreationUtils.addEdgeToCFA, INFO)

line 5147: Dead code detected: i = lp->next_buf; (CFACreationUtils.addEdgeToCFA, INFO)

line 5418: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 6274: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5412: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5413: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5414: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5489: Function pointer *(proto->build_header) with type int (*)(struct sk_buff *, struct net_device *, unsigned short, uint8_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5762: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5758: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5979: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5981: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5894: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5858: Function pointer *(lp->outgoing.proto->continue_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5837: Function pointer *(lp->outgoing.proto->ack_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5800: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5802: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5791: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5307: Function pointer *(lp->hw.reset) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5390: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5393: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5386: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5309: Function pointer *(lp->hw.reset) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5543: Function pointer *(proto->build_header) with type int (*)(struct sk_buff *, struct net_device *, unsigned short, uint8_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6001: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6013: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6010: Function pointer *(lp->hw.copy_from_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5584: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5624: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5626: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5603: Function pointer *(proto->continue_tx) with type int (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5686: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5688: Function pointer *(lp->hw.intmask) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5683: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5651: Function pointer *(lp->hw.command) with type void (*)(struct net_device *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6097: Function pointer *(lp->hw.copy_to_card) with type void (*)(struct net_device *, int, int, void *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5673: Ignoring function call through function pointer *(lp->hw.status): tmp___0 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function try_module_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5307: Ignoring function call through function pointer *(lp->hw.reset): tmp___2 = (*(lp->hw.reset))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5309: Ignoring function call through function pointer *(lp->hw.reset): tmp___3 = (*(lp->hw.reset))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function module_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function skb_pull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function arp_find to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5543: Ignoring function call through function pointer *(proto->build_header): (*(proto->build_header))(skb, dev, (int)type, (int)daddr); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function skb_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6097: Ignoring function call through function pointer *(lp->hw.copy_to_card): (*(lp->hw.copy_to_card))(dev, bufnum, 0, (void *)(&newpkt), 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5683: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_tx) << 3) | 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5686: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5688: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5756: Ignoring function call through function pointer *(lp->hw.status): tmp___1 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5758: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5762: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5770: Ignoring function call through function pointer *(lp->hw.status): status = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5800: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5802: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 14); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5837: Ignoring function call through function pointer *(lp->outgoing.proto->ack_tx): (*(lp->outgoing.proto->ack_tx))(dev, ackstatus); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5894: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, 22); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5979: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, 0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5981: Ignoring function call through function pointer *(lp->hw.intmask): (*(lp->hw.intmask))(dev, __CPAchecker_TMP_9); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5651: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_tx) << 3) | 3); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6001: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, 0, (void *)(&pkt), 4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6013: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, ofs, (void *)soft, length); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6010: Ignoring function call through function pointer *(lp->hw.copy_from_card): (*(lp->hw.copy_from_card))(dev, bufnum, ofs, (void *)soft, 16); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6040: Ignoring function call through function pointer *((arc_proto_map[__CPAchecker_TMP_5])->rx): (*((arc_proto_map[__CPAchecker_TMP_5])->rx))(dev, bufnum, &pkt, length); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function netpoll_trap to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5791: Ignoring function call through function pointer *(lp->hw.command): (*(lp->hw.command))(dev, ((lp->cur_rx) << 3) | 132); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5362: Ignoring function call through function pointer *(lp->hw.open): (*(lp->hw.open))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5384: Ignoring function call through function pointer *(lp->hw.status): tmp___6 = (*(lp->hw.status))(dev); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 5384: Unsupported feature (recursion): tmp___6 = arcnet_open(dev); (line was originally pointer call(arcnet_open) tmp___6 = (*(lp->hw.status))(dev);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            12040 (12% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  10038 (83%)
  Because of loop head:            1940 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         62 (1%)
  Times precision was empty:       4217 (35%)
  Times precision was {false}:     366 (3%)
  Times result was cached:         6685 (56%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      772 (6%)
  Times result was 'false':        384 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         18006
  BDD entailment checks:           3256
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       46
Number of predicates discovered:          4
Number of abstraction locations:          70
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         21774
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 19.13
Number of irrelevant predicates:          9519 (44%)
Number of preds handled by boolean abs:   1326 (6%)
  Total number of models for allsat:      772
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  2.255s
  Time for path formula creation:        2.143s
Time for strengthen operator:            0.116s
Time for prec operator:                  4.821s
  Time for abstraction:                  4.455s (Max:     0.019s, Count: 12040)
    Boolean abstraction:                 1.274s
    Solving time:                        1.365s (Max:     0.017s)
    Model enumeration time:              0.096s
    Time for BDD construction:           0.067s (Max:     0.008s)
Time for merge operator:                 0.183s
Time for coverage check:                 0.070s
  Time for BDD entailment checks:        0.054s
Total time for SMT solver (w/o itp):     1.461s

Number of path formula cache hits:   97991 (87%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.839s

Total number of created targets for pointer analysis: 591
   Number of created targets for uf: *(struct_ArcProto)* is 21
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_char is 9


Number of BDD nodes:                               208
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        1562 (count: 13958, min: 0, max: 160, avg: 0.11)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.226s
Automaton transfers with branching:                0
Automaton transfer successors:                        96486 (count: 96486, min: 1, max: 1, avg: 1.00) [1 x 96486]

CPA algorithm statistics
------------------------
Number of iterations:            62531
Max size of waitlist:            52
Average size of waitlist:        21
Number of computed successors:   73864
Max successors for one state:    2
Number of times merged:          7375
Number of times stopped:         9357
Number of times breaked:         62

Total time for CPA algorithm:        10.522s (Max:     0.475s)
  Time for choose from waitlist:      0.107s
  Time for precision adjustment:      5.377s
  Time for transfer relation:         3.815s
  Time for merge operator:            0.407s
  Time for stop operator:             0.210s
  Time for adding to reached set:     0.224s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   62
Avg. length of target path (in blocks):                1388 (count: 62, min: 8, max: 39, avg: 22.39)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.926s
  Counterexample analysis:                             0.643s (Max:     0.024s, Calls: 62)
    Refinement sat check:                              0.431s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.024s
  Precision update:                                    0.034s
  ARG update:                                          0.207s

Length of refined path (in blocks):                    1251 (count: 62, min: 7, max: 34, avg: 20.18)
Number of affected states:                             1038 (count: 62, min: 0, max: 32, avg: 16.74)
Length (states) of path with itp 'true':                151 (count: 62, min: 1, max: 22, avg: 2.44)
Length (states) of path with itp non-trivial itp:      1038 (count: 62, min: 0, max: 32, avg: 16.74)
Length (states) of path with itp 'false':                62 (count: 62, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 62, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             981 (count: 62, min: 0, max: 31, avg: 15.82)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                62
Number of successful refinements:     62
Number of failed refinements:         0
Max. size of reached set before ref.: 2376
Max. size of reached set after ref.:  1748
Avg. size of reached set before ref.: 1133.71
Avg. size of reached set after ref.:  128.29

Total time for CEGAR algorithm:      11.589s
Time for refinements:                 1.040s
Average time for refinement:          0.016s
Max time for refinement:              0.051s

Code Coverage
-----------------------------
  Function coverage:      0.534
  Visited lines:          1424
  Total lines:            1725
  Line coverage:          0.826
  Visited conditions:     282
  Total conditions:       408
  Condition coverage:     0.691

CPAchecker general statistics
-----------------------------
Number of program locations:     2333
Number of CFA edges:             2580
Number of relevant variables:    213
Number of functions:             73
Number of loops:                 8
Size of reached set:             1788
  Number of reached locations:   695 (30%)
    Avg states per location:     2
    Max states per location:     34 (at node N61)
  Number of reached functions:   39 (53%)
  Number of partitions:          1788
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        25

Time for analysis setup:          2.910s
  Time for loading CPAs:          0.588s
  Time for loading parser:        0.409s
  Time for CFA construction:      1.844s
    Time for parsing file(s):     0.549s
    Time for AST to CFA:          0.613s
    Time for CFA sanity check:    0.133s
    Time for post-processing:     0.452s
      Time for var class.:        0.184s
Time for Analysis:               11.589s
CPU time for analysis:           11.580s
Total time for CPAchecker:       14.502s
Total CPU time for CPAchecker:   14.490s
Time for statistics:              0.077s

Time for Garbage Collector:       0.170s (in 18 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                108MB (   103 MiB) max;     65MB (    62 MiB) avg;    113MB (   108 MiB) peak
Used non-heap memory:             39MB (    37 MiB) max;     34MB (    32 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     36MB (    34 MiB) avg
Total process virtual memory:  12081MB ( 11521 MiB) max;  12067MB ( 11508 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
