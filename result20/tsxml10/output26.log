scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--staging--bcm--bcm_wimax.ko-ldv_main17_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_duquupi1/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 6851: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6854: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 6857: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6180;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6180;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6180;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6180;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7585: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8048: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8099: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8102: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 8105: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 9376: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9940: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10262: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10628: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10945: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14474: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15165: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 16542: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17168: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 17688: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18604: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 18673: Dead code detected: __ms___0 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 19070: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19428: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

line 19520: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 20082: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 21035: Dereferencing of non-pointer type PUCHAR  in expression *pucBuffer (ASTConverter.convert, WARNING)

line 21095: Dereferencing of non-pointer type PUCHAR  in expression *pucBuffer (ASTConverter.convert, WARNING)

line 23016: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 23160: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 23210: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 23213: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 23216: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6149;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 24743: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24746: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24749: Dead code detected: __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg));
  goto ldv_46947;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg));
  goto ldv_46947;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg));
  goto ldv_46947;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg));
  goto ldv_46947;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu), "=d" (__val_gu): "0" ((unsigned long *)arg));
  goto ldv_46947;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 24771: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24774: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24777: Dead code detected: __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg));
  goto ldv_46957;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg));
  goto ldv_46957;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg));
  goto ldv_46957;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg));
  goto ldv_46957;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___0), "=d" (__val_gu___0): "0" ((unsigned long *)arg));
  goto ldv_46957;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 24819: Dead code detected: __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24822: Dead code detected: __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

line 24825: Dead code detected: __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ volatile ("call __get_user_1": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg));
  goto ldv_46970;
  case 2UL:
  __asm__ volatile ("call __get_user_2": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg));
  goto ldv_46970;
  case 4UL:
  __asm__ volatile ("call __get_user_4": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg));
  goto ldv_46970;
  case 8UL:
  __asm__ volatile ("call __get_user_8": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg));
  goto ldv_46970;
  default:
  __asm__ volatile ("call __get_user_X": "=a" (__ret_gu___1), "=d" (__val_gu___1): "0" ((unsigned long *)arg));
  goto ldv_46970;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 26373: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 26708: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28613: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 29928: Dead code detected: Adapter->LEDInfo.led_thread_running = 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 30056: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 30483: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 30518: Dead code detected: __ms___0 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 30547: Dead code detected: __ms___1 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 31860: Dead code detected: __ms = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 31897: Dead code detected: __ms___0 = 3UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 35900: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 36040: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_trylock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kfree_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function consume_skb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6903: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memdup_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function netif_carrier_off to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 22352-22353: Ignoring function call through function pointer *(Adapter->interface_rdm): tmp = (*(Adapter->interface_rdm))(Adapter->pvInterfaceAdapter, uiAddress, (PVOID )pucBuff, (int)sSize); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            18118 (9% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  16627 (92%)
  Because of loop head:            1447 (8%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         44 (0%)
  Times precision was empty:       11960 (66%)
  Times precision was {false}:     151 (1%)
  Times result was cached:         5717 (32%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      290 (2%)
  Times result was 'false':        288 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         55619
  BDD entailment checks:           5503
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       238
Number of predicates discovered:          4
Number of abstraction locations:          30
Max number of predicates per location:    3
Avg number of predicates per location:    2
Total predicates per abstraction:         16692
Max number of predicates per abstraction: 3
Avg number of predicates per abstraction: 37.85
Number of irrelevant predicates:          12024 (72%)
Number of preds handled by boolean abs:   519 (3%)
  Total number of models for allsat:      290
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.241s
  Time for path formula creation:        4.127s
Time for strengthen operator:            0.144s
Time for prec operator:                  7.905s
  Time for abstraction:                  7.523s (Max:     0.110s, Count: 18118)
    Boolean abstraction:                 3.030s
    Solving time:                        4.029s (Max:     0.083s)
    Model enumeration time:              0.216s
    Time for BDD construction:           0.030s (Max:     0.006s)
Time for merge operator:                 0.653s
Time for coverage check:                 0.031s
  Time for BDD entailment checks:        0.026s
Total time for SMT solver (w/o itp):     4.245s

Number of path formula cache hits:   230432 (94%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.289s

Total number of created targets for pointer analysis: 16112
   Number of created targets for uf: *(struct_bcm_mini_adapter)* is 2
   Number of created targets for uf: *unsigned_char is 73
   Number of created targets for uf: *unsigned_int is 6409
   Number of created targets for uf: *unsigned_long_int is 10
   Number of created targets for uf: *(struct_bcm_tarang_data)* is 2


Number of BDD nodes:                               208
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                         600 (count: 19978, min: 0, max: 38, avg: 0.03)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.376s
Automaton transfers with branching:                0
Automaton transfer successors:                       204446 (count: 204446, min: 1, max: 1, avg: 1.00) [1 x 204446]

CPA algorithm statistics
------------------------
Number of iterations:            112254
Max size of waitlist:            165
Average size of waitlist:        69
Number of computed successors:   144726
Max successors for one state:    2
Number of times merged:          25058
Number of times stopped:         28170
Number of times breaked:         44

Total time for CPA algorithm:        17.040s (Max:     1.417s)
  Time for choose from waitlist:      0.088s
  Time for precision adjustment:      8.745s
  Time for transfer relation:         6.289s
  Time for merge operator:            0.953s
  Time for stop operator:             0.241s
  Time for adding to reached set:     0.168s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   44
Avg. length of target path (in blocks):                 476 (count: 44, min: 6, max: 13, avg: 10.82)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   5.364s
  Counterexample analysis:                             5.061s (Max:     0.210s, Calls: 44)
    Refinement sat check:                              4.764s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.018s
  Precision update:                                    0.035s
  ARG update:                                          0.234s

Length of refined path (in blocks):                     432 (count: 44, min: 5, max: 12, avg: 9.82)
Number of affected states:                              344 (count: 44, min: 3, max: 10, avg: 7.82)
Length (states) of path with itp 'true':                 44 (count: 44, min: 1, max: 1, avg: 1.00)
Length (states) of path with itp non-trivial itp:       344 (count: 44, min: 3, max: 10, avg: 7.82)
Length (states) of path with itp 'false':                44 (count: 44, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 44, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             300 (count: 44, min: 2, max: 9, avg: 6.82)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                44
Number of successful refinements:     44
Number of failed refinements:         0
Max. size of reached set before ref.: 4430
Max. size of reached set after ref.:  6
Avg. size of reached set before ref.: 2584.89
Avg. size of reached set after ref.:  6.00

Total time for CEGAR algorithm:      22.514s
Time for refinements:                 5.473s
Average time for refinement:          0.124s
Max time for refinement:              0.226s

Code Coverage
-----------------------------
  Function coverage:      0.062
  Visited lines:          2345
  Total lines:            16538
  Line coverage:          0.142
  Visited conditions:     1078
  Total conditions:       13012
  Condition coverage:     0.083

CPAchecker general statistics
-----------------------------
Number of program locations:     27437
Number of CFA edges:             35132
Number of relevant variables:    3454
Number of functions:             535
Number of loops:                 203
Size of reached set:             2798
  Number of reached locations:   1457 (5%)
    Avg states per location:     1
    Max states per location:     86 (at node N27736)
  Number of reached functions:   33 (6%)
  Number of partitions:          2791
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N18582 (before line 26320), Function main called from node N18512, stack depth 1 [6e9197d1], stack [main]])
  Number of target states:       0
  Size of final wait list        93

Time for analysis setup:          7.832s
  Time for loading CPAs:          0.803s
  Time for loading parser:        0.415s
  Time for CFA construction:      6.522s
    Time for parsing file(s):     1.074s
    Time for AST to CFA:          2.404s
    Time for CFA sanity check:    0.693s
    Time for post-processing:     2.185s
      Time for var class.:        1.257s
Time for Analysis:               22.514s
CPU time for analysis:           22.520s
Total time for CPAchecker:       30.349s
Total CPU time for CPAchecker:   30.320s
Time for statistics:              0.142s

Time for Garbage Collector:       0.730s (in 58 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                174MB (   166 MiB) max;    105MB (   100 MiB) avg;    192MB (   183 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     36MB (    34 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:  12147MB ( 11584 MiB) max;  12134MB ( 11572 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
