scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--video--smscufx.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_8a9e_xzg/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 7471: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_dealloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modedb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function framebuffer_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_alloc_cmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            47021 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  41061 (87%)
  Because of loop head:            5777 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         183 (0%)
  Times precision was empty:       12021 (26%)
  Times precision was {false}:     587 (1%)
  Times result was cached:         32486 (69%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1927 (4%)
  Times result was 'false':        1002 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         42138
  BDD entailment checks:           10946
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       40
Number of predicates discovered:          6
Number of abstraction locations:          132
Max number of predicates per location:    5
Avg number of predicates per location:    4
Total predicates per abstraction:         120165
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 47.80
Number of irrelevant predicates:          57557 (48%)
Number of preds handled by boolean abs:   4317 (4%)
  Total number of models for allsat:      1921
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  4.918s
  Time for path formula creation:        4.659s
Time for strengthen operator:            0.294s
Time for prec operator:                 11.471s
  Time for abstraction:                 10.833s (Max:     0.032s, Count: 47021)
    Boolean abstraction:                 1.980s
    Solving time:                        1.993s (Max:     0.029s)
    Model enumeration time:              0.127s
    Time for BDD construction:           0.139s (Max:     0.010s)
Time for merge operator:                 0.306s
Time for coverage check:                 0.070s
  Time for BDD entailment checks:        0.064s
Total time for SMT solver (w/o itp):     2.120s

Number of path formula cache hits:   347942 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.828s

Total number of created targets for pointer analysis: 2899
   Number of created targets for uf: *signed_int is 41
   Number of created targets for uf: *(struct_usb_device)* is 2
   Number of created targets for uf: *(struct_urb)* is 4
   Number of created targets for uf: *(struct_list_head)* is 25
   Number of created targets for uf: *_Bool is 15
   Number of created targets for uf: *(struct_ufx_data)* is 4
   Number of created targets for uf: *unsigned_int is 11
   Number of created targets for uf: *(struct_fb_info)* is 5
   Number of created targets for uf: *unsigned_long_int is 3


Number of BDD nodes:                               237
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        3923 (count: 37537, min: 0, max: 248, avg: 0.10)
Time for BDD node cleanup:                             0.009s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.703s
  Time for transition matches:                         0.293s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.011s
Automaton transfers with branching:                0
Automaton transfer successors:                       325978 (count: 326230, min: 0, max: 1, avg: 1.00) [0 x 252, 1 x 325978]

CPA algorithm statistics
------------------------
Number of iterations:            172199
Max size of waitlist:            56
Average size of waitlist:        25
Number of computed successors:   201187
Max successors for one state:    2
Number of times merged:          15596
Number of times stopped:         22254
Number of times breaked:         183

Total time for CPA algorithm:        23.960s (Max:     0.781s)
  Time for choose from waitlist:      0.198s
  Time for precision adjustment:     12.898s
  Time for transfer relation:         8.621s
  Time for merge operator:            0.669s
  Time for stop operator:             0.363s
  Time for adding to reached set:     0.368s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   183
Avg. length of target path (in blocks):                6886 (count: 183, min: 6, max: 85, avg: 37.63)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.345s
  Counterexample analysis:                             1.682s (Max:     0.028s, Calls: 183)
    Refinement sat check:                              1.031s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.070s
  Precision update:                                    0.123s
  ARG update:                                          0.411s

Length of refined path (in blocks):                    6577 (count: 183, min: 5, max: 84, avg: 35.94)
Number of affected states:                             5518 (count: 183, min: 3, max: 82, avg: 30.15)
Length (states) of path with itp 'true':                876 (count: 183, min: 1, max: 12, avg: 4.79)
Length (states) of path with itp non-trivial itp:      5518 (count: 183, min: 3, max: 82, avg: 30.15)
Length (states) of path with itp 'false':               183 (count: 183, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 183, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            5335 (count: 183, min: 2, max: 81, avg: 29.15)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                183
Number of successful refinements:     183
Number of failed refinements:         0
Max. size of reached set before ref.: 2245
Max. size of reached set after ref.:  680
Avg. size of reached set before ref.: 1202.54
Avg. size of reached set after ref.:  237.25

Total time for CEGAR algorithm:      26.592s
Time for refinements:                 2.602s
Average time for refinement:          0.014s
Max time for refinement:              0.044s

Code Coverage
-----------------------------
  Function coverage:      0.441
  Visited lines:          1519
  Total lines:            3007
  Line coverage:          0.505
  Visited conditions:     230
  Total conditions:       782
  Condition coverage:     0.294

CPAchecker general statistics
-----------------------------
Number of program locations:     4028
Number of CFA edges:             4596
Number of relevant variables:    609
Number of functions:             118
Number of loops:                 31
Size of reached set:             1283
  Number of reached locations:   683 (17%)
    Avg states per location:     1
    Max states per location:     42 (at node N3230)
  Number of reached functions:   52 (44%)
  Number of partitions:          1283
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        20

Time for analysis setup:          3.269s
  Time for loading CPAs:          0.559s
  Time for loading parser:        0.388s
  Time for CFA construction:      2.239s
    Time for parsing file(s):     0.594s
    Time for AST to CFA:          0.720s
    Time for CFA sanity check:    0.194s
    Time for post-processing:     0.591s
      Time for var class.:        0.310s
Time for Analysis:               26.592s
CPU time for analysis:           26.600s
Total time for CPAchecker:       29.864s
Total CPU time for CPAchecker:   29.860s
Time for statistics:              0.073s

Time for Garbage Collector:       0.510s (in 55 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                123MB (   118 MiB) max;     77MB (    73 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     38MB (    36 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        45MB (    42 MiB) max;     39MB (    38 MiB) avg
Total process virtual memory:  12082MB ( 11522 MiB) max;  12072MB ( 11513 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
