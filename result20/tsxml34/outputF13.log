scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--staging--speakup--speakup.ko-ldv_main4_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_k7g44y9g/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4300: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4456-4457: Dead code detected: __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4460-4461: Dead code detected: __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 4468-4469: Dead code detected: __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 2UL:
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 4UL:
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  case 8UL:
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (dev_opened): : "memory",
                       "cc");
  goto ldv_23939;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 4679: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5216: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5369: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5372: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5375: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6159;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5479: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5482: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5485: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24716;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24716;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5493-5508: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5498: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5501: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5504: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24726;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24726;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5512-5527: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5517: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5520: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5523: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24735;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24735;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5531-5546: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5536: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5539: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5542: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24744;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24744;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24716;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24716;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24716;
  default:
  __bad_percpu_size();
  }
  ldv_24716: ;
  goto ldv_24721;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24726;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24726;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24726;
  default:
  __bad_percpu_size();
  }
  ldv_24726: ;
  goto ldv_24721;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24735;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24735;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24735;
  default:
  __bad_percpu_size();
  }
  ldv_24735: ;
  goto ldv_24721;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (1));
  goto ldv_24744;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (1));
  goto ldv_24744;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (1));
  goto ldv_24744;
  default:
  __bad_percpu_size();
  }
  ldv_24744: ;
  goto ldv_24721;
  default:
  __bad_size_call_parameter();
  goto ldv_24721;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5564: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5567: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5570: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24755;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24755;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5578-5593: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5583: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5586: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5589: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24765;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24765;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5597-5612: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5602: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5605: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5608: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24774;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24774;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5616-5631: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5621: Dead code detected: __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5624: Dead code detected: __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5627: Dead code detected: __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24783;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24783;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24755;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24755;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24755;
  default:
  __bad_percpu_size();
  }
  ldv_24755: ;
  goto ldv_24760;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24765;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24765;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24765;
  default:
  __bad_percpu_size();
  }
  ldv_24765: ;
  goto ldv_24760;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24774;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24774;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24774;
  default:
  __bad_percpu_size();
  }
  ldv_24774: ;
  goto ldv_24760;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %1,%%gs:%P0": "+m" (reporting_keystroke): "qi" (0));
  goto ldv_24783;
  case 2UL:
  __asm__ ("movw %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 4UL:
  __asm__ ("movl %1,%%gs:%P0": "+m" (reporting_keystroke): "ri" (0));
  goto ldv_24783;
  case 8UL:
  __asm__ ("movq %1,%%gs:%P0": "+m" (reporting_keystroke): "re" (0));
  goto ldv_24783;
  default:
  __bad_percpu_size();
  }
  ldv_24783: ;
  goto ldv_24760;
  default:
  __bad_size_call_parameter();
  goto ldv_24760;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5672: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5675: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5678: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5687-5702: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5692: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5695: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5698: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5707-5722: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5712: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5715: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5718: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5727-5742: Dead code detected: switch (1UL) (CFACreationUtils.addEdgeToCFA, INFO)

line 5732: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5735: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5738: Dead code detected: __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (1UL) {
  case 1UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (reporting_keystroke));
  goto ldv_24807;
  default:
  __bad_percpu_size();
  }
  ldv_24807:
  pscr_ret__ = pfo_ret__;
  goto ldv_24813;
  case 2UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (reporting_keystroke));
  goto ldv_24817;
  default:
  __bad_percpu_size();
  }
  ldv_24817:
  pscr_ret__ = pfo_ret_____0;
  goto ldv_24813;
  case 4UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (reporting_keystroke));
  goto ldv_24826;
  default:
  __bad_percpu_size();
  }
  ldv_24826:
  pscr_ret__ = pfo_ret_____1;
  goto ldv_24813;
  case 8UL: ;
  switch (1UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (reporting_keystroke));
  goto ldv_24835;
  default:
  __bad_percpu_size();
  }
  ldv_24835:
  pscr_ret__ = pfo_ret_____2;
  goto ldv_24813;
  default:
  __bad_size_call_parameter();
  goto ldv_24813;
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5795: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 9269: Dereferencing of non-pointer type spkup_hand  in expression *(spkup_handler[(int )value]) (ASTConverter.convert, WARNING)

line 9936: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10446: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11896: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 11925: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11928: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11931: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 11958: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11961: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 11964: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6167;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12198: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12203: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12208: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 2UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 4UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_28331;
  case 8UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_28331;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12315: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12479: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 12749: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 12829: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 12929: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12934: Dead code detected: tmp___4 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12939: Dead code detected: tmp___5 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 2UL:
  tmp___4 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 4UL:
  tmp___5 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___5->state): : "memory",
                       "cc");
  goto ldv_28258;
  case 8UL:
  tmp___6 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___6->state): : "memory",
                       "cc");
  goto ldv_28258;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 12989: Dead code detected: tmp___13 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12994: Dead code detected: tmp___14 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 12999: Dead code detected: tmp___15 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___13 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___13->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 2UL:
  tmp___14 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___14->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 4UL:
  tmp___15 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___15->state): : "memory",
                       "cc");
  goto ldv_28269;
  case 8UL:
  tmp___16 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___16->state): : "memory",
                       "cc");
  goto ldv_28269;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 13694: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13971: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14921: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 13304: Function pointer *(synth->get_index) with type unsigned char (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13253: Function pointer *(synth->get_index) with type unsigned char (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12334: Function pointer *(pv_cpu_ops.io_delay) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9461: Function pointer *special_handler with type int (*)(struct vc_data *, u_char , u_char , u_short ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 12238-12239: Function pointer *(tty___0->ldisc->ops->receive_buf) with type void (*)(struct tty_struct *, const unsigned char *, char *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13899: Function pointer *(synth->catch_up) with type void (*)(struct spk_synth *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12912: Function pointer *(synth___0->flush) with type void (*)(struct spk_synth *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13509: Function pointer *(synth->release) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 14463: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", cp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 14442: Ignoring function call through function pointer *(synth->synth_adjust): tmp___0 = (*(synth->synth_adjust))(var); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function msecs_to_jiffies to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function prepare_to_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_should_stop to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function finish_wait to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kd_mksound to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13899: Ignoring function call through function pointer *(synth->catch_up): (*(synth->catch_up))(synth); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function start_tty to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function vsnprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13218: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&args)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function stop_tty to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13170: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", (char *)(&pitch_buff)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function wake_up_process to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vt_get_leds to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9461: Ignoring call via function pointer special_handler for which no suitable target was found in line: ret = (*special_handler)(vc, (int)type, (int)value, (int)((u_short )keycode)); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 9461: Ignoring function call through function pointer *special_handler: ret = (*special_handler)(vc, (int)type, (int)value, (int)((u_short )keycode)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9269: Ignoring function call through function pointer *(spkup_handler[(int)value]): (*(spkup_handler[(int)value]))(vc); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9005: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8948: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 8955: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8985: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", (char *)(&info)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function inverse_translate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7071: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7713: Ignoring parameters passed as varargs to function synth_printf: synth_printf(" ") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7651: Ignoring parameters passed as varargs to function synth_printf: synth_printf(" ") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7690: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%c", (int)ch) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7682: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%c", (int)ch) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7678: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%c", (int)ch) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6515: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", (char *)(&str_caps_start)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6519: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%c", (int)ch) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6521: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", (char *)(&str_caps_stop)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6549: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", cp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6538: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", (char *)(&str_caps_start)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6539: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", cp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6540: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", (char *)(&str_caps_stop)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6544: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 13291: Ignoring parameters passed as varargs to function synth_printf: synth_printf((const char *)(synth->indexing.command), out, out) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7716: Ignoring parameters passed as varargs to function synth_printf: synth_printf((const char *)tmp___3, rep_count) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7717: Ignoring parameters passed as varargs to function synth_printf: synth_printf(" ") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7090: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%d, ", ((long)cp) + (1L - ((long)(&buf)))) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6691: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6494: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6438: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6441: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function add_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 12238-12239: Ignoring function call through function pointer *(tty___0->ldisc->ops->receive_buf): (*(tty___0->ldisc->ops->receive_buf))(tty___0, ((const unsigned char *)sel_buffer) + ((unsigned long)pasted), 0, count); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6400: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6409: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function screen_glyph to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 7400: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6615: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", phonetic[(int)ch]) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6619: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s ", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7485: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7510: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%d, ", i) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7222: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 7947: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6468: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6471: Ignoring parameters passed as varargs to function synth_printf: synth_printf(" %s ", tmp___1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6478: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___3) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6475: Ignoring parameters passed as varargs to function synth_printf: synth_printf(" %s ", tmp___2) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6462: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s ", tmp) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6309: Ignoring function call through function pointer *(synth->is_alive): tmp = (*(synth->is_alive))(synth); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6319: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___0) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 6322: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s\n", tmp___1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function trace_hardirqs_off to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_trylock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function trace_hardirqs_on to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_keyboard_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_vt_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_stop to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kobject_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13509: Ignoring function call through function pointer *(synth->release): (*(synth->release))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function kobject_create_and_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function misc_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_keyboard_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_vt_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function kthread_create_on_node to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function set_user_nice to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13420: Ignoring function call through function pointer *(synth->probe): tmp = (*(synth->probe))(synth); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 13436: Ignoring parameters passed as varargs to function synth_printf: synth_printf("%s", synth->init) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1931142 (22% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1486951 (77%)
  Because of loop head:            443860 (23%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         331 (0%)
  Times precision was empty:       1625918 (84%)
  Times precision was {false}:     1164 (0%)
  Times result was cached:         300164 (16%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      3896 (0%)
  Times result was 'false':        12189 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         1310984
  BDD entailment checks:           410710
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       176
Number of predicates discovered:          10
Number of abstraction locations:          206
Max number of predicates per location:    8
Avg number of predicates per location:    5
Total predicates per abstraction:         1378092
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 272.35
Number of irrelevant predicates:          975024 (71%)
Number of preds handled by boolean abs:   11185 (1%)
  Total number of models for allsat:      3819
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.98

Time for post operator:                459.997s
  Time for path formula creation:      458.380s
Time for strengthen operator:            5.095s
Time for prec operator:                148.180s
  Time for abstraction:                115.048s (Max:    40.863s, Count: 1931142)
    Boolean abstraction:                20.421s
    Solving time:                       67.205s (Max:    40.845s)
    Model enumeration time:              1.287s
    Time for BDD construction:           0.093s (Max:     0.007s)
Time for merge operator:                87.528s
Time for coverage check:                 0.273s
  Time for BDD entailment checks:        0.208s
Total time for SMT solver (w/o itp):    68.492s

Number of path formula cache hits:   2162454 (23%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   390.778s

Total number of created targets for pointer analysis: 9518259
   Number of created targets for uf: *unsigned_short_int is 603
   Number of created targets for uf: *(void)* is 2241
   Number of created targets for uf: *signed_int is 215
   Number of created targets for uf: *(char)* is 48
   Number of created targets for uf: *unsigned_char is 5338
   Number of created targets for uf: *(struct_list_head)* is 3
   Number of created targets for uf: *(unsigned_char)* is 134
   Number of created targets for uf: *(struct_st_var_header)* is 321
   Number of created targets for uf: *char is 33379
   Number of created targets for uf: *signed_short_int is 6
   Number of created targets for uf: *unsigned_long_int is 20
   Number of created targets for uf: *(struct_st_spk_t)* is 521


Number of BDD nodes:                               411
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        7588 (count: 2066900, min: 0, max: 516, avg: 0.00)
Time for BDD node cleanup:                             0.138s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.812s
  Time for transition matches:                         4.169s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                      8977920 (count: 8977920, min: 1, max: 1, avg: 1.00) [1 x 8977920]

CPA algorithm statistics
------------------------
Number of iterations:            6517792
Max size of waitlist:            102
Average size of waitlist:        70
Number of computed successors:   7388024
Max successors for one state:    2
Number of times merged:          450137
Number of times stopped:         851810
Number of times breaked:         331

Total time for CPA algorithm:       820.990s (Max:    59.588s)
  Time for choose from waitlist:      1.870s
  Time for precision adjustment:    183.338s
  Time for transfer relation:       518.950s
  Time for merge operator:           91.675s
  Time for stop operator:             5.500s
  Time for adding to reached set:     8.031s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   331
Avg. length of target path (in blocks):               27036 (count: 331, min: 37, max: 128, avg: 81.68)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  72.209s
  Counterexample analysis:                            62.705s (Max:     0.379s, Calls: 331)
    Refinement sat check:                             56.421s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.008s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.091s
  Precision update:                                    0.117s
  ARG update:                                          9.150s

Length of refined path (in blocks):                   25184 (count: 330, min: 20, max: 115, avg: 76.32)
Number of affected states:                            19296 (count: 330, min: 5, max: 113, avg: 58.47)
Length (states) of path with itp 'true':               5558 (count: 330, min: 0, max: 78, avg: 16.84)
Length (states) of path with itp non-trivial itp:     19296 (count: 330, min: 5, max: 113, avg: 58.47)
Length (states) of path with itp 'false':               330 (count: 330, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 330, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           18966 (count: 330, min: 4, max: 112, avg: 57.47)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                331
Number of successful refinements:     330
Number of failed refinements:         0
Max. size of reached set before ref.: 149654
Max. size of reached set after ref.:  2464
Avg. size of reached set before ref.: 20298.01
Avg. size of reached set after ref.:  589.74

Total time for CEGAR algorithm:     895.617s
Time for refinements:                74.534s
Average time for refinement:          0.225s
Max time for refinement:              0.637s

Code Coverage
-----------------------------
  Function coverage:      0.186
  Visited lines:          1768
  Total lines:            6398
  Line coverage:          0.276
  Visited conditions:     350
  Total conditions:       2080
  Condition coverage:     0.168

CPAchecker general statistics
-----------------------------
Number of program locations:     9513
Number of CFA edges:             11030
Number of relevant variables:    1705
Number of functions:             345
Number of loops:                 126
Size of reached set:             2369
  Number of reached locations:   978 (10%)
    Avg states per location:     2
    Max states per location:     19 (at node N9216)
  Number of reached functions:   64 (19%)
  Number of partitions:          2357
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N4898 (before lines 9677-9681), Function speakup_init called from node N5070, stack depth 2 [282c45d7], stack [main, speakup_init]])
  Number of target states:       1
  Size of final wait list        16

Time for analysis setup:          4.747s
  Time for loading CPAs:          0.665s
  Time for loading parser:        0.388s
  Time for CFA construction:      3.595s
    Time for parsing file(s):     0.786s
    Time for AST to CFA:          1.385s
    Time for CFA sanity check:    0.324s
    Time for post-processing:     0.975s
      Time for var class.:        0.512s
Time for Analysis:              895.617s
CPU time for analysis:          895.620s
Total time for CPAchecker:      900.366s
Total CPU time for CPAchecker:  900.360s
Time for statistics:              0.097s

Time for Garbage Collector:      65.658s (in 452 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               3932MB (  3750 MiB) max;   1894MB (  1806 MiB) avg;   4006MB (  3820 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     40MB (    39 MiB) avg;     43MB (    41 MiB) peak
Allocated heap memory:          4076MB (  3887 MiB) max;   2656MB (  2533 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     44MB (    42 MiB) avg
Total process virtual memory:  12287MB ( 11718 MiB) max;  12221MB ( 11655 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
