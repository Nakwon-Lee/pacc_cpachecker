scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--isdn--hardware--eicon--divadidd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_21uzlmps/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 3730: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 3950: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 5137: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 4600: Function pointer *(myDriverDebugHandle.dbg_end) with type void (*)(pDbgHandle ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4343-4344: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4397-4398: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4164-4165: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4235-4236: Function pointer *(myDriverDebugHandle.dbg_ev) with type void (*)(unsigned short, unsigned long, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4146-4147: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4218-4219: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4307-4308: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4128-4129: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4271-4272: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4200-4201: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4379-4380: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4469-4470: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4487-4488: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4505-4506: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4523-4524: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4451-4452: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4253-4254: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4433-4434: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4289-4290: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4415-4416: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4361-4362: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4325-4326: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4182-4183: Function pointer *(myDriverDebugHandle.dbg_prt) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4632-4633: Function pointer *(myDriverDebugHandle.dbg_old) with type void (*)(unsigned short, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 4629-4630: Function pointer *(myDriverDebugHandle.dbg_irq) with type void (*)(unsigned short, int, char *, __va_list_tag *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4600: Ignoring function call through function pointer *(myDriverDebugHandle.dbg_end): (*(myDriverDebugHandle.dbg_end))(&myDriverDebugHandle); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3861: Ignoring function call through function pointer *(_DAdapter.request): (*(_DAdapter.request))((ENTITY *)(&req)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function remove_proc_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function proc_mkdir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4808: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"DIDD_Read, space = %d, Adapters = %d", length, Adapters + 2U) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

Assuming external function _raw_spin_lock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __builtin_va_start to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_va_start, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

lines 4182-4183: Ignoring function call through function pointer *(myDriverDebugHandle.dbg_prt): (*(myDriverDebugHandle.dbg_prt))((int)((unsigned short)(myDriverDebugHandle.id)), 1024, format, (__va_list_tag *)(&ap)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4184: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&ap)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_va_end to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_bh to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4851: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t write DIMAINT. Array too small") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4867: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t write DADAPTER. Array too small") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4872: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"Read %d adapters", dst) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

lines 4164-4165: Ignoring function call through function pointer *(myDriverDebugHandle.dbg_prt): (*(myDriverDebugHandle.dbg_prt))((int)((unsigned short)(myDriverDebugHandle.id)), 768, format, (__va_list_tag *)(&ap)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4166: Return type of function __builtin_va_end is void, but result is used as type int: __builtin_va_end((__va_list_tag *)(&ap)); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

line 3830: Ignoring function call through function pointer *(_DAdapter.request): (*(_DAdapter.request))((ENTITY *)(&req)); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3873: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"init: failed to connect to DIDD.") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4568: Ignoring parameters passed as varargs to function no_printf: no_printf((unsigned char *)"", &myDriverDebugHandle) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4578: Ignoring parameters passed as varargs to function no_printf: no_printf((unsigned char *)"%s: Cannot log to old maint driver !", drvName) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4945: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t process sync request, Req=%02x", __CPAchecker_TMP_7) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4895: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t process async request, Req=%02x", __CPAchecker_TMP_1) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5021: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t remove adapter notification, handle=%d", handle) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5009: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"Remove adapter notification[%d]", (int)(handle + 1U)) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4990: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t register adapter notification, overflow") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4972: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"Register adapter notification[%d]=%08x", i + 1U, callback) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4747: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"DIMAINT removed") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4786: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Invalid request=%08x, can\'t remove adapter", request) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4769: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"Remove adapter[%d], request=%08x", i + 1, request) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 5059: Ignoring function call through function pointer *(nfy.callback): (*(nfy.callback))(nfy.context, d, removal); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5059: Ignoring parameters passed as varargs to function no_printf: no_printf(nfy.context, d, removal) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4686: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"DIMAINT removed") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4680: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"DIMAINT registered, dprintf=%08x", d->request) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4733: Ignoring parameters passed as varargs to function myDbgPrint_ERR: myDbgPrint_ERR((char *)"Can\'t add adapter, out of resources") (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4715: Ignoring parameters passed as varargs to function myDbgPrint_TRC: myDbgPrint_TRC((char *)"Add adapter[%d], request=%08x", i + 1, d->request) (PredicateCPA:CtoFormulaConverter.makeFunctionCall, WARNING)

line 4568: Ignoring call via function pointer dprintf for which no suitable target was found in line: (*dprintf)((unsigned char *)"", &myDriverDebugHandle); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 4568: Ignoring function call through function pointer *dprintf: (*dprintf)((unsigned char *)"", &myDriverDebugHandle); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4578: Ignoring call via function pointer dprintf for which no suitable target was found in line: (*dprintf)((unsigned char *)"%s: Cannot log to old maint driver !", drvName); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 4578: Ignoring function call through function pointer *dprintf: (*dprintf)((unsigned char *)"%s: Cannot log to old maint driver !", drvName); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            298703 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  265561 (89%)
  Because of loop head:            32891 (11%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         251 (0%)
  Times precision was empty:       4331 (1%)
  Times precision was {false}:     298 (0%)
  Times result was cached:         284394 (95%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      9680 (3%)
  Times result was 'false':        16235 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         312281
  BDD entailment checks:           125709
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       29
Number of predicates discovered:          11
Number of abstraction locations:          113
Max number of predicates per location:    10
Avg number of predicates per location:    6
Total predicates per abstraction:         1953578
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 195.79
Number of irrelevant predicates:          387014 (20%)
Number of preds handled by boolean abs:   53925 (3%)
  Total number of models for allsat:      19026
  Max number of models for allsat:        16
  Avg number of models for allsat:        1.97

Time for post operator:                 17.695s
  Time for path formula creation:       17.181s
Time for strengthen operator:            0.966s
Time for prec operator:                 91.946s
  Time for abstraction:                 89.389s (Max:     0.359s, Count: 298703)
    Boolean abstraction:                17.792s
    Solving time:                       12.435s (Max:     0.022s)
    Model enumeration time:              4.712s
    Time for BDD construction:           0.309s (Max:     0.008s)
Time for merge operator:                 1.626s
Time for coverage check:                 0.105s
  Time for BDD entailment checks:        0.087s
Total time for SMT solver (w/o itp):    17.147s

Number of path formula cache hits:   1450688 (76%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    14.003s

Total number of created targets for pointer analysis: 325985
   Number of created targets for uf: *(void)* is 249
   Number of created targets for uf: *unsigned_char is 19547
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_3,_Parameter_1_type:_[(void)*],_Parameter_2_type:_[(struct___anonstruct_DESCRIPTOR_189)*],_Parameter_3_type:_[signed_int],_VarArgs:_false)* is 5081
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_entity_s)*],_VarArgs:_false)* is 5021
   Number of created targets for uf: *unsigned_int is 141
   Number of created targets for uf: *char is 5041
   Number of created targets for uf: *unsigned_long_int is 314


Number of BDD nodes:                               2419
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                       20495 (count: 192347, min: 0, max: 417, avg: 0.11)
Time for BDD node cleanup:                             0.020s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.504s
  Time for transition matches:                         0.839s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                      1625867 (count: 1625867, min: 1, max: 1, avg: 1.00) [1 x 1625867]

CPA algorithm statistics
------------------------
Number of iterations:            1262359
Max size of waitlist:            27
Average size of waitlist:        10
Number of computed successors:   1428904
Max successors for one state:    2
Number of times merged:          93286
Number of times stopped:         149210
Number of times breaked:         251

Total time for CPA algorithm:       132.799s (Max:     3.338s)
  Time for choose from waitlist:      0.342s
  Time for precision adjustment:     97.240s
  Time for transfer relation:        27.814s
  Time for merge operator:            2.515s
  Time for stop operator:             1.136s
  Time for adding to reached set:     1.370s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   251
Avg. length of target path (in blocks):               15567 (count: 251, min: 12, max: 122, avg: 62.02)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   7.785s
  Counterexample analysis:                             6.098s (Max:     0.062s, Calls: 251)
    Refinement sat check:                              4.663s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.004s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.105s
  Precision update:                                    0.146s
  ARG update:                                          1.324s

Length of refined path (in blocks):                   13708 (count: 251, min: 11, max: 94, avg: 54.61)
Number of affected states:                            10782 (count: 251, min: 2, max: 93, avg: 42.96)
Length (states) of path with itp 'true':               2675 (count: 251, min: 0, max: 48, avg: 10.66)
Length (states) of path with itp non-trivial itp:     10782 (count: 251, min: 2, max: 93, avg: 42.96)
Length (states) of path with itp 'false':               251 (count: 251, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 251, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:           10531 (count: 251, min: 1, max: 92, avg: 41.96)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                251
Number of successful refinements:     251
Number of failed refinements:         0
Max. size of reached set before ref.: 23882
Max. size of reached set after ref.:  14817
Avg. size of reached set before ref.: 7646.43
Avg. size of reached set after ref.:  2698.37

Total time for CEGAR algorithm:     141.840s
Time for refinements:                 8.750s
Average time for refinement:          0.034s
Max time for refinement:              0.115s

Code Coverage
-----------------------------
  Function coverage:      0.333
  Visited lines:          1162
  Total lines:            1545
  Line coverage:          0.752
  Visited conditions:     200
  Total conditions:       334
  Condition coverage:     0.599

CPAchecker general statistics
-----------------------------
Number of program locations:     2142
Number of CFA edges:             2325
Number of relevant variables:    123
Number of functions:             105
Number of loops:                 7
Size of reached set:             21496
  Number of reached locations:   584 (27%)
    Avg states per location:     36
    Max states per location:     266 (at node N417)
  Number of reached functions:   35 (33%)
  Number of partitions:          21232
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N1545 (before line 3830), Function connect_didd called from node N342, stack depth 4 [5aec930], stack [main, divadidd_init, diddfunc_init, connect_didd]])
  Number of target states:       0

Time for analysis setup:          2.803s
  Time for loading CPAs:          0.547s
  Time for loading parser:        0.400s
  Time for CFA construction:      1.761s
    Time for parsing file(s):     0.561s
    Time for AST to CFA:          0.542s
    Time for CFA sanity check:    0.144s
    Time for post-processing:     0.421s
      Time for var class.:        0.186s
Time for Analysis:              141.840s
CPU time for analysis:          141.830s
Time for analyzing result:        0.011s
Total time for CPAchecker:      144.650s
Total CPU time for CPAchecker:  144.640s
Time for statistics:              0.206s

Time for Garbage Collector:       7.943s (in 555 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                292MB (   279 MiB) max;    146MB (   139 MiB) avg;    313MB (   298 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     39MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           349MB (   333 MiB) max;    268MB (   255 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:  12146MB ( 11584 MiB) max;  12103MB ( 11542 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
