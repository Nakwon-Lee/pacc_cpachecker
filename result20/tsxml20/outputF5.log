scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_s7rptn2a/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4029: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4099: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4150: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4890: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 5595: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function delayed_work_timer_fn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            3238785 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2750531 (85%)
  Because of loop head:            487796 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         458 (0%)
  Times precision was empty:       398669 (12%)
  Times precision was {false}:     3399 (0%)
  Times result was cached:         2822378 (87%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      14339 (0%)
  Times result was 'false':        70225 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         3486185
  BDD entailment checks:           998977
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          14
Number of abstraction locations:          103
Max number of predicates per location:    10
Avg number of predicates per location:    5
Total predicates per abstraction:         17553253
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 989.58
Number of irrelevant predicates:          12153035 (69%)
Number of preds handled by boolean abs:   49793 (0%)
  Total number of models for allsat:      14980
  Max number of models for allsat:        9
  Avg number of models for allsat:        1.04

Time for post operator:                119.899s
  Time for path formula creation:      115.064s
Time for strengthen operator:            9.459s
Time for prec operator:                514.917s
  Time for abstraction:                496.021s (Max:     2.525s, Count: 3238785)
    Boolean abstraction:                63.238s
    Solving time:                       79.389s (Max:     0.192s)
    Model enumeration time:              9.677s
    Time for BDD construction:           0.226s (Max:     0.012s)
Time for merge operator:                10.847s
Time for coverage check:                 0.598s
  Time for BDD entailment checks:        0.443s
Total time for SMT solver (w/o itp):    89.066s

Number of path formula cache hits:   23595245 (90%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    81.138s

Total number of created targets for pointer analysis: 3642230
   Number of created targets for uf: *(void)* is 4215
   Number of created targets for uf: *(struct_pi_adapter)* is 6389
   Number of created targets for uf: *signed_int is 67121
   Number of created targets for uf: *(char)* is 6389
   Number of created targets for uf: *(struct_gendisk)* is 6389
   Number of created targets for uf: *char is 335667


Number of BDD nodes:                               3408
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                       29304 (count: 1515681, min: 0, max: 341, avg: 0.02)
Time for BDD node cleanup:                             0.095s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 16.858s
  Time for transition matches:                         8.491s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.004s
Automaton transfers with branching:                0
Automaton transfer successors:                     22490030 (count: 22490030, min: 1, max: 1, avg: 1.00) [1 x 22490030]

CPA algorithm statistics
------------------------
Number of iterations:            12812637
Max size of waitlist:            1358
Average size of waitlist:        499
Number of computed successors:   14916948
Max successors for one state:    2
Number of times merged:          1243604
Number of times stopped:         1822793
Number of times breaked:         458

Total time for CPA algorithm:       851.446s (Max:    14.188s)
  Time for choose from waitlist:      3.154s
  Time for precision adjustment:    570.681s
  Time for transfer relation:       221.021s
  Time for merge operator:           18.676s
  Time for stop operator:             8.070s
  Time for adding to reached set:    13.496s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   458
Avg. length of target path (in blocks):               17640 (count: 458, min: 8, max: 75, avg: 38.52)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  31.342s
  Counterexample analysis:                            11.033s (Max:     0.087s, Calls: 458)
    Refinement sat check:                              9.098s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.018s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.071s
  Precision update:                                    0.134s
  ARG update:                                         19.945s

Length of refined path (in blocks):                   14223 (count: 458, min: 4, max: 67, avg: 31.05)
Number of affected states:                             8924 (count: 458, min: 0, max: 66, avg: 19.48)
Length (states) of path with itp 'true':               4841 (count: 458, min: 0, max: 55, avg: 10.57)
Length (states) of path with itp non-trivial itp:      8924 (count: 458, min: 0, max: 66, avg: 19.48)
Length (states) of path with itp 'false':               458 (count: 458, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 458, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            8481 (count: 458, min: 0, max: 65, avg: 18.52)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                458
Number of successful refinements:     458
Number of failed refinements:         0
Max. size of reached set before ref.: 221247
Max. size of reached set after ref.:  192986
Avg. size of reached set before ref.: 48533.03
Avg. size of reached set after ref.:  20243.90

Total time for CEGAR algorithm:     897.409s
Time for refinements:                41.130s
Average time for refinement:          0.089s
Max time for refinement:              2.578s

Code Coverage
-----------------------------
  Function coverage:      0.404
  Visited lines:          1564
  Total lines:            2092
  Line coverage:          0.748
  Visited conditions:     306
  Total conditions:       494
  Condition coverage:     0.619

CPAchecker general statistics
-----------------------------
Number of program locations:     2772
Number of CFA edges:             3091
Number of relevant variables:    271
Number of functions:             94
Number of loops:                 20
Size of reached set:             67510
  Number of reached locations:   769 (28%)
    Avg states per location:     87
    Max states per location:     3134 (at node N228)
  Number of reached functions:   38 (40%)
  Number of partitions:          67465
    Avg size of partitions:      1
    Max size of partitions:      7 (with key [N1518 (before line 5250), Function main called from node N1505, stack depth 1 [1c025cb], stack [main]])
  Number of target states:       0
  Size of final wait list        445

Time for analysis setup:          2.936s
  Time for loading CPAs:          0.581s
  Time for loading parser:        0.406s
  Time for CFA construction:      1.855s
    Time for parsing file(s):     0.568s
    Time for AST to CFA:          0.569s
    Time for CFA sanity check:    0.151s
    Time for post-processing:     0.489s
      Time for var class.:        0.247s
Time for Analysis:              897.409s
CPU time for analysis:          897.390s
Total time for CPAchecker:      900.347s
Total CPU time for CPAchecker:  900.320s
Time for statistics:              0.586s

Time for Garbage Collector:      93.664s (in 1976 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2009MB (  1916 MiB) max;    654MB (   624 MiB) avg;   2115MB (  2017 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     39MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:          2173MB (  2072 MiB) max;    960MB (   916 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:  12418MB ( 11842 MiB) max;  12242MB ( 11675 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
