scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--block--paride--pcd.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_upeh5_p2/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 4029: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4099: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4150: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4890: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 4939: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 5595: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function delayed_work_timer_fn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_cleanup_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function del_gendisk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_connect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3676: Ignoring call via function pointer ps_ready for which no suitable target was found in line: tmp___0 = (*ps_ready)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3676: Ignoring function call through function pointer *ps_ready: tmp___0 = (*ps_ready)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function snprintf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_regr to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3686: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3686: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3680: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3680: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 3673: Ignoring call via function pointer ps_tq_int::con for which no suitable target was found in line: (*con)(); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 3673: Ignoring function call through function pointer *con: (*con)(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function pi_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_do_claimed to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_blkdev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function blk_init_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_disconnect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function register_cdrom to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_disk to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdrom_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cdrom_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_write_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pi_read_block to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            72501 (13% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  63500 (88%)
  Because of loop head:            8888 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         113 (0%)
  Times precision was empty:       49662 (68%)
  Times precision was {false}:     1085 (1%)
  Times result was cached:         20235 (28%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1519 (2%)
  Times result was 'false':        3959 (5%)
Number of strengthen sat checks:   0
Number of coverage checks:         66550
  BDD entailment checks:           18964
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       60
Number of predicates discovered:          15
Number of abstraction locations:          49
Max number of predicates per location:    10
Avg number of predicates per location:    3
Total predicates per abstraction:         74799
Max number of predicates per abstraction: 10
Avg number of predicates per abstraction: 28.72
Number of irrelevant predicates:          37898 (51%)
Number of preds handled by boolean abs:   4203 (6%)
  Total number of models for allsat:      2030
  Max number of models for allsat:        18
  Avg number of models for allsat:        1.34

Time for post operator:                  4.531s
  Time for path formula creation:        4.293s
Time for strengthen operator:            0.367s
Time for prec operator:                 11.661s
  Time for abstraction:                 11.131s (Max:     0.105s, Count: 72501)
    Boolean abstraction:                 4.906s
    Solving time:                        4.827s (Max:     0.097s)
    Model enumeration time:              0.652s
    Time for BDD construction:           0.108s (Max:     0.010s)
Time for merge operator:                 0.367s
Time for coverage check:                 0.060s
  Time for BDD entailment checks:        0.041s
Total time for SMT solver (w/o itp):     5.480s

Number of path formula cache hits:   585830 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.304s

Total number of created targets for pointer analysis: 28208
   Number of created targets for uf: *(void)* is 14
   Number of created targets for uf: *(struct_pi_adapter)* is 129
   Number of created targets for uf: *signed_int is 1286
   Number of created targets for uf: *(char)* is 129
   Number of created targets for uf: *(struct_gendisk)* is 129
   Number of created targets for uf: *char is 1693


Number of BDD nodes:                               3660
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        4074 (count: 84371, min: 0, max: 270, avg: 0.05)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.628s
  Time for transition matches:                         0.321s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       543344 (count: 543344, min: 1, max: 1, avg: 1.00) [1 x 543344]

CPA algorithm statistics
------------------------
Number of iterations:            277964
Max size of waitlist:            586
Average size of waitlist:        172
Number of computed successors:   328365
Max successors for one state:    2
Number of times merged:          23793
Number of times stopped:         31107
Number of times breaked:         113

Total time for CPA algorithm:        23.931s (Max:     1.029s)
  Time for choose from waitlist:      0.172s
  Time for precision adjustment:     13.125s
  Time for transfer relation:         8.364s
  Time for merge operator:            0.728s
  Time for stop operator:             0.341s
  Time for adding to reached set:     0.399s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   113
Avg. length of target path (in blocks):                2052 (count: 113, min: 8, max: 30, avg: 18.16)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.480s
  Counterexample analysis:                             1.883s (Max:     0.053s, Calls: 113)
    Refinement sat check:                              1.541s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.048s
  Precision update:                                    0.089s
  ARG update:                                          0.420s

Length of refined path (in blocks):                    1690 (count: 113, min: 4, max: 23, avg: 14.96)
Number of affected states:                              889 (count: 113, min: 0, max: 18, avg: 7.87)
Length (states) of path with itp 'true':                688 (count: 113, min: 0, max: 22, avg: 6.09)
Length (states) of path with itp non-trivial itp:       889 (count: 113, min: 0, max: 18, avg: 7.87)
Length (states) of path with itp 'false':               113 (count: 113, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 113, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:             789 (count: 113, min: 0, max: 17, avg: 6.98)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                113
Number of successful refinements:     113
Number of failed refinements:         0
Max. size of reached set before ref.: 11113
Max. size of reached set after ref.:  10713
Avg. size of reached set before ref.: 4803.38
Avg. size of reached set after ref.:  2295.58

Total time for CEGAR algorithm:      26.890s
Time for refinements:                 2.829s
Average time for refinement:          0.025s
Max time for refinement:              0.064s

Code Coverage
-----------------------------
  Function coverage:      0.543
  Visited lines:          1580
  Total lines:            2092
  Line coverage:          0.755
  Visited conditions:     276
  Total conditions:       494
  Condition coverage:     0.559

CPAchecker general statistics
-----------------------------
Number of program locations:     2772
Number of CFA edges:             3091
Number of relevant variables:    271
Number of functions:             94
Number of loops:                 20
Size of reached set:             9917
  Number of reached locations:   732 (26%)
    Avg states per location:     13
    Max states per location:     197 (at node N484)
  Number of reached functions:   51 (54%)
  Number of partitions:          9851
    Avg size of partitions:      1
    Max size of partitions:      21 (with key [N1518 (before line 5250), Function main called from node N1505, stack depth 1 [1c025cb], stack [main]])
  Number of target states:       0
  Size of final wait list        528

Time for analysis setup:          2.994s
  Time for loading CPAs:          0.575s
  Time for loading parser:        0.422s
  Time for CFA construction:      1.909s
    Time for parsing file(s):     0.594s
    Time for AST to CFA:          0.602s
    Time for CFA sanity check:    0.142s
    Time for post-processing:     0.477s
      Time for var class.:        0.220s
Time for Analysis:               26.891s
CPU time for analysis:           26.890s
Total time for CPAchecker:       29.887s
Total CPU time for CPAchecker:   29.880s
Time for statistics:              0.170s

Time for Garbage Collector:       0.677s (in 72 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                122MB (   116 MiB) max;     73MB (    69 MiB) avg;    129MB (   123 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     36MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        41MB (    39 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:  12082MB ( 11522 MiB) max;  12072MB ( 11513 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
