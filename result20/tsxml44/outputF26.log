scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/linux-3.8-rc1-32_7a-drivers--net--ethernet--intel--e1000e--e1000e.ko-ldv_main1_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_3f3dnmfk/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 8991: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 10411: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 10466: Dead code detected: __ms___0 = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 13617: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 14675: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 15009: Dead code detected: __ms = 5UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 16288: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18465: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 18575: Dead code detected: __ms = 1UL; (CFACreationUtils.addEdgeToCFA, INFO)

line 18940: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 19880: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 23654: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 24179: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28065: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 28168: Dead code detected: __ptr = (u8 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 28173: Dead code detected: __ptr___0 = (u16 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

line 28183: Dead code detected: __ptr___2 = (u64 volatile *)(& v->counter); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __ptr = (u8 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 2UL:
  __ptr___0 = (u16 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 4UL:
  __ptr___1 = (u32 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  case 8UL:
  __ptr___2 = (u64 volatile *)(& v->counter);
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
  goto ldv_5547;
  default:
  __cmpxchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 28248: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 28251: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 28254: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6243;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6243;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6243;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6243;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 35837: Dead code detected: return (0); (CFACreationUtils.addEdgeToCFA, INFO)

line 38066: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 38487: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 24602: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24635: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28558: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 24406-24407: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 28491-28492: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24526: Function pointer *(ops->mapping_error) with type int (*)(struct device *, dma_addr_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24473: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28621: Function pointer *(ops->sync_single_for_cpu) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24506: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28654: Function pointer *(ops->sync_single_for_device) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28588: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 24440: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 28525: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 14236: Function pointer *(hw->phy.ops.set_page) with type s32 (*)(struct e1000_hw *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 11276-11277: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 11278-11279: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 11281-11282: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 11283-11284: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 36428: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 36431: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 36432: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 36383-36384: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 36385-36386: Function pointer *(hw->phy.ops.write_reg_page) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6434: Function pointer *(hw->nvm.ops.read) with type s32 (*)(struct e1000_hw *, u16 , u16 , u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6444: Function pointer *(hw->nvm.ops.write) with type s32 (*)(struct e1000_hw *, u16 , u16 , u16 *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 20815: Function pointer *(hw->phy.ops.set_d0_lplu_state) with type s32 (*)(struct e1000_hw *, bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 34690: Function pointer *(hw->phy.ops.set_page) with type s32 (*)(struct e1000_hw *, u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6414: Function pointer *(hw->phy.ops.write_reg) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 9167: Function pointer *(hw->phy.ops.write_reg_locked) with type s32 (*)(struct e1000_hw *, u32 , u16 ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 14424: Destroying the void* pointer ldv_successful_malloc::p produces garbage or the memory pointed by it is unused: e1000_rev_polarity_p1 = ldv_successful_malloc(4); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_netdev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6434: Ignoring function call through function pointer *(hw->nvm.ops.read): tmp = (*(hw->nvm.ops.read))(hw, (int)offset, (int)words, data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6444: Ignoring function call through function pointer *(hw->nvm.ops.write): tmp = (*(hw->nvm.ops.write))(hw, (int)offset, (int)words, data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 6405: Ignoring function call through function pointer *(hw->phy.ops.read_reg): tmp = (*(hw->phy.ops.read_reg))(hw, offset, data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6414: Ignoring function call through function pointer *(hw->phy.ops.write_reg): tmp = (*(hw->phy.ops.write_reg))(hw, offset, (int)data); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 16338: Ignoring function call through function pointer *(mac->ops.set_lan_id): (*(mac->ops.set_lan_id))(hw); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            43465 (24% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  38205 (88%)
  Because of loop head:            5253 (12%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         7 (0%)
  Times precision was empty:       43379 (100%)
  Times precision was {false}:     29 (0%)
  Times result was cached:         31 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      26 (0%)
  Times result was 'false':        21 (0%)
Number of strengthen sat checks:   0
Number of coverage checks:         16158
  BDD entailment checks:           7824
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       90
Number of predicates discovered:          6
Number of abstraction locations:          9
Max number of predicates per location:    5
Avg number of predicates per location:    2
Total predicates per abstraction:         191
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 3.47
Number of irrelevant predicates:          107 (56%)
Number of preds handled by boolean abs:   62 (32%)
  Total number of models for allsat:      27
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.04

Time for post operator:                  7.309s
  Time for path formula creation:        7.208s
Time for strengthen operator:            0.172s
Time for prec operator:                  1.395s
  Time for abstraction:                  0.323s (Max:     0.016s, Count: 43465)
    Boolean abstraction:                 0.028s
    Solving time:                        0.019s (Max:     0.003s)
    Model enumeration time:              0.001s
    Time for BDD construction:           0.001s (Max:     0.001s)
Time for merge operator:                 0.531s
Time for coverage check:                 0.023s
  Time for BDD entailment checks:        0.018s
Total time for SMT solver (w/o itp):     0.020s

Number of path formula cache hits:   145702 (67%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.999s

Total number of created targets for pointer analysis: 13129
   Number of created targets for uf: *enum_e1000_bus_width is 5
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_4,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[unsigned_short_int],_Parameter_3_type:_[unsigned_short_int],_Parameter_4_type:_[(unsigned_short_int)*],_VarArgs:_false)* is 9
   Number of created targets for uf: *unsigned_long_int is 3
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 27
   Number of created targets for uf: *signed_int is 203
   Number of created targets for uf: *unsigned_char is 7
   Number of created targets for uf: *enum_e1000_mac_type is 29
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 95
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[(unsigned_short_int)*],_Parameter_3_type:_[(unsigned_short_int)*],_VarArgs:_false)* is 5
   Number of created targets for uf: *(Return_type:_[_Bool],_Parameters:_1,_Parameter_1_type:_[(struct_e1000_hw)*],_VarArgs:_false)* is 3
   Number of created targets for uf: *unsigned_int is 122
   Number of created targets for uf: *(void)* is 3
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[unsigned_short_int],_VarArgs:_false)* is 3
   Number of created targets for uf: *enum_e1000_phy_type is 5
   Number of created targets for uf: *enum_e1000_nvm_type is 4
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_3,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[(unsigned_char)*],_Parameter_3_type:_[unsigned_int],_VarArgs:_false)* is 9
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[(unsigned_short_int)*],_VarArgs:_false)* is 5
   Number of created targets for uf: *unsigned_short_int is 37
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[unsigned_int],_Parameter_3_type:_[(unsigned_short_int)*],_VarArgs:_false)* is 13
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_2,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[_Bool],_VarArgs:_false)* is 3
   Number of created targets for uf: *(struct_e1000_adapter)* is 5
   Number of created targets for uf: *_Bool is 16
   Number of created targets for uf: *enum_e1000_media_type is 5
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_3,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[unsigned_int],_Parameter_3_type:_[unsigned_int],_VarArgs:_false)* is 5
   Number of created targets for uf: *(Return_type:_[signed_int],_Parameters:_3,_Parameter_1_type:_[(struct_e1000_hw)*],_Parameter_2_type:_[unsigned_int],_Parameter_3_type:_[unsigned_short_int],_VarArgs:_false)* is 9


Number of BDD nodes:                               212
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                         117 (count: 51551, min: 0, max: 88, avg: 0.00)
Time for BDD node cleanup:                             0.007s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.222s
Automaton transfers with branching:                0
Automaton transfer successors:                       184532 (count: 184532, min: 1, max: 1, avg: 1.00) [1 x 184532]

CPA algorithm statistics
------------------------
Number of iterations:            125451
Max size of waitlist:            516
Average size of waitlist:        417
Number of computed successors:   138063
Max successors for one state:    2
Number of times merged:          4167
Number of times stopped:         11976
Number of times breaked:         7

Total time for CPA algorithm:        24.734s (Max:    23.338s)
  Time for choose from waitlist:      0.064s
  Time for precision adjustment:      2.160s
  Time for transfer relation:        20.830s
  Time for merge operator:            0.617s
  Time for stop operator:             0.253s
  Time for adding to reached set:     0.282s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                 386 (count: 7, min: 54, max: 58, avg: 55.14)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.316s
  Counterexample analysis:                             1.110s (Max:     0.412s, Calls: 7)
    Refinement sat check:                              0.920s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          2.173s
  Predicate creation:                                  0.004s
  Precision update:                                    0.001s
  ARG update:                                          0.025s

Length of refined path (in blocks):                     319 (count: 6, min: 52, max: 55, avg: 53.17)
Number of affected states:                               20 (count: 6, min: 3, max: 5, avg: 3.33)
Length (states) of path with itp 'true':                293 (count: 6, min: 48, max: 49, avg: 48.83)
Length (states) of path with itp non-trivial itp:        20 (count: 6, min: 3, max: 5, avg: 3.33)
Length (states) of path with itp 'false':                 6 (count: 6, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 6, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              14 (count: 6, min: 2, max: 4, avg: 2.33)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 124975
Max. size of reached set after ref.:  174
Avg. size of reached set before ref.: 18158.29
Avg. size of reached set after ref.:  173.50

Total time for CEGAR algorithm:      28.267s
Time for refinements:                 3.532s
Average time for refinement:          0.504s
Max time for refinement:              2.766s

Code Coverage
-----------------------------
  Function coverage:      0.162
  Visited lines:          2850
  Total lines:            20097
  Line coverage:          0.142
  Visited conditions:     650
  Total conditions:       31452
  Condition coverage:     0.021

CPAchecker general statistics
-----------------------------
Number of program locations:     65515
Number of CFA edges:             96041
Number of relevant variables:    4710
Number of functions:             831
Number of loops:                 189
Size of reached set:             124975
  Number of reached locations:   1742 (3%)
    Avg states per location:     71
    Max states per location:     3483 (at node N0)
  Number of reached functions:   135 (16%)
  Number of partitions:          124974
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N7606 (before line 14596), Function main called from node N7263, stack depth 1 [6ae148c1], stack [main]])
  Number of target states:       1
  Size of final wait list        441

Time for analysis setup:         10.437s
  Time for loading CPAs:          0.997s
  Time for loading parser:        0.417s
  Time for CFA construction:      8.951s
    Time for parsing file(s):     1.048s
    Time for AST to CFA:          2.276s
    Time for CFA sanity check:    1.205s
    Time for post-processing:     4.492s
      Time for var class.:        2.713s
Time for Analysis:               28.267s
CPU time for analysis:           28.270s
Time for analyzing result:        0.126s
Total time for CPAchecker:       38.706s
Total CPU time for CPAchecker:   38.690s
Time for statistics:              1.722s

Time for Garbage Collector:       2.123s (in 72 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                361MB (   344 MiB) max;    177MB (   169 MiB) avg;    374MB (   356 MiB) peak
Used non-heap memory:             43MB (    41 MiB) max;     37MB (    35 MiB) avg;     44MB (    41 MiB) peak
Allocated heap memory:           427MB (   407 MiB) max;    294MB (   280 MiB) avg
Allocated non-heap memory:        45MB (    43 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:  12147MB ( 11584 MiB) max;  12135MB ( 11573 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 38506) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
