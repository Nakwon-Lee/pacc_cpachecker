scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--video--udlfb.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_no8exm8_/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 7024: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_edid_attr_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_edid_attr_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_dlfb_ops_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_dlfb_ops_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_get_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __usb_get_extra_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unlink_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4626: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)front); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_prefetch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_prefetch, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 4627: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)back); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4155: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memcmp to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            2698887 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  2321438 (86%)
  Because of loop head:            376776 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         673 (0%)
  Times precision was empty:       157872 (6%)
  Times precision was {false}:     935 (0%)
  Times result was cached:         2503327 (93%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      36753 (1%)
  Times result was 'false':        63418 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         1573356
  BDD entailment checks:           660978
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          33
Number of abstraction locations:          282
Max number of predicates per location:    13
Avg number of predicates per location:    8
Total predicates per abstraction:         19711423
Max number of predicates per abstraction: 13
Avg number of predicates per abstraction: 523.02
Number of irrelevant predicates:          4624230 (23%)
Number of preds handled by boolean abs:   220884 (1%)
  Total number of models for allsat:      49291
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.34

Time for post operator:                142.351s
  Time for path formula creation:      139.256s
Time for strengthen operator:            7.142s
Time for prec operator:                539.742s
  Time for abstraction:                522.981s (Max:     4.442s, Count: 2698887)
    Boolean abstraction:                33.460s
    Solving time:                       27.543s (Max:     0.015s)
    Model enumeration time:              3.136s
    Time for BDD construction:           0.697s (Max:     0.016s)
Time for merge operator:                 3.731s
Time for coverage check:                 0.460s
  Time for BDD entailment checks:        0.386s
Total time for SMT solver (w/o itp):    30.679s

Number of path formula cache hits:   13136284 (77%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:   115.515s

Total number of created targets for pointer analysis: 527537
   Number of created targets for uf: *signed_int is 1287
   Number of created targets for uf: *(char)* is 405
   Number of created targets for uf: *(struct_usb_device)* is 598
   Number of created targets for uf: *(struct_urb)* is 1722
   Number of created targets for uf: *(struct_list_head)* is 25410
   Number of created targets for uf: *(unsigned_char)* is 535
   Number of created targets for uf: *_Bool is 291
   Number of created targets for uf: *(struct_device)* is 598
   Number of created targets for uf: *unsigned_int is 127
   Number of created targets for uf: *char is 29
   Number of created targets for uf: *(struct_dlfb_data)* is 832
   Number of created targets for uf: *unsigned_long_int is 1108


Number of BDD nodes:                               5392
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                       78311 (count: 1058703, min: 0, max: 945, avg: 0.07)
Time for BDD node cleanup:                             0.108s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 10.371s
  Time for transition matches:                         6.439s
  Time for transition assertions:                      0.002s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                     14746031 (count: 14746405, min: 0, max: 1, avg: 1.00) [0 x 374, 1 x 14746031]

CPA algorithm statistics
------------------------
Number of iterations:            8650677
Max size of waitlist:            210
Average size of waitlist:        136
Number of computed successors:   9619168
Max successors for one state:    2
Number of times merged:          456189
Number of times stopped:         826969
Number of times breaked:         673

Total time for CPA algorithm:       834.228s (Max:     8.119s)
  Time for choose from waitlist:      2.215s
  Time for precision adjustment:    575.780s
  Time for transfer relation:       219.206s
  Time for merge operator:            7.463s
  Time for stop operator:             6.593s
  Time for adding to reached set:     9.787s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   673
Avg. length of target path (in blocks):               37873 (count: 673, min: 10, max: 235, avg: 56.27)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  21.442s
  Counterexample analysis:                            11.518s (Max:     0.096s, Calls: 673)
    Refinement sat check:                              7.452s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.017s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.195s
  Precision update:                                    0.465s
  ARG update:                                          8.965s

Length of refined path (in blocks):                   29908 (count: 673, min: 4, max: 221, avg: 44.44)
Number of affected states:                            25112 (count: 673, min: 0, max: 220, avg: 37.31)
Length (states) of path with itp 'true':               4123 (count: 673, min: 0, max: 117, avg: 6.13)
Length (states) of path with itp non-trivial itp:     25112 (count: 673, min: 0, max: 220, avg: 37.31)
Length (states) of path with itp 'false':               673 (count: 673, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:         284 (count: 673, min: 0, max: 3, avg: 0.42)
Equal non-trivial interpolants along paths:           24156 (count: 673, min: 0, max: 218, avg: 35.89)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                673
Number of successful refinements:     673
Number of failed refinements:         0
Max. size of reached set before ref.: 36818
Max. size of reached set after ref.:  11666
Avg. size of reached set before ref.: 13463.15
Avg. size of reached set after ref.:  564.11

Total time for CEGAR algorithm:     859.157s
Time for refinements:                24.774s
Average time for refinement:          0.036s
Max time for refinement:              0.240s

Code Coverage
-----------------------------
  Function coverage:      0.558
  Visited lines:          2049
  Total lines:            2807
  Line coverage:          0.730
  Visited conditions:     379
  Total conditions:       628
  Condition coverage:     0.604

CPAchecker general statistics
-----------------------------
Number of program locations:     3827
Number of CFA edges:             4260
Number of relevant variables:    674
Number of functions:             147
Number of loops:                 24
Size of reached set:             47734
  Number of reached locations:   1165 (30%)
    Avg states per location:     40
    Max states per location:     614 (at node N78)
  Number of reached functions:   82 (56%)
  Number of partitions:          46819
    Avg size of partitions:      1
    Max size of partitions:      5 (with key [N2374 (before line 6652), Function main called from node N2361, stack depth 1 [4b869331], stack [main]])
  Number of target states:       0

Time for analysis setup:          3.415s
  Time for loading CPAs:          0.662s
  Time for loading parser:        0.378s
  Time for CFA construction:      2.291s
    Time for parsing file(s):     0.584s
    Time for AST to CFA:          0.809s
    Time for CFA sanity check:    0.181s
    Time for post-processing:     0.585s
      Time for var class.:        0.329s
Time for Analysis:              859.157s
CPU time for analysis:          859.160s
Time for analyzing result:        0.026s
Total time for CPAchecker:      862.575s
Total CPU time for CPAchecker:  862.570s
Time for statistics:              0.398s

Time for Garbage Collector:      59.674s (in 1404 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:               2514MB (  2398 MiB) max;   1002MB (   956 MiB) avg;   2531MB (  2414 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     40MB (    39 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:          3564MB (  3399 MiB) max;   1455MB (  1388 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     43MB (    41 MiB) avg
Total process virtual memory:  13157MB ( 12547 MiB) max;  12538MB ( 11957 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
