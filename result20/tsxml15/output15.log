scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--video--udlfb.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1vv3gfg9/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 7024: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_edid_attr_probe_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_edid_attr_release_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_dlfb_ops_probe_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_dlfb_ops_release_3 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_fillrect to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_imageblit to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sys_copyarea to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_var_to_videomode to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_delayed_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_cleanup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vfree to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_deferred_io_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_del_entry to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function vmalloc_to_pfn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remap_pfn_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_sys_write to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function down_interruptible to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_free_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_bin_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unlink_framebuffer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4155: Return type of function __builtin_object_size is void, but result is used as type int: tmp = __builtin_object_size((const void *)to, 0); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_object_size to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Cannot get declaration of function __builtin_object_size, ignoring calls to it. (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function _copy_from_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_fmt to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4626: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)front); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_prefetch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4627: Return type of function __builtin_prefetch is void, but result is used as type int: __builtin_prefetch((const void *)back); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function usb_get_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __usb_get_extra_descriptor to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_init_map to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_alloc_coherent to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fb_destroy_modelist to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            165362 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  141999 (86%)
  Because of loop head:            23314 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         49 (0%)
  Times precision was empty:       157628 (95%)
  Times precision was {false}:     667 (0%)
  Times result was cached:         6715 (4%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      352 (0%)
  Times result was 'false':        910 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         73938
  BDD entailment checks:           27138
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       55
Number of predicates discovered:          13
Number of abstraction locations:          51
Max number of predicates per location:    11
Avg number of predicates per location:    3
Total predicates per abstraction:         26666
Max number of predicates per abstraction: 11
Avg number of predicates per abstraction: 26.17
Number of irrelevant predicates:          20955 (79%)
Number of preds handled by boolean abs:   1272 (5%)
  Total number of models for allsat:      418
  Max number of models for allsat:        6
  Avg number of models for allsat:        1.19

Time for post operator:                  7.499s
  Time for path formula creation:        7.146s
Time for strengthen operator:            0.617s
Time for prec operator:                  4.059s
  Time for abstraction:                  2.624s (Max:     0.039s, Count: 165362)
    Boolean abstraction:                 0.350s
    Solving time:                        0.394s (Max:     0.015s)
    Model enumeration time:              0.109s
    Time for BDD construction:           0.061s (Max:     0.012s)
Time for merge operator:                 0.227s
Time for coverage check:                 0.093s
  Time for BDD entailment checks:        0.080s
Total time for SMT solver (w/o itp):     0.503s

Number of path formula cache hits:   1033386 (94%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.078s

Total number of created targets for pointer analysis: 1993
   Number of created targets for uf: *signed_int is 79
   Number of created targets for uf: *(struct_usb_device)* is 5
   Number of created targets for uf: *(char)* is 30
   Number of created targets for uf: *(struct_urb)* is 30
   Number of created targets for uf: *(struct_list_head)* is 41
   Number of created targets for uf: *(unsigned_char)* is 30
   Number of created targets for uf: *_Bool is 2
   Number of created targets for uf: *unsigned_int is 41
   Number of created targets for uf: *(struct_device)* is 5
   Number of created targets for uf: *(struct_dlfb_data)* is 5
   Number of created targets for uf: *unsigned_long_int is 9


Number of BDD nodes:                               1143
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        1377 (count: 190584, min: 0, max: 171, avg: 0.01)
Time for BDD node cleanup:                             0.019s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  1.125s
  Time for transition matches:                         0.642s
  Time for transition assertions:                      0.001s
  Time for transition actions:                         0.002s
Automaton transfers with branching:                0
Automaton transfer successors:                       918561 (count: 918613, min: 0, max: 1, avg: 1.00) [0 x 52, 1 x 918561]

CPA algorithm statistics
------------------------
Number of iterations:            505712
Max size of waitlist:            44
Average size of waitlist:        25
Number of computed successors:   556170
Max successors for one state:    2
Number of times merged:          23400
Number of times stopped:         48334
Number of times breaked:         49

Total time for CPA algorithm:        24.773s (Max:     2.271s)
  Time for choose from waitlist:      0.247s
  Time for precision adjustment:      7.406s
  Time for transfer relation:        13.956s
  Time for merge operator:            0.562s
  Time for stop operator:             0.555s
  Time for adding to reached set:     0.689s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   49
Avg. length of target path (in blocks):                 867 (count: 49, min: 9, max: 38, avg: 17.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   1.174s
  Counterexample analysis:                             0.283s (Max:     0.013s, Calls: 49)
    Refinement sat check:                              0.198s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.034s
  Precision update:                                    0.031s
  ARG update:                                          0.815s

Length of refined path (in blocks):                     502 (count: 49, min: 4, max: 36, avg: 10.24)
Number of affected states:                              295 (count: 49, min: 1, max: 34, avg: 6.02)
Length (states) of path with itp 'true':                158 (count: 49, min: 0, max: 7, avg: 3.22)
Length (states) of path with itp non-trivial itp:       295 (count: 49, min: 1, max: 34, avg: 6.02)
Length (states) of path with itp 'false':                49 (count: 49, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           1 (count: 49, min: 0, max: 1, avg: 0.02)
Equal non-trivial interpolants along paths:             245 (count: 49, min: 0, max: 33, avg: 5.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                49
Number of successful refinements:     49
Number of failed refinements:         0
Max. size of reached set before ref.: 29624
Max. size of reached set after ref.:  14008
Avg. size of reached set before ref.: 12109.41
Avg. size of reached set after ref.:  2166.20

Total time for CEGAR algorithm:      26.460s
Time for refinements:                 1.614s
Average time for refinement:          0.032s
Max time for refinement:              0.104s

Code Coverage
-----------------------------
  Function coverage:      0.558
  Visited lines:          2019
  Total lines:            2807
  Line coverage:          0.719
  Visited conditions:     389
  Total conditions:       628
  Condition coverage:     0.619

CPAchecker general statistics
-----------------------------
Number of program locations:     3827
Number of CFA edges:             4260
Number of relevant variables:    674
Number of functions:             147
Number of loops:                 24
Size of reached set:             19709
  Number of reached locations:   1170 (31%)
    Avg states per location:     16
    Max states per location:     300 (at node N267)
  Number of reached functions:   82 (56%)
  Number of partitions:          19704
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N2374 (before line 6652), Function main called from node N2361, stack depth 1 [4b869331], stack [main]])
  Number of target states:       0
  Size of final wait list        32

Time for analysis setup:          3.395s
  Time for loading CPAs:          0.613s
  Time for loading parser:        0.382s
  Time for CFA construction:      2.335s
    Time for parsing file(s):     0.594s
    Time for AST to CFA:          0.855s
    Time for CFA sanity check:    0.189s
    Time for post-processing:     0.568s
      Time for var class.:        0.305s
Time for Analysis:               26.460s
CPU time for analysis:           26.460s
Total time for CPAchecker:       29.858s
Total CPU time for CPAchecker:   29.850s
Time for statistics:              0.279s

Time for Garbage Collector:       1.938s (in 89 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                249MB (   237 MiB) max;    121MB (   116 MiB) avg;    257MB (   246 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     36MB (    34 MiB) avg;     40MB (    38 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     38MB (    36 MiB) avg
Total process virtual memory:  12081MB ( 11521 MiB) max;  12072MB ( 11513 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
