scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/linux-3.8-rc1-32_7a-drivers--hwmon--w83793.ko-ldv_main0_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_1buqa7gh/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 2972-2973: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 2976-2977: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 2984-2985: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 5664: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5667: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

line 5673: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu): "0" (__pu_val), "c" ((int *)arg): "ebx");
  goto ldv_24080;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5687-5688: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5691-5692: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5699-5700: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___0): "0" (__pu_val___0),
                       "c" ((int *)arg): "ebx");
  goto ldv_24090;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5719-5720: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5723-5724: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5731-5732: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 2UL:
  __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 4UL:
  __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  case 8UL:
  __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  default:
  __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___1): "0" (__pu_val___1),
                       "c" ((int *)arg): "ebx");
  goto ldv_24101;
  } (CFACreationUtils.addEdgeToCFA, INFO)

lines 5759-5760: Dead code detected: __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5763-5764: Dead code detected: __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 5771-5772: Dead code detected: __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
    case 1UL:
    __asm__ volatile ("call __put_user_1": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 2UL:
    __asm__ volatile ("call __put_user_2": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 4UL:
    __asm__ volatile ("call __put_user_4": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    case 8UL:
    __asm__ volatile ("call __put_user_8": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    default:
    __asm__ volatile ("call __put_user_X": "=a" (__ret_pu___2): "0" (__pu_val___2),
                         "c" ((int *)arg): "ebx");
    goto ldv_24114;
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 7157: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7531: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 3200: Function pointer *(adap->algo->functionality) with type u32 (*)(struct i2c_adapter *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function might_fault to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _copy_to_user to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 3200: Ignoring function call through function pointer *(adap->algo->functionality): tmp = (*(adap->algo->functionality))(adap); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function misc_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_smbus_read_byte_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function strlcpy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_smbus_write_byte_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function unregister_reboot_notifier to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function hwmon_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i2c_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            29090 (18% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  26436 (91%)
  Because of loop head:            2116 (7%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         538 (2%)
  Times precision was empty:       11734 (40%)
  Times precision was {false}:     359 (1%)
  Times result was cached:         16057 (55%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      940 (3%)
  Times result was 'false':        2804 (10%)
Number of strengthen sat checks:   0
Number of coverage checks:         13704
  BDD entailment checks:           3826
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       46
Number of predicates discovered:          13
Number of abstraction locations:          70
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         43815
Max number of predicates per abstraction: 8
Avg number of predicates per abstraction: 33.73
Number of irrelevant predicates:          15096 (34%)
Number of preds handled by boolean abs:   2913 (7%)
  Total number of models for allsat:      984
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.05

Time for post operator:                  2.378s
  Time for path formula creation:        2.332s
Time for strengthen operator:            0.150s
Time for prec operator:                  4.378s
  Time for abstraction:                  4.002s (Max:     0.037s, Count: 29090)
    Boolean abstraction:                 0.771s
    Solving time:                        0.700s (Max:     0.021s)
    Model enumeration time:              0.080s
    Time for BDD construction:           0.059s (Max:     0.008s)
Time for merge operator:                 0.615s
Time for coverage check:                 0.034s
  Time for BDD entailment checks:        0.031s
Total time for SMT solver (w/o itp):     0.780s

Number of path formula cache hits:   176904 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.938s

Total number of created targets for pointer analysis: 19556
   Number of created targets for uf: *signed_int is 65
   Number of created targets for uf: *unsigned_char is 16001
   Number of created targets for uf: *(struct_list_head)* is 25
   Number of created targets for uf: *(struct_i2c_client)* is 5


Number of BDD nodes:                               463
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        2318 (count: 23237, min: 0, max: 256, avg: 0.10)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.363s
Automaton transfers with branching:                0
Automaton transfer successors:                       165813 (count: 165813, min: 1, max: 1, avg: 1.00) [1 x 165813]

CPA algorithm statistics
------------------------
Number of iterations:            102119
Max size of waitlist:            98
Average size of waitlist:        40
Number of computed successors:   117638
Max successors for one state:    2
Number of times merged:          4939
Number of times stopped:         7241
Number of times breaked:         538

Total time for CPA algorithm:        10.990s (Max:     0.831s)
  Time for choose from waitlist:      0.093s
  Time for precision adjustment:      5.087s
  Time for transfer relation:         4.214s
  Time for merge operator:            0.729s
  Time for stop operator:             0.192s
  Time for adding to reached set:     0.181s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   538
Avg. length of target path (in blocks):                8166 (count: 538, min: 6, max: 23, avg: 15.18)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                  14.166s
  Counterexample analysis:                            13.573s (Max:     0.054s, Calls: 538)
    Refinement sat check:                             12.037s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.087s
  Precision update:                                    0.143s
  ARG update:                                          0.234s

Length of refined path (in blocks):                    7556 (count: 537, min: 4, max: 22, avg: 14.07)
Number of affected states:                             2636 (count: 537, min: 3, max: 15, avg: 4.91)
Length (states) of path with itp 'true':               4383 (count: 537, min: 0, max: 16, avg: 8.16)
Length (states) of path with itp non-trivial itp:      2636 (count: 537, min: 3, max: 15, avg: 4.91)
Length (states) of path with itp 'false':               537 (count: 537, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          38 (count: 537, min: 0, max: 3, avg: 0.07)
Equal non-trivial interpolants along paths:            2061 (count: 537, min: 2, max: 14, avg: 3.84)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                538
Number of successful refinements:     537
Number of failed refinements:         0
Max. size of reached set before ref.: 2541
Max. size of reached set after ref.:  2498
Avg. size of reached set before ref.: 1544.86
Avg. size of reached set after ref.:  1347.37

Total time for CEGAR algorithm:      26.069s
Time for refinements:                14.719s
Average time for refinement:          0.027s
Max time for refinement:              0.064s

Code Coverage
-----------------------------
  Function coverage:      0.297
  Visited lines:          1130
  Total lines:            2909
  Line coverage:          0.388
  Visited conditions:     158
  Total conditions:       674
  Condition coverage:     0.234

CPAchecker general statistics
-----------------------------
Number of program locations:     4113
Number of CFA edges:             4623
Number of relevant variables:    722
Number of functions:             172
Number of loops:                 40
Size of reached set:             1202
  Number of reached locations:   514 (12%)
    Avg states per location:     2
    Max states per location:     12 (at node N2986)
  Number of reached functions:   51 (30%)
  Number of partitions:          1194
    Avg size of partitions:      1
    Max size of partitions:      4 (with key [N2982 (before line 7098), Function main called from node N2870, stack depth 1 [c1e14f], stack [main]])
  Number of target states:       1
  Size of final wait list        58

Time for analysis setup:          3.794s
  Time for loading CPAs:          0.573s
  Time for loading parser:        0.394s
  Time for CFA construction:      2.754s
    Time for parsing file(s):     0.652s
    Time for AST to CFA:          0.979s
    Time for CFA sanity check:    0.174s
    Time for post-processing:     0.788s
      Time for var class.:        0.471s
Time for Analysis:               26.069s
CPU time for analysis:           26.070s
Total time for CPAchecker:       29.866s
Total CPU time for CPAchecker:   29.870s
Time for statistics:              0.045s

Time for Garbage Collector:       0.355s (in 34 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                118MB (   113 MiB) max;     76MB (    72 MiB) avg;    124MB (   118 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     37MB (    35 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:  12146MB ( 11584 MiB) max;  12137MB ( 11574 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
