scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--net--usb--hso.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_iv138gfo/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5545: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5548: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5551: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2861;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7753: Dead code detected: tmp___0 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7758: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 7763: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  tmp___0 = get_current();
  __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___0->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 2UL:
  tmp___1 = get_current();
  __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___1->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 4UL:
  tmp___2 = get_current();
  __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___2->state): : "memory",
                       "cc");
  goto ldv_42871;
  case 8UL:
  tmp___3 = get_current();
  __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___3->state): : "memory",
                       "cc");
  goto ldv_42871;
  default:
  __xchg_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 10384: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tty_alloc_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_set_operations to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_set_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_warn to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unlink_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tasklet_hi_schedule to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_get_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_set to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tasklet_kill to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_autopm_put_interface to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_control_msg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_work to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8018: Ignoring function call through function pointer *(serial->write_data): res = (*(serial->write_data))(serial); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function add_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            80502 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  66085 (82%)
  Because of loop head:            14221 (18%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         196 (0%)
  Times precision was empty:       29610 (37%)
  Times precision was {false}:     776 (1%)
  Times result was cached:         47358 (59%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      2758 (3%)
  Times result was 'false':        2162 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         69213
  BDD entailment checks:           23847
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       50
Number of predicates discovered:          6
Number of abstraction locations:          148
Max number of predicates per location:    5
Avg number of predicates per location:    3
Total predicates per abstraction:         190895
Max number of predicates per abstraction: 5
Avg number of predicates per abstraction: 54.02
Number of irrelevant predicates:          84054 (44%)
Number of preds handled by boolean abs:   5843 (3%)
  Total number of models for allsat:      2748
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  4.054s
  Time for path formula creation:        3.910s
Time for strengthen operator:            0.333s
Time for prec operator:                 11.999s
  Time for abstraction:                 11.246s (Max:     0.028s, Count: 80502)
    Boolean abstraction:                 1.704s
    Solving time:                        1.773s (Max:     0.016s)
    Model enumeration time:              0.141s
    Time for BDD construction:           0.087s (Max:     0.008s)
Time for merge operator:                 0.257s
Time for coverage check:                 0.041s
  Time for BDD entailment checks:        0.036s
Total time for SMT solver (w/o itp):     1.914s

Number of path formula cache hits:   547570 (92%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.774s

Total number of created targets for pointer analysis: 348
   Number of created targets for uf: *(struct_hso_device)* is 31
   Number of created targets for uf: *signed_int is 10
   Number of created targets for uf: *unsigned_char is 3


Number of BDD nodes:                               243
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        5595 (count: 74132, min: 0, max: 267, avg: 0.08)
Time for BDD node cleanup:                             0.011s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.661s
  Time for transition matches:                         0.293s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.009s
Automaton transfers with branching:                0
Automaton transfer successors:                       500548 (count: 500548, min: 1, max: 1, avg: 1.00) [1 x 500548]

CPA algorithm statistics
------------------------
Number of iterations:            317258
Max size of waitlist:            137
Average size of waitlist:        57
Number of computed successors:   371926
Max successors for one state:    2
Number of times merged:          22683
Number of times stopped:         35939
Number of times breaked:         196

Total time for CPA algorithm:        24.131s (Max:     0.764s)
  Time for choose from waitlist:      0.139s
  Time for precision adjustment:     13.625s
  Time for transfer relation:         8.053s
  Time for merge operator:            0.579s
  Time for stop operator:             0.443s
  Time for adding to reached set:     0.414s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   196
Avg. length of target path (in blocks):                5131 (count: 196, min: 16, max: 37, avg: 26.18)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   2.038s
  Counterexample analysis:                             1.310s (Max:     0.020s, Calls: 196)
    Refinement sat check:                              0.951s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.045s
  Precision update:                                    0.112s
  ARG update:                                          0.489s

Length of refined path (in blocks):                    4797 (count: 196, min: 15, max: 36, avg: 24.47)
Number of affected states:                             4063 (count: 196, min: 0, max: 34, avg: 20.73)
Length (states) of path with itp 'true':                538 (count: 196, min: 1, max: 21, avg: 2.74)
Length (states) of path with itp non-trivial itp:      4063 (count: 196, min: 0, max: 34, avg: 20.73)
Length (states) of path with itp 'false':               196 (count: 196, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 196, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3868 (count: 196, min: 0, max: 33, avg: 19.73)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                196
Number of successful refinements:     196
Number of failed refinements:         0
Max. size of reached set before ref.: 2484
Max. size of reached set after ref.:  1450
Avg. size of reached set before ref.: 1855.68
Avg. size of reached set after ref.:  162.36

Total time for CEGAR algorithm:      26.494s
Time for refinements:                 2.344s
Average time for refinement:          0.011s
Max time for refinement:              0.047s

Code Coverage
-----------------------------
  Function coverage:      0.444
  Visited lines:          1902
  Total lines:            3653
  Line coverage:          0.521
  Visited conditions:     342
  Total conditions:       1024
  Condition coverage:     0.334

CPAchecker general statistics
-----------------------------
Number of program locations:     5169
Number of CFA edges:             5867
Number of relevant variables:    707
Number of functions:             198
Number of loops:                 29
Size of reached set:             1934
  Number of reached locations:   1031 (20%)
    Avg states per location:     1
    Max states per location:     23 (at node N3980)
  Number of reached functions:   88 (44%)
  Number of partitions:          1926
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3982 (before line 10308), Function main called from node N3779, stack depth 1 [6e3eb0cd], stack [main]])
  Number of target states:       0
  Size of final wait list        78

Time for analysis setup:          3.870s
  Time for loading CPAs:          0.659s
  Time for loading parser:        0.416s
  Time for CFA construction:      2.708s
    Time for parsing file(s):     0.652s
    Time for AST to CFA:          1.003s
    Time for CFA sanity check:    0.258s
    Time for post-processing:     0.687s
      Time for var class.:        0.351s
Time for Analysis:               26.494s
CPU time for analysis:           26.500s
Total time for CPAchecker:       30.366s
Total CPU time for CPAchecker:   30.360s
Time for statistics:              0.091s

Time for Garbage Collector:       0.720s (in 81 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                129MB (   123 MiB) max;     80MB (    76 MiB) avg;    134MB (   128 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     37MB (    35 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:  12144MB ( 11582 MiB) max;  12137MB ( 11575 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
