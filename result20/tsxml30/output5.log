scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--platform--x86--ideapad-laptop.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_41jsqp3g/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5977: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_integer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_hw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i8042_command to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_report_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_force_update to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4007: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            53569 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  44965 (84%)
  Because of loop head:            8419 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         185 (0%)
  Times precision was empty:       33826 (63%)
  Times precision was {false}:     879 (2%)
  Times result was cached:         18397 (34%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      467 (1%)
  Times result was 'false':        1240 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         62565
  BDD entailment checks:           17141
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       78
Number of predicates discovered:          17
Number of abstraction locations:          80
Max number of predicates per location:    15
Avg number of predicates per location:    1
Total predicates per abstraction:         33458
Max number of predicates per abstraction: 15
Avg number of predicates per abstraction: 24.86
Number of irrelevant predicates:          21171 (63%)
Number of preds handled by boolean abs:   1142 (3%)
  Total number of models for allsat:      3295
  Max number of models for allsat:        512
  Avg number of models for allsat:        7.06

Time for post operator:                  6.650s
  Time for path formula creation:        6.474s
Time for strengthen operator:            0.383s
Time for prec operator:                  7.000s
  Time for abstraction:                  6.318s (Max:     0.260s, Count: 53569)
    Boolean abstraction:                 2.674s
    Solving time:                        0.894s (Max:     0.018s)
    Model enumeration time:              1.886s
    Time for BDD construction:           0.149s (Max:     0.024s)
Time for merge operator:                 0.505s
Time for coverage check:                 0.065s
  Time for BDD entailment checks:        0.044s
Total time for SMT solver (w/o itp):     2.780s

Number of path formula cache hits:   352621 (79%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.220s

Total number of created targets for pointer analysis: 6667
   Number of created targets for uf: *(struct_backlight_device)* is 36
   Number of created targets for uf: *(struct_dentry)* is 21
   Number of created targets for uf: *signed_int is 2120
   Number of created targets for uf: *unsigned_long_long_int is 235
   Number of created targets for uf: *(struct_platform_device)* is 20
   Number of created targets for uf: *(struct_rfkill)* is 97
   Number of created targets for uf: *unsigned_long_int is 48


Number of BDD nodes:                               2634
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        2010 (count: 58724, min: 0, max: 215, avg: 0.03)
Time for BDD node cleanup:                             0.015s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.581s
  Time for transition matches:                         0.280s
  Time for transition assertions:                      0.008s
  Time for transition actions:                         0.001s
Automaton transfers with branching:                0
Automaton transfer successors:                       387183 (count: 387183, min: 1, max: 1, avg: 1.00) [1 x 387183]

CPA algorithm statistics
------------------------
Number of iterations:            231822
Max size of waitlist:            41
Average size of waitlist:        17
Number of computed successors:   272078
Max successors for one state:    2
Number of times merged:          22712
Number of times stopped:         38126
Number of times breaked:         185

Total time for CPA algorithm:        22.352s (Max:     1.701s)
  Time for choose from waitlist:      0.169s
  Time for precision adjustment:      8.719s
  Time for transfer relation:        10.743s
  Time for merge operator:            0.932s
  Time for stop operator:             0.449s
  Time for adding to reached set:     0.400s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   185
Avg. length of target path (in blocks):               12474 (count: 185, min: 8, max: 83, avg: 67.43)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.734s
  Counterexample analysis:                             2.968s (Max:     0.033s, Calls: 185)
    Refinement sat check:                              1.896s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.007s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.055s
  Precision update:                                    0.129s
  ARG update:                                          0.482s

Length of refined path (in blocks):                   11211 (count: 185, min: 4, max: 76, avg: 60.60)
Number of affected states:                             2834 (count: 185, min: 1, max: 72, avg: 15.32)
Length (states) of path with itp 'true':               8192 (count: 185, min: 0, max: 60, avg: 44.28)
Length (states) of path with itp non-trivial itp:      2834 (count: 185, min: 1, max: 72, avg: 15.32)
Length (states) of path with itp 'false':               185 (count: 185, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 185, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            2649 (count: 185, min: 0, max: 71, avg: 14.32)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                185
Number of successful refinements:     185
Number of failed refinements:         0
Max. size of reached set before ref.: 7280
Max. size of reached set after ref.:  3750
Avg. size of reached set before ref.: 4062.91
Avg. size of reached set after ref.:  2813.61

Total time for CEGAR algorithm:      26.926s
Time for refinements:                 4.318s
Average time for refinement:          0.023s
Max time for refinement:              0.095s

Code Coverage
-----------------------------
  Function coverage:      0.320
  Visited lines:          1347
  Total lines:            2094
  Line coverage:          0.643
  Visited conditions:     324
  Total conditions:       632
  Condition coverage:     0.513

CPAchecker general statistics
-----------------------------
Number of program locations:     2853
Number of CFA edges:             3225
Number of relevant variables:    327
Number of functions:             100
Number of loops:                 9
Size of reached set:             1591
  Number of reached locations:   681 (24%)
    Avg states per location:     2
    Max states per location:     20 (at node N149)
  Number of reached functions:   32 (32%)
  Number of partitions:          1589
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N1133 (before line 5355), Function main called from node N1108, stack depth 1 [34b9fc7d], stack [main]])
  Number of target states:       0
  Size of final wait list        19

Time for analysis setup:          2.909s
  Time for loading CPAs:          0.568s
  Time for loading parser:        0.384s
  Time for CFA construction:      1.883s
    Time for parsing file(s):     0.569s
    Time for AST to CFA:          0.583s
    Time for CFA sanity check:    0.161s
    Time for post-processing:     0.468s
      Time for var class.:        0.216s
Time for Analysis:               26.926s
CPU time for analysis:           26.930s
Total time for CPAchecker:       29.838s
Total CPU time for CPAchecker:   29.840s
Time for statistics:              0.073s

Time for Garbage Collector:       0.706s (in 53 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                137MB (   131 MiB) max;     81MB (    77 MiB) avg;    142MB (   135 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     37MB (    35 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        43MB (    41 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:  12081MB ( 11521 MiB) max;  12073MB ( 11514 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
