scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-drivers--platform--x86--ideapad-laptop.ko-main.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_rmsl97cc/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5977: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_complete_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_poweroff_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_prepare_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_freeze_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_noirq_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_thaw_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_resume_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_restore_early_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_ideapad_pm_suspend_late_2 to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_bus_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_unregister_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_remove_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_destroy to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_object to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_evaluate_integer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_set_hw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function i8042_command to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_report_event to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_force_update to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sysfs_create_group to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function sparse_keymap_setup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_register_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function input_free_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_init_sw_state to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rfkill_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_video_backlight_support to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function backlight_device_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4007: Ignoring function call through function pointer *(bd->ops->update_status): (*(bd->ops->update_status))(bd); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 30s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 30s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            65156 (14% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  55049 (84%)
  Because of loop head:            9808 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         299 (0%)
  Times precision was empty:       36626 (56%)
  Times precision was {false}:     878 (1%)
  Times result was cached:         27142 (42%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      510 (1%)
  Times result was 'false':        1561 (2%)
Number of strengthen sat checks:   0
Number of coverage checks:         72825
  BDD entailment checks:           20405
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       78
Number of predicates discovered:          17
Number of abstraction locations:          79
Max number of predicates per location:    15
Avg number of predicates per location:    2
Total predicates per abstraction:         48674
Max number of predicates per abstraction: 15
Avg number of predicates per abstraction: 35.07
Number of irrelevant predicates:          30227 (62%)
Number of preds handled by boolean abs:   1352 (3%)
  Total number of models for allsat:      2709
  Max number of models for allsat:        256
  Avg number of models for allsat:        5.31

Time for post operator:                  5.826s
  Time for path formula creation:        5.643s
Time for strengthen operator:            0.378s
Time for prec operator:                  6.114s
  Time for abstraction:                  5.384s (Max:     0.222s, Count: 65156)
    Boolean abstraction:                 1.869s
    Solving time:                        0.746s (Max:     0.018s)
    Model enumeration time:              1.215s
    Time for BDD construction:           0.178s (Max:     0.034s)
Time for merge operator:                 0.485s
Time for coverage check:                 0.058s
  Time for BDD entailment checks:        0.050s
Total time for SMT solver (w/o itp):     1.961s

Number of path formula cache hits:   453718 (85%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     4.599s

Total number of created targets for pointer analysis: 5965
   Number of created targets for uf: *(struct_backlight_device)* is 34
   Number of created targets for uf: *(struct_dentry)* is 20
   Number of created targets for uf: *signed_int is 17
   Number of created targets for uf: *unsigned_long_long_int is 212
   Number of created targets for uf: *(struct_platform_device)* is 17
   Number of created targets for uf: *(struct_rfkill)* is 91
   Number of created targets for uf: *unsigned_long_int is 40


Number of BDD nodes:                               9306
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        2190 (count: 65099, min: 0, max: 181, avg: 0.03)
Time for BDD node cleanup:                             0.016s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.599s
  Time for transition matches:                         0.316s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.005s
Automaton transfers with branching:                0
Automaton transfer successors:                       459616 (count: 459616, min: 1, max: 1, avg: 1.00) [1 x 459616]

CPA algorithm statistics
------------------------
Number of iterations:            276431
Max size of waitlist:            41
Average size of waitlist:        15
Number of computed successors:   323643
Max successors for one state:    2
Number of times merged:          26210
Number of times stopped:         44587
Number of times breaked:         299

Total time for CPA algorithm:        20.658s (Max:     1.679s)
  Time for choose from waitlist:      0.176s
  Time for precision adjustment:      7.797s
  Time for transfer relation:         9.679s
  Time for merge operator:            0.922s
  Time for stop operator:             0.475s
  Time for adding to reached set:     0.469s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   299
Avg. length of target path (in blocks):               20522 (count: 299, min: 8, max: 83, avg: 68.64)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   4.844s
  Counterexample analysis:                             4.080s (Max:     0.030s, Calls: 299)
    Refinement sat check:                              2.660s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.013s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.054s
  Precision update:                                    0.088s
  ARG update:                                          0.507s

Length of refined path (in blocks):                   19107 (count: 299, min: 4, max: 77, avg: 63.90)
Number of affected states:                             3989 (count: 299, min: 1, max: 66, avg: 13.34)
Length (states) of path with itp 'true':              14819 (count: 299, min: 0, max: 61, avg: 49.56)
Length (states) of path with itp non-trivial itp:      3989 (count: 299, min: 1, max: 66, avg: 13.34)
Length (states) of path with itp 'false':               299 (count: 299, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 299, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3690 (count: 299, min: 0, max: 65, avg: 12.34)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                299
Number of successful refinements:     299
Number of failed refinements:         0
Max. size of reached set before ref.: 8017
Max. size of reached set after ref.:  7281
Avg. size of reached set before ref.: 4678.81
Avg. size of reached set after ref.:  3763.32

Total time for CEGAR algorithm:      26.964s
Time for refinements:                 5.715s
Average time for refinement:          0.019s
Max time for refinement:              0.089s

Code Coverage
-----------------------------
  Function coverage:      0.550
  Visited lines:          1684
  Total lines:            2094
  Line coverage:          0.804
  Visited conditions:     446
  Total conditions:       632
  Condition coverage:     0.706

CPAchecker general statistics
-----------------------------
Number of program locations:     2853
Number of CFA edges:             3225
Number of relevant variables:    327
Number of functions:             100
Number of loops:                 9
Size of reached set:             3763
  Number of reached locations:   1051 (37%)
    Avg states per location:     3
    Max states per location:     128 (at node N106)
  Number of reached functions:   55 (55%)
  Number of partitions:          3757
    Avg size of partitions:      1
    Max size of partitions:      6 (with key [N1133 (before line 5355), Function main called from node N1108, stack depth 1 [cda0432], stack [main]])
  Number of target states:       0
  Size of final wait list        20

Time for analysis setup:          2.901s
  Time for loading CPAs:          0.548s
  Time for loading parser:        0.418s
  Time for CFA construction:      1.879s
    Time for parsing file(s):     0.573s
    Time for AST to CFA:          0.607s
    Time for CFA sanity check:    0.154s
    Time for post-processing:     0.446s
      Time for var class.:        0.210s
Time for Analysis:               26.964s
CPU time for analysis:           26.960s
Total time for CPAchecker:       29.867s
Total CPU time for CPAchecker:   29.860s
Time for statistics:              0.088s

Time for Garbage Collector:       0.753s (in 64 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                135MB (   129 MiB) max;     82MB (    78 MiB) avg;    140MB (   134 MiB) peak
Used non-heap memory:             42MB (    40 MiB) max;     37MB (    36 MiB) avg;     42MB (    40 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        44MB (    42 MiB) max;     40MB (    38 MiB) avg
Total process virtual memory:  12081MB ( 11521 MiB) max;  12072MB ( 11513 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
