scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 9600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-consumption/linux-3.8-rc1-32_7a-drivers--usb--serial--usbserial.ko-ldv_main0_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 9600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_jyscfw6c/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 1.6.1-svn 6608050+ (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

lines 3580-3581: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3584-3585: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

lines 3592-3593: Dead code detected: __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc"); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (4UL) {
  case 1UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 2UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 4UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  case 8UL:
  __asm__ volatile (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
  goto ldv_5527;
  default:
  __xadd_wrong_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 6957: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 7346: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7349: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7352: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_2869;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 7378: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7381: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

line 7384: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6212;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6212;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6212;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
  goto ldv_6212;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8578: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 8946: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 4369: Function pointer *(serial->type->release) with type void (*)(struct usb_serial *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4880: Function pointer *(port->serial->type->break_ctl) with type void (*)(struct tty_struct *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5343: Function pointer *(drv->carrier_raised) with type int (*)(struct usb_serial_port *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5371: Function pointer *(drv->dtr_rts) with type void (*)(struct usb_serial_port *, int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4851: Function pointer *(port->serial->type->set_termios) with type void (*)(struct tty_struct *, struct usb_serial_port *, struct ktermios *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8686: Function pointer *(driver->port_remove) with type int (*)(struct usb_serial_port *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8674: Function pointer *(driver->port_probe) with type int (*)(struct usb_serial_port *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8727: Function pointer *(driver->port_remove) with type int (*)(struct usb_serial_port *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6111: Function pointer *(serial->type->disconnect) with type void (*)(struct usb_serial *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5521: Function pointer *(type->probe) with type int (*)(struct usb_serial *, const struct usb_device_id *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6135: Function pointer *(serial->type->suspend) with type int (*)(struct usb_serial *, pm_message_t ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __tty_alloc_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bus_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_set_operations to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function bus_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_tty_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4533: Ignoring function call through function pointer *(drv->close): (*(drv->close))(port); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_kill_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_get_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_unpoison_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6135: Ignoring function call through function pointer *(serial->type->suspend): r = (*(serial->type->suspend))(serial, message); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_poison_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_submit_urb to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function warn_slowpath_null to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mutex_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_deregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function try_module_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_match_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_match_one_id to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 6111: Ignoring function call through function pointer *(serial->type->disconnect): (*(serial->type->disconnect))(serial); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_vhangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __wake_up to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function cancel_work_sync to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4369: Ignoring function call through function pointer *(serial->type->release): (*(serial->type->release))(serial); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usb_put_intf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usb_put_dev to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function put_device to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function device_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4486: Ignoring function call through function pointer *(port->serial->type->open): retval = (*(port->serial->type->open))(tty, port); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 5371: Ignoring function call through function pointer *(drv->dtr_rts): (*(drv->dtr_rts))(p, on); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tty_port_hangup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_close to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4880: Ignoring function call through function pointer *(port->serial->type->break_ctl): (*(port->serial->type->break_ctl))(tty, break_state); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function tty_termios_copy_hw to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4851: Ignoring function call through function pointer *(port->serial->type->set_termios): (*(port->serial->type->set_termios))(tty, port, old); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 5031: Unsupported feature (recursion): tmp___0 = serial_get_icount(tty, icount); (line was originally pointer call(serial_get_icount) tmp___0 = (*(((port->serial)->type)->get_icount))(tty, icount);) (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            29157 (16% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  24154 (83%)
  Because of loop head:            4741 (16%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         262 (1%)
  Times precision was empty:       8436 (29%)
  Times precision was {false}:     405 (1%)
  Times result was cached:         19452 (67%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      864 (3%)
  Times result was 'false':        1086 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         12399
  BDD entailment checks:           5189
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       74
Number of predicates discovered:          7
Number of abstraction locations:          190
Max number of predicates per location:    6
Avg number of predicates per location:    1
Total predicates per abstraction:         46587
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 36.71
Number of irrelevant predicates:          21002 (45%)
Number of preds handled by boolean abs:   1320 (3%)
  Total number of models for allsat:      879
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.02

Time for post operator:                  3.784s
  Time for path formula creation:        3.673s
Time for strengthen operator:            0.161s
Time for prec operator:                  5.118s
  Time for abstraction:                  4.583s (Max:     0.025s, Count: 29157)
    Boolean abstraction:                 0.605s
    Solving time:                        0.634s (Max:     0.012s)
    Model enumeration time:              0.055s
    Time for BDD construction:           0.081s (Max:     0.009s)
Time for merge operator:                 0.088s
Time for coverage check:                 0.021s
  Time for BDD entailment checks:        0.020s
Total time for SMT solver (w/o itp):     0.689s

Number of path formula cache hits:   182536 (86%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     2.686s

Total number of created targets for pointer analysis: 2244
   Number of created targets for uf: *(struct_list_head)* is 2
   Number of created targets for uf: *(struct_usb_endpoint_descriptor)* is 401
   Number of created targets for uf: *(struct_usb_serial)* is 21
   Number of created targets for uf: *char is 2
   Number of created targets for uf: *unsigned_int is 2


Number of BDD nodes:                               259
Size of BDD node table:                            464047
Size of BDD cache:                                 46411
Size of BDD node cleanup queue:                        1910 (count: 20930, min: 0, max: 271, avg: 0.09)
Time for BDD node cleanup:                             0.003s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.433s
Automaton transfers with branching:                0
Automaton transfer successors:                       184441 (count: 184441, min: 1, max: 1, avg: 1.00) [1 x 184441]

CPA algorithm statistics
------------------------
Number of iterations:            94236
Max size of waitlist:            88
Average size of waitlist:        38
Number of computed successors:   108193
Max successors for one state:    2
Number of times merged:          3605
Number of times stopped:         7470
Number of times breaked:         262

Total time for CPA algorithm:        13.385s (Max:     0.771s)
  Time for choose from waitlist:      0.111s
  Time for precision adjustment:      5.898s
  Time for transfer relation:         6.129s
  Time for merge operator:            0.204s
  Time for stop operator:             0.239s
  Time for adding to reached set:     0.281s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   262
Avg. length of target path (in blocks):                8129 (count: 262, min: 13, max: 50, avg: 31.03)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.261s
  Counterexample analysis:                             2.592s (Max:     0.026s, Calls: 262)
    Refinement sat check:                              1.870s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.003s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.083s
  Precision update:                                    0.197s
  ARG update:                                          0.254s

Length of refined path (in blocks):                    7867 (count: 262, min: 12, max: 49, avg: 30.03)
Number of affected states:                             3429 (count: 262, min: 4, max: 44, avg: 13.09)
Length (states) of path with itp 'true':               4176 (count: 262, min: 1, max: 38, avg: 15.94)
Length (states) of path with itp non-trivial itp:      3429 (count: 262, min: 4, max: 44, avg: 13.09)
Length (states) of path with itp 'false':               262 (count: 262, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 262, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3167 (count: 262, min: 3, max: 43, avg: 12.09)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                262
Number of successful refinements:     262
Number of failed refinements:         0
Max. size of reached set before ref.: 2036
Max. size of reached set after ref.:  1613
Avg. size of reached set before ref.: 1152.95
Avg. size of reached set after ref.:  779.15

Total time for CEGAR algorithm:      17.117s
Time for refinements:                 3.591s
Average time for refinement:          0.013s
Max time for refinement:              0.060s

Code Coverage
-----------------------------
  Function coverage:      0.451
  Visited lines:          1818
  Total lines:            3741
  Line coverage:          0.486
  Visited conditions:     281
  Total conditions:       956
  Condition coverage:     0.294

CPAchecker general statistics
-----------------------------
Number of program locations:     5417
Number of CFA edges:             6110
Number of relevant variables:    792
Number of functions:             224
Number of loops:                 44
Size of reached set:             1703
  Number of reached locations:   995 (18%)
    Avg states per location:     1
    Max states per location:     29 (at node N4469)
  Number of reached functions:   101 (45%)
  Number of partitions:          1703
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0
  Size of final wait list        33

Time for analysis setup:          3.639s
  Time for loading CPAs:          0.602s
  Time for loading parser:        0.416s
  Time for CFA construction:      2.551s
    Time for parsing file(s):     0.630s
    Time for AST to CFA:          0.839s
    Time for CFA sanity check:    0.275s
    Time for post-processing:     0.694s
      Time for var class.:        0.335s
Time for Analysis:               17.117s
CPU time for analysis:           17.110s
Total time for CPAchecker:       20.758s
Total CPU time for CPAchecker:   20.750s
Time for statistics:              0.067s

Time for Garbage Collector:       0.387s (in 31 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                121MB (   115 MiB) max;     75MB (    72 MiB) avg;    128MB (   122 MiB) peak
Used non-heap memory:             41MB (    39 MiB) max;     35MB (    34 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           255MB (   243 MiB) max;    255MB (   243 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:  12081MB ( 11521 MiB) max;  12069MB ( 11510 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
