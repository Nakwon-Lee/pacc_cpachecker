scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---drivers--char--ipmi--ipmi_msghandler.ko_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_wxn46afk/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4307: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

line 4451: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4456: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4466: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4470: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 11313: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 11327: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 11340: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 11728: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11781: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11812: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11897: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 11898: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11939: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11970: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12055: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 12056: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12097: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12128: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12213: Dead code detected: goto ldv_call_2; (CFACreationUtils.addEdgeToCFA, INFO)

line 12214: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12434: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 12448: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12463: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12477: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12495: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12509: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12527: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12541: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12559: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12573: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12591: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12605: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12623: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12637: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12655: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12669: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12687: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12701: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12719: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12733: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12751: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12765: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12783: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12807: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12823: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12866: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13924: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13940: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13956: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13973: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 13990: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

line 14006: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 5301: Function pointer *(w->new_smi) with type void (*)(int, struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5509: Function pointer *(user->handler->ipmi_recv_hndl) with type void (*)(struct ipmi_recv_msg *, void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5205: Function pointer *(watcher->new_smi) with type void (*)(int, struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10434: Function pointer *(intf->handlers->set_need_watch) with type void (*)(void *, bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12379: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12393: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 12407: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6281: Function pointer *(intf->handlers->set_maintenance_mode) with type void (*)(void *, bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10988: Function pointer *(intf->handlers->set_run_to_completion) with type void (*)(void *, bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10779: Function pointer *(intf->handlers->set_run_to_completion) with type void (*)(void *, bool ) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function proc_mkdir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_timer_key to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mod_timer to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11497: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11500: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function PDE_DATA to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11503: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11452: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11455: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11458: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11461: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11464: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11467: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11470: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11473: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11476: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11479: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11420: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12612: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12644: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12676: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12708: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12740: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12772: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12484: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12516: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12548: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12580: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11836: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11872: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11838: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12379: Ignoring call via function pointer ldv_file_operations_instance_write_0_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12379: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11874: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11994: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12030: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11996: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12393: Ignoring call via function pointer ldv_file_operations_instance_write_1_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12393: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12032: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12152: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12188: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12154: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12407: Ignoring call via function pointer ldv_file_operations_instance_write_2_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12407: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 12190: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function proc_remove to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atomic_notifier_chain_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 12832: Ignoring call via function pointer ldv_timer_instance_callback_15_2::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 12832: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9978: Ignoring function call through function pointer *(intf->handlers->sender): (*(intf->handlers->sender))(intf->send_info, newmsg); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_read_lock_held to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11408: Destroying the void* pointer ldv_struct_notifier_block_dummy_resourceless_instance_14::ldv_14_ldv_param_3_2_default produces garbage or the memory pointed by it is unused: ldv_struct_notifier_block_dummy_resourceless_instance_14((void *)cf_arg_14); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10988: Ignoring function call through function pointer *(intf->handlers->set_run_to_completion): (*(intf->handlers->set_run_to_completion))(intf->send_info, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function list_del to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10779: Ignoring function call through function pointer *(intf->handlers->set_run_to_completion): (*(intf->handlers->set_run_to_completion))(intf->send_info, 1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Recursion detected, aborting. To ignore recursion, add -skipRecursion to the command line. (CallstackCPA:CallstackTransferRelation.getAbstractSuccessorsForEdge, INFO)

Error: line 10070: Unsupported feature (recursion): smi_recv_tasklet((unsigned long)intf); (CallstackTransferRelation.getAbstractSuccessorsForEdge, SEVERE)

PredicateCPA statistics
-----------------------
Number of abstractions:            1312308 (34% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  987596 (75%)
  Because of loop head:            277445 (21%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         47267 (4%)
  Times precision was empty:       272193 (21%)
  Times precision was {false}:     840 (0%)
  Times result was cached:         1021453 (78%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      17822 (1%)
  Times result was 'false':        47441 (4%)
Number of strengthen sat checks:   0
Number of coverage checks:         188596
  BDD entailment checks:           166872
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       111
Number of predicates discovered:          48
Number of abstraction locations:          477
Max number of predicates per location:    24
Avg number of predicates per location:    18
Total predicates per abstraction:         19401257
Max number of predicates per abstraction: 24
Avg number of predicates per abstraction: 1039.61
Number of irrelevant predicates:          2608748 (13%)
Number of preds handled by boolean abs:   203357 (1%)
  Total number of models for allsat:      17806
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                 26.516s
  Time for path formula creation:       24.844s
Time for strengthen operator:            3.220s
Time for prec operator:                630.854s
  Time for abstraction:                614.232s (Max:     0.232s, Count: 1312308)
    Boolean abstraction:                13.313s
    Solving time:                        9.172s (Max:     0.027s)
    Model enumeration time:              0.748s
    Time for BDD construction:           0.540s (Max:     0.012s)
Time for merge operator:                 0.232s
Time for coverage check:                 0.230s
  Time for BDD entailment checks:        0.177s
Total time for SMT solver (w/o itp):     9.920s

Number of path formula cache hits:   5049617 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     3.386s

Total number of created targets for pointer analysis: 775
   Number of created targets for uf: *signed_int is 7
   Number of created targets for uf: *unsigned_char is 49
   Number of created targets for uf: *(struct_list_head)* is 14
   Number of created targets for uf: *(struct_timer_list)* is 2


Number of BDD nodes:                               2877
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       40065 (count: 552542, min: 0, max: 396, avg: 0.07)
Time for BDD node cleanup:                             0.124s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  6.353s
  Time for transition matches:                         3.360s
  Time for transition assertions:                      0.003s
  Time for transition actions:                         0.046s
Automaton transfers with branching:                0
Automaton transfer successors:                      3843247 (count: 3843247, min: 1, max: 1, avg: 1.00) [1 x 3843247]

CPA algorithm statistics
------------------------
Number of iterations:            2818789
Max size of waitlist:            52
Average size of waitlist:        12
Number of computed successors:   3036643
Max successors for one state:    2
Number of times merged:          10862
Number of times stopped:         149729
Number of times breaked:         899

Total time for CPA algorithm:       757.841s (Max:     2.266s)
  Time for choose from waitlist:      1.154s
  Time for precision adjustment:    651.261s
  Time for transfer relation:        89.473s
  Time for merge operator:            0.877s
  Time for stop operator:             3.193s
  Time for adding to reached set:     4.194s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   899
Avg. length of target path (in blocks):              264588 (count: 899, min: 33, max: 426, avg: 294.31)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 113.852s
  Counterexample analysis:                           104.479s (Max:     0.284s, Calls: 899)
    Refinement sat check:                             25.770s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.134s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.565s
  Precision update:                                    3.164s
  ARG update:                                          3.536s

Length of refined path (in blocks):                  263572 (count: 899, min: 33, max: 426, avg: 293.18)
Number of affected states:                           262673 (count: 899, min: 32, max: 425, avg: 292.18)
Length (states) of path with itp 'true':                  0 (count: 899, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:    262673 (count: 899, min: 32, max: 425, avg: 292.18)
Length (states) of path with itp 'false':                38 (count: 899, min: 0, max: 1, avg: 0.04)
Different non-trivial interpolants along paths:         865 (count: 899, min: 0, max: 2, avg: 0.96)
Equal non-trivial interpolants along paths:          260909 (count: 899, min: 29, max: 423, avg: 290.22)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                899
Number of successful refinements:     899
Number of failed refinements:         0
Max. size of reached set before ref.: 5389
Max. size of reached set after ref.:  3
Avg. size of reached set before ref.: 3155.79
Avg. size of reached set after ref.:  3.00

Total time for CEGAR algorithm:     874.700s
Time for refinements:               116.832s
Average time for refinement:          0.129s
Max time for refinement:              0.315s

Code Coverage
-----------------------------
  Function coverage:      0.240
  Visited lines:          2216
  Total lines:            6827
  Line coverage:          0.325
  Visited conditions:     252
  Total conditions:       1796
  Condition coverage:     0.140

CPAchecker general statistics
-----------------------------
Number of program locations:     10550
Number of CFA edges:             12142
Number of relevant variables:    1550
Number of functions:             718
Number of loops:                 72
Size of reached set:             5118
  Number of reached locations:   1275 (12%)
    Avg states per location:     4
    Max states per location:     211 (at node N7451)
  Number of reached functions:   172 (24%)
  Number of partitions:          5102
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N4697 (before line 11074), Function ipmi_init_msghandler_mod called from node N4732, stack depth 4 [3027ab53], stack [main, ldv_entry_EMGentry_20, ldv_EMGentry_init_ipmi_init_msghandler_mod_20_13, ipmi_init_msghandler_mod]])
  Number of target states:       0
  Size of final wait list        40

Time for analysis setup:          7.880s
  Time for loading CPAs:          1.218s
  Time for loading parser:        0.693s
  Time for CFA construction:      5.842s
    Time for parsing file(s):     1.343s
    Time for AST to CFA:          2.213s
    Time for CFA sanity check:    0.618s
    Time for post-processing:     1.441s
      Time for var class.:        0.773s
Time for Analysis:              874.700s
CPU time for analysis:          874.620s
Total time for CPAchecker:      882.585s
Total CPU time for CPAchecker:  882.480s
Time for statistics:              0.226s

Time for Garbage Collector:      31.201s (in 5675 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                136MB (   130 MiB) max;     84MB (    80 MiB) avg;    139MB (   132 MiB) peak
Used non-heap memory:             46MB (    44 MiB) max;     43MB (    41 MiB) avg;     46MB (    44 MiB) peak
Allocated heap memory:           140MB (   133 MiB) max;    130MB (   124 MiB) avg
Allocated non-heap memory:        48MB (    46 MiB) max;     48MB (    45 MiB) avg
Total process virtual memory:   8223MB (  7842 MiB) max;   8157MB (  7779 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
