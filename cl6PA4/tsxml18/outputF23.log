scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---drivers--hwmon--nct6775.ko_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_ynk61821/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 11050: Dead code detected: return (arg0); (CFACreationUtils.addEdgeToCFA, INFO)

line 12204: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12229: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12281: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12311: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12341: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 12373: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12890: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12925: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12945: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 12980: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13000: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13035: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13055: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13090: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13110: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13145: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13165: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13200: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13220: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13255: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13275: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13310: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13330: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13365: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13385: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13420: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13440: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13474: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13494: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13529: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13549: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13584: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13604: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13639: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13659: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13694: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13714: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13749: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13769: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13804: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13824: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13859: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13879: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13914: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13934: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13969: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 13989: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14043: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14077: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14097: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14131: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14151: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14185: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14205: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14239: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14259: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14293: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14313: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14347: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14361: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14376: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14390: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14405: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14419: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14434: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14448: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14463: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14477: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 14492: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 15081: Dead code detected: return (ldv_func_res); (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 12626: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17511: Function pointer *function with type void (*)(void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 17530: Function pointer *function with type void (*)(void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6054: Function pointer *(data->fan_from_reg) with type unsigned int (*)(u16 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6568: Function pointer *(data->fan_from_reg_min) with type unsigned int (*)(u16 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 4316: Function pointer *(pv_cpu_ops.io_delay) with type void (*)() is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6675: Function pointer *(data->fan_from_reg_min) with type unsigned int (*)(u16 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6666: Function pointer *(data->fan_from_reg_min) with type unsigned int (*)(u16 , unsigned int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function __platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11273: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11276: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11279: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11282: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11285: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add_data to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __memset to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function acpi_check_resource_conflict to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add_resources to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_device_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_pr_debug to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4316: Ignoring function call through function pointer *(pv_cpu_ops.io_delay): (*(pv_cpu_ops.io_delay))(); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 11173: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13447: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function kstrtoull to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 11176: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13996: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11179: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14050: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11182: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14104: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11185: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___3 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14158: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11188: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___4 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14212: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11191: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14266: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11194: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 14320: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11197: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12897: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11200: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 12952: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11203: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___9 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13007: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11206: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___10 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13062: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11209: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___11 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13117: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11212: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___12 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13172: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11215: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___13 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13227: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11218: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___14 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13282: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11221: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___15 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13337: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11224: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___16 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13392: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11227: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___17 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13501: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11230: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___18 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function kstrtoll to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 13556: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11233: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___19 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13611: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11236: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___20 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13666: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11239: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___21 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13721: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11242: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___22 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13776: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11245: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___23 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11248: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___24 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13831: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11251: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___25 = ldv_xmalloc(16UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13886: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 13941: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            1109587 (26% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  917447 (83%)
  Because of loop head:            160706 (14%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         31434 (3%)
  Times precision was empty:       225805 (20%)
  Times precision was {false}:     1216 (0%)
  Times result was cached:         860007 (78%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      22559 (2%)
  Times result was 'false':        37521 (3%)
Number of strengthen sat checks:   0
Number of coverage checks:         673947
  BDD entailment checks:           113393
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       252
Number of predicates discovered:          51
Number of abstraction locations:          589
Max number of predicates per location:    24
Avg number of predicates per location:    14
Total predicates per abstraction:         13796615
Max number of predicates per abstraction: 24
Avg number of predicates per abstraction: 580.30
Number of irrelevant predicates:          5373888 (39%)
Number of preds handled by boolean abs:   176387 (1%)
  Total number of models for allsat:      22366
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.99

Time for post operator:                 59.527s
  Time for path formula creation:       57.967s
Time for strengthen operator:            3.845s
Time for prec operator:                465.277s
  Time for abstraction:                444.409s (Max:     0.400s, Count: 1109587)
    Boolean abstraction:                57.908s
    Solving time:                       46.502s (Max:     0.313s)
    Model enumeration time:             11.900s
    Time for BDD construction:           0.610s (Max:     0.013s)
Time for merge operator:                 6.295s
Time for coverage check:                 0.245s
  Time for BDD entailment checks:        0.171s
Total time for SMT solver (w/o itp):    58.402s

Number of path formula cache hits:   5400197 (97%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:    11.601s

Total number of created targets for pointer analysis: 25185
   Number of created targets for uf: *enum_kinds is 25
   Number of created targets for uf: *signed_int is 64
   Number of created targets for uf: *unsigned_char is 1795
   Number of created targets for uf: *_Bool is 685
   Number of created targets for uf: *unsigned_long_long_int is 16
   Number of created targets for uf: *(struct_platform_device)* is 31
   Number of created targets for uf: *(struct_platform_driver)* is 2
   Number of created targets for uf: *unsigned_long_int is 8


Number of BDD nodes:                               4830
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                       55774 (count: 486254, min: 0, max: 404, avg: 0.11)
Time for BDD node cleanup:                             0.120s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  5.635s
  Time for transition matches:                         2.759s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.030s
Automaton transfers with branching:                0
Automaton transfer successors:                      4231749 (count: 4231749, min: 1, max: 1, avg: 1.00) [1 x 4231749]

CPA algorithm statistics
------------------------
Number of iterations:            3010060
Max size of waitlist:            59
Average size of waitlist:        15
Number of computed successors:   3449745
Max successors for one state:    2
Number of times merged:          280277
Number of times stopped:         381759
Number of times breaked:         766

Total time for CPA algorithm:       629.177s (Max:     2.945s)
  Time for choose from waitlist:      1.381s
  Time for precision adjustment:    486.899s
  Time for transfer relation:       114.503s
  Time for merge operator:            9.201s
  Time for stop operator:             3.931s
  Time for adding to reached set:     4.706s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   766
Avg. length of target path (in blocks):              232994 (count: 766, min: 39, max: 605, avg: 304.17)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 258.686s
  Counterexample analysis:                           250.084s (Max:     0.823s, Calls: 766)
    Refinement sat check:                            148.651s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.122s
  Error path post-processing:                          0.000s
  Predicate creation:                                  1.155s
  Precision update:                                    2.406s
  ARG update:                                          4.120s

Length of refined path (in blocks):                  231317 (count: 766, min: 19, max: 605, avg: 301.98)
Number of affected states:                           204900 (count: 766, min: 1, max: 604, avg: 267.49)
Length (states) of path with itp 'true':              25651 (count: 766, min: 0, max: 231, avg: 33.49)
Length (states) of path with itp non-trivial itp:    204900 (count: 766, min: 1, max: 604, avg: 267.49)
Length (states) of path with itp 'false':                42 (count: 766, min: 0, max: 1, avg: 0.05)
Different non-trivial interpolants along paths:         724 (count: 766, min: 0, max: 1, avg: 0.95)
Equal non-trivial interpolants along paths:          203410 (count: 766, min: 0, max: 602, avg: 265.55)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                766
Number of successful refinements:     766
Number of failed refinements:         0
Max. size of reached set before ref.: 10204
Max. size of reached set after ref.:  6871
Avg. size of reached set before ref.: 4858.99
Avg. size of reached set after ref.:  908.32

Total time for CEGAR algorithm:     891.775s
Time for refinements:               262.118s
Average time for refinement:          0.342s
Max time for refinement:              0.849s

Code Coverage
-----------------------------
  Function coverage:      0.166
  Visited lines:          1730
  Total lines:            7131
  Line coverage:          0.243
  Visited conditions:     338
  Total conditions:       1672
  Condition coverage:     0.202

CPAchecker general statistics
-----------------------------
Number of program locations:     10536
Number of CFA edges:             12020
Number of relevant variables:    1933
Number of functions:             650
Number of loops:                 75
Size of reached set:             4251
  Number of reached locations:   969 (9%)
    Avg states per location:     4
    Max states per location:     107 (at node N99)
  Number of reached functions:   108 (17%)
  Number of partitions:          4229
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N4809 (before line 10549), Function sensors_nct6775_init called from node N4868, stack depth 4 [91b4a8d], stack [main, ldv_entry_EMGentry_36, ldv_EMGentry_init_sensors_nct6775_init_36_11, sensors_nct6775_init]])
  Number of target states:       0
  Size of final wait list        12

Time for analysis setup:          8.454s
  Time for loading CPAs:          1.273s
  Time for loading parser:        0.708s
  Time for CFA construction:      6.303s
    Time for parsing file(s):     1.455s
    Time for AST to CFA:          2.379s
    Time for CFA sanity check:    0.625s
    Time for post-processing:     1.640s
      Time for var class.:        0.946s
Time for Analysis:              891.775s
CPU time for analysis:          891.650s
Total time for CPAchecker:      900.234s
Total CPU time for CPAchecker:  900.080s
Time for statistics:              0.213s

Time for Garbage Collector:      26.021s (in 2666 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                227MB (   216 MiB) max;    133MB (   127 MiB) avg;    236MB (   225 MiB) peak
Used non-heap memory:             47MB (    45 MiB) max;     42MB (    40 MiB) avg;     48MB (    45 MiB) peak
Allocated heap memory:           244MB (   232 MiB) max;    197MB (   188 MiB) avg
Allocated non-heap memory:        49MB (    47 MiB) max;     49MB (    47 MiB) avg
Total process virtual memory:   8492MB (  8099 MiB) max;   8294MB (  7910 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
