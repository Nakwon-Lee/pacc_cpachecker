scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.7.3/linux-3.10-rc1-43_1a-bitvector-drivers--atm--he.ko-ldv_main0_true-unreach-call.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hvpvgdek/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

line 5648: Dead code detected: __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5651: Dead code detected: __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

line 5654: Dead code detected: __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task)); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
  case 1UL:
  __asm__ ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 2UL:
  __asm__ ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 4UL:
  __asm__ ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  case 8UL:
  __asm__ ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
  goto ldv_3012;
  default:
  __bad_percpu_size();
  } (CFACreationUtils.addEdgeToCFA, INFO)

line 8835: Dead code detected: tmp___1 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8840: Dead code detected: tmp___2 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8845: Dead code detected: tmp___3 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___1 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret), "+m" (tmp___1->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 2UL:
    tmp___2 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret), "+m" (tmp___2->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 4UL:
    tmp___3 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret), "+m" (tmp___3->state): : "memory",
                         "cc");
    goto ldv_44603;
    case 8UL:
    tmp___4 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret), "+m" (tmp___4->state): : "memory",
                         "cc");
    goto ldv_44603;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8869: Dead code detected: tmp___6 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8874: Dead code detected: tmp___7 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8879: Dead code detected: tmp___8 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___6 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___0), "+m" (tmp___6->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 2UL:
    tmp___7 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___0), "+m" (tmp___7->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 4UL:
    tmp___8 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___0), "+m" (tmp___8->state): : "memory",
                         "cc");
    goto ldv_44611;
    case 8UL:
    tmp___9 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___0), "+m" (tmp___9->state): : "memory",
                         "cc");
    goto ldv_44611;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8951: Dead code detected: tmp___12 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8956: Dead code detected: tmp___13 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8961: Dead code detected: tmp___14 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___12 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___1), "+m" (tmp___12->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 2UL:
    tmp___13 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___1), "+m" (tmp___13->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 4UL:
    tmp___14 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___1), "+m" (tmp___14->state): : "memory",
                         "cc");
    goto ldv_44629;
    case 8UL:
    tmp___15 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___1), "+m" (tmp___15->state): : "memory",
                         "cc");
    goto ldv_44629;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

line 8983: Dead code detected: tmp___17 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8988: Dead code detected: tmp___18 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

line 8993: Dead code detected: tmp___19 = get_current(); (CFACreationUtils.addEdgeToCFA, INFO)

none: Dead code detected: switch (8UL) {
    case 1UL:
    tmp___17 = get_current();
    __asm__ volatile ("xchgb %b0, %1\n": "+q" (__ret___2), "+m" (tmp___17->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 2UL:
    tmp___18 = get_current();
    __asm__ volatile ("xchgw %w0, %1\n": "+r" (__ret___2), "+m" (tmp___18->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 4UL:
    tmp___19 = get_current();
    __asm__ volatile ("xchgl %0, %1\n": "+r" (__ret___2), "+m" (tmp___19->state): : "memory",
                         "cc");
    goto ldv_44637;
    case 8UL:
    tmp___20 = get_current();
    __asm__ volatile ("xchgq %q0, %1\n": "+r" (__ret___2), "+m" (tmp___20->state): : "memory",
                         "cc");
    goto ldv_44637;
    default:
    __xchg_wrong_size();
    } (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 6065: Function pointer *(ops->alloc) with type void *(*)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 6098: Function pointer *(ops->free) with type void (*)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5954-5955: Function pointer *(ops->map_page) with type dma_addr_t (*)(struct device *, struct page *, unsigned long, size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 5988: Function pointer *(ops->unmap_page) with type void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7830: Function pointer *(he_dev->atm_dev->phy->start) with type int (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 7902: Function pointer *(he_dev->atm_dev->phy->stop) with type int (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 8403: Function pointer *(he_dev->atm_dev->phy->interrupt) with type void (*)(struct atm_dev *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_handler_precall to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __pci_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_final_state to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function pci_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __init_waitqueue_head to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function atm_pcr_goal to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function msleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dma_pool_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function add_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __list_add to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function schedule_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function remove_wait_queue to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __const_udelay to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_kfree_skb_any to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8525: Ignoring function call through function pointer *(tpd->vcc->pop): (*(tpd->vcc->pop))(tpd->vcc, tpd->skb); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function dma_pool_free to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 5988: Ignoring function call through function pointer *(ops->unmap_page): (*(ops->unmap_page))(dev, addr, size, dir, attrs); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function debug_dma_unmap_page to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

What!
Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            44535 (27% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  37815 (85%)
  Because of loop head:            6646 (15%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         74 (0%)
  Times precision was empty:       9267 (21%)
  Times precision was {false}:     640 (1%)
  Times result was cached:         33178 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1450 (3%)
  Times result was 'false':        296 (1%)
Number of strengthen sat checks:   0
Number of coverage checks:         11002
  BDD entailment checks:           6938
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          4
Number of abstraction locations:          85
Max number of predicates per location:    2
Avg number of predicates per location:    1
Total predicates per abstraction:         38661
Max number of predicates per abstraction: 2
Avg number of predicates per abstraction: 18.50
Number of irrelevant predicates:          18975 (49%)
Number of preds handled by boolean abs:   1584 (4%)
  Total number of models for allsat:      1452
  Max number of models for allsat:        2
  Avg number of models for allsat:        1.00

Time for post operator:                  6.083s
  Time for path formula creation:        5.916s
Time for strengthen operator:            0.310s
Time for prec operator:                  8.664s
  Time for abstraction:                  7.571s (Max:     0.029s, Count: 44535)
    Boolean abstraction:                 1.277s
    Solving time:                        1.316s (Max:     0.015s)
    Model enumeration time:              0.114s
    Time for BDD construction:           0.177s (Max:     0.014s)
Time for merge operator:                 0.203s
Time for coverage check:                 0.088s
  Time for BDD entailment checks:        0.076s
Total time for SMT solver (w/o itp):     1.430s

Number of path formula cache hits:   125500 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     5.006s

Total number of created targets for pointer analysis: 204
   Number of created targets for uf: *(void)* is 34
   Number of created targets for uf: *signed_int is 34
   Number of created targets for uf: *(Return_type:_[void],_Parameters:_2,_Parameter_1_type:_[(struct_atm_vcc)*],_Parameter_2_type:_[(struct_sk_buff)*],_VarArgs:_false)* is 2
   Number of created targets for uf: *(struct_list_head)* is 34


Number of BDD nodes:                               210
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        2903 (count: 28270, min: 0, max: 246, avg: 0.10)
Time for BDD node cleanup:                             0.021s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.620s
  Time for transition matches:                         0.325s
  Time for transition assertions:                      0.000s
  Time for transition actions:                         0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                       165888 (count: 165888, min: 1, max: 1, avg: 1.00) [1 x 165888]

CPA algorithm statistics
------------------------
Number of iterations:            121237
Max size of waitlist:            50
Average size of waitlist:        26
Number of computed successors:   129515
Max successors for one state:    2
Number of times merged:          2032
Number of times stopped:         7157
Number of times breaked:         74

Total time for CPA algorithm:        25.180s (Max:     1.698s)
  Time for choose from waitlist:      0.168s
  Time for precision adjustment:     10.263s
  Time for transfer relation:        12.265s
  Time for merge operator:            0.402s
  Time for stop operator:             0.536s
  Time for adding to reached set:     0.418s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   74
Avg. length of target path (in blocks):                8716 (count: 74, min: 10, max: 314, avg: 117.78)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   3.850s
  Counterexample analysis:                             2.427s (Max:     0.126s, Calls: 74)
    Refinement sat check:                              0.942s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.016s
  Error path post-processing:                          0.653s
  Predicate creation:                                  0.111s
  Precision update:                                    0.066s
  ARG update:                                          0.476s

Length of refined path (in blocks):                    8457 (count: 73, min: 4, max: 304, avg: 115.85)
Number of affected states:                             3557 (count: 73, min: 3, max: 296, avg: 48.73)
Length (states) of path with itp 'true':               4827 (count: 73, min: 0, max: 257, avg: 66.12)
Length (states) of path with itp non-trivial itp:      3557 (count: 73, min: 3, max: 296, avg: 48.73)
Length (states) of path with itp 'false':                73 (count: 73, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:           0 (count: 73, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:            3484 (count: 73, min: 2, max: 295, avg: 47.73)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                74
Number of successful refinements:     73
Number of failed refinements:         0
Max. size of reached set before ref.: 3732
Max. size of reached set after ref.:  1755
Avg. size of reached set before ref.: 2213.16
Avg. size of reached set after ref.:  571.38

Total time for CEGAR algorithm:      29.487s
Time for refinements:                 4.247s
Average time for refinement:          0.057s
Max time for refinement:              0.709s

Code Coverage
-----------------------------
  Function coverage:      0.355
  Visited lines:          1479
  Total lines:            3506
  Line coverage:          0.422
  Visited conditions:     156
  Total conditions:       670
  Condition coverage:     0.233

CPAchecker general statistics
-----------------------------
Number of program locations:     4804
Number of CFA edges:             5526
Number of relevant variables:    612
Number of functions:             121
Number of loops:                 50
Size of reached set:             1626
  Number of reached locations:   530 (11%)
    Avg states per location:     3
    Max states per location:     56 (at node N133)
  Number of reached functions:   43 (36%)
  Number of partitions:          1625
    Avg size of partitions:      1
    Max size of partitions:      2 (with key [N3935 (before line 9678), Function main called from node N3807, stack depth 1 [1305c126], stack [main]])
  Number of target states:       1
  Size of final wait list        21

Time for analysis setup:          6.961s
  Time for loading CPAs:          1.101s
  Time for loading parser:        0.665s
  Time for CFA construction:      4.949s
    Time for parsing file(s):     1.172s
    Time for AST to CFA:          1.975s
    Time for CFA sanity check:    0.281s
    Time for post-processing:     1.224s
      Time for var class.:        0.599s
Time for Analysis:               29.487s
CPU time for analysis:           29.490s
Time for analyzing result:        0.010s
Total time for CPAchecker:       36.452s
Total CPU time for CPAchecker:   36.440s
Time for statistics:              0.137s

Time for Garbage Collector:       0.844s (in 68 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 83MB (    79 MiB) max;     53MB (    50 MiB) avg;     86MB (    82 MiB) peak
Used non-heap memory:             40MB (    38 MiB) max;     35MB (    34 MiB) avg;     40MB (    39 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     37MB (    35 MiB) avg
Total process virtual memory:   8086MB (  7712 MiB) max;   8074MB (  7700 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 9873) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
