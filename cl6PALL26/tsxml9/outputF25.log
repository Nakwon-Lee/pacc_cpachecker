scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--tty--serial--xilinx_uartps.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_wp04jghq/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function ldv_initialize to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_register_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_unregister_driver to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_port_tty_get to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioread32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iowrite32 to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock_irqrestore to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_kref_put to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_resume_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_suspend_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_check_return_value to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __request_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ioremap_nocache to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __release_region to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function iounmap to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function request_threaded_irq to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __raw_spin_lock_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_set_drvdata to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_add_one_port to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_write_wakeup to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_get_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_termios_encode_baud_rate to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_update_timeout to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_unlock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function tty_flip_buffer_push to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _raw_spin_lock to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function uart_insert_char to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            149 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            130 (87%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         19 (13%)
  Times precision was empty:       44 (30%)
  Times precision was {false}:     17 (11%)
  Times result was cached:         68 (46%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      20 (13%)
  Times result was 'false':        12 (8%)
Number of strengthen sat checks:   0
Number of coverage checks:         1151
  BDD entailment checks:           85
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       214
Number of predicates discovered:          2
Number of abstraction locations:          8
Max number of predicates per location:    1
Avg number of predicates per location:    1
Total predicates per abstraction:         105
Max number of predicates per abstraction: 1
Avg number of predicates per abstraction: 2.84
Number of irrelevant predicates:          43 (41%)
Number of preds handled by boolean abs:   20 (19%)
  Total number of models for allsat:      20
  Max number of models for allsat:        1
  Avg number of models for allsat:        1.00

Time for post operator:                  1.430s
  Time for path formula creation:        1.377s
Time for strengthen operator:            0.062s
Time for prec operator:                  0.852s
  Time for abstraction:                  0.800s (Max:     0.129s, Count: 149)
    Boolean abstraction:                 0.217s
    Solving time:                        0.311s (Max:     0.072s)
    Model enumeration time:              0.011s
    Time for BDD construction:           0.004s (Max:     0.001s)
Time for merge operator:                 0.355s
Time for coverage check:                 0.001s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.322s

Number of path formula cache hits:   12975 (70%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.293s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               202
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                          37 (count: 341, min: 0, max: 12, avg: 0.11)
Time for BDD node cleanup:                             0.005s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.205s
Automaton transfers with branching:                0
Automaton transfer successors:                        17925 (count: 17925, min: 1, max: 1, avg: 1.00) [1 x 17925]

CPA algorithm statistics
------------------------
Number of iterations:            4803
Max size of waitlist:            27
Average size of waitlist:        13
Number of computed successors:   5544
Max successors for one state:    2
Number of times merged:          533
Number of times stopped:         599
Number of times breaked:         7

Total time for CPA algorithm:         4.366s (Max:     0.933s)
  Time for choose from waitlist:      0.029s
  Time for precision adjustment:      1.177s
  Time for transfer relation:         2.487s
  Time for merge operator:            0.441s
  Time for stop operator:             0.040s
  Time for adding to reached set:     0.055s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   7
Avg. length of target path (in blocks):                  23 (count: 7, min: 1, max: 5, avg: 3.29)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.188s
  Counterexample analysis:                             0.107s (Max:     0.022s, Calls: 7)
    Refinement sat check:                              0.088s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.011s
  Precision update:                                    0.007s
  ARG update:                                          0.049s

Length of refined path (in blocks):                      23 (count: 7, min: 1, max: 5, avg: 3.29)
Number of affected states:                               16 (count: 7, min: 0, max: 4, avg: 2.29)
Length (states) of path with itp 'true':                  0 (count: 7, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        16 (count: 7, min: 0, max: 4, avg: 2.29)
Length (states) of path with itp 'false':                 0 (count: 7, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           0 (count: 7, min: 0, max: 0, avg: 0.00)
Equal non-trivial interpolants along paths:              10 (count: 7, min: 0, max: 3, avg: 1.43)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                7
Number of successful refinements:     7
Number of failed refinements:         0
Max. size of reached set before ref.: 930
Max. size of reached set after ref.:  29
Avg. size of reached set before ref.: 629.71
Avg. size of reached set after ref.:  28.57

Total time for CEGAR algorithm:       4.593s
Time for refinements:                 0.227s
Average time for refinement:          0.032s
Max time for refinement:              0.040s

Code Coverage
-----------------------------
  Function coverage:      0.773
  Visited lines:          2543
  Total lines:            2620
  Line coverage:          0.971
  Visited conditions:     190
  Total conditions:       212
  Condition coverage:     0.896

CPAchecker general statistics
-----------------------------
Number of program locations:     2932
Number of CFA edges:             3041
Number of relevant variables:    516
Number of functions:             44
Number of loops:                 7
Size of reached set:             726
  Number of reached locations:   601 (20%)
    Avg states per location:     1
    Max states per location:     6 (at node N2224)
  Number of reached functions:   34 (77%)
  Number of partitions:          726
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          5.362s
  Time for loading CPAs:          0.922s
  Time for loading parser:        0.787s
  Time for CFA construction:      3.493s
    Time for parsing file(s):     0.987s
    Time for AST to CFA:          1.164s
    Time for CFA sanity check:    0.296s
    Time for post-processing:     0.904s
      Time for var class.:        0.410s
Time for Analysis:                4.593s
CPU time for analysis:            4.580s
Time for analyzing result:        0.000s
Total time for CPAchecker:        9.962s
Total CPU time for CPAchecker:    9.940s
Time for statistics:              0.114s

Time for Garbage Collector:       0.220s (in 11 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 65MB (    62 MiB) max;     37MB (    36 MiB) avg;     69MB (    66 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     28MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8133MB (  7756 MiB) max;   8094MB (  7719 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
