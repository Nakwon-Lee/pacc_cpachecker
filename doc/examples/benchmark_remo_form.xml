<?xml version="1.0"?>
<!DOCTYPE benchmark SYSTEM "benchmark.dtd">
<!--
  Example file that demonstrates the use of CPAchecker.
  This file can and should be used as a base for building own benchmark definitions.
-->
<benchmark tool="cpachecker" timelimit="900" hardtimelimit="990" memlimit="8000" cpuCores="1">

  <!-- Note that all paths to ../../test/programs need to be changed if you move this file. -->

  <!-- Global sourcefiles are used in every run definition. -->
  <sourcefiles name="simple">
    <includesfile>/home/spiral/pacc_cpachecker/sv-comp/Simple.set</includesfile>
  </sourcefiles>

  <!-- Global options for all run definitions. -->
  <!-- Set the Java heap size to some value lower than the memlimit.
       Note that Java does not use SI units, but IEC units (factor 1024). -->
  <option name="-heap">7000M</option>

  <!--
    Always use property files as specification
    to guarantee correct interpretation of the results.
    The following will use the file ALL.prp in the same directory as the source file.
  -->
  <propertyfile>/home/spiral/pacc_cpachecker/sv-comp/PropertyERROR.prp</propertyfile>


  <!-- For final benchmarks for performance measurement, disable assertions. -->
  <!-- <option name="-disable-java-assertions"/> -->

  <!--
    Do not use the shortcut configurations such as -predicateAnalysis
    or -explicitAnalysis, instead use the long names
    to have more meaningful names in the result tables.
  -->

  <rundefinition name="Dy-BlkBFS-ABEl">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-ABEl"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="Dy-BlkBFS-ABEl-FC">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-ABEl-FC"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="Dy-BlkBFS-lf">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-lf"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="Dy-BlkBFS-lf-FC">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-lf-FC"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="Dy-BlkBFS-PredAbs-ABEl">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-PredAbs-ABEl"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <rundefinition name="Dy-BlkBFS-PredAbs-ABElf">
    <!-- Recommended option "-noout", as the CPAchecker output files
         are normally not interesting for benchmarks. -->
    <option name="-Dy-BlkBFS-PredAbs-ABElf"/>
    <option name="-preprocess"/>
    <option name="-noout"/>
  </rundefinition>

  <!--
    Search the CPAchecker output for some values.
    The <column> tag has the pattern as content,
    and the script will try to extract a numerical value from matching lines.
    "numberOfDigits" gives the number of digits after the decimal separator,
    "title" the name of the column in the table.
    Both attributes are optional.
    These tags are not necessary here,
    statistics can still be extracted after the benchmark run.
  <columns>
    <column title="total" numberOfDigits="1">time for CPAchecker</column>
    <column title="reached">reached set</column>
  </columns>
  -->
</benchmark>
