scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ldv-linux-4.0-rc1-mav/linux-4.0-rc1---drivers--mtd--devices--docg3.ko_true-unreach-call.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_pp71e56p/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 4692: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4697: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4707: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4711: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 4742: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4747: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4757: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4761: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 4820: Dead code detected: Goto: case_1 (CFACreationUtils.addEdgeToCFA, INFO)

line 4825: Dead code detected: Goto: case_2 (CFACreationUtils.addEdgeToCFA, INFO)

line 4835: Dead code detected: Goto: case_8 (CFACreationUtils.addEdgeToCFA, INFO)

line 4839: Dead code detected: Goto: switch_default (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label case_8 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_default is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_1 is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label case_2 is not reachable. (CFAFunctionBuilder.leave, INFO)

line 4898: Dead code detected: return (1); (CFACreationUtils.addEdgeToCFA, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

Dead code detected: Label switch_break is not reachable. (CFAFunctionBuilder.leave, INFO)

line 9222: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9275: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9306: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9391: Dead code detected: goto ldv_call_0; (CFACreationUtils.addEdgeToCFA, INFO)

line 9392: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9433: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9464: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9549: Dead code detected: goto ldv_call_1; (CFACreationUtils.addEdgeToCFA, INFO)

line 9550: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9591: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9622: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9707: Dead code detected: goto ldv_call_2; (CFACreationUtils.addEdgeToCFA, INFO)

line 9708: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9749: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9780: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 9865: Dead code detected: goto ldv_call_3; (CFACreationUtils.addEdgeToCFA, INFO)

line 9866: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10139: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10252: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10282: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10320: Dead code detected: goto ldv_call_4; (CFACreationUtils.addEdgeToCFA, INFO)

line 10327: Dead code detected: goto ldv_call_4; (CFACreationUtils.addEdgeToCFA, INFO)

line 10328: Dead code detected: goto ldv_call_4; (CFACreationUtils.addEdgeToCFA, INFO)

line 10364: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10394: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 10432: Dead code detected: goto ldv_call_5; (CFACreationUtils.addEdgeToCFA, INFO)

line 10439: Dead code detected: goto ldv_call_5; (CFACreationUtils.addEdgeToCFA, INFO)

line 10440: Dead code detected: goto ldv_call_5; (CFACreationUtils.addEdgeToCFA, INFO)

line 10468: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11005: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11039: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11059: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11093: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11111: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 11155: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

line 11161: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

line 11162: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

line 11168: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

line 11169: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

line 11170: Dead code detected: goto ldv_call_9; (CFACreationUtils.addEdgeToCFA, INFO)

Inline assembler ignored, analysis is probably unsound! (CFABuilder.createCFA, WARNING)

line 10082: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10096: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10110: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10124: Function pointer *arg0 with type long int (*)(struct file *, char *, unsigned long, long long *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10741: Function pointer *arg0 with type void (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10752: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10763: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10774: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10785: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10796: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10807: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10818: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10829: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10840: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10851: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10862: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10873: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10884: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10895: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10906: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10917: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10928: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10939: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10950: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10961: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10972: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 10983: Function pointer *arg0 with type int (*)(struct device *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13897: Function pointer *function with type void (*)(void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

line 13916: Function pointer *function with type void (*)(void *) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

lines 5201-5202: Function pointer *((void (*)(void *, int, int, u16 , int))it_func) with type void (*)(void *, int, int, u16 , int) is called, but no possible target functions were found. (CFunctionPointerResolver.replaceFunctionPointerCall, WARNING)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function __platform_driver_probe to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9057: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function platform_driver_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ldv_pre_probe to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function platform_get_resource to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function devm_kmalloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __mutex_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function init_bch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function dev_err to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9060: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function ldv_after_alloc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function __dynamic_dev_dbg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debug_lockdep_rcu_enabled to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_is_watching to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function rcu_lockdep_current_cpu_online to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lock_is_held to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 4616: Return type of function __builtin_unreachable is void, but result is used as type int: __builtin_unreachable(); (PredicateCPA:CtoFormulaConverter.getReturnType, WARNING)

Assuming external function __builtin_unreachable to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function lockdep_rcu_suspicious to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_device_parse_register to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function _dev_info to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function free_bch to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8965: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9032: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function debugfs_create_dir to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function debugfs_remove_recursive to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 10818: Ignoring call via function pointer ldv_pm_ops_instance_prepare_6_22::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10818: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10785: Ignoring call via function pointer ldv_pm_ops_instance_poweroff_6_9::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10785: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10807: Ignoring call via function pointer ldv_pm_ops_instance_poweroff_noirq_6_6::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10807: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10851: Ignoring call via function pointer ldv_pm_ops_instance_restore_noirq_6_5::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10851: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10796: Ignoring call via function pointer ldv_pm_ops_instance_poweroff_late_6_8::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10796: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10840: Ignoring call via function pointer ldv_pm_ops_instance_restore_early_6_7::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10840: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10829: Ignoring call via function pointer ldv_pm_ops_instance_restore_6_4::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10829: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10752: Ignoring call via function pointer ldv_pm_ops_instance_freeze_6_15::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10752: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10774: Ignoring call via function pointer ldv_pm_ops_instance_freeze_noirq_6_12::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10774: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10983: Ignoring call via function pointer ldv_pm_ops_instance_thaw_noirq_6_11::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10983: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10763: Ignoring call via function pointer ldv_pm_ops_instance_freeze_late_6_14::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10763: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10972: Ignoring call via function pointer ldv_pm_ops_instance_thaw_early_6_13::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10972: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10961: Ignoring call via function pointer ldv_pm_ops_instance_thaw_6_10::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10961: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10928: Ignoring call via function pointer ldv_pm_ops_instance_suspend_6_21::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10928: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10939: Ignoring call via function pointer ldv_pm_ops_instance_suspend_late_6_18::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10939: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10873: Ignoring call via function pointer ldv_pm_ops_instance_resume_early_6_17::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10873: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10950: Ignoring call via function pointer ldv_pm_ops_instance_suspend_noirq_6_20::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10950: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10884: Ignoring call via function pointer ldv_pm_ops_instance_resume_noirq_6_19::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10884: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10862: Ignoring call via function pointer ldv_pm_ops_instance_resume_6_16::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10862: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10741: Ignoring call via function pointer ldv_pm_ops_instance_complete_6_3::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10741: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10917: Ignoring call via function pointer ldv_pm_ops_instance_runtime_suspend_6_25::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10917: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10906: Ignoring call via function pointer ldv_pm_ops_instance_runtime_resume_6_24::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10906: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 10895: Ignoring call via function pointer ldv_pm_ops_instance_runtime_idle_6_27::arg0 for which no suitable target was found in line: (*arg0)(arg1); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10895: Ignoring function call through function pointer *arg0: (*arg0)(arg1); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 8979: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function single_open to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9035: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function device_remove_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function mtd_device_unregister to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

lines 5201-5202: Ignoring call via function pointer trace_docg3_io::it_func for which no suitable target was found in line: (*((void (*)(void *, int, int, u16 , int))it_func))(__data, op, width, (int)reg, val); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

lines 5201-5202: Ignoring function call through function pointer *((void (*)(void *, int, int, u16 , int))it_func): (*((void (*)(void *, int, int, u16 , int))it_func))(__data, op, width, (int)reg, val); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function usleep_range to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function seq_lseek to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9366: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9368: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function seq_read to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function single_release to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 9330: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9332: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10082: Ignoring call via function pointer ldv_file_operations_instance_write_0_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10082: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9038: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___1 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9524: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9526: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9488: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9490: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10096: Ignoring call via function pointer ldv_file_operations_instance_write_1_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10096: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9041: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___2 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9682: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9684: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9646: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9648: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10110: Ignoring call via function pointer ldv_file_operations_instance_write_2_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10110: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 9012: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9840: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___7 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9842: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___8 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9804: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___5 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 9806: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___6 = ldv_xmalloc(8UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 10124: Ignoring call via function pointer ldv_file_operations_instance_write_3_4::arg0 for which no suitable target was found in line: (*arg0)(arg1, arg2, arg3, arg4); (FunctionPointerCPA:FunctionPointerTransferRelation.getAbstractSuccessorsForEdge, WARNING)

line 10124: Ignoring function call through function pointer *arg0: (*arg0)(arg1, arg2, arg3, arg4); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Assuming external function trace_define_field to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function trace_event_raw_init to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ftrace_event_reg to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function ftrace_raw_output_prep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function trace_seq_printf to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

line 8995: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11066: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11072: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 8998: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(4UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11012: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

line 11018: Destroying the void* pointer ldv_xmalloc::tmp produces garbage or the memory pointed by it is unused: tmp___0 = ldv_xmalloc(1UL); (PredicateCPA:DynamicMemoryHandler.handleDeferredAllocationInFunctionExit, WARNING)

Assuming external function device_create_file to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Shutdown requested (The CPU-time limit of 900s has elapsed.), waiting for termination. (ForceTerminationOnShutdown$1.shutdownRequested, WARNING)

Warning: Analysis interrupted (The CPU-time limit of 900s has elapsed.) (ShutdownNotifier.shutdownIfNecessary, WARNING)

PredicateCPA statistics
-----------------------
Number of abstractions:            191258 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            167634 (88%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         23624 (12%)
  Times precision was empty:       146252 (76%)
  Times precision was {false}:     2457 (1%)
  Times result was cached:         40613 (21%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      1936 (1%)
  Times result was 'false':        24246 (13%)
Number of strengthen sat checks:   0
Number of coverage checks:         2706637
  BDD entailment checks:           63947
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       1317
Number of predicates discovered:          31
Number of abstraction locations:          47
Max number of predicates per location:    25
Avg number of predicates per location:    7
Total predicates per abstraction:         252551
Max number of predicates per abstraction: 25
Avg number of predicates per abstraction: 57.49
Number of irrelevant predicates:          147532 (58%)
Number of preds handled by boolean abs:   17805 (7%)
  Total number of models for allsat:      1926
  Max number of models for allsat:        3
  Avg number of models for allsat:        0.99

Time for post operator:                 42.990s
  Time for path formula creation:       37.635s
Time for strengthen operator:            9.928s
Time for prec operator:                 96.605s
  Time for abstraction:                 88.666s (Max:     0.138s, Count: 191258)
    Boolean abstraction:                18.418s
    Solving time:                       40.956s (Max:     0.108s)
    Model enumeration time:              1.148s
    Time for BDD construction:           0.072s (Max:     0.001s)
Time for merge operator:                 5.058s
Time for coverage check:                 0.315s
  Time for BDD entailment checks:        0.096s
Total time for SMT solver (w/o itp):    42.104s

Number of path formula cache hits:   20274524 (99%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     6.464s

Total number of created targets for pointer analysis: 21
   Number of created targets for uf: *(void)* is 7
   Number of created targets for uf: *(struct_docg3_cascade)* is 7
   Number of created targets for uf: *(unsigned_char)* is 7


Number of BDD nodes:                               788
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                        5476 (count: 237618, min: 0, max: 135, avg: 0.02)
Time for BDD node cleanup:                             0.041s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                 15.280s
  Time for transition matches:                         7.516s
  Time for transition assertions:                      0.009s
  Time for transition actions:                         0.029s
Automaton transfers with branching:                0
Automaton transfer successors:                     19065190 (count: 19065190, min: 1, max: 1, avg: 1.00) [1 x 19065190]

CPA algorithm statistics
------------------------
Number of iterations:            11834734
Max size of waitlist:            211
Average size of waitlist:        85
Number of computed successors:   13298551
Max successors for one state:    2
Number of times merged:          1321345
Number of times stopped:         1378497
Number of times breaked:         5610

Total time for CPA algorithm:       338.633s (Max:     1.347s)
  Time for choose from waitlist:      1.923s
  Time for precision adjustment:    142.149s
  Time for transfer relation:       148.693s
  Time for merge operator:           12.530s
  Time for stop operator:             7.162s
  Time for adding to reached set:     9.852s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   5610
Avg. length of target path (in blocks):               48972 (count: 5610, min: 1, max: 12, avg: 8.73)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 368.148s
  Counterexample analysis:                           342.584s (Max:     0.223s, Calls: 5610)
    Refinement sat check:                            280.229s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.072s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.126s
  Precision update:                                    0.913s
  ARG update:                                         17.921s

Length of refined path (in blocks):                   45740 (count: 5610, min: 1, max: 12, avg: 8.15)
Number of affected states:                             3936 (count: 5610, min: 0, max: 11, avg: 0.70)
Length (states) of path with itp 'true':              36194 (count: 5610, min: 0, max: 11, avg: 6.45)
Length (states) of path with itp non-trivial itp:      3936 (count: 5610, min: 0, max: 11, avg: 0.70)
Length (states) of path with itp 'false':              3140 (count: 5610, min: 0, max: 1, avg: 0.56)
Different non-trivial interpolants along paths:         126 (count: 5610, min: 0, max: 2, avg: 0.02)
Equal non-trivial interpolants along paths:            2166 (count: 5610, min: 0, max: 10, avg: 0.39)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                5610
Number of successful refinements:     5610
Number of failed refinements:         0
Max. size of reached set before ref.: 54019
Max. size of reached set after ref.:  52767
Avg. size of reached set before ref.: 24192.82
Avg. size of reached set after ref.:  22075.37

Total time for CEGAR algorithm:     895.298s
Time for refinements:               472.827s
Average time for refinement:          0.084s
Max time for refinement:              0.681s

Code Coverage
-----------------------------
  Function coverage:      0.392
  Visited lines:          2541
  Total lines:            5154
  Line coverage:          0.493
  Visited conditions:     358
  Total conditions:       1118
  Condition coverage:     0.320

CPAchecker general statistics
-----------------------------
Number of program locations:     7830
Number of CFA edges:             8823
Number of relevant variables:    1029
Number of functions:             572
Number of loops:                 51
Size of reached set:             16905
  Number of reached locations:   1934 (25%)
    Avg states per location:     8
    Max states per location:     130 (at node N5826)
  Number of reached functions:   224 (39%)
  Number of partitions:          16901
    Avg size of partitions:      1
    Max size of partitions:      3 (with key [N3041 (before line 8687), Function docg3_release called from node N3862, stack depth 6 [c6bf05e], stack [main, ldv_entry_EMGentry_11, ldv_dispatch_register_platform_instance_3_11_10, ldv_platform_platform_instance_4, ldv_platform_instance_release_4_3, docg3_release]])
  Number of target states:       0
  Size of final wait list        25

Time for analysis setup:          5.013s
  Time for loading CPAs:          0.837s
  Time for loading parser:        0.496s
  Time for CFA construction:      3.546s
    Time for parsing file(s):     0.737s
    Time for AST to CFA:          1.418s
    Time for CFA sanity check:    0.393s
    Time for post-processing:     0.856s
      Time for var class.:        0.436s
Time for Analysis:              895.298s
CPU time for analysis:          895.130s
Total time for CPAchecker:      900.315s
Total CPU time for CPAchecker:  900.130s
Time for statistics:              0.289s

Time for Garbage Collector:      46.684s (in 2641 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                288MB (   274 MiB) max;    166MB (   158 MiB) avg;    293MB (   280 MiB) peak
Used non-heap memory:             40MB (    39 MiB) max;     40MB (    38 MiB) avg;     41MB (    39 MiB) peak
Allocated heap memory:           294MB (   280 MiB) max;    244MB (   232 MiB) avg
Allocated non-heap memory:        42MB (    40 MiB) max;     42MB (    40 MiB) avg
Total process virtual memory:   8469MB (  8077 MiB) max;   8295MB (  7911 MiB) avg

Verification result: UNKNOWN, incomplete analysis.
More details about the verification run can be found in the directory "./output".
