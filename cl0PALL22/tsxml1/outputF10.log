scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABEl -heap 5600000000 -timelimit 900 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/seq-pthread/cs_stack_true-unreach-call.i


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_27t3jjev/tmp
Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_162) started (CPAchecker.run, INFO)

line 1017: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1017: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1019: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1020: Dead code detected: goto __CS_ERROR; (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1021: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1022: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1023: Dead code detected: return; (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1041: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1058: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1070: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1081: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1089: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1091: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1092: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: __CS_cs(); (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: [!(__CS_ret != 0)] (CFACreationUtils.addEdgeToCFA, INFO)

line 1093: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

line 1212: Ignoring function call through function pointer *(__CS_thread[1]): (*(__CS_thread[1]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

line 1218: Ignoring function call through function pointer *(__CS_thread[2]): (*(__CS_thread[2]))(0); (PredicateCPA:ExpressionToFormulaVisitor.visit, WARNING)

Warning: Could not replay error path to get a more precise model (build_model: too many iterations) (PredicateCPA:Mathsat5NativeApi.processSolveResult, WARNING)

The satisfying assignment may be imprecise! (PredicateCPA:PathChecker.createCounterexample, WARNING)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            220 (1% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            202 (92%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         18 (8%)
  Times precision was empty:       23 (10%)
  Times precision was {false}:     71 (32%)
  Times result was cached:         6 (3%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      120 (55%)
  Times result was 'false':        59 (27%)
Number of strengthen sat checks:   0
Number of coverage checks:         4132
  BDD entailment checks:           224
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       397
Number of predicates discovered:          9
Number of abstraction locations:          6
Max number of predicates per location:    7
Avg number of predicates per location:    3
Total predicates per abstraction:         529
Max number of predicates per abstraction: 7
Avg number of predicates per abstraction: 2.77
Number of irrelevant predicates:          174 (33%)
Number of preds handled by boolean abs:   353 (67%)
  Total number of models for allsat:      266
  Max number of models for allsat:        12
  Avg number of models for allsat:        2.22

Time for post operator:                  1.867s
  Time for path formula creation:        1.807s
Time for strengthen operator:            0.045s
Time for prec operator:                 39.465s
  Time for abstraction:                 39.427s (Max:     3.026s, Count: 220)
    Boolean abstraction:                 0.540s
    Solving time:                       37.773s (Max:     2.990s)
    Model enumeration time:              0.177s
    Time for BDD construction:           0.039s (Max:     0.008s)
Time for merge operator:                 0.372s
Time for coverage check:                 0.010s
  Time for BDD entailment checks:        0.010s
Total time for SMT solver (w/o itp):    37.950s

Number of path formula cache hits:   5774 (32%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     1.786s

Total number of created targets for pointer analysis: 18992
   Number of created targets for uf: *signed_int is 5
   Number of created targets for uf: *unsigned_char is 2053
   Number of created targets for uf: *(unsigned_char)* is 169
   Number of created targets for uf: *_Bool is 37
   Number of created targets for uf: *unsigned_int is 241
   Number of created targets for uf: *(Return_type:_[(void)*],_Parameters:_1,_Parameter_1_type:_[(void)*],_VarArgs:_false)* is 25


Number of BDD nodes:                               461
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         379 (count: 1425, min: 0, max: 86, avg: 0.27)
Time for BDD node cleanup:                             0.006s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.131s
Automaton transfers with branching:                0
Automaton transfer successors:                        16751 (count: 16751, min: 1, max: 1, avg: 1.00) [1 x 16751]

CPA algorithm statistics
------------------------
Number of iterations:            10335
Max size of waitlist:            22
Average size of waitlist:        8
Number of computed successors:   12627
Max successors for one state:    2
Number of times merged:          1954
Number of times stopped:         1973
Number of times breaked:         13

Total time for CPA algorithm:        42.947s (Max:     5.468s)
  Time for choose from waitlist:      0.031s
  Time for precision adjustment:     39.664s
  Time for transfer relation:         2.518s
  Time for merge operator:            0.480s
  Time for stop operator:             0.039s
  Time for adding to reached set:     0.062s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   13
Avg. length of target path (in blocks):                 113 (count: 13, min: 2, max: 24, avg: 8.69)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 635.067s
  Counterexample analysis:                           633.948s (Max:   632.957s, Calls: 13)
    Refinement sat check:                            630.650s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          1.062s
  Predicate creation:                                  0.006s
  Precision update:                                    0.002s
  ARG update:                                          0.036s

Length of refined path (in blocks):                      73 (count: 12, min: 2, max: 13, avg: 6.08)
Number of affected states:                               36 (count: 12, min: 1, max: 12, avg: 3.00)
Length (states) of path with itp 'true':                 25 (count: 12, min: 0, max: 5, avg: 2.08)
Length (states) of path with itp non-trivial itp:        36 (count: 12, min: 1, max: 12, avg: 3.00)
Length (states) of path with itp 'false':                10 (count: 12, min: 0, max: 1, avg: 0.83)
Different non-trivial interpolants along paths:          15 (count: 12, min: 0, max: 4, avg: 1.25)
Equal non-trivial interpolants along paths:               9 (count: 12, min: 0, max: 9, avg: 0.75)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                13
Number of successful refinements:     12
Number of failed refinements:         0
Max. size of reached set before ref.: 1835
Max. size of reached set after ref.:  600
Avg. size of reached set before ref.: 1179.46
Avg. size of reached set after ref.:  394.75

Total time for CEGAR algorithm:     678.086s
Time for refinements:               635.137s
Average time for refinement:         48.856s
Max time for refinement:            634.030s

Code Coverage
-----------------------------
  Function coverage:      0.360
  Visited lines:          300
  Total lines:            400
  Line coverage:          0.750
  Visited conditions:     97
  Total conditions:       212
  Condition coverage:     0.458

CPAchecker general statistics
-----------------------------
Number of program locations:     940
Number of CFA edges:             1075
Number of relevant variables:    63
Number of functions:             25
Number of loops:                 7
Size of reached set:             1835
  Number of reached locations:   175 (19%)
    Avg states per location:     10
    Max states per location:     66 (at node N8)
  Number of reached functions:   9 (36%)
  Number of partitions:          1815
    Avg size of partitions:      1
    Max size of partitions:      12 (with key [N506 (before line 1179), Function main called from node N482, stack depth 1 [4748a0f9], stack [main]])
  Number of target states:       1
  Size of final wait list        21

Time for analysis setup:          2.296s
  Time for loading CPAs:          0.470s
  Time for loading parser:        0.473s
  Time for CFA construction:      1.289s
    Time for parsing file(s):     0.389s
    Time for AST to CFA:          0.390s
    Time for CFA sanity check:    0.093s
    Time for post-processing:     0.312s
      Time for var class.:        0.120s
Time for Analysis:              678.086s
CPU time for analysis:          678.080s
Time for analyzing result:        0.001s
Total time for CPAchecker:      680.386s
Total CPU time for CPAchecker:  680.370s
Time for statistics:              0.082s

Time for Garbage Collector:       0.187s (in 19 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 64MB (    61 MiB) max;     40MB (    38 MiB) avg;     66MB (    63 MiB) peak
Used non-heap memory:             37MB (    35 MiB) max;     36MB (    34 MiB) avg;     37MB (    36 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        39MB (    37 MiB) max;     39MB (    37 MiB) avg
Total process virtual memory:   8134MB (  7757 MiB) max;   8132MB (  7755 MiB) avg

Verification result: FALSE. Property violation (__VERIFIER_error(); called in line 864) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
