scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers-simplified/kbfiltr_simpl2_true-unreach-call_true-valid-memsafety_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_hxcwj5wp/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            3115 (8% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  3025 (97%)
  Because of loop head:            0 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         90 (3%)
  Times precision was empty:       1193 (38%)
  Times precision was {false}:     138 (4%)
  Times result was cached:         1613 (52%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      171 (5%)
  Times result was 'false':        668 (21%)
Number of strengthen sat checks:   0
Number of coverage checks:         6894
  BDD entailment checks:           186
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          13
Number of abstraction locations:          35
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         3304
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 10.69
Number of irrelevant predicates:          1314 (40%)
Number of preds handled by boolean abs:   368 (11%)
  Total number of models for allsat:      212
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.24

Time for post operator:                  0.451s
  Time for path formula creation:        0.416s
Time for strengthen operator:            0.094s
Time for prec operator:                  1.333s
  Time for abstraction:                  1.190s (Max:     0.014s, Count: 3115)
    Boolean abstraction:                 0.218s
    Solving time:                        0.202s (Max:     0.010s)
    Model enumeration time:              0.013s
    Time for BDD construction:           0.049s (Max:     0.008s)
Time for merge operator:                 0.037s
Time for coverage check:                 0.011s
  Time for BDD entailment checks:        0.010s
Total time for SMT solver (w/o itp):     0.215s

Number of path formula cache hits:   44215 (95%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.381s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               323
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         467 (count: 3338, min: 0, max: 126, avg: 0.14)
Time for BDD node cleanup:                             0.004s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.198s
Automaton transfers with branching:                0
Automaton transfer successors:                        41119 (count: 41119, min: 1, max: 1, avg: 1.00) [1 x 41119]

CPA algorithm statistics
------------------------
Number of iterations:            23684
Max size of waitlist:            38
Average size of waitlist:        13
Number of computed successors:   28364
Max successors for one state:    2
Number of times merged:          3354
Number of times stopped:         3522
Number of times breaked:         90

Total time for CPA algorithm:         3.729s (Max:     0.630s)
  Time for choose from waitlist:      0.059s
  Time for precision adjustment:      1.625s
  Time for transfer relation:         1.429s
  Time for merge operator:            0.178s
  Time for stop operator:             0.102s
  Time for adding to reached set:     0.082s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   90
Avg. length of target path (in blocks):                 887 (count: 90, min: 4, max: 20, avg: 9.86)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.802s
  Counterexample analysis:                             0.549s (Max:     0.017s, Calls: 90)
    Refinement sat check:                              0.350s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.010s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.058s
  Precision update:                                    0.063s
  ARG update:                                          0.082s

Length of refined path (in blocks):                     777 (count: 90, min: 3, max: 19, avg: 8.63)
Number of affected states:                              254 (count: 90, min: 1, max: 15, avg: 2.82)
Length (states) of path with itp 'true':                433 (count: 90, min: 1, max: 11, avg: 4.81)
Length (states) of path with itp non-trivial itp:       254 (count: 90, min: 1, max: 15, avg: 2.82)
Length (states) of path with itp 'false':                90 (count: 90, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          12 (count: 90, min: 0, max: 5, avg: 0.13)
Equal non-trivial interpolants along paths:             152 (count: 90, min: 0, max: 14, avg: 1.69)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                90
Number of successful refinements:     90
Number of failed refinements:         0
Max. size of reached set before ref.: 866
Max. size of reached set after ref.:  719
Avg. size of reached set before ref.: 666.19
Avg. size of reached set after ref.:  406.70

Total time for CEGAR algorithm:       4.706s
Time for refinements:                 0.916s
Average time for refinement:          0.010s
Max time for refinement:              0.055s

Code Coverage
-----------------------------
  Function coverage:      0.938
  Visited lines:          475
  Total lines:            494
  Line coverage:          0.962
  Visited conditions:     132
  Total conditions:       134
  Condition coverage:     0.985

CPAchecker general statistics
-----------------------------
Number of program locations:     673
Number of CFA edges:             760
Number of relevant variables:    66
Number of functions:             16
Number of loops:                 0
Size of reached set:             821
  Number of reached locations:   336 (50%)
    Avg states per location:     2
    Max states per location:     9 (at node N404)
  Number of reached functions:   15 (94%)
  Number of partitions:          821
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.283s
  Time for loading CPAs:          0.666s
  Time for loading parser:        0.522s
  Time for CFA construction:      1.006s
    Time for parsing file(s):     0.326s
    Time for AST to CFA:          0.270s
    Time for CFA sanity check:    0.078s
    Time for post-processing:     0.222s
      Time for var class.:        0.137s
Time for Analysis:                4.706s
CPU time for analysis:            4.710s
Time for analyzing result:        0.000s
Total time for CPAchecker:        6.992s
Total CPU time for CPAchecker:    6.990s
Time for statistics:              0.078s

Time for Garbage Collector:       0.130s (in 14 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     35MB (    33 MiB) avg;     61MB (    58 MiB) peak
Used non-heap memory:             35MB (    33 MiB) max;     29MB (    28 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        37MB (    35 MiB) max;     31MB (    30 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8054MB (  7681 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
