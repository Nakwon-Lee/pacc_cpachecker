scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers-simplified/kbfiltr_simpl2_true-unreach-call_true-valid-memsafety_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run_iqpaqzim/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1742 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1711 (98%)
  Because of loop head:            0 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         31 (2%)
  Times precision was empty:       361 (21%)
  Times precision was {false}:     105 (6%)
  Times result was cached:         1138 (65%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      138 (8%)
  Times result was 'false':        640 (37%)
Number of strengthen sat checks:   0
Number of coverage checks:         3843
  BDD entailment checks:           81
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          12
Number of abstraction locations:          35
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         2776
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 11.42
Number of irrelevant predicates:          847 (31%)
Number of preds handled by boolean abs:   301 (11%)
  Total number of models for allsat:      162
  Max number of models for allsat:        4
  Avg number of models for allsat:        1.17

Time for post operator:                  0.394s
  Time for path formula creation:        0.352s
Time for strengthen operator:            0.038s
Time for prec operator:                  1.165s
  Time for abstraction:                  1.089s (Max:     0.016s, Count: 1742)
    Boolean abstraction:                 0.207s
    Solving time:                        0.140s (Max:     0.010s)
    Model enumeration time:              0.020s
    Time for BDD construction:           0.036s (Max:     0.006s)
Time for merge operator:                 0.032s
Time for coverage check:                 0.000s
  Time for BDD entailment checks:        0.000s
Total time for SMT solver (w/o itp):     0.160s

Number of path formula cache hits:   24921 (93%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.303s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               304
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         492 (count: 2039, min: 0, max: 205, avg: 0.24)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.153s
Automaton transfers with branching:                0
Automaton transfer successors:                        24069 (count: 24069, min: 1, max: 1, avg: 1.00) [1 x 24069]

CPA algorithm statistics
------------------------
Number of iterations:            13676
Max size of waitlist:            14
Average size of waitlist:        7
Number of computed successors:   16399
Max successors for one state:    2
Number of times merged:          1881
Number of times stopped:         1950
Number of times breaked:         31

Total time for CPA algorithm:         2.828s (Max:     0.174s)
  Time for choose from waitlist:      0.041s
  Time for precision adjustment:      1.378s
  Time for transfer relation:         1.031s
  Time for merge operator:            0.086s
  Time for stop operator:             0.051s
  Time for adding to reached set:     0.055s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   31
Avg. length of target path (in blocks):                 361 (count: 31, min: 4, max: 20, avg: 11.65)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.453s
  Counterexample analysis:                             0.300s (Max:     0.017s, Calls: 31)
    Refinement sat check:                              0.164s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.042s
  Precision update:                                    0.027s
  ARG update:                                          0.063s

Length of refined path (in blocks):                     314 (count: 31, min: 3, max: 19, avg: 10.13)
Number of affected states:                              162 (count: 31, min: 1, max: 15, avg: 5.23)
Length (states) of path with itp 'true':                121 (count: 31, min: 1, max: 11, avg: 3.90)
Length (states) of path with itp non-trivial itp:       162 (count: 31, min: 1, max: 15, avg: 5.23)
Length (states) of path with itp 'false':                31 (count: 31, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          10 (count: 31, min: 0, max: 5, avg: 0.32)
Equal non-trivial interpolants along paths:             121 (count: 31, min: 0, max: 14, avg: 3.90)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                31
Number of successful refinements:     31
Number of failed refinements:         0
Max. size of reached set before ref.: 859
Max. size of reached set after ref.:  557
Avg. size of reached set before ref.: 532.77
Avg. size of reached set after ref.:  113.77

Total time for CEGAR algorithm:       3.362s
Time for refinements:                 0.530s
Average time for refinement:          0.017s
Max time for refinement:              0.041s

Code Coverage
-----------------------------
  Function coverage:      0.938
  Visited lines:          475
  Total lines:            494
  Line coverage:          0.962
  Visited conditions:     132
  Total conditions:       134
  Condition coverage:     0.985

CPAchecker general statistics
-----------------------------
Number of program locations:     673
Number of CFA edges:             760
Number of relevant variables:    66
Number of functions:             16
Number of loops:                 0
Size of reached set:             821
  Number of reached locations:   336 (50%)
    Avg states per location:     2
    Max states per location:     9 (at node N404)
  Number of reached functions:   15 (94%)
  Number of partitions:          821
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.268s
  Time for loading CPAs:          0.627s
  Time for loading parser:        0.484s
  Time for CFA construction:      1.067s
    Time for parsing file(s):     0.364s
    Time for AST to CFA:          0.262s
    Time for CFA sanity check:    0.078s
    Time for post-processing:     0.232s
      Time for var class.:        0.140s
Time for Analysis:                3.363s
CPU time for analysis:            3.360s
Time for analyzing result:        0.001s
Total time for CPAchecker:        5.634s
Total CPU time for CPAchecker:    5.620s
Time for statistics:              0.074s

Time for Garbage Collector:       0.105s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     33MB (    32 MiB) avg;     61MB (    58 MiB) peak
Used non-heap memory:             34MB (    33 MiB) max;     28MB (    26 MiB) avg;     36MB (    34 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    35 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8085MB (  7711 MiB) max;   8046MB (  7674 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
