scripts/cpa.sh -Dy-MySearchStrategy-PredAbs-ABElf -heap 5600000000 -timelimit 30 -preprocess -stats -noout -setprop cpa.predicate.memoryAllocationsAlwaysSucceed=true -spec ../sv-benchmarks/c/ReachSafety.prp ../sv-benchmarks/c/ntdrivers-simplified/kbfiltr_simpl2_true-unreach-call_true-valid-memsafety_true-termination.cil.c


--------------------------------------------------------------------------------


Running CPAchecker with Java heap of size 5600000000.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Running CPAchecker with the following extra VM options:  -Djava.io.tmpdir=/tmp/BenchExec_run__2j2ovp7/tmp
Using the following resource limits: CPU-time limit of 30s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker (unknown version) (OpenJDK 64-Bit Server VM 1.8.0_151) started (CPAchecker.run, INFO)

MathSAT5 is available for research and evaluation purposes only. It can not be used in a commercial environment, particularly as part of a commercial product, without written permission. MathSAT5 is provided as is, without any warranty. Please write to mathsat@fbk.eu for additional questions regarding licensing MathSAT5 or obtaining more up-to-date versions. (PredicateCPA:JavaSMT:Mathsat5SolverContext.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.3.14 (0b98b661254c) (Nov 17 2016 10:59:45, gmp 5.1.3, gcc 4.8.5, 64-bit) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

PredicateCPA statistics
-----------------------
Number of abstractions:            1482 (7% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  1456 (98%)
  Because of loop head:            0 (0%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         26 (2%)
  Times precision was empty:       119 (8%)
  Times precision was {false}:     109 (7%)
  Times result was cached:         1102 (74%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      152 (10%)
  Times result was 'false':        527 (36%)
Number of strengthen sat checks:   0
Number of coverage checks:         3977
  BDD entailment checks:           55
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       36
Number of predicates discovered:          13
Number of abstraction locations:          35
Max number of predicates per location:    6
Avg number of predicates per location:    2
Total predicates per abstraction:         3296
Max number of predicates per abstraction: 6
Avg number of predicates per abstraction: 12.63
Number of irrelevant predicates:          857 (26%)
Number of preds handled by boolean abs:   374 (11%)
  Total number of models for allsat:      187
  Max number of models for allsat:        8
  Avg number of models for allsat:        1.23

Time for post operator:                  0.432s
  Time for path formula creation:        0.397s
Time for strengthen operator:            0.033s
Time for prec operator:                  1.159s
  Time for abstraction:                  1.089s (Max:     0.018s, Count: 1482)
    Boolean abstraction:                 0.247s
    Solving time:                        0.210s (Max:     0.013s)
    Model enumeration time:              0.022s
    Time for BDD construction:           0.027s (Max:     0.010s)
Time for merge operator:                 0.034s
Time for coverage check:                 0.004s
  Time for BDD entailment checks:        0.004s
Total time for SMT solver (w/o itp):     0.232s

Number of path formula cache hits:   21094 (91%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.348s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               403
Size of BDD node table:                            270749
Size of BDD cache:                                 27073
Size of BDD node cleanup queue:                         605 (count: 1873, min: 0, max: 313, avg: 0.32)
Time for BDD node cleanup:                             0.001s
Time for BDD garbage collection:                       0.000s (in 0 runs)

PrecisionBootstrap statistics
-----------------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (SVCOMP) statistics
-------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.120s
Automaton transfers with branching:                0
Automaton transfer successors:                        20611 (count: 20611, min: 1, max: 1, avg: 1.00) [1 x 20611]

CPA algorithm statistics
------------------------
Number of iterations:            12494
Max size of waitlist:            19
Average size of waitlist:        6
Number of computed successors:   15149
Max successors for one state:    2
Number of times merged:          1961
Number of times stopped:         2005
Number of times breaked:         26

Total time for CPA algorithm:         2.875s (Max:     0.188s)
  Time for choose from waitlist:      0.036s
  Time for precision adjustment:      1.348s
  Time for transfer relation:         1.110s
  Time for merge operator:            0.143s
  Time for stop operator:             0.059s
  Time for adding to reached set:     0.055s

Predicate-Abstraction Refiner statistics
----------------------------------------
Number of predicate refinements:                   26
Avg. length of target path (in blocks):                 308 (count: 26, min: 4, max: 20, avg: 11.85)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                   0.353s
  Counterexample analysis:                             0.230s (Max:     0.021s, Calls: 26)
    Refinement sat check:                              0.118s
    Interpolant computation:                           0.000s
  Path-formulas extraction:                            0.001s
  Error path post-processing:                          0.000s
  Predicate creation:                                  0.022s
  Precision update:                                    0.034s
  ARG update:                                          0.052s

Length of refined path (in blocks):                     258 (count: 26, min: 3, max: 19, avg: 9.92)
Number of affected states:                              159 (count: 26, min: 1, max: 15, avg: 6.12)
Length (states) of path with itp 'true':                 73 (count: 26, min: 1, max: 6, avg: 2.81)
Length (states) of path with itp non-trivial itp:       159 (count: 26, min: 1, max: 15, avg: 6.12)
Length (states) of path with itp 'false':                26 (count: 26, min: 1, max: 1, avg: 1.00)
Different non-trivial interpolants along paths:          13 (count: 26, min: 0, max: 5, avg: 0.50)
Equal non-trivial interpolants along paths:             120 (count: 26, min: 0, max: 14, avg: 4.62)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of refinements:                26
Number of successful refinements:     26
Number of failed refinements:         0
Max. size of reached set before ref.: 904
Max. size of reached set after ref.:  633
Avg. size of reached set before ref.: 516.73
Avg. size of reached set after ref.:  63.00

Total time for CEGAR algorithm:       3.297s
Time for refinements:                 0.411s
Average time for refinement:          0.015s
Max time for refinement:              0.038s

Code Coverage
-----------------------------
  Function coverage:      0.938
  Visited lines:          475
  Total lines:            494
  Line coverage:          0.962
  Visited conditions:     132
  Total conditions:       134
  Condition coverage:     0.985

CPAchecker general statistics
-----------------------------
Number of program locations:     673
Number of CFA edges:             760
Number of relevant variables:    66
Number of functions:             16
Number of loops:                 0
Size of reached set:             821
  Number of reached locations:   336 (50%)
    Avg states per location:     2
    Max states per location:     9 (at node N404)
  Number of reached functions:   15 (94%)
  Number of partitions:          821
    Avg size of partitions:      1
    Max size of partitions:      1
  Number of target states:       0

Time for analysis setup:          2.221s
  Time for loading CPAs:          0.611s
  Time for loading parser:        0.529s
  Time for CFA construction:      0.986s
    Time for parsing file(s):     0.359s
    Time for AST to CFA:          0.238s
    Time for CFA sanity check:    0.082s
    Time for post-processing:     0.189s
      Time for var class.:        0.108s
Time for Analysis:                3.297s
CPU time for analysis:            3.300s
Time for analyzing result:        0.001s
Total time for CPAchecker:        5.522s
Total CPU time for CPAchecker:    5.510s
Time for statistics:              0.080s

Time for Garbage Collector:       0.094s (in 10 runs)
Garbage Collector(s) used:    Copy, MarkSweepCompact
Used heap memory:                 58MB (    55 MiB) max;     34MB (    32 MiB) avg;     61MB (    58 MiB) peak
Used non-heap memory:             34MB (    32 MiB) max;     27MB (    26 MiB) avg;     35MB (    33 MiB) peak
Allocated heap memory:           127MB (   121 MiB) max;    127MB (   121 MiB) avg
Allocated non-heap memory:        36MB (    34 MiB) max;     29MB (    28 MiB) avg
Total process virtual memory:   8018MB (  7647 MiB) max;   7986MB (  7616 MiB) avg

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
